use MONKEY-SEE-NO-EVAL;
#use Grammar::Debugger;


grammar JavaScript {
  token Number { \d+ }
  token String { '"' <-[ " ]>+ '"' }
  token Variable { \w+ }

  token Term { [ <Number> | <String> | <Variable> ] }

  rule Assignment-Expression { var <Variable> '=' <Term>};
  rule Function-Call { console '.' log '(' <String> '+' <Term> '+' <String> ')'};

  rule Statement { [ <Assignment-Expression> | <Function-Call> ] ';'}

  rule TOP { <Statement>+ }
}


class GenP6fromJS {
  method Assignment-Expression( $/ ) {
    make 'my ' ~ $<Variable>.ast ~ ' = ' ~ $<Term>.ast
  }

  method Function-Call( $/ ) {
    make 'say ' ~ $<String>[0] ~ ' ~ ' ~ $<Term>.ast ~ ' ~ ' ~ $<String>[1]
  }

  method Variable( $/ ) {
    make '$' ~ $/
  }

  method Term( $/ ) {
    make $<Number> || $<String> || $<Variable>.ast
  }

  method Statement( $/ ) {
    my $statement = $<Assignment-Expression> || $<Function-Call>;
    make $statement.ast ~ ";\n"
  }

  method TOP( $/ ) {
    for $<Statement> -> $statement { make ($/.ast // "") ~ $statement.ast }
  }
}


my $input-js = 'var a = 3;var b=a;console.log("So a = "+b+"?");';

my $g = JavaScript.new;
my $a = GenP6fromJS.new;

my $parse = $g.parse( $input-js, :actions($a) );

#say "\n=== The parse generated by the grammar:";
#say $parse;

say "\n=== The AST generated by the actions:";
say $parse.ast;

say "=== EVALuating the AST:";
EVAL $parse.ast;
