{
  "classes": {
    "housingfacilityshortcuts": {
      "namespace": "",
      "methods": {
        "makebuildinginactive()": {
          "name": "Make_building__inactive",
          "key": "makebuildinginactive()",
          "definition": "Make_building__inactive(string buildingName)"
        },
        "addfloornamedto()": {
          "name": "Add_floor_named__to__",
          "key": "addfloornamedto()",
          "definition": "Add_floor_named__to__(string floorName, string buildingName)"
        },
        "changenumberofbedsinto()": {
          "name": "Change_number_of_beds_in__to__",
          "key": "changenumberofbedsinto()",
          "definition": "Change_number_of_beds_in__to__(string roomName, int num)"
        },
        "futureroomsgetusagelevelbydefault()": {
          "name": "Future_rooms_get_usage_level__by_default",
          "key": "futureroomsgetusagelevelbydefault()",
          "definition": "Future_rooms_get_usage_level__by_default(string usageLevel)"
        },
        "addroomnamedtowithbathroomandgenderrestriction()": {
          "name": "Add_room_named__to____with_bathroom__and_gender_restriction__",
          "key": "addroomnamedtowithbathroomandgenderrestriction()",
          "definition": "Add_room_named__to____with_bathroom__and_gender_restriction__(string roomName, string buildingName, string floorName, string bathroomName, string genderRestrictionDescription)"
        },
        "addroomnamedtowithprivatebathroom()": {
          "name": "Add_room_named__to____with_private_bathroom",
          "key": "addroomnamedtowithprivatebathroom()",
          "definition": "Add_room_named__to____with_private_bathroom(string roomName, string buildingName, string floorName)"
        },
        "createoffcenterbuildingnamedwhichisinactive()": {
          "name": "Create_off_center_building_named__which_is_inactive",
          "key": "createoffcenterbuildingnamedwhichisinactive()",
          "definition": "Create_off_center_building_named__which_is_inactive(string buildingName)"
        },
        "deleteoffcenterbuilding()": {
          "name": "Delete_off_center_building__",
          "key": "deleteoffcenterbuilding()",
          "definition": "Delete_off_center_building__(string buildingName)"
        },
        "addroomnamedtowithbeds()": {
          "name": "Add_room_named__to____with__beds",
          "key": "addroomnamedtowithbeds()",
          "definition": "Add_room_named__to____with__beds(string roomName, string buildingName, string floorName, int numBeds)"
        },
        "createoffcenterbuildingnamedwithamaxoccupancyof()": {
          "name": "Create_off_center_building_named__with_a_max_occupancy_of__",
          "key": "createoffcenterbuildingnamedwithamaxoccupancyof()",
          "definition": "Create_off_center_building_named__with_a_max_occupancy_of__(string buildingName, int maxOccupancy)"
        },
        "createbuildingnamedwithgenderrestriction()": {
          "name": "Create_building_named__with_gender_restriction__",
          "key": "createbuildingnamedwithgenderrestriction()",
          "definition": "Create_building_named__with_gender_restriction__(string buildingName, string genderRestrictionDesc)"
        },
        "deletealloffcenterlodgingandtheirusages()": {
          "name": "Delete_all_off_center_lodging_and_their_usages",
          "key": "deletealloffcenterlodgingandtheirusages()",
          "definition": "Delete_all_off_center_lodging_and_their_usages()"
        },
        "makebathroominactive()": {
          "name": "Make_bathroom__inactive",
          "key": "makebathroominactive()",
          "definition": "Make_bathroom__inactive(string bathroomName)"
        },
        "addadaroomnamedtowithbathroomandgenderrestriction()": {
          "name": "Add_ADA_room_named__to____with_bathroom__and_gender_restriction__",
          "key": "addadaroomnamedtowithbathroomandgenderrestriction()",
          "definition": "Add_ADA_room_named__to____with_bathroom__and_gender_restriction__(string roomName, string buildingName, string floorName, string bathroomName, string genderRestrictionDescription)"
        },
        "addroomnamedtowithprivatebathroomandgenderrestriction()": {
          "name": "Add_room_named__to____with_private_bathroom_and_gender_restriction__",
          "key": "addroomnamedtowithprivatebathroomandgenderrestriction()",
          "definition": "Add_room_named__to____with_private_bathroom_and_gender_restriction__(string roomName, string buildingName, string floorName, string genderRestrictionDescription)"
        },
        "addbathroomnamedto()": {
          "name": "Add_bathroom_named__to____",
          "key": "addbathroomnamedto()",
          "definition": "Add_bathroom_named__to____(string bathroomName, string buildingName, string floorName)"
        },
        "addroomnamedto()": {
          "name": "Add_room_named__to____",
          "key": "addroomnamedto()",
          "definition": "Add_room_named__to____(string roomName, string buildingName, string floorName)"
        },
        "futureroomsgetnousagelevelbydefault()": {
          "name": "Future_rooms_get_no_usage_level_by_default",
          "key": "futureroomsgetnousagelevelbydefault()",
          "definition": "Future_rooms_get_no_usage_level_by_default()"
        },
        "createbuildingnamed()": {
          "name": "Create_building_named__",
          "key": "createbuildingnamed()",
          "definition": "Create_building_named__(string buildingName)"
        },
        "assignroomtobathroom()": {
          "name": "Assign_room__to_bathroom__",
          "key": "assignroomtobathroom()",
          "definition": "Assign_room__to_bathroom__(string roomName, string bathName)"
        },
        "addroomnamedtowithbathroom()": {
          "name": "Add_room_named__to____with_bathroom__",
          "key": "addroomnamedtowithbathroom()",
          "definition": "Add_room_named__to____with_bathroom__(string roomName, string buildingName, string floorName, string bathroomName)"
        },
        "addadaroomnamedtowithbathroom()": {
          "name": "Add_ADA_room_named__to____with_bathroom__",
          "key": "addadaroomnamedtowithbathroom()",
          "definition": "Add_ADA_room_named__to____with_bathroom__(string roomName, string buildingName, string floorName, string bathroomName)"
        },
        "editbuildingnamedchangingnameto()": {
          "name": "Edit_building_named__changing_name_to__",
          "key": "editbuildingnamedchangingnameto()",
          "definition": "Edit_building_named__changing_name_to__(string oldName, string newName)"
        },
        "addbathroomnamedtowithgenderrestriction()": {
          "name": "Add_bathroom_named__to____with_gender_restriction__",
          "key": "addbathroomnamedtowithgenderrestriction()",
          "definition": "Add_bathroom_named__to____with_gender_restriction__(string bathroomName, string buildingName, string floorName, string genderRestrictionDescription)"
        },
        "createoffcenterbuildingnamed()": {
          "name": "Create_off_center_building_named__",
          "key": "createoffcenterbuildingnamed()",
          "definition": "Create_off_center_building_named__(string buildingName)"
        },
        "makefloorinactive()": {
          "name": "Make_floor__inactive",
          "key": "makefloorinactive()",
          "definition": "Make_floor__inactive(string floorName)"
        },
        "inactivateallexistingrooms()": {
          "name": "Inactivate_all_existing_rooms",
          "key": "inactivateallexistingrooms()",
          "definition": "Inactivate_all_existing_rooms()"
        },
        "addroomnamedtowithprivatebathroomandgenderrestrictionandbeds()": {
          "name": "Add_room_named__to____with_private_bathroom_and_gender_restriction__and__beds",
          "key": "addroomnamedtowithprivatebathroomandgenderrestrictionandbeds()",
          "definition": "Add_room_named__to____with_private_bathroom_and_gender_restriction__and__beds(string roomName, string buildingName, string floorName, string genderRestrictionDescription, int numBeds)"
        },
        "makeroominactive()": {
          "name": "Make_room__inactive",
          "key": "makeroominactive()",
          "definition": "Make_room__inactive(string roomName)"
        }
      },
      "key": "housingfacilityshortcuts",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "HousingFacilityShortcuts",
      "instance-name": "HousingFacilityShortcuts"
    },
    "lookupmanagement": {
      "namespace": "",
      "methods": {
        
      },
      "key": "lookupmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "LookupManagement",
      "instance-name": "LookupManagement"
    },
    "certificationsearchapi": {
      "namespace": "",
      "methods": {
        "verifycertificationstatusis()": {
          "name": "Verify_certification_status_is__",
          "key": "verifycertificationstatusis()",
          "definition": "Verify_certification_status_is__(string statusName)"
        },
        "verifyexpirationdateisblank()": {
          "name": "Verify_expiration_date_is_blank",
          "key": "verifyexpirationdateisblank()",
          "definition": "Verify_expiration_date_is_blank()"
        },
        "verifycertificationstatusanactivestatus()": {
          "name": "Verify_certification_status__an_active_status",
          "key": "verifycertificationstatusanactivestatus()",
          "definition": "Verify_certification_status__an_active_status(string isOrNot)"
        },
        "verifyothernumberidis()": {
          "name": "Verify_other_number_id_is__",
          "key": "verifyothernumberidis()",
          "definition": "Verify_other_number_id_is__(string otherNumberID)"
        },
        "verifycertificationnameis()": {
          "name": "Verify_certification_name_is__",
          "key": "verifycertificationnameis()",
          "definition": "Verify_certification_name_is__(string certificationName)"
        },
        "verifybillableaccountidbelongsto()": {
          "name": "Verify_billable_account_id_belongs_to__",
          "key": "verifybillableaccountidbelongsto()",
          "definition": "Verify_billable_account_id_belongs_to__(string personName)"
        },
        "considerresult()": {
          "name": "Consider_result__",
          "key": "considerresult()",
          "definition": "Consider_result__(int resultPosition)"
        },
        "verifytherearepagesofresults()": {
          "name": "Verify_there_are__pages_of_results",
          "key": "verifytherearepagesofresults()",
          "definition": "Verify_there_are__pages_of_results(int pages)"
        },
        "verifyexpirationdateis()": {
          "name": "Verify_expiration_date_is__",
          "key": "verifyexpirationdateis()",
          "definition": "Verify_expiration_date_is__(DateTime expirationDate)"
        },
        "verifythereareresultstotal()": {
          "name": "Verify_there_are__results_total",
          "key": "verifythereareresultstotal()",
          "definition": "Verify_there_are__results_total(int resultCount)"
        }
      },
      "key": "certificationsearchapi",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "CertificationSearchApiWorkflow",
      "instance-name": "CertificationSearchApi"
    },
    "phonenumberdata": {
      "namespace": "",
      "methods": {
        
      },
      "key": "phonenumberdata",
      "is-parent": false,
      "parent-name": null,
      "class-name": "PhoneNumberData",
      "instance-name": "PhoneNumberData"
    },
    "portalregistrationmanagement": {
      "namespace": "",
      "methods": {
        "assigntotrainingevent()": {
          "name": "Assign__to_training_event_",
          "key": "assigntotrainingevent()",
          "definition": "Assign__to_training_event_(string personName, string eventName)"
        },
        "assigntotrainingeventexpectingduplicateregistrationerror()": {
          "name": "Assign__to_training_event__expecting_duplicate_registration_error",
          "key": "assigntotrainingeventexpectingduplicateregistrationerror()",
          "definition": "Assign__to_training_event__expecting_duplicate_registration_error(string personName, string eventName)"
        },
        "assignselftoonlineevent()": {
          "name": "Assign_self_to_online_event",
          "key": "assignselftoonlineevent()",
          "definition": "Assign_self_to_online_event(string eventName)"
        },
        "waitlistfortrainingevent()": {
          "name": "Waitlist__for_training_event_",
          "key": "waitlistfortrainingevent()",
          "definition": "Waitlist__for_training_event_(string personName, string eventName)"
        }
      },
      "key": "portalregistrationmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "PortalRegistrationManagement",
      "instance-name": "PortalRegistrationManagement"
    },
    "licensing": {
      "namespace": "",
      "methods": {
        "assignlicenseto()": {
          "name": "Assign__license_to_",
          "key": "assignlicenseto()",
          "definition": "Assign__license_to_(string moduleLabelDescription, string orgName)"
        },
        "assignalicenseto()": {
          "name": "Assign_a__license_to",
          "key": "assignalicenseto()",
          "definition": "Assign_a__license_to(string moduleLabelDescription, string orgName)"
        },
        "unassignallbaselicenses()": {
          "name": "Unassign_all_base_licenses",
          "key": "unassignallbaselicenses()",
          "definition": "Unassign_all_base_licenses()"
        },
        "verifydoesnothavealicense()": {
          "name": "Verify__does_not_have_a__license",
          "key": "verifydoesnothavealicense()",
          "definition": "Verify__does_not_have_a__license(string orgName, string moduleLabelDescription)"
        },
        "removelicensefrom()": {
          "name": "Remove__license_from_",
          "key": "removelicensefrom()",
          "definition": "Remove__license_from_(string moduleLabelDescription, string orgName)"
        },
        "removelicensedmodulefromallorganizations()": {
          "name": "Remove_licensed_module__from_all_Organizations",
          "key": "removelicensedmodulefromallorganizations()",
          "definition": "Remove_licensed_module__from_all_Organizations(string moduleName)"
        },
        "unassignalllicenses()": {
          "name": "Unassign_all__licenses",
          "key": "unassignalllicenses()",
          "definition": "Unassign_all__licenses(string moduleLabelDescription)"
        },
        "unassignallacadislicenses()": {
          "name": "Unassign_all_Acadis_licenses",
          "key": "unassignallacadislicenses()",
          "definition": "Unassign_all_Acadis_licenses()"
        },
        "verifyacadishasavailablelicenses()": {
          "name": "Verify_Acadis_has_available__licenses",
          "key": "verifyacadishasavailablelicenses()",
          "definition": "Verify_Acadis_has_available__licenses(string moduleLabelDescription)"
        },
        "verifydoesnothaveabaselicense()": {
          "name": "Verify__does_not_have_a_base_license",
          "key": "verifydoesnothaveabaselicense()",
          "definition": "Verify__does_not_have_a_base_license(string orgName)"
        },
        "unassignandremovelicensesformodule()": {
          "name": "Unassign_and_remove_licenses_for_module__",
          "key": "unassignandremovelicensesformodule()",
          "definition": "Unassign_and_remove_licenses_for_module__(string moduleName)"
        },
        "setquantityoflicensesforto()": {
          "name": "Set_quantity_of_licenses_for__to__",
          "key": "setquantityoflicensesforto()",
          "definition": "Set_quantity_of_licenses_for__to__(string moduleName, int quantity)"
        },
        "removebaselicensefrom()": {
          "name": "Remove_base_license_from_",
          "key": "removebaselicensefrom()",
          "definition": "Remove_base_license_from_(string orgName)"
        },
        "verifyacadishasnoavailablelicenses()": {
          "name": "Verify_Acadis_has_no_available__licenses",
          "key": "verifyacadishasnoavailablelicenses()",
          "definition": "Verify_Acadis_has_no_available__licenses(string moduleLabelDescription)"
        },
        "verifyacadishasavailablebaselicenses()": {
          "name": "Verify_Acadis_has_available_base_licenses",
          "key": "verifyacadishasavailablebaselicenses()",
          "definition": "Verify_Acadis_has_available_base_licenses()"
        },
        "unassignandremovealllicenses()": {
          "name": "Unassign_and_remove_all_licenses",
          "key": "unassignandremovealllicenses()",
          "definition": "Unassign_and_remove_all_licenses()"
        },
        "verifyacadishasnoavailablebaselicenses()": {
          "name": "Verify_Acadis_has_no_available_base_licenses",
          "key": "verifyacadishasnoavailablebaselicenses()",
          "definition": "Verify_Acadis_has_no_available_base_licenses()"
        },
        "assignallbaselicenses()": {
          "name": "Assign_all_base_licenses",
          "key": "assignallbaselicenses()",
          "definition": "Assign_all_base_licenses()"
        },
        "assignbaselicenseto()": {
          "name": "Assign_base_license_to_",
          "key": "assignbaselicenseto()",
          "definition": "Assign_base_license_to_(string orgName)"
        },
        "verifyhasalicense()": {
          "name": "Verify__has_a__license",
          "key": "verifyhasalicense()",
          "definition": "Verify__has_a__license(string orgName, string moduleLabelDescription)"
        },
        "verifyhasabaselicense()": {
          "name": "Verify__has_a_base_license",
          "key": "verifyhasabaselicense()",
          "definition": "Verify__has_a_base_license(string orgName)"
        }
      },
      "key": "licensing",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "Licensing",
      "instance-name": "Licensing"
    },
    "automatedtestingsetup": {
      "namespace": "",
      "methods": {
        "correctansweris()": {
          "name": "Correct_answer__is__",
          "key": "correctansweris()",
          "definition": "Correct_answer__is__(string letter, string text)"
        },
        "forchangeresponseforquestiononexamtoanswer()": {
          "name": "For__change_response_for_question__on_exam__to_answer__",
          "key": "forchangeresponseforquestiononexamtoanswer()",
          "definition": "For__change_response_for_question__on_exam__to_answer__(string studentName, string questionText, string testName, string answerLetter)"
        },
        "createclassunder()": {
          "name": "Create_class_under",
          "key": "createclassunder()",
          "definition": "Create_class_under(string className, string programName)"
        },
        "begineditionassignmentsfor()": {
          "name": "Begin_edition_assignments_for",
          "key": "begineditionassignmentsfor()",
          "definition": "Begin_edition_assignments_for(string testName)"
        },
        "recordgradeforforofon()": {
          "name": "Record_grade_for_for_of_on_",
          "key": "recordgradeforforofon()",
          "definition": "Record_grade_for_for_of_on_(string studentName, string testName, string grade, DateTime date)"
        },
        "createquestionwithtextownedby()": {
          "name": "Create__question_with_text__owned_by__",
          "key": "createquestionwithtextownedby()",
          "definition": "Create__question_with_text__owned_by__(QuestionType questionType, string questionText, string owner)"
        },
        "assignrole()": {
          "name": "Assign_Role__",
          "key": "assignrole()",
          "definition": "Assign_Role__(string roleName)"
        },
        "addautomatedtestnamedtoactivityforclassfromexamtemplatewithminimumpassinggrade()": {
          "name": "Add_automated_test_named__to_activity__for_class__from_exam_template__with_minimum_passing_grade__",
          "key": "addautomatedtestnamedtoactivityforclassfromexamtemplatewithminimumpassinggrade()",
          "definition": "Add_automated_test_named__to_activity__for_class__from_exam_template__with_minimum_passing_grade__(string testName, string activityName, string className, string templateName, decimal minimumPassingGrade)"
        },
        "enrollstudentin()": {
          "name": "Enroll_student_in_",
          "key": "enrollstudentin()",
          "definition": "Enroll_student_in_(string studentName, string className)"
        },
        "importanswersforforwithvalueson()": {
          "name": "Import_answers_for__for__with_values__on__",
          "key": "importanswersforforwithvalueson()",
          "definition": "Import_answers_for__for__with_values__on__(string studentName, string testName, string answerImportString, DateTime date)"
        },
        "createausernamedwithlogin()": {
          "name": "Create_a_user_named__with_login__",
          "key": "createausernamedwithlogin()",
          "definition": "Create_a_user_named__with_login__(string name, string login)"
        },
        "createtesttemplateforwitheditions()": {
          "name": "Create_test_template__for__with__editions",
          "key": "createtesttemplateforwitheditions()",
          "definition": "Create_test_template__for__with__editions(string templateName, string programName, int editions)"
        },
        "renameeditiontofor()": {
          "name": "Rename_edition_to_for",
          "key": "renameeditiontofor()",
          "definition": "Rename_edition_to_for(string oldEditionName, string newEditionName, string templateName)"
        },
        "asrespondtoquestiononexamwithanswer()": {
          "name": "As__respond_to_question__on_exam__with_answer__",
          "key": "asrespondtoquestiononexamwithanswer()",
          "definition": "As__respond_to_question__on_exam__with_answer__(string studentName, string questionText, string testName, string answerLetter)"
        },
        "addspecificquestion()": {
          "name": "Add_specific_question__",
          "key": "addspecificquestion()",
          "definition": "Add_specific_question__(string question)"
        },
        "prepareeditionassignments()": {
          "name": "Prepare_edition_assignments",
          "key": "prepareeditionassignments()",
          "definition": "Prepare_edition_assignments()"
        },
        "answeris()": {
          "name": "Answer__is__",
          "key": "answeris()",
          "definition": "Answer__is__(string letter, string text)"
        },
        "createstudentinwithacademyidandacadisid()": {
          "name": "Create_student_in_with_academy_id__and_acadis_id__",
          "key": "createstudentinwithacademyidandacadisid()",
          "definition": "Create_student_in_with_academy_id__and_acadis_id__(string studentName, string className, string academyID, int? acadisID)"
        },
        "createstudentinwithacademyid()": {
          "name": "Create_student_in_with_academy_id",
          "key": "createstudentinwithacademyid()",
          "definition": "Create_student_in_with_academy_id(string studentName, string className, string academyID)"
        },
        "asrespondonexamtoquestionwithanswer()": {
          "name": "As__respond_on_exam__to_question__with_answer__",
          "key": "asrespondonexamtoquestionwithanswer()",
          "definition": "As__respond_on_exam__to_question__with_answer__(string studentName, string testName, int questionNumber, string answerLetter)"
        },
        "createrole()": {
          "name": "Create_role__",
          "key": "createrole()",
          "definition": "Create_role__(string roleName)"
        },
        "allowon()": {
          "name": "Allow__on__",
          "key": "allowon()",
          "definition": "Allow__on__(string permission, string bizFunc)"
        },
        "gradeexamforon()": {
          "name": "Grade_exam__for__on__",
          "key": "gradeexamforon()",
          "definition": "Grade_exam__for__on__(string testName, string studentName, DateTime date)"
        },
        "completetestwizardwithdefaultsforedition()": {
          "name": "Complete_test_wizard_with_defaults_for_edition__",
          "key": "completetestwizardwithdefaultsforedition()",
          "definition": "Complete_test_wizard_with_defaults_for_edition__(string edition)"
        },
        "settesttemplateeditiontoinactive()": {
          "name": "Set_test_template__edition__to_inactive",
          "key": "settesttemplateeditiontoinactive()",
          "definition": "Set_test_template__edition__to_inactive(string templateName, string edition)"
        },
        "savequestion()": {
          "name": "Save_Question",
          "key": "savequestion()",
          "definition": "Save_Question()"
        },
        "changeanswersforforwithvalueswithreason()": {
          "name": "Change_answers_for__for__with_values__with_reason__",
          "key": "changeanswersforforwithvalueswithreason()",
          "definition": "Change_answers_for__for__with_values__with_reason__(string studentName, string testName, string answerChangeString, string reason)"
        },
        "clearflagonalltestsindballowingproctors()": {
          "name": "Clear_flag_on_all_tests_in_db_allowing_proctors",
          "key": "clearflagonalltestsindballowingproctors()",
          "definition": "Clear_flag_on_all_tests_in_db_allowing_proctors()"
        },
        "addnewrulesettoeditionof()": {
          "name": "Add_new_ruleset_to_edition__of__",
          "key": "addnewrulesettoeditionof()",
          "definition": "Add_new_ruleset_to_edition__of__(string edition, string testTemplateName)"
        },
        "createautomatedtestforusingwithpassfail()": {
          "name": "Create_automated_test_for_using_with_passfail",
          "key": "createautomatedtestforusingwithpassfail()",
          "definition": "Create_automated_test_for_using_with_passfail(string testName, string className, string templateName, decimal passFail)"
        },
        "assigntoeditionfor()": {
          "name": "Assign_to_edition_for",
          "key": "assigntoeditionfor()",
          "definition": "Assign_to_edition_for(string studentName, string editionName, string testName)"
        }
      },
      "key": "automatedtestingsetup",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "AutomatedTestingSetup",
      "instance-name": "AutomatedTestingSetup"
    },
    "onlinecontentmanagement": {
      "namespace": "",
      "methods": {
        "verifyonlinecontentreportsagradeforeachstudent()": {
          "name": "Verify_online_content_reports_a_grade_for_each_student",
          "key": "verifyonlinecontentreportsagradeforeachstudent()",
          "definition": "Verify_online_content_reports_a_grade_for_each_student(string contentName)"
        },
        "verifyonlinecontentdoesnotreportagradeforeachstudent()": {
          "name": "Verify_online_content_does_not_report_a_grade_for_each_student",
          "key": "verifyonlinecontentdoesnotreportagradeforeachstudent()",
          "definition": "Verify_online_content_does_not_report_a_grade_for_each_student(string contentName)"
        },
        "settoreportagradeforeachstudent()": {
          "name": "Set_to_report_a_grade_for_each_student",
          "key": "settoreportagradeforeachstudent()",
          "definition": "Set_to_report_a_grade_for_each_student(string contentName)"
        },
        "verifyonlinecontentreportspassorfailforeachstudent()": {
          "name": "Verify_online_content_reports_pass_or_fail_for_each_student",
          "key": "verifyonlinecontentreportspassorfailforeachstudent()",
          "definition": "Verify_online_content_reports_pass_or_fail_for_each_student(string contentName)"
        },
        "deleteonlinecontentforacademy()": {
          "name": "Delete_online_content_for_academy",
          "key": "deleteonlinecontentforacademy()",
          "definition": "Delete_online_content_for_academy( string contentName, string academyName )"
        },
        "settoreportpassorfailforeachstudent()": {
          "name": "Set_to_report_pass_or_fail_for_each_student",
          "key": "settoreportpassorfailforeachstudent()",
          "definition": "Set_to_report_pass_or_fail_for_each_student(string contentName)"
        },
        "verifyonlinecontentexistsforacademywithuploadnamedandstatus()": {
          "name": "Verify_online_content_exists_for_academy_with_upload_named__and_status",
          "key": "verifyonlinecontentexistsforacademywithuploadnamedandstatus()",
          "definition": "Verify_online_content_exists_for_academy_with_upload_named__and_status( string contentName, string academyName, string uploadName, OnlineContentStatus status )"
        },
        "verifyonlinecontentdoesnotexistforacademy()": {
          "name": "Verify_online_content_does_not_exist_for_academy",
          "key": "verifyonlinecontentdoesnotexistforacademy()",
          "definition": "Verify_online_content_does_not_exist_for_academy( string contentName, string academyName )"
        },
        "verifyonlinecontentdoesnotreportpassorfailforeachstudent()": {
          "name": "Verify_online_content_does_not_report_pass_or_fail_for_each_student",
          "key": "verifyonlinecontentdoesnotreportpassorfailforeachstudent()",
          "definition": "Verify_online_content_does_not_report_pass_or_fail_for_each_student(string contentName)"
        },
        "addonlinecontentforacademynameduploadnamedwithstatus()": {
          "name": "Add_online_content_for_academy__named_upload_named__with_status_",
          "key": "addonlinecontentforacademynameduploadnamedwithstatus()",
          "definition": "Add_online_content_for_academy__named_upload_named__with_status_( string academyName, string contentName, string uploadName, OnlineContentStatus status )"
        }
      },
      "key": "onlinecontentmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "OnlineContentManagement",
      "instance-name": "OnlineContentManagement"
    },
    "portaluseranswers": {
      "namespace": "",
      "methods": {
        
      },
      "key": "portaluseranswers",
      "is-parent": false,
      "parent-name": null,
      "class-name": "PortalUserAnswers",
      "instance-name": "PortalUserAnswers"
    },
    "writtentestmanagement": {
      "namespace": "",
      "methods": {
        "createsubcategoryofnamed()": {
          "name": "Create_subcategory_of__named__",
          "key": "createsubcategoryofnamed()",
          "definition": "Create_subcategory_of__named__(string categoryName, string subcategoryName)"
        },
        "createnewversionofquestionwithanswercorrect()": {
          "name": "Create_new_version_of_question_with_answer_correct",
          "key": "createnewversionofquestionwithanswercorrect()",
          "definition": "Create_new_version_of_question_with_answer_correct( string questionName, string correctAnswerLetter )"
        },
        "createtlo()": {
          "name": "Create_TLO",
          "key": "createtlo()",
          "definition": "Create_TLO(string tlo)"
        },
        "createcategorynamedownedby()": {
          "name": "Create_category_named__owned_by__",
          "key": "createcategorynamedownedby()",
          "definition": "Create_category_named__owned_by__(string categoryName, string ownerName)"
        },
        "setownerid()": {
          "name": "Set_OwnerId_",
          "key": "setownerid()",
          "definition": "Set_OwnerId_(int ownerId)"
        },
        "verifyquestionforstudentontestflagged()": {
          "name": "Verify_question__for_student__on_test__flagged",
          "key": "verifyquestionforstudentontestflagged()",
          "definition": "Verify_question__for_student__on_test__flagged(string questionText, string studentName, string testName, string isFlagged)"
        },
        "selectyesascorrectanswer()": {
          "name": "SelectYesAsCorrectAnswer",
          "key": "selectyesascorrectanswer()",
          "definition": "SelectYesAsCorrectAnswer()"
        },
        "addcorrectanswer()": {
          "name": "AddCorrectAnswer",
          "key": "addcorrectanswer()",
          "definition": "AddCorrectAnswer( string answerText )"
        },
        "createquestionascopyof()": {
          "name": "CreateQuestionAsCopyOf",
          "key": "createquestionascopyof()",
          "definition": "CreateQuestionAsCopyOf(string questionIdentifier)"
        },
        "createquestionwithname()": {
          "name": "CreateQuestionWithName",
          "key": "createquestionwithname()",
          "definition": "CreateQuestionWithName( string questionName )"
        },
        "addelo()": {
          "name": "Add_ELO",
          "key": "addelo()",
          "definition": "Add_ELO(string eloName)"
        },
        "createcategorynamed()": {
          "name": "Create_category_named",
          "key": "createcategorynamed()",
          "definition": "Create_category_named(string categoryName)"
        },
        "selectfalseascorrectanswer()": {
          "name": "SelectFalseAsCorrectAnswer",
          "key": "selectfalseascorrectanswer()",
          "definition": "SelectFalseAsCorrectAnswer()"
        },
        "addincorrectanswer()": {
          "name": "AddIncorrectAnswer",
          "key": "addincorrectanswer()",
          "definition": "AddIncorrectAnswer( string answerText )"
        },
        "createquestion()": {
          "name": "CreateQuestion",
          "key": "createquestion()",
          "definition": "CreateQuestion()"
        },
        "savequestion()": {
          "name": "SaveQuestion",
          "key": "savequestion()",
          "definition": "SaveQuestion()"
        },
        "questioncategoryis()": {
          "name": "Question_Category_is__",
          "key": "questioncategoryis()",
          "definition": "Question_Category_is__(string category)"
        },
        "createelofortlo()": {
          "name": "Create_ELO_for_TLO",
          "key": "createelofortlo()",
          "definition": "Create_ELO_for_TLO(string elo, string tlo)"
        },
        "selecttrueascorrectanswer()": {
          "name": "SelectTrueAsCorrectAnswer",
          "key": "selecttrueascorrectanswer()",
          "definition": "SelectTrueAsCorrectAnswer()"
        },
        "selectnoascorrectanswer()": {
          "name": "SelectNoAsCorrectAnswer",
          "key": "selectnoascorrectanswer()",
          "definition": "SelectNoAsCorrectAnswer()"
        }
      },
      "key": "writtentestmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "WrittenTestManagement",
      "instance-name": "WrittenTestManagement"
    },
    "apiaccesslist": {
      "namespace": "",
      "methods": {
        "verifylistdoesnotincludeconsumer()": {
          "name": "Verify_list_does_not_include_consumer__",
          "key": "verifylistdoesnotincludeconsumer()",
          "definition": "Verify_list_does_not_include_consumer__(string consumerName)"
        },
        "verifygeneratedcredentialsaredisplayed()": {
          "name": "Verify_generated_credentials_are_displayed",
          "key": "verifygeneratedcredentialsaredisplayed()",
          "definition": "Verify_generated_credentials_are_displayed()"
        },
        "clickrevokeforconsumer()": {
          "name": "Click_Revoke_for_consumer__",
          "key": "clickrevokeforconsumer()",
          "definition": "Click_Revoke_for_consumer__(string consumerName)"
        },
        "selectpresetroles()": {
          "name": "Select_preset_roles__",
          "key": "selectpresetroles()",
          "definition": "Select_preset_roles__(List<string> roleNames)"
        },
        "verifyavailablepresetrolesdonotinclude()": {
          "name": "Verify_available_preset_roles_do_not_include__",
          "key": "verifyavailablepresetrolesdonotinclude()",
          "definition": "Verify_available_preset_roles_do_not_include__(string roleName)"
        },
        "verifyavailablepresetrolesinclude()": {
          "name": "Verify_available_preset_roles_include__",
          "key": "verifyavailablepresetrolesinclude()",
          "definition": "Verify_available_preset_roles_include__(string roleName)"
        },
        "clickviewforconsumer()": {
          "name": "Click_View_for_consumer__",
          "key": "clickviewforconsumer()",
          "definition": "Click_View_for_consumer__(string consumerName)"
        },
        "bindapipermissions()": {
          "name": "BindApiPermissions",
          "key": "bindapipermissions()",
          "definition": "BindApiPermissions(IList<ApiPermissionsDTO> apis)"
        },
        "verifylistincludesconsumerwithusernameandroles()": {
          "name": "Verify_list_includes_consumer__with_username__and_roles__",
          "key": "verifylistincludesconsumerwithusernameandroles()",
          "definition": "Verify_list_includes_consumer__with_username__and_roles__(string consumerName, string username, string roles)"
        },
        "bindcredentials()": {
          "name": "BindCredentials",
          "key": "bindcredentials()",
          "definition": "BindCredentials(IList<ApiAccessDTO> credentials)"
        },
        "showcredentialdetails()": {
          "name": "ShowCredentialDetails",
          "key": "showcredentialdetails()",
          "definition": "ShowCredentialDetails(ApiCredentialDetailsDTO credential, string configFragment)"
        }
      },
      "key": "apiaccesslist",
      "is-parent": false,
      "parent-name": "MVBaseWorkflow",
      "class-name": "APIAccessListWorkflow",
      "instance-name": "APIAccessList"
    },
    "customerviews": {
      "namespace": "",
      "methods": {
        "ensurerowhasof()": {
          "name": "Ensure_row__has__of__",
          "key": "ensurerowhasof()",
          "definition": "Ensure_row__has__of__(int rowNum, string columnName, string columnValue)"
        },
        "givepersonadutyassignmentat()": {
          "name": "Give_person_a_duty_assignment_at__",
          "key": "givepersonadutyassignmentat()",
          "definition": "Give_person_a_duty_assignment_at__(string orgName)"
        },
        "getdatafromviewwhereorderby()": {
          "name": "Get_data_from_view__where__order_by__",
          "key": "getdatafromviewwhereorderby()",
          "definition": "Get_data_from_view__where__order_by__(string viewName, string where, string order)"
        },
        "issueancertnamedtopersonwithsocialsecuritynumberofwithaneffectivedateofandanexpirationdateof()": {
          "name": "Issue_an__cert_named__to_person_with_social_security_number__of__with_an_effective_date_of__and_an_expiration_date_of__",
          "key": "issueancertnamedtopersonwithsocialsecuritynumberofwithaneffectivedateofandanexpirationdateof()",
          "definition": "Issue_an__cert_named__to_person_with_social_security_number__of__with_an_effective_date_of__and_an_expiration_date_of__(string status, string certName, string ssn, string effectiveDate, string expirationDate)"
        },
        "setlocationaddressincityandstateandzip()": {
          "name": "Set_location_address___in_city__and_state__and_zip__",
          "key": "setlocationaddressincityandstateandzip()",
          "definition": "Set_location_address___in_city__and_state__and_zip__(string address1, string address2, string city, string state, string zip)"
        },
        "updateemploymentsetto()": {
          "name": "Update_employment_set__to__",
          "key": "updateemploymentsetto()",
          "definition": "Update_employment_set__to__(string columnName, string value)"
        },
        "createaprogramnamed()": {
          "name": "Create_a_program_named",
          "key": "createaprogramnamed()",
          "definition": "Create_a_program_named(string programName)"
        },
        "createapersonthatreadwritelecturetranslate()": {
          "name": "Create_a_person_that__read__write__lecture__translate__",
          "key": "createapersonthatreadwritelecturetranslate()",
          "definition": "Create_a_person_that__read__write__lecture__translate__(string canRead, string canWrite, string canLecture, string canTranslate, string language)"
        },
        "addlanguagetopersonreadwritelecturetranslate()": {
          "name": "Add_language_to_person__read__write__lecture__translate__",
          "key": "addlanguagetopersonreadwritelecturetranslate()",
          "definition": "Add_language_to_person__read__write__lecture__translate__(string canRead, string canWrite, string canLecture, string canTranslate, string language)"
        },
        "createaninserviceeventnamedandadescriptionofstartingandendingwithhoursofprovidedby()": {
          "name": "Create_an_inservice_event_named__and_a_description_of__starting__and_ending__with_hours_of__provided_by__",
          "key": "createaninserviceeventnamedandadescriptionofstartingandendingwithhoursofprovidedby()",
          "definition": "Create_an_inservice_event_named__and_a_description_of__starting__and_ending__with_hours_of__provided_by__(string name, string description, string startDate, string endDate, int hours, string providerName)"
        },
        "createaninserviceeventnamedandadescriptionofstartingandendingwithhoursofatprovidedby()": {
          "name": "Create_an_inservice_event_named__and_a_description_of__starting__and_ending__with_hours_of__at__provided_by__",
          "key": "createaninserviceeventnamedandadescriptionofstartingandendingwithhoursofatprovidedby()",
          "definition": "Create_an_inservice_event_named__and_a_description_of__starting__and_ending__with_hours_of__at__provided_by__(string name, string description, string startDate, string endDate, int hours, string academyName, string providerName)"
        },
        "assignpersontoevent()": {
          "name": "Assign_person_to_event",
          "key": "assignpersontoevent()",
          "definition": "Assign_person_to_event()"
        },
        "ensureclasshasresultinorderby()": {
          "name": "Ensure_class_has_result_in__order_by__",
          "key": "ensureclasshasresultinorderby()",
          "definition": "Ensure_class_has_result_in__order_by__(int numberOfResults, string viewName, string orderBy)"
        },
        "enrollpersoninclasson()": {
          "name": "Enroll_person_in_class__on__",
          "key": "enrollpersoninclasson()",
          "definition": "Enroll_person_in_class__on__(string className, string statusDate)"
        },
        "departstudentwithssnwithactionandreasonanddetailon()": {
          "name": "Depart_student_with_ssn__with_action__and_reason__and_detail__on__",
          "key": "departstudentwithssnwithactionandreasonanddetailon()",
          "definition": "Depart_student_with_ssn__with_action__and_reason__and_detail__on__(string ssn, string action, string reason, string detail, string date)"
        },
        "createpersonwithsocialsecuritynumberfirstnamelastnamemiddlenameborngender()": {
          "name": "Create_person_with_social_security_number__first_name__last_name__middle_name__born__gender__",
          "key": "createpersonwithsocialsecuritynumberfirstnamelastnamemiddlenameborngender()",
          "definition": "Create_person_with_social_security_number__first_name__last_name__middle_name__born__gender__(string ssn, string firstName, string lastName, string middleName, string dateOfBirth, string gender)"
        },
        "createanorganizationnamedwithcityofstateofandcountyof()": {
          "name": "Create_an_organization_named__with_city_of__state_of__and_county_of__",
          "key": "createanorganizationnamedwithcityofstateofandcountyof()",
          "definition": "Create_an_organization_named__with_city_of__state_of__and_county_of__(string orgName, string cityName, string stateName, string countyName)"
        },
        "createanexternalsystemidnamedwithavalueof()": {
          "name": "Create_an_external_system_id_named__with_a_value_of__",
          "key": "createanexternalsystemidnamedwithavalueof()",
          "definition": "Create_an_external_system_id_named__with_a_value_of__(string externalSystem, string externalId)"
        },
        "awardstudentwithssnwiththeaward()": {
          "name": "Award_student_with_ssn__with_the__award",
          "key": "awardstudentwithssnwiththeaward()",
          "definition": "Award_student_with_ssn__with_the__award(string ssn, string awardName)"
        },
        "createpersonwithsocialsecuritynumberfirstnamelastnamemiddlenamesuffixborngender()": {
          "name": "Create_person_with_social_security_number__first_name__last_name__middle_name__suffix__born__gender__",
          "key": "createpersonwithsocialsecuritynumberfirstnamelastnamemiddlenamesuffixborngender()",
          "definition": "Create_person_with_social_security_number__first_name__last_name__middle_name__suffix__born__gender__(string ssn, string firstName, string lastName, string middleName, string suffix, string dateOfBirth, string gender)"
        },
        "setclasslocation()": {
          "name": "Set_class_location__",
          "key": "setclasslocation()",
          "definition": "Set_class_location__(string locationName)"
        },
        "hirepersonwiththelastnameatonwithatitleof()": {
          "name": "Hire_person_with_the_last_name__at__on__with_a_title_of__",
          "key": "hirepersonwiththelastnameatonwithatitleof()",
          "definition": "Hire_person_with_the_last_name__at__on__with_a_title_of__(string lastName, string orgName, string startingDate, string title)"
        },
        "addceucreditsoftoclass()": {
          "name": "Add_CEU_Credits_of__to_class",
          "key": "addceucreditsoftoclass()",
          "definition": "Add_CEU_Credits_of__to_class(string credits)"
        },
        "getdatafromviewwhereislastpersonorderby()": {
          "name": "Get_data_from_view__where__is_last_person_order_by__",
          "key": "getdatafromviewwhereislastpersonorderby()",
          "definition": "Get_data_from_view__where__is_last_person_order_by__(string viewName, string personIdColumnName, string orderBy)"
        },
        "updateeventstatusto()": {
          "name": "Update_event_status_to",
          "key": "updateeventstatusto()",
          "definition": "Update_event_status_to(string statusName)"
        },
        "createprogramcoordinatorwithlastnameofandfirstnameof()": {
          "name": "Create_program_coordinator_with_last_name_of__and_first_name_of",
          "key": "createprogramcoordinatorwithlastnameofandfirstnameof()",
          "definition": "Create_program_coordinator_with_last_name_of__and_first_name_of(string lastName, string firstName)"
        },
        "ensurepersonhasresultin()": {
          "name": "Ensure_person_has__result_in__",
          "key": "ensurepersonhasresultin()",
          "definition": "Ensure_person_has__result_in__(int numberOfResults, string viewName)"
        },
        "createanactivitynamedwithlengthwherecountsastrainingisandcanbescheduledis()": {
          "name": "Create_an_activity_named__with_length__where_counts_as_training_is__and_can_be_scheduled_is__",
          "key": "createanactivitynamedwithlengthwherecountsastrainingisandcanbescheduledis()",
          "definition": "Create_an_activity_named__with_length__where_counts_as_training_is__and_can_be_scheduled_is__(string activityName, int length, string countsAsTraining, string canBeScheduled)"
        },
        "createaward()": {
          "name": "Create__award",
          "key": "createaward()",
          "definition": "Create__award(string awardName)"
        },
        "createanorganizationnamedwithcityofandstateof()": {
          "name": "Create_an_organization_named__with_city_of__and_state_of__",
          "key": "createanorganizationnamedwithcityofandstateof()",
          "definition": "Create_an_organization_named__with_city_of__and_state_of__(string orgName, string cityName, string stateName)"
        },
        "graduatestudenton()": {
          "name": "Graduate_student_on__",
          "key": "graduatestudenton()",
          "definition": "Graduate_student_on__(string graduateDate)"
        },
        "createaprogramwithabbreviationanddescriptionunderorganization()": {
          "name": "Create_a_program__with_abbreviation__and_description__under_organization__",
          "key": "createaprogramwithabbreviationanddescriptionunderorganization()",
          "definition": "Create_a_program__with_abbreviation__and_description__under_organization__(string programName, string abbreviation, string description, string orgName)"
        },
        "addpointofcontacttowithafirstnameandlastname()": {
          "name": "Add_point_of_contact_to__with_a_first_name__and_last_name__",
          "key": "addpointofcontacttowithafirstnameandlastname()",
          "definition": "Add_point_of_contact_to__with_a_first_name__and_last_name__(string className, string firstName, string lastName)"
        },
        "createatrainingclassnamedstartingonandendingonwithstatusof()": {
          "name": "Create_a_training_class_named__starting_on__and_ending_on__with_status_of__",
          "key": "createatrainingclassnamedstartingonandendingonwithstatusof()",
          "definition": "Create_a_training_class_named__starting_on__and_ending_on__with_status_of__(string className, DateTime startDate, DateTime endDate, string status)"
        },
        "createstudentsocialsecuritynumberandenrollinwithastatusof()": {
          "name": "Create_student_social_security_number__and_enroll_in__with_a_status_of__",
          "key": "createstudentsocialsecuritynumberandenrollinwithastatusof()",
          "definition": "Create_student_social_security_number__and_enroll_in__with_a_status_of__(string ssn, string className, string enrollmentStatus)"
        },
        "createaclasstemplatenamedwithreference()": {
          "name": "Create_a_class_template_named__with_reference__",
          "key": "createaclasstemplatenamedwithreference()",
          "definition": "Create_a_class_template_named__with_reference__(string templateName, string reference)"
        },
        "ensureresultcontainsrows()": {
          "name": "Ensure_result_contains__rows",
          "key": "ensureresultcontainsrows()",
          "definition": "Ensure_result_contains__rows(int numRows)"
        }
      },
      "key": "customerviews",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "CustomerViews",
      "instance-name": "CustomerViews"
    },
    "addressdata": {
      "namespace": "",
      "methods": {
        
      },
      "key": "addressdata",
      "is-parent": false,
      "parent-name": null,
      "class-name": "AddressData",
      "instance-name": "AddressData"
    },
    "organizationsearching": {
      "namespace": "",
      "methods": {
        "selectcertification()": {
          "name": "Select_certification__",
          "key": "selectcertification()",
          "definition": "Select_certification__(string certName)"
        },
        "criteriaexternalsystemid()": {
          "name": "Criteria_External_System_ID",
          "key": "criteriaexternalsystemid()",
          "definition": "Criteria_External_System_ID( string criteria )"
        },
        "entercertificationactionbetweenand()": {
          "name": "Enter_certification_action_between__and__",
          "key": "entercertificationactionbetweenand()",
          "definition": "Enter_certification_action_between__and__(DateTime start, DateTime end)"
        },
        "selectcertificationstatus()": {
          "name": "Select_certification_status__",
          "key": "selectcertificationstatus()",
          "definition": "Select_certification_status__(string certStatus)"
        },
        "enterexpirationbetweenand()": {
          "name": "Enter_expiration_between__and__",
          "key": "enterexpirationbetweenand()",
          "definition": "Enter_expiration_between__and__(DateTime start, DateTime end)"
        },
        "resultscontain()": {
          "name": "Results_contain",
          "key": "resultscontain()",
          "definition": "Results_contain( string orgName )"
        },
        "name()": {
          "name": "Name",
          "key": "name()",
          "definition": "Name(string name)"
        },
        "selectcertificationaction()": {
          "name": "Select_certification_action__",
          "key": "selectcertificationaction()",
          "definition": "Select_certification_action__(CertRecordAction actionType)"
        },
        "reference()": {
          "name": "Reference",
          "key": "reference()",
          "definition": "Reference(string r)"
        },
        "criteriaexternalsystem()": {
          "name": "Criteria_External_System",
          "key": "criteriaexternalsystem()",
          "definition": "Criteria_External_System( string criteria )"
        },
        "resultcountequals()": {
          "name": "Result_count_equals",
          "key": "resultcountequals()",
          "definition": "Result_count_equals( int count )"
        },
        "newcriteria()": {
          "name": "New_Criteria",
          "key": "newcriteria()",
          "definition": "New_Criteria()"
        },
        "enterissuedbetweenand()": {
          "name": "Enter_issued_between__and__",
          "key": "enterissuedbetweenand()",
          "definition": "Enter_issued_between__and__(DateTime start, DateTime end)"
        },
        "selectsearchforcertifications()": {
          "name": "Select_search_for__certifications",
          "key": "selectsearchforcertifications()",
          "definition": "Select_search_for__certifications(CertSearchInclusionOptions option)"
        },
        "clearexternalsystemcriteria()": {
          "name": "Clear_External_System_Criteria",
          "key": "clearexternalsystemcriteria()",
          "definition": "Clear_External_System_Criteria()"
        },
        "groupsonly()": {
          "name": "Groups_Only",
          "key": "groupsonly()",
          "definition": "Groups_Only()"
        },
        "search()": {
          "name": "Search",
          "key": "search()",
          "definition": "Search()"
        }
      },
      "key": "organizationsearching",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "OrganizationSearching",
      "instance-name": "OrganizationSearching"
    },
    "studentmanagement": {
      "namespace": "",
      "methods": {
        "setdateofbirthto()": {
          "name": "Set_date_of_birth_to_",
          "key": "setdateofbirthto()",
          "definition": "Set_date_of_birth_to_( DateTime date)"
        },
        "setemergencycontactaddressto()": {
          "name": "Set_emergency_contact_address_to_",
          "key": "setemergencycontactaddressto()",
          "definition": "Set_emergency_contact_address_to_( string addressLine1, string addressLine2, string city, string county, string state, string zip )"
        },
        "verifythatstudentinclasshasemergencyphonenumberofextensionandtype()": {
          "name": "Verify_that_student_in_class_has_emergency_phone_number_of_extension_and_type",
          "key": "verifythatstudentinclasshasemergencyphonenumberofextensionandtype()",
          "definition": "Verify_that_student_in_class_has_emergency_phone_number_of_extension_and_type( string studentName, string className, int contactNumber, string phoneNumber, string extension, string phoneType )"
        },
        "verifythatstudentinhaspricelevel()": {
          "name": "Verify_that_student__in__has_Price_Level__",
          "key": "verifythatstudentinhaspricelevel()",
          "definition": "Verify_that_student__in__has_Price_Level__(string studentName, string className, string priceName)"
        },
        "setadarequirementsto()": {
          "name": "Set_ADA_Requirements_to_",
          "key": "setadarequirementsto()",
          "definition": "Set_ADA_Requirements_to_(string ada)"
        },
        "verifythatstudentinhashousingotherorganization()": {
          "name": "Verify_that_student__in__has_Housing_Other_Organization__",
          "key": "verifythatstudentinhashousingotherorganization()",
          "definition": "Verify_that_student__in__has_Housing_Other_Organization__(string studentName, string className, string orgName)"
        },
        "usingclassnamed()": {
          "name": "Using_class_named",
          "key": "usingclassnamed()",
          "definition": "Using_class_named( string className)"
        },
        "verifythathasstudentwithnosendingorg()": {
          "name": "Verify_that_has_student_with_no_sending_org",
          "key": "verifythathasstudentwithnosendingorg()",
          "definition": "Verify_that_has_student_with_no_sending_org(string className, string studentName)"
        },
        "verifythatstudentinneedshousing()": {
          "name": "Verify_that_student__in__needs_housing",
          "key": "verifythatstudentinneedshousing()",
          "definition": "Verify_that_student__in__needs_housing(string studentName, string className)"
        },
        "verifythatstudentinhasemergencycontactname()": {
          "name": "Verify_that_student_in_has_Emergency_Contact_Name",
          "key": "verifythatstudentinhasemergencycontactname()",
          "definition": "Verify_that_student_in_has_Emergency_Contact_Name( string studentName, string className, string contactName )"
        },
        "verifythatstudentinhastuitiongrant()": {
          "name": "Verify_that_student__in__has_Tuition_Grant__",
          "key": "verifythatstudentinhastuitiongrant()",
          "definition": "Verify_that_student__in__has_Tuition_Grant__(string studentName, string className, string grantName)"
        },
        "verifythatstudentinhasnohousingotherorganization()": {
          "name": "Verify_that_student__in__has_no_Housing_Other_Organization",
          "key": "verifythatstudentinhasnohousingotherorganization()",
          "definition": "Verify_that_student__in__has_no_Housing_Other_Organization(string studentName, string className)"
        },
        "setsendingorganizationto()": {
          "name": "Set_sending_organization_to__",
          "key": "setsendingorganizationto()",
          "definition": "Set_sending_organization_to__(string orgName)"
        },
        "sethealthissuesto()": {
          "name": "Set_Health_issues_to_",
          "key": "sethealthissuesto()",
          "definition": "Set_Health_issues_to_(string health)"
        },
        "verifythatstudentinhasemergencycontactrelationship()": {
          "name": "Verify_that_student_in_has_Emergency_Contact_Relationship",
          "key": "verifythatstudentinhasemergencycontactrelationship()",
          "definition": "Verify_that_student_in_has_Emergency_Contact_Relationship( string studentName, string className, string relationship )"
        },
        "verifythatstudentinhashousingbilltopartycategory()": {
          "name": "Verify_that_student__in__has_Housing_Billto_Party_Category__",
          "key": "verifythatstudentinhashousingbilltopartycategory()",
          "definition": "Verify_that_student__in__has_Housing_Billto_Party_Category__(string studentName, string className, string categoryName)"
        },
        "setemergencycontactrelationshipto()": {
          "name": "Set_emergency_contact_relationship_to_",
          "key": "setemergencycontactrelationshipto()",
          "definition": "Set_emergency_contact_relationship_to_( string contactRelationship )"
        },
        "setreligiousneedsto()": {
          "name": "Set_Religious_needs_to_",
          "key": "setreligiousneedsto()",
          "definition": "Set_Religious_needs_to_(string needs)"
        },
        "verifythatstudentinhasnohousinggrant()": {
          "name": "Verify_that_student__in__has_no_Housing_Grant",
          "key": "verifythatstudentinhasnohousinggrant()",
          "definition": "Verify_that_student__in__has_no_Housing_Grant(string studentName, string className)"
        },
        "studenthasawaiver()": {
          "name": "Student_has_a_waiver",
          "key": "studenthasawaiver()",
          "definition": "Student_has_a_waiver()"
        },
        "verifythatstudentinhastrainingcategory()": {
          "name": "Verify_that_student__in__has_training_category__",
          "key": "verifythatstudentinhastrainingcategory()",
          "definition": "Verify_that_student__in__has_training_category__( string studentName, string className, string trainingCategory )"
        },
        "usingstudentfromclass()": {
          "name": "Using_student_from_class_",
          "key": "usingstudentfromclass()",
          "definition": "Using_student_from_class_( string studentLabel, string className )"
        },
        "saveenrollment()": {
          "name": "Save_enrollment",
          "key": "saveenrollment()",
          "definition": "Save_enrollment()"
        },
        "setemergencycontactphone1totypewithnumberext()": {
          "name": "Set_emergency_contact_Phone_1_to_type_with_number_ext",
          "key": "setemergencycontactphone1totypewithnumberext()",
          "definition": "Set_emergency_contact_Phone_1_to_type_with_number_ext(string phoneType, string phoneNumber, string phoneExt)"
        },
        "verifythatstudentinhasemergencycontactcity()": {
          "name": "Verify_that_student_in_has_Emergency_Contact_City",
          "key": "verifythatstudentinhasemergencycontactcity()",
          "definition": "Verify_that_student_in_has_Emergency_Contact_City( string studentName, string className, string city )"
        },
        "verifythatstudentinhasusagetype()": {
          "name": "Verify_that_student__in__has_Usage_type__",
          "key": "verifythatstudentinhasusagetype()",
          "definition": "Verify_that_student__in__has_Usage_type__(string studentName, string className, string usageName)"
        },
        "verifyemergencycontactis()": {
          "name": "Verify_emergency_contact_is_",
          "key": "verifyemergencycontactis()",
          "definition": "Verify_emergency_contact_is_( string emergencyContact )"
        },
        "verifythatstudentinhasnotuitionotherorganization()": {
          "name": "Verify_that_student__in__has_no_Tuition_Other_Organization",
          "key": "verifythatstudentinhasnotuitionotherorganization()",
          "definition": "Verify_that_student__in__has_no_Tuition_Other_Organization(string studentName, string className)"
        },
        "verifythatstudentinhasemergencycontactstate()": {
          "name": "Verify_that_student_in_has_Emergency_Contact_State",
          "key": "verifythatstudentinhasemergencycontactstate()",
          "definition": "Verify_that_student_in_has_Emergency_Contact_State( string studentName, string className, string state )"
        },
        "verifythathasstudentwithsendingorgandtitle()": {
          "name": "Verify_that__has_student__with_sending_org__and_title__",
          "key": "verifythathasstudentwithsendingorgandtitle()",
          "definition": "Verify_that__has_student__with_sending_org__and_title__(string className, string studentName, string orgName, string title)"
        },
        "sethousingrequestedto()": {
          "name": "Set_Housing_requested_to_",
          "key": "sethousingrequestedto()",
          "definition": "Set_Housing_requested_to_(HousingOption housing)"
        },
        "verifythatstudentinhasemergencycontactzip()": {
          "name": "Verify_that_student_in_has_Emergency_Contact_Zip",
          "key": "verifythatstudentinhasemergencycontactzip()",
          "definition": "Verify_that_student_in_has_Emergency_Contact_Zip( string studentName, string className, string zip )"
        },
        "settitleto()": {
          "name": "Set_title_to__",
          "key": "settitleto()",
          "definition": "Set_title_to__(string titleName)"
        },
        "verifyemergencycontactrelationshipis()": {
          "name": "Verify_emergency_contact_relationship_is_",
          "key": "verifyemergencycontactrelationshipis()",
          "definition": "Verify_emergency_contact_relationship_is_(string value)"
        },
        "verifythatstudentindoesnothavephonenumber()": {
          "name": "Verify_that_student_in_does_not_have_Phone_Number",
          "key": "verifythatstudentindoesnothavephonenumber()",
          "definition": "Verify_that_student_in_does_not_have_Phone_Number(string studentName, string className)"
        },
        "setcommentsto()": {
          "name": "Set_comments_to__",
          "key": "setcommentsto()",
          "definition": "Set_comments_to__(string comment)"
        },
        "verifystudentstatusis()": {
          "name": "Verify_student_status_is_",
          "key": "verifystudentstatusis()",
          "definition": "Verify_student_status_is_( EnrollmentStatus status )"
        },
        "verifythatstudentindoeshavephonenumberoftypewithnumberandextensionandprimaryphonenumber()": {
          "name": "Verify_that_student_in_does_have_Phone_Number_of_type_with_number_and_extension_and_primary_phone_number",
          "key": "verifythatstudentindoeshavephonenumberoftypewithnumberandextensionandprimaryphonenumber()",
          "definition": "Verify_that_student_in_does_have_Phone_Number_of_type_with_number_and_extension_and_primary_phone_number(string studentName, string className, string phoneNumberType, string phoneNumber, string extension, string isPrimary)"
        },
        "enrollpersoninclass()": {
          "name": "Enroll_person__in_class__",
          "key": "enrollpersoninclass()",
          "definition": "Enroll_person__in_class__(string personName, string className)"
        },
        "verifythathasstudentwithsendingorg()": {
          "name": "Verify_that__has_student__with_sending_org__",
          "key": "verifythathasstudentwithsendingorg()",
          "definition": "Verify_that__has_student__with_sending_org__(string className, string studentName, string orgName)"
        },
        "enrollperson()": {
          "name": "Enroll_person__",
          "key": "enrollperson()",
          "definition": "Enroll_person__(string personName)"
        },
        "verifythatstudentinhasnotuitiongrant()": {
          "name": "Verify_that_student__in__has_no_Tuition_Grant",
          "key": "verifythatstudentinhasnotuitiongrant()",
          "definition": "Verify_that_student__in__has_no_Tuition_Grant(string studentName, string className)"
        },
        "setemergencycontactphone2totypewithnumberext()": {
          "name": "Set_emergency_contact_Phone_2_to_type_with_number_ext",
          "key": "setemergencycontactphone2totypewithnumberext()",
          "definition": "Set_emergency_contact_Phone_2_to_type_with_number_ext(string phoneType, string phoneNumber, string phoneExt)"
        },
        "verifythatstudentindoesnothaveemergencycontactphonenumber()": {
          "name": "Verify_that_student__in__does_not_have_Emergency_Contact_Phone_Number__",
          "key": "verifythatstudentindoesnothaveemergencycontactphonenumber()",
          "definition": "Verify_that_student__in__does_not_have_Emergency_Contact_Phone_Number__(string studentName, string className, int contactNumber)"
        },
        "addpersoninclasstostudentgroup()": {
          "name": "Add_person_in_class_to_Student_Group",
          "key": "addpersoninclasstostudentgroup()",
          "definition": "Add_person_in_class_to_Student_Group(string student, string cls, string groupName)"
        },
        "verifythatstudentinhastuitionbilltopartycategory()": {
          "name": "Verify_that_student__in__has_Tuition_Billto_Party_Category__",
          "key": "verifythatstudentinhastuitionbilltopartycategory()",
          "definition": "Verify_that_student__in__has_Tuition_Billto_Party_Category__(string studentName, string className, string categoryName)"
        },
        "setgenderto()": {
          "name": "set_gender_to__",
          "key": "setgenderto()",
          "definition": "set_gender_to__(Gender gender)"
        },
        "setemergencycontactto()": {
          "name": "Set_emergency_contact_to_",
          "key": "setemergencycontactto()",
          "definition": "Set_emergency_contact_to_( string emergencyContact )"
        },
        "setdietaryrequirementsto()": {
          "name": "Set_Dietary_requirements_to_",
          "key": "setdietaryrequirementsto()",
          "definition": "Set_Dietary_requirements_to_(string diet)"
        },
        "verifythathasstudent()": {
          "name": "Verify_that_has_student",
          "key": "verifythathasstudent()",
          "definition": "Verify_that_has_student( string className, string studentName )"
        },
        "verifystudentstatusdateis()": {
          "name": "Verify_student_status_date_is__",
          "key": "verifystudentstatusdateis()",
          "definition": "Verify_student_status_date_is__(DateTime statusDate)"
        },
        "verifythatstudentinhasemergencycontactaddress()": {
          "name": "Verify_that_student_in_has_Emergency_Contact_Address",
          "key": "verifythatstudentinhasemergencycontactaddress()",
          "definition": "Verify_that_student_in_has_Emergency_Contact_Address( string studentName, string className, string address )"
        },
        "verifythatstudentinhashousinggrant()": {
          "name": "Verify_that_student__in__has_Housing_Grant__",
          "key": "verifythatstudentinhashousinggrant()",
          "definition": "Verify_that_student__in__has_Housing_Grant__(string studentName, string className, string grantName)"
        },
        "graduatestudentfromclasson()": {
          "name": "Graduate_student__from_class__on_",
          "key": "graduatestudentfromclasson()",
          "definition": "Graduate_student__from_class__on_(string personName, string className, DateTime date)"
        },
        "verifythatstudentinhastuitionotherorganization()": {
          "name": "Verify_that_student__in__has_Tuition_Other_Organization__",
          "key": "verifythatstudentinhastuitionotherorganization()",
          "definition": "Verify_that_student__in__has_Tuition_Other_Organization__(string studentName, string className, string orgName)"
        },
        "verifythatstudentinclassdoesnothaveemergencyphonenumber()": {
          "name": "Verify_that_student_in_class_does_not_have_emergency_phone_number",
          "key": "verifythatstudentinclassdoesnothaveemergencyphonenumber()",
          "definition": "Verify_that_student_in_class_does_not_have_emergency_phone_number( string studentName, string className, int contactNumber )"
        },
        "verifythatstudentindoeshaveemergencycontactphonenumberoftypewithnumberandextension()": {
          "name": "Verify_that_student__in__does_have_Emergency_Contact_Phone_Number__of_type__with_number__and_extension__",
          "key": "verifythatstudentindoeshaveemergencycontactphonenumberoftypewithnumberandextension()",
          "definition": "Verify_that_student__in__does_have_Emergency_Contact_Phone_Number__of_type__with_number__and_extension__(string studentName, string className, int contactNumber, string phoneNumberType, string phoneNumber, string extension)"
        },
        "studentinclassdoesnotcomplete()": {
          "name": "Student__in_class__does_not_complete",
          "key": "studentinclassdoesnotcomplete()",
          "definition": "Student__in_class__does_not_complete(string personName, string className)"
        },
        "verifythatstudentinhasspecialaccommodations()": {
          "name": "Verify_that_student__in__has_Special_Accommodations__",
          "key": "verifythatstudentinhasspecialaccommodations()",
          "definition": "Verify_that_student__in__has_Special_Accommodations__(string studentName, string className, string accommodationStr)"
        }
      },
      "key": "studentmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "StudentManagement",
      "instance-name": "StudentManagement"
    },
    "divisionmanagement": {
      "namespace": "",
      "methods": {
        "createanactivedivisionnamedforacademy()": {
          "name": "Create_an_active_division_named__for_academy__",
          "key": "createanactivedivisionnamedforacademy()",
          "definition": "Create_an_active_division_named__for_academy__(string divisionName, string academyName)"
        },
        "setdivisionactive()": {
          "name": "Set_division__active",
          "key": "setdivisionactive()",
          "definition": "Set_division__active(string divisionName)"
        }
      },
      "key": "divisionmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "DivisionManagement",
      "instance-name": "DivisionManagement"
    },
    "audittrailmanagement": {
      "namespace": "",
      "methods": {
        "verifyanauditrecordcontainingfromdoesnotexist()": {
          "name": "Verify_an_audit_record_containing__from__does_not_exist",
          "key": "verifyanauditrecordcontainingfromdoesnotexist()",
          "definition": "Verify_an_audit_record_containing__from__does_not_exist(string what, string login)"
        },
        "verifyexportauditimpacted()": {
          "name": "Verify_export_audit_impacted__",
          "key": "verifyexportauditimpacted()",
          "definition": "Verify_export_audit_impacted__(string impactedPerson)"
        },
        "verifyanauditrecordcontainingfromexists()": {
          "name": "Verify_an_audit_record_containing__from__exists",
          "key": "verifyanauditrecordcontainingfromexists()",
          "definition": "Verify_an_audit_record_containing__from__exists(string what, string login)"
        },
        "verifyexportauditimpactedtotalpeople()": {
          "name": "Verify_export_audit_impacted__total_people",
          "key": "verifyexportauditimpactedtotalpeople()",
          "definition": "Verify_export_audit_impacted__total_people(int count)"
        },
        "considerexportauditrecordforfrom()": {
          "name": "Consider_export_audit_record_for__from__",
          "key": "considerexportauditrecordforfrom()",
          "definition": "Consider_export_audit_record_for__from__(string what, string login)"
        },
        "verifyanauditrecordforfromexists()": {
          "name": "Verify_an_audit_record_for__from__exists",
          "key": "verifyanauditrecordforfromexists()",
          "definition": "Verify_an_audit_record_for__from__exists(string what, string login)"
        },
        "addauditrecordforactivity()": {
          "name": "AddAuditRecordForActivity",
          "key": "addauditrecordforactivity()",
          "definition": "AddAuditRecordForActivity(ActivityAuditRecordType modificationType, string activityName, string className)"
        },
        "verifyexportauditdidnotimpactanypeople()": {
          "name": "Verify_export_audit_did_not_impact_any_people",
          "key": "verifyexportauditdidnotimpactanypeople()",
          "definition": "Verify_export_audit_did_not_impact_any_people()"
        }
      },
      "key": "audittrailmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "AuditTrailManagement",
      "instance-name": "AuditTrailManagement"
    },
    "xadracadisbasictests": {
      "namespace": "",
      "methods": {
        "getscriptsafevalueignoresstandalonelessthansigns()": {
          "name": "GetScriptSafeValueIgnoresStandaloneLessThanSigns",
          "key": "getscriptsafevalueignoresstandalonelessthansigns()",
          "definition": "GetScriptSafeValueIgnoresStandaloneLessThanSigns()"
        },
        "getscriptsafevaluecodesscripttags()": {
          "name": "GetScriptSafeValueCodesScriptTags",
          "key": "getscriptsafevaluecodesscripttags()",
          "definition": "GetScriptSafeValueCodesScriptTags()"
        },
        "getscriptsafevaluereturnskey()": {
          "name": "GetScriptSafeValueReturnsKey",
          "key": "getscriptsafevaluereturnskey()",
          "definition": "GetScriptSafeValueReturnsKey()"
        }
      },
      "key": "xadracadisbasictests",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "XadrAcadisBasicTests",
      "instance-name": "XadrAcadisBasicTests"
    },
    "getpersoncompletedeventargs": {
      "namespace": "",
      "methods": {
        
      },
      "key": "getpersoncompletedeventargs",
      "is-parent": false,
      "parent-name": null,
      "class-name": "GetPersonCompletedEventArgs",
      "instance-name": "GetPersonCompletedEventArgs"
    },
    "classsearch": {
      "namespace": "",
      "methods": {
        "resultcountgreaterthan()": {
          "name": "Result_Count_Greater_Than",
          "key": "resultcountgreaterthan()",
          "definition": "Result_Count_Greater_Than(int expected)"
        },
        "resultcountequals()": {
          "name": "Result_Count_Equals",
          "key": "resultcountequals()",
          "definition": "Result_Count_Equals(int expected)"
        },
        "search()": {
          "name": "Search",
          "key": "search()",
          "definition": "Search()"
        }
      },
      "key": "classsearch",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "ClassSearch",
      "instance-name": "ClassSearch"
    },
    "grademanagementfnh": {
      "namespace": "",
      "methods": {
        "enteronpassfailtestfor()": {
          "name": "enter_on_passfailtest_for__",
          "key": "enteronpassfailtestfor()",
          "definition": "enter_on_passfailtest_for__(string passFail, string student)"
        },
        "testscoreisnotrecorded()": {
          "name": "Test_score_is_not_recorded",
          "key": "testscoreisnotrecorded()",
          "definition": "Test_score_is_not_recorded()"
        },
        "enterattemptscoresofforon()": {
          "name": "enter_attempt_scores_of__for__on__",
          "key": "enterattemptscoresofforon()",
          "definition": "enter_attempt_scores_of__for__on__(string attempts, string student, string testName)"
        },
        "enterattemptscoreofforon()": {
          "name": "enter_attempt_score_of__for__on__",
          "key": "enterattemptscoreofforon()",
          "definition": "enter_attempt_score_of__for__on__(string attempts, string student, string testName)"
        },
        "takegradeis()": {
          "name": "take_grade_is",
          "key": "takegradeis()",
          "definition": "take_grade_is(decimal grade)"
        },
        "verifythattesthasnocomment()": {
          "name": "Verify_that_test_has_no_comment",
          "key": "verifythattesthasnocomment()",
          "definition": "Verify_that_test_has_no_comment()"
        },
        "studentthetake()": {
          "name": "student_the_take",
          "key": "studentthetake()",
          "definition": "student_the_take(string pass)"
        },
        "verifythattestwastakenon()": {
          "name": "Verify_that_test_was_taken_on__",
          "key": "verifythattestwastakenon()",
          "definition": "Verify_that_test_was_taken_on__(DateTime date)"
        },
        "enterandsavescoresofforonin()": {
          "name": "enter_and_save_scores_of__for__on__in__",
          "key": "enterandsavescoresofforonin()",
          "definition": "enter_and_save_scores_of__for__on__in__(string attempts, string studentName, string testName, string className)"
        },
        "setweaponmaketoandmodelto()": {
          "name": "Set_weapon_make_to__and_model_to__",
          "key": "setweaponmaketoandmodelto()",
          "definition": "Set_weapon_make_to__and_model_to__(string makeName, string modelName)"
        },
        "verifyactivitygradeforonis()": {
          "name": "Verify_activity_grade_for__on__is__",
          "key": "verifyactivitygradeforonis()",
          "definition": "Verify_activity_grade_for__on__is__(string studentName, string activityName, decimal grade)"
        },
        "verifystudentthetest()": {
          "name": "Verify_student_the_test",
          "key": "verifystudentthetest()",
          "definition": "Verify_student_the_test(Pass passed)"
        },
        "verifythatitemresultis()": {
          "name": "Verify_that_item__result_is__",
          "key": "verifythatitemresultis()",
          "definition": "Verify_that_item__result_is__(string itemText, string result)"
        },
        "getstudenttestrecordfor()": {
          "name": "Get_student_test_record_for__",
          "key": "getstudenttestrecordfor()",
          "definition": "Get_student_test_record_for__(string studentName)"
        },
        "setweaponserialnumberto()": {
          "name": "Set_weapon_serial_number_to__",
          "key": "setweaponserialnumberto()",
          "definition": "Set_weapon_serial_number_to__(string serialNumber)"
        },
        "verifythatpartattemptwascompleted()": {
          "name": "Verify_that_part__attempt__was_completed",
          "key": "verifythatpartattemptwascompleted()",
          "definition": "Verify_that_part__attempt__was_completed(string partHeader, int attemptNumber)"
        },
        "verifythatparthascomment()": {
          "name": "Verify_that_part__has_comment__",
          "key": "verifythatparthascomment()",
          "definition": "Verify_that_part__has_comment__(string partHeader, string comment)"
        },
        "verifythattesthasnodaterecorded()": {
          "name": "Verify_that_test_has_no_date_recorded",
          "key": "verifythattesthasnodaterecorded()",
          "definition": "Verify_that_test_has_no_date_recorded()"
        },
        "recordedtestgradeis()": {
          "name": "recorded_test_grade_is",
          "key": "recordedtestgradeis()",
          "definition": "recorded_test_grade_is(decimal grade)"
        },
        "studentthetest()": {
          "name": "student_the_test",
          "key": "studentthetest()",
          "definition": "student_the_test(string pass)"
        },
        "verifythatattemptresultis()": {
          "name": "Verify_that_attempt__result_is__",
          "key": "verifythatattemptresultis()",
          "definition": "Verify_that_attempt__result_is__(int attemptNumber, string result)"
        },
        "verifystudentpart()": {
          "name": "Verify_student__part__",
          "key": "verifystudentpart()",
          "definition": "Verify_student__part__(Pass passed, string partHeader)"
        },
        "enterattemptscoresofforontakenonthengradeandsavetest()": {
          "name": "enter_attempt_scores_of__for__on__taken_on__then_grade_and_save_test",
          "key": "enterattemptscoresofforontakenonthengradeandsavetest()",
          "definition": "enter_attempt_scores_of__for__on__taken_on__then_grade_and_save_test(string attempts, string student, string testName, DateTime date)"
        },
        "verifythattesthastakes()": {
          "name": "Verify_that_test_has__takes",
          "key": "verifythattesthastakes()",
          "definition": "Verify_that_test_has__takes(int numTakes)"
        },
        "gettestfromclassactivity()": {
          "name": "Get_test__from_class__activity__",
          "key": "gettestfromclassactivity()",
          "definition": "Get_test__from_class__activity__(string testName, string className, string activityName)"
        },
        "verifythattesthascomment()": {
          "name": "Verify_that_test_has_comment__",
          "key": "verifythattesthascomment()",
          "definition": "Verify_that_test_has_comment__(string comment)"
        },
        "verifythatpartattemptresultis()": {
          "name": "Verify_that_part__attempt__result_is__",
          "key": "verifythatpartattemptresultis()",
          "definition": "Verify_that_part__attempt__result_is__(string partHeader, int attemptNumber, string result)"
        },
        "savestudenttest()": {
          "name": "save_student_test",
          "key": "savestudenttest()",
          "definition": "save_student_test()"
        },
        "gettestfromclass()": {
          "name": "get_test__from_class__",
          "key": "gettestfromclass()",
          "definition": "get_test__from_class__( string testName, string className )"
        },
        "recordedtestgradeforpartis()": {
          "name": "Recorded_test_grade_for_part__is__",
          "key": "recordedtestgradeforpartis()",
          "definition": "Recorded_test_grade_for_part__is__(string partHeader, decimal grade)"
        },
        "verifytransferresultforoninhasgradeandpassfail()": {
          "name": "verify_transfer_result_for__on__in__has_grade__and_passfail__",
          "key": "verifytransferresultforoninhasgradeandpassfail()",
          "definition": "verify_transfer_result_for__on__in__has_grade__and_passfail__(string studentName, string testName, string className, string grade, string passFail)"
        },
        "verifyactivity()": {
          "name": "Verify____activity__",
          "key": "verifyactivity()",
          "definition": "Verify____activity__(string studentName, Pass pass, string activityName)"
        },
        "enterattemptscoresofforonthengradeandsavetest()": {
          "name": "enter_attempt_scores_of__for__on__then_grade_and_save_test",
          "key": "enterattemptscoresofforonthengradeandsavetest()",
          "definition": "enter_attempt_scores_of__for__on__then_grade_and_save_test(string attempts, string student, string testName)"
        },
        "recordedtestscoreforpartis()": {
          "name": "Recorded_test_score_for_part__is__",
          "key": "recordedtestscoreforpartis()",
          "definition": "Recorded_test_score_for_part__is__(string partHeader, decimal score)"
        },
        "waivefor()": {
          "name": "Waive__for",
          "key": "waivefor()",
          "definition": "Waive__for(string testName, string student)"
        },
        "recordedtestscoreis()": {
          "name": "recorded_test_score_is",
          "key": "recordedtestscoreis()",
          "definition": "recorded_test_score_is(decimal score)"
        },
        "verifythatattemptwasnotcompleted()": {
          "name": "Verify_that_attempt__was_not_completed",
          "key": "verifythatattemptwasnotcompleted()",
          "definition": "Verify_that_attempt__was_not_completed(int attemptNumber)"
        },
        "datetakenis()": {
          "name": "date_taken_is__",
          "key": "datetakenis()",
          "definition": "date_taken_is__(DateTime dateTaken)"
        },
        "takescoreis()": {
          "name": "take_score_is",
          "key": "takescoreis()",
          "definition": "take_score_is(decimal score)"
        },
        "enterattemptscoresofforontakenon()": {
          "name": "enter_attempt_scores_of__for__on__taken_on__",
          "key": "enterattemptscoresofforontakenon()",
          "definition": "enter_attempt_scores_of__for__on__taken_on__(string attempts, string student, string testName, DateTime date)"
        },
        "verifystudenttestwasobservedby()": {
          "name": "Verify_student_test_was_observed_by",
          "key": "verifystudenttestwasobservedby()",
          "definition": "Verify_student_test_was_observed_by(string observerName)"
        },
        "enterattemptscoresofforonpartof()": {
          "name": "enter_attempt_scores__of_for__on_part__of__",
          "key": "enterattemptscoresofforonpartof()",
          "definition": "enter_attempt_scores__of_for__on_part__of__(string attempts, string student, string partName, string testName)"
        },
        "gradestudenttest()": {
          "name": "grade_student_test",
          "key": "gradestudenttest()",
          "definition": "grade_student_test()"
        },
        "verifythatpartattemptwasnotcompleted()": {
          "name": "Verify_that_part__attempt__was_not_completed",
          "key": "verifythatpartattemptwasnotcompleted()",
          "definition": "Verify_that_part__attempt__was_not_completed(string partHeader, int attemptNumber)"
        },
        "verifynostudenttestrecordfor()": {
          "name": "Verify_no_student_test_record_for__",
          "key": "verifynostudenttestrecordfor()",
          "definition": "Verify_no_student_test_record_for__(string studentName)"
        },
        "verifythatattemptwascompleted()": {
          "name": "Verify_that_attempt__was_completed",
          "key": "verifythatattemptwascompleted()",
          "definition": "Verify_that_attempt__was_completed(int attemptNumber)"
        }
      },
      "key": "grademanagementfnh",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "GradeManagementFNH",
      "instance-name": "GradeManagementFNH"
    },
    "exceptionthrowingassertlistener": {
      "namespace": "",
      "methods": {
        "writeline()": {
          "name": "WriteLine",
          "key": "writeline()",
          "definition": "WriteLine(string message)"
        },
        "fail()": {
          "name": "Fail",
          "key": "fail()",
          "definition": "Fail(string message, string detailMessage)"
        },
        "write()": {
          "name": "Write",
          "key": "write()",
          "definition": "Write(string message)"
        }
      },
      "key": "exceptionthrowingassertlistener",
      "is-parent": false,
      "parent-name": null,
      "class-name": "ExceptionThrowingAssertListener",
      "instance-name": "ExceptionThrowingAssertListener"
    },
    "portalclasstestresultsreadonly": {
      "namespace": "",
      "methods": {
        "bindclassenrollmentlist()": {
          "name": "BindClassEnrollmentList",
          "key": "bindclassenrollmentlist()",
          "definition": "BindClassEnrollmentList(IEnumerable<PortalClassTestEntryListItemDto> dtos)"
        },
        "verifyalreadyhasgrade()": {
          "name": "Verify_already_has_grade",
          "key": "verifyalreadyhasgrade()",
          "definition": "Verify_already_has_grade()"
        },
        "verifyofstudentssubmittedby()": {
          "name": "Verify__of__students_submitted__by__",
          "key": "verifyofstudentssubmittedby()",
          "definition": "Verify__of__students_submitted__by__(int resultsEntered, int students, DateTime submissionDate, string submittedBy)"
        },
        "verifypercentageresultis()": {
          "name": "Verify_percentage_result_is__",
          "key": "verifypercentageresultis()",
          "definition": "Verify_percentage_result_is__(decimal score)"
        },
        "waitforclicktolandusonviewpage()": {
          "name": "Wait_for_click_to_land_us_on_view_page",
          "key": "waitforclicktolandusonviewpage()",
          "definition": "Wait_for_click_to_land_us_on_view_page()"
        },
        "verifytestdateis()": {
          "name": "Verify_test_date_is__",
          "key": "verifytestdateis()",
          "definition": "Verify_test_date_is__(DateTime testDate)"
        },
        "considerstudent()": {
          "name": "Consider_student__",
          "key": "considerstudent()",
          "definition": "Consider_student__(string studentName, string academyId)"
        },
        "verifypassfailresultis()": {
          "name": "Verify_pass_fail_result_is__",
          "key": "verifypassfailresultis()",
          "definition": "Verify_pass_fail_result_is__(string passFail)"
        },
        "verifytestdateisnotset()": {
          "name": "Verify_test_date_is_not_set",
          "key": "verifytestdateisnotset()",
          "definition": "Verify_test_date_is_not_set()"
        },
        "verifyresultisnotset()": {
          "name": "Verify_result_is_not_set",
          "key": "verifyresultisnotset()",
          "definition": "Verify_result_is_not_set()"
        },
        "verifycommentsare()": {
          "name": "Verify_comments_are__",
          "key": "verifycommentsare()",
          "definition": "Verify_comments_are__(string comments)"
        }
      },
      "key": "portalclasstestresultsreadonly",
      "is-parent": false,
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalClassTestResultsReadonlyWorkflow",
      "instance-name": "PortalClassTestResultsReadonly"
    },
    "testopiathreadcontext": {
      "namespace": "",
      "methods": {
        "dispose()": {
          "name": "Dispose",
          "key": "dispose()",
          "definition": "Dispose()"
        }
      },
      "key": "testopiathreadcontext",
      "is-parent": false,
      "parent-name": null,
      "class-name": "TestopiaThreadContext",
      "instance-name": "TestopiaThreadContext"
    },
    "rulesmanagement": {
      "namespace": "",
      "methods": {
        "removefacilityrulefromblock()": {
          "name": "Remove_facility_rule_from_block",
          "key": "removefacilityrulefromblock()",
          "definition": "Remove_facility_rule_from_block(string blockName)"
        },
        "rulerequirescertificationin()": {
          "name": "Rule__requires_certification_in__",
          "key": "rulerequirescertificationin()",
          "definition": "Rule__requires_certification_in__(string ruleName, string certName)"
        },
        "addpersonnelruletoblock()": {
          "name": "Add_personnel_rule_to_block",
          "key": "addpersonnelruletoblock()",
          "definition": "Add_personnel_rule_to_block(string ruleName, string blockName)"
        },
        "verifyactivityinscheduledclasshasfacilityrulerequiring()": {
          "name": "Verify_activity_in_scheduled_class_has_facility_rule_requiring",
          "key": "verifyactivityinscheduledclasshasfacilityrulerequiring()",
          "definition": "Verify_activity_in_scheduled_class_has_facility_rule_requiring(string activityName, string className, string categoryName)"
        },
        "createfacilityrulerequiringfacilitiesnamed()": {
          "name": "Create_facility_rule_requiring_facilities_named",
          "key": "createfacilityrulerequiringfacilitiesnamed()",
          "definition": "Create_facility_rule_requiring_facilities_named(string ruleName, int count, string facilityName)"
        },
        "verifyactivityinscheduledclasshaspersonnelrulerequiringinstructors()": {
          "name": "Verify_activity_in_scheduled_class_has_personnel_rule_requiring__instructors",
          "key": "verifyactivityinscheduledclasshaspersonnelrulerequiringinstructors()",
          "definition": "Verify_activity_in_scheduled_class_has_personnel_rule_requiring__instructors(string activityName, string className, int numInstructors)"
        },
        "usingactivityschedule()": {
          "name": "using_Activity_Schedule",
          "key": "usingactivityschedule()",
          "definition": "using_Activity_Schedule( string activityScheduleName )"
        },
        "verifyblockhasfacilityrule()": {
          "name": "Verify_block_has_facility_rule",
          "key": "verifyblockhasfacilityrule()",
          "definition": "Verify_block_has_facility_rule(string blockName, string ruleName)"
        },
        "verifyschedulehasfacilityrule()": {
          "name": "Verify_schedule_has_facility_rule",
          "key": "verifyschedulehasfacilityrule()",
          "definition": "Verify_schedule_has_facility_rule(string scheduleName, string ruleName)"
        },
        "verifypersonnelruleappliestoschedulingactivity()": {
          "name": "Verify_personnel_rule_applies_to_scheduling_activity",
          "key": "verifypersonnelruleappliestoschedulingactivity()",
          "definition": "Verify_personnel_rule_applies_to_scheduling_activity( string ruleName, string activityName )"
        },
        "verifyscheduledclasshaspersonnelrulerequiringinstructors()": {
          "name": "Verify_scheduled_class_has_personnel_rule_requiring__instructors",
          "key": "verifyscheduledclasshaspersonnelrulerequiringinstructors()",
          "definition": "Verify_scheduled_class_has_personnel_rule_requiring__instructors(string className, int numInstructors)"
        },
        "verifyblockinactivityinscheduledclasshaspersonnelrulerequiringinstructors()": {
          "name": "Verify_block_in_activity_in_scheduled_class_has_personnel_rule_requiring_instructors",
          "key": "verifyblockinactivityinscheduledclasshaspersonnelrulerequiringinstructors()",
          "definition": "Verify_block_in_activity_in_scheduled_class_has_personnel_rule_requiring_instructors(string blockName, string activityName, string className, int numInstructors)"
        },
        "verifyblockhaspersonnelrule()": {
          "name": "Verify_block_has_personnel_rule",
          "key": "verifyblockhaspersonnelrule()",
          "definition": "Verify_block_has_personnel_rule(string blockName, string ruleName)"
        },
        "createfacilityrulerequiringfacilitynamed()": {
          "name": "Create_facility_rule_requiring_facility_named",
          "key": "createfacilityrulerequiringfacilitynamed()",
          "definition": "Create_facility_rule_requiring_facility_named(string ruleName, string facilityName)"
        },
        "rulerequiresdivisonof()": {
          "name": "Rule__requires_divison_of__",
          "key": "rulerequiresdivisonof()",
          "definition": "Rule__requires_divison_of__( string ruleName, string divisionName )"
        },
        "verifyactivityinschedulehaspersonnelrule()": {
          "name": "Verify_activity_in_schedule_has_personnel_rule",
          "key": "verifyactivityinschedulehaspersonnelrule()",
          "definition": "Verify_activity_in_schedule_has_personnel_rule(string activityName, string scheduleName, string ruleName)"
        },
        "addpersonnelruletoschedule()": {
          "name": "Add_personnel_rule_to_schedule_",
          "key": "addpersonnelruletoschedule()",
          "definition": "Add_personnel_rule_to_schedule_(string ruleName, string scheduleName)"
        },
        "ruleisanaffinityrule()": {
          "name": "Rule_is_an_affinity_rule",
          "key": "ruleisanaffinityrule()",
          "definition": "Rule_is_an_affinity_rule(string ruleName)"
        },
        "verifypersonnelruleappliestoschedule()": {
          "name": "Verify_personnel_rule_applies_to_schedule_",
          "key": "verifypersonnelruleappliestoschedule()",
          "definition": "Verify_personnel_rule_applies_to_schedule_( string ruleName, string scheduleName )"
        },
        "addpersonnelruletoschedulingactivity()": {
          "name": "Add_personnel_rule__to_scheduling_activity__",
          "key": "addpersonnelruletoschedulingactivity()",
          "definition": "Add_personnel_rule__to_scheduling_activity__(string ruleName, string activityName)"
        },
        "createpersonnelrulerequiringinstructors()": {
          "name": "Create_personnel_rule_requiring_instructors",
          "key": "createpersonnelrulerequiringinstructors()",
          "definition": "Create_personnel_rule_requiring_instructors(string ruleName, int num)"
        },
        "verifypersonnelruleappliestoblock()": {
          "name": "Verify_personnel_rule_applies_to_block",
          "key": "verifypersonnelruleappliestoblock()",
          "definition": "Verify_personnel_rule_applies_to_block(string ruleName, string blockName)"
        },
        "createequipmentrulerequiringequipmentnamed()": {
          "name": "Create_equipment_rule_requiring_equipment_named",
          "key": "createequipmentrulerequiringequipmentnamed()",
          "definition": "Create_equipment_rule_requiring_equipment_named(string ruleName, int count, string equipmentName)"
        },
        "usingclassschedule()": {
          "name": "using_class_schedule_",
          "key": "usingclassschedule()",
          "definition": "using_class_schedule_( string classScheduleName )"
        },
        "facilityruleisanaffinityrule()": {
          "name": "Facility_rule_is_an_affinity_rule",
          "key": "facilityruleisanaffinityrule()",
          "definition": "Facility_rule_is_an_affinity_rule(string ruleName)"
        },
        "addfacilityruletoschedule()": {
          "name": "Add_facility_rule_to_schedule_",
          "key": "addfacilityruletoschedule()",
          "definition": "Add_facility_rule_to_schedule_(string ruleName, string scheduleName)"
        },
        "verifyactivityinschedulehasfacilityrule()": {
          "name": "Verify_activity_in_schedule_has_facility_rule",
          "key": "verifyactivityinschedulehasfacilityrule()",
          "definition": "Verify_activity_in_schedule_has_facility_rule(string activityName, string scheduleName, string ruleName)"
        },
        "removefacilityrulefromactivityoverlay()": {
          "name": "Remove_facility_rule_from_activity_overlay",
          "key": "removefacilityrulefromactivityoverlay()",
          "definition": "Remove_facility_rule_from_activity_overlay(string activityName)"
        },
        "verifyfacilityrulewaspersisted()": {
          "name": "Verify_facility_rule_was_persisted",
          "key": "verifyfacilityrulewaspersisted()",
          "definition": "Verify_facility_rule_was_persisted(string ruleName)"
        },
        "removefacilityrulefromactivity()": {
          "name": "Remove_facility_rule_from_activity",
          "key": "removefacilityrulefromactivity()",
          "definition": "Remove_facility_rule_from_activity(string activityName)"
        },
        "verifyfacilityruleappliestoschedule()": {
          "name": "Verify_facility_rule_applies_to_schedule__",
          "key": "verifyfacilityruleappliestoschedule()",
          "definition": "Verify_facility_rule_applies_to_schedule__( string ruleName, string scheduleName )"
        },
        "addfacilityruletoblock()": {
          "name": "Add_facility_rule_to_block",
          "key": "addfacilityruletoblock()",
          "definition": "Add_facility_rule_to_block(string ruleName, string blockName)"
        },
        "createfacilityrulerequiring()": {
          "name": "Create_facility_rule_requiring",
          "key": "createfacilityrulerequiring()",
          "definition": "Create_facility_rule_requiring(string ruleName, int count, string categoryName)"
        },
        "addfacilityruletoschedulingactivity()": {
          "name": "Add_facility_rule_to_scheduling_activity",
          "key": "addfacilityruletoschedulingactivity()",
          "definition": "Add_facility_rule_to_scheduling_activity(string ruleName, string activityName)"
        },
        "rulecanbefulfilledbyaninstructorwithanylevelofauthorization()": {
          "name": "Rule__can_be_fulfilled_by_an_instructor_with_any_level_of_authorization",
          "key": "rulecanbefulfilledbyaninstructorwithanylevelofauthorization()",
          "definition": "Rule__can_be_fulfilled_by_an_instructor_with_any_level_of_authorization( string ruleName )"
        },
        "removefacilityrulefromclass()": {
          "name": "Remove_facility_rule_from_class",
          "key": "removefacilityrulefromclass()",
          "definition": "Remove_facility_rule_from_class(string className)"
        },
        "verifypersonnelrulewaspersisted()": {
          "name": "verify_personnel_rule__was_persisted",
          "key": "verifypersonnelrulewaspersisted()",
          "definition": "verify_personnel_rule__was_persisted( string ruleName )"
        },
        "addequipmentruletoblock()": {
          "name": "Add_equipment_rule_to_block",
          "key": "addequipmentruletoblock()",
          "definition": "Add_equipment_rule_to_block(string ruleName, string blockName)"
        },
        "verifyfacilityruleappliestoschedulingactivity()": {
          "name": "Verify_facility_rule_applies_to_scheduling_activity",
          "key": "verifyfacilityruleappliestoschedulingactivity()",
          "definition": "Verify_facility_rule_applies_to_scheduling_activity( string ruleName, string activityName )"
        },
        "verifyschedulehaspersonnelrule()": {
          "name": "Verify_schedule_has_personnel_rule",
          "key": "verifyschedulehaspersonnelrule()",
          "definition": "Verify_schedule_has_personnel_rule(string scheduleName, string ruleName)"
        },
        "verifyfacilityruleappliestoblock()": {
          "name": "Verify_facility_rule_applies_to_block",
          "key": "verifyfacilityruleappliestoblock()",
          "definition": "Verify_facility_rule_applies_to_block(string ruleName, string blockName)"
        },
        "verifyscheduledclasshasfacilityrulerequiringcategory()": {
          "name": "Verify_scheduled_class_has_facility_rule_requiring_category",
          "key": "verifyscheduledclasshasfacilityrulerequiringcategory()",
          "definition": "Verify_scheduled_class_has_facility_rule_requiring_category(string className, string categoryName)"
        },
        "createequipmentrulerequiring()": {
          "name": "Create_equipment_rule_requiring",
          "key": "createequipmentrulerequiring()",
          "definition": "Create_equipment_rule_requiring(string ruleName, int count, string categoryName)"
        },
        "rulecanbefulfilledbyaninstructorwithauthorization()": {
          "name": "Rule__can_be_fulfilled_by_an_instructor_with__authorization",
          "key": "rulecanbefulfilledbyaninstructorwithauthorization()",
          "definition": "Rule__can_be_fulfilled_by_an_instructor_with__authorization( string ruleName, string authLevelName )"
        },
        "verifyblockinactivityinscheduledclasshasfacilityrulerequiring()": {
          "name": "Verify_block_in_activity_in_scheduled_class_has_facility_rule_requiring",
          "key": "verifyblockinactivityinscheduledclasshasfacilityrulerequiring()",
          "definition": "Verify_block_in_activity_in_scheduled_class_has_facility_rule_requiring(string blockName, string activityName, string className, string categoryName)"
        }
      },
      "key": "rulesmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "RulesManagement",
      "instance-name": "RulesManagement"
    },
    "rolemanagement": {
      "namespace": "",
      "methods": {
        "assignroletouser()": {
          "name": "Assign_role_to_user",
          "key": "assignroletouser()",
          "definition": "Assign_role_to_user(string roleName, string userName)"
        }
      },
      "key": "rolemanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "RoleManagement",
      "instance-name": "RoleManagement"
    },
    "testopiamonitor": {
      "namespace": "",
      "methods": {
        "onsuitecompleted()": {
          "name": "OnSuiteCompleted",
          "key": "onsuitecompleted()",
          "definition": "OnSuiteCompleted()"
        },
        "onscenariostarted()": {
          "name": "OnScenarioStarted",
          "key": "onscenariostarted()",
          "definition": "OnScenarioStarted(TestopiaAPI.ScenarioContext context)"
        },
        "onscenariocompleted()": {
          "name": "OnScenarioCompleted",
          "key": "onscenariocompleted()",
          "definition": "OnScenarioCompleted(ScenarioRunResults results)"
        },
        "onsuitestarted()": {
          "name": "OnSuiteStarted",
          "key": "onsuitestarted()",
          "definition": "OnSuiteStarted(Arguments testopiaArguments)"
        },
        "onstarted()": {
          "name": "OnWorkflowStarted",
          "key": "onstarted()",
          "definition": "OnWorkflowStarted(IWorkflowBlock workflow)"
        }
      },
      "key": "testopiamonitor",
      "is-parent": false,
      "parent-name": null,
      "class-name": "TestopiaMonitor",
      "instance-name": "TestopiaMonitor"
    },
    "testmanagement": {
      "namespace": "",
      "methods": {
        "definenumerictestnamedwithattemptslabeled()": {
          "name": "Define_numeric_test_named__with__attempts_labeled__",
          "key": "definenumerictestnamedwithattemptslabeled()",
          "definition": "Define_numeric_test_named__with__attempts_labeled__(string testName, int numberOfAttempts, string attemptLabel)"
        },
        "setminimumnumberofpartsrequiredtopassto()": {
          "name": "Set_Minimum_Number_Of_Parts_Required_To_Pass_To",
          "key": "setminimumnumberofpartsrequiredtopassto()",
          "definition": "Set_Minimum_Number_Of_Parts_Required_To_Pass_To(int minPassingParts)"
        },
        "definemultiparttestnamed()": {
          "name": "define_multipart_test_named__",
          "key": "definemultiparttestnamed()",
          "definition": "define_multipart_test_named__(string testName)"
        },
        "testisnotgraded()": {
          "name": "test_is_not_graded",
          "key": "testisnotgraded()",
          "definition": "test_is_not_graded()"
        },
        "defineautomatedtestingpercentagetestnamed()": {
          "name": "define_automated_testing_percentage_test_named",
          "key": "defineautomatedtestingpercentagetestnamed()",
          "definition": "define_automated_testing_percentage_test_named(string testName)"
        },
        "scoreswillbecomparedtoapassingtimeofandnogradewillberecorded()": {
          "name": "scores_will_be_compared_to_a_passing_time_of_and_no_grade_will_be_recorded",
          "key": "scoreswillbecomparedtoapassingtimeofandnogradewillberecorded()",
          "definition": "scores_will_be_compared_to_a_passing_time_of_and_no_grade_will_be_recorded(string time)"
        },
        "collectweaponmakeandmodel()": {
          "name": "collect_weapon_make_and_model",
          "key": "collectweaponmakeandmodel()",
          "definition": "collect_weapon_make_and_model()"
        },
        "theattemptpassinggradeis()": {
          "name": "the_attempt_passing_grade_is",
          "key": "theattemptpassinggradeis()",
          "definition": "the_attempt_passing_grade_is(decimal grade)"
        },
        "assignacopyoftesttoactivityinclasswithname()": {
          "name": "Assign_a_copy_of_test__to_activity__in_class__with_name__",
          "key": "assignacopyoftesttoactivityinclasswithname()",
          "definition": "Assign_a_copy_of_test__to_activity__in_class__with_name__(string testTemplateName, string activityName, string classDefinitionName, string newTestName)"
        },
        "addtheeloto()": {
          "name": "add_the_elo_to",
          "key": "addtheeloto()",
          "definition": "add_the_elo_to(string eloName, string itemName)"
        },
        "assignscaletotest()": {
          "name": "Assign_scale_to_test",
          "key": "assignscaletotest()",
          "definition": "Assign_scale_to_test(string scaleName)"
        },
        "theoverallpassinggradeis()": {
          "name": "The_overall_passing_grade_is",
          "key": "theoverallpassinggradeis()",
          "definition": "The_overall_passing_grade_is(decimal passing)"
        },
        "verifytesthasversionof()": {
          "name": "Verify_test_has_version_of",
          "key": "verifytesthasversionof()",
          "definition": "Verify_test_has_version_of(string testName, int version, string certMaster)"
        },
        "requirestudentstopassattemptstopassthetest()": {
          "name": "require_students_to_pass_attempts_to_pass_the_test",
          "key": "requirestudentstopassattemptstopassthetest()",
          "definition": "require_students_to_pass_attempts_to_pass_the_test(int minimumPassingAttempts)"
        },
        "setnumerictestscoringmethodto()": {
          "name": "set_numeric_test_scoring_method_to",
          "key": "setnumerictestscoringmethodto()",
          "definition": "set_numeric_test_scoring_method_to(string scoringMethod)"
        },
        "duplicatewithname()": {
          "name": "Duplicate__with_name__",
          "key": "duplicatewithname()",
          "definition": "Duplicate__with_name__(string testToCopy, string newTestName)"
        },
        "addanumericitemnamedpassingatandrangingbetweenand()": {
          "name": "add_a_numeric_item_named__passing_at__and_ranging_between__and__",
          "key": "addanumericitemnamedpassingatandrangingbetweenand()",
          "definition": "add_a_numeric_item_named__passing_at__and_ranging_between__and__(string itemName, decimal passingScore, decimal minPossible, decimal maxPossible)"
        },
        "settestallowsproctoraccessto()": {
          "name": "set_test_allows_proctor_access_to__",
          "key": "settestallowsproctoraccessto()",
          "definition": "set_test_allows_proctor_access_to__(bool allowProctorAccess)"
        },
        "withapositiveresultofandanegativeresultof()": {
          "name": "With_a_positive_result_of_and_a_negative_result_of",
          "key": "withapositiveresultofandanegativeresultof()",
          "definition": "With_a_positive_result_of_and_a_negative_result_of(string positive, string negative)"
        },
        "savetest()": {
          "name": "Save_test",
          "key": "savetest()",
          "definition": "Save_test()"
        },
        "defineapassfailchecklisttestnamed()": {
          "name": "define_a_pass_fail_checklist_test_named",
          "key": "defineapassfailchecklisttestnamed()",
          "definition": "define_a_pass_fail_checklist_test_named( string testName )"
        },
        "createtimedtestnamedusing()": {
          "name": "Create_Timed_Test_named_using",
          "key": "createtimedtestnamedusing()",
          "definition": "Create_Timed_Test_named_using( string testName, string scaleName )"
        },
        "definepercentagetestnamedwithminimumpassinggrade()": {
          "name": "Define_percentage_test_named_with_minimum_passing_grade",
          "key": "definepercentagetestnamedwithminimumpassinggrade()",
          "definition": "Define_percentage_test_named_with_minimum_passing_grade(string testName, decimal minPassingGrade)"
        },
        "retestsarenotallowed()": {
          "name": "Retests_are_not_allowed",
          "key": "retestsarenotallowed()",
          "definition": "Retests_are_not_allowed()"
        },
        "allowretakes()": {
          "name": "Allow_retakes",
          "key": "allowretakes()",
          "definition": "Allow_retakes(int numberOfRetakes)"
        },
        "definetimedtestnamed()": {
          "name": "Define_Timed_Test_named",
          "key": "definetimedtestnamed()",
          "definition": "Define_Timed_Test_named(string testName)"
        },
        "allowretakesforembeddedtestonactivity()": {
          "name": "Allow__retakes_for_embedded_test_on_activity__",
          "key": "allowretakesforembeddedtestonactivity()",
          "definition": "Allow__retakes_for_embedded_test_on_activity__(int numberOfRetakes, string activityName)"
        },
        "assigntoofclassintestgroup()": {
          "name": "assign__to___of_class__in_Test_Group__",
          "key": "assigntoofclassintestgroup()",
          "definition": "assign__to___of_class__in_Test_Group__(string testName, string activityName, string className, string groupName)"
        },
        "scaleontestwillcopywhensaved()": {
          "name": "Scale_on_test_will_copy_when_saved",
          "key": "scaleontestwillcopywhensaved()",
          "definition": "Scale_on_test_will_copy_when_saved(string scaleName, string testName)"
        },
        "waivedgradeis()": {
          "name": "waived_grade_is",
          "key": "waivedgradeis()",
          "definition": "waived_grade_is(decimal score)"
        },
        "noscoreorgradewillberecordedstudentmustpasstherequirednumberofpartstopass()": {
          "name": "no_score_or_grade_will_be_recorded_student_must_pass_the_required_number_of_parts_to_pass",
          "key": "noscoreorgradewillberecordedstudentmustpasstherequirednumberofpartstopass()",
          "definition": "no_score_or_grade_will_be_recorded_student_must_pass_the_required_number_of_parts_to_pass()"
        },
        "addacriticalnumericitemnamedpassingatandrangingbetweenand()": {
          "name": "add_a_critical_numeric_item_named__passing_at__and_ranging_between__and__",
          "key": "addacriticalnumericitemnamedpassingatandrangingbetweenand()",
          "definition": "add_a_critical_numeric_item_named__passing_at__and_ranging_between__and__(string itemName, decimal passingScore, decimal minPossible, decimal maxPossible)"
        },
        "addrawscoresfromalltestpartsand()": {
          "name": "Add_raw_scores_from_all_test_parts_and",
          "key": "addrawscoresfromalltestpartsand()",
          "definition": "Add_raw_scores_from_all_test_parts_and(string useScaleForGrading)"
        },
        "donotrecordagrade()": {
          "name": "do_not_record_a_grade",
          "key": "donotrecordagrade()",
          "definition": "do_not_record_a_grade()"
        },
        "definenumerictestnamedwithmaximumscoreofandminimumpassinggradeof()": {
          "name": "Define_numeric_test_named__with_maximum_score_of___and_minimum_passing_grade_of__",
          "key": "definenumerictestnamedwithmaximumscoreofandminimumpassinggradeof()",
          "definition": "Define_numeric_test_named__with_maximum_score_of___and_minimum_passing_grade_of__(string testName, decimal maximumScore, decimal minPassingGrade)"
        },
        "assignembeddedtesttoactivityin()": {
          "name": "Assign_embedded_test_to_activity__in__",
          "key": "assignembeddedtesttoactivityin()",
          "definition": "Assign_embedded_test_to_activity__in__(string activityName, string classDefName)"
        },
        "setpassfailscoringmethodto()": {
          "name": "set_pass_fail_scoring_method_to",
          "key": "setpassfailscoringmethodto()",
          "definition": "set_pass_fail_scoring_method_to(string scoringMethod)"
        },
        "assigntesttoactivityin()": {
          "name": "Assign_test__to_activity__in__",
          "key": "assigntesttoactivityin()",
          "definition": "Assign_test__to_activity__in__(string testName, string activityName, string classDefName)"
        },
        "scaleontestwillnotcopywhensaved()": {
          "name": "Scale_on_test_will_not_copy_when_saved",
          "key": "scaleontestwillnotcopywhensaved()",
          "definition": "Scale_on_test_will_not_copy_when_saved(string scaleName, string testName)"
        },
        "scoretestasofattempts()": {
          "name": "Score_test_as_of__attempts",
          "key": "scoretestasofattempts()",
          "definition": "Score_test_as_of__attempts(string scoringMethod, string topOrBottom, int numAttempts)"
        },
        "definenumerictestnamedwithattempts()": {
          "name": "Define_numeric_test_named__with__attempts",
          "key": "definenumerictestnamedwithattempts()",
          "definition": "Define_numeric_test_named__with__attempts(string testName, int numberOfAttempts)"
        },
        "mustpass()": {
          "name": "must_pass",
          "key": "mustpass()",
          "definition": "must_pass()"
        },
        "defineascoredchecklisttestnamed()": {
          "name": "define_a_scored_checklist_test_named",
          "key": "defineascoredchecklisttestnamed()",
          "definition": "define_a_scored_checklist_test_named( string testName )"
        },
        "addanumericitemnamedwithabbreviationpassingatandrangingbetweenand()": {
          "name": "add_a_numeric_item_named__with_abbreviation__passing_at__and_ranging_between__and__",
          "key": "addanumericitemnamedwithabbreviationpassingatandrangingbetweenand()",
          "definition": "add_a_numeric_item_named__with_abbreviation__passing_at__and_ranging_between__and__(string itemName, string itemAbbreviation, decimal passingScore, decimal minPossible, decimal maxPossible)"
        },
        "verifystudentsareinprogress()": {
          "name": "Verify__students_are_in_progress",
          "key": "verifystudentsareinprogress()",
          "definition": "Verify__students_are_in_progress(int inProgress)"
        },
        "addacriticalnumericitemnamedwithabbreviationpassingatandrangingbetweenand()": {
          "name": "add_a_critical_numeric_item_named__with_abbreviation__passing_at__and_ranging_between__and__",
          "key": "addacriticalnumericitemnamedwithabbreviationpassingatandrangingbetweenand()",
          "definition": "add_a_critical_numeric_item_named__with_abbreviation__passing_at__and_ranging_between__and__(string itemName, string itemAbbreviation, decimal passingScore, decimal minPossible, decimal maxPossible)"
        },
        "verifymultiparttesthastests()": {
          "name": "Verify_multipart_test__has_tests__",
          "key": "verifymultiparttesthastests()",
          "definition": "Verify_multipart_test__has_tests__(string testName, List<string> testParts)"
        },
        "turntestpartsintoindividualpercentpartsand()": {
          "name": "Turn_test_parts_into_individual_percent_parts_and",
          "key": "turntestpartsintoindividualpercentpartsand()",
          "definition": "Turn_test_parts_into_individual_percent_parts_and(string useScaleForGrading)"
        },
        "setpassingretakepolicyto()": {
          "name": "set_passing_retake_policy_to",
          "key": "setpassingretakepolicyto()",
          "definition": "set_passing_retake_policy_to(string policy)"
        },
        "saveobservedtest()": {
          "name": "Save_Observed_Test",
          "key": "saveobservedtest()",
          "definition": "Save_Observed_Test( string testName )"
        },
        "setfailingretakepolicyto()": {
          "name": "set_failing_retake_policy_to",
          "key": "setfailingretakepolicyto()",
          "definition": "set_failing_retake_policy_to(string policy)"
        },
        "retestsandwaiversarenotallowed()": {
          "name": "retests_and_waivers_are_not_allowed",
          "key": "retestsandwaiversarenotallowed()",
          "definition": "retests_and_waivers_are_not_allowed()"
        },
        "defineatimedtestnamedwithmaximumscoreofandminimumpassinggradeof()": {
          "name": "Define_a_timed_Test_named__with_maximum_score_of___and_minimum_passing_grade_of__",
          "key": "defineatimedtestnamedwithmaximumscoreofandminimumpassinggradeof()",
          "definition": "Define_a_timed_Test_named__with_maximum_score_of___and_minimum_passing_grade_of__(string testName, decimal maximumScore, decimal minPassingGrade)"
        },
        "verifystudentshavepassed()": {
          "name": "Verify__students_have_passed",
          "key": "verifystudentshavepassed()",
          "definition": "Verify__students_have_passed(int passing)"
        },
        "addtestaspartwithheader()": {
          "name": "Add_test__as_part_with_header__",
          "key": "addtestaspartwithheader()",
          "definition": "Add_test__as_part_with_header__(string testName, string partName)"
        },
        "decimalsallowedonnumerictestis()": {
          "name": "decimals_allowed_on_numeric_test_is",
          "key": "decimalsallowedonnumerictestis()",
          "definition": "decimals_allowed_on_numeric_test_is(int numberofDecimals)"
        },
        "assignautomatedtesttemplate()": {
          "name": "Assign_automated_test__template__",
          "key": "assignautomatedtesttemplate()",
          "definition": "Assign_automated_test__template__(string testName, string templateName)"
        },
        "setallowedvaluesforitemto()": {
          "name": "set_allowed_values_for_item__to__",
          "key": "setallowedvaluesforitemto()",
          "definition": "set_allowed_values_for_item__to__(string itemName, string allowedValues)"
        },
        "allowattemptslabeled()": {
          "name": "Allow_attempts_labeled",
          "key": "allowattemptslabeled()",
          "definition": "Allow_attempts_labeled( int numAttempts, string attemptLabel )"
        },
        "collectweaponserialnumber()": {
          "name": "collect_weapon_serial_number",
          "key": "collectweaponserialnumber()",
          "definition": "collect_weapon_serial_number()"
        },
        "overridethegradewith0or100()": {
          "name": "override_the_grade_with_0_or_100",
          "key": "overridethegradewith0or100()",
          "definition": "override_the_grade_with_0_or_100()"
        },
        "defineasfirearmstest()": {
          "name": "Define_as_Firearms_Test",
          "key": "defineasfirearmstest()",
          "definition": "Define_as_Firearms_Test( string testName )"
        },
        "timedtestscoredby()": {
          "name": "Timed_Test_scored_by",
          "key": "timedtestscoredby()",
          "definition": "Timed_Test_scored_by(string scaleName)"
        },
        "calculateapercentagegrade()": {
          "name": "calculate_a_percentage_grade",
          "key": "calculateapercentagegrade()",
          "definition": "calculate_a_percentage_grade()"
        },
        "usescaletoassignrating()": {
          "name": "Use_scale_to_assign_rating",
          "key": "usescaletoassignrating()",
          "definition": "Use_scale_to_assign_rating()"
        },
        "setminimumoverallpassingscoretopercent()": {
          "name": "Set_Minimum_Overall_Passing_Score_To__Percent",
          "key": "setminimumoverallpassingscoretopercent()",
          "definition": "Set_Minimum_Overall_Passing_Score_To__Percent(decimal minPassing)"
        },
        "marktestasatrisk()": {
          "name": "mark_test_as_at_risk",
          "key": "marktestasatrisk()",
          "definition": "mark_test_as_at_risk()"
        },
        "usingtestnamed()": {
          "name": "Using_test_named__",
          "key": "usingtestnamed()",
          "definition": "Using_test_named__(string testName)"
        },
        "eachattemptcanrangefromto()": {
          "name": "Each_attempt_can_range_from_to",
          "key": "eachattemptcanrangefromto()",
          "definition": "Each_attempt_can_range_from_to( decimal min, decimal max )"
        },
        "requirestudentstopassitemstopassthetest()": {
          "name": "require_students_to_pass_items_to_pass_the_test",
          "key": "requirestudentstopassitemstopassthetest()",
          "definition": "require_students_to_pass_items_to_pass_the_test(int minimumPassingItems)"
        },
        "allowwaiversbasedonagradeof()": {
          "name": "Allow_waivers_based_on_a_grade_of",
          "key": "allowwaiversbasedonagradeof()",
          "definition": "Allow_waivers_based_on_a_grade_of( decimal score )"
        },
        "verifystudentshavecompleted()": {
          "name": "Verify__students_have_completed",
          "key": "verifystudentshavecompleted()",
          "definition": "Verify__students_have_completed(int completed)"
        },
        "defineapassfailchecklisttestnamedwithitems()": {
          "name": "define_a_pass_fail_checklist_test_named_with_items",
          "key": "defineapassfailchecklisttestnamedwithitems()",
          "definition": "define_a_pass_fail_checklist_test_named_with_items(string testName, int itemCount)"
        },
        "verifytestdoesnotexist()": {
          "name": "Verify_test__does_not_exist",
          "key": "verifytestdoesnotexist()",
          "definition": "Verify_test__does_not_exist( string testName )"
        },
        "addapassfailitemnamed()": {
          "name": "add_a_pass_fail_item_named",
          "key": "addapassfailitemnamed()",
          "definition": "add_a_pass_fail_item_named( string itemName )"
        },
        "defineapassfailtestnamedwithminimumpassinggrade()": {
          "name": "Define_a_pass_fail_test_named_with_minimum_passing_grade",
          "key": "defineapassfailtestnamedwithminimumpassinggrade()",
          "definition": "Define_a_pass_fail_test_named_with_minimum_passing_grade(string testName, decimal minPassingGrade)"
        },
        "waiversarenotallowed()": {
          "name": "Waivers_are_not_allowed",
          "key": "waiversarenotallowed()",
          "definition": "Waivers_are_not_allowed()"
        },
        "setweightto()": {
          "name": "set_weight_to",
          "key": "setweightto()",
          "definition": "set_weight_to(string testName, decimal weight)"
        },
        "defineafirearmstestnamedwithmaximumscoreofandminimumpassinggradeof()": {
          "name": "Define_a_Firearms_Test_named__with_maximum_score_of___and_minimum_passing_grade_of__",
          "key": "defineafirearmstestnamedwithmaximumscoreofandminimumpassinggradeof()",
          "definition": "Define_a_Firearms_Test_named__with_maximum_score_of___and_minimum_passing_grade_of__(string testName, decimal maximumScore, decimal minPassingGrade)"
        },
        "highscoresarethanlowscores()": {
          "name": "high_scores_are_than_low_scores",
          "key": "highscoresarethanlowscores()",
          "definition": "high_scores_are_than_low_scores(string worseOrBetter)"
        },
        "allowwaivers()": {
          "name": "Allow_waivers",
          "key": "allowwaivers()",
          "definition": "Allow_waivers()"
        },
        "calculatethegradeaseither0or100()": {
          "name": "calculate_the_grade_as_either_0_or_100",
          "key": "calculatethegradeaseither0or100()",
          "definition": "calculate_the_grade_as_either_0_or_100()"
        },
        "timedtestismeasuredas()": {
          "name": "Timed_Test_is_measured_as",
          "key": "timedtestismeasuredas()",
          "definition": "Timed_Test_is_measured_as( string timePattern )"
        },
        "verifytestexists()": {
          "name": "Verify_test__exists",
          "key": "verifytestexists()",
          "definition": "Verify_test__exists( string testName )"
        },
        "addtheelototest()": {
          "name": "add_the_elo_to_test_",
          "key": "addtheelototest()",
          "definition": "add_the_elo_to_test_(string eloName, string testName)"
        },
        "setwaiverpolicyto()": {
          "name": "set_waiver_policy_to",
          "key": "setwaiverpolicyto()",
          "definition": "set_waiver_policy_to(string policy)"
        },
        "addinstructions()": {
          "name": "Add_instructions",
          "key": "addinstructions()",
          "definition": "Add_instructions( string instructions )"
        },
        "verifystudentshavefailed()": {
          "name": "Verify__students_have_failed",
          "key": "verifystudentshavefailed()",
          "definition": "Verify__students_have_failed(int failing)"
        }
      },
      "key": "testmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "TestManagement",
      "instance-name": "TestManagement"
    },
    "schedulingmanagement": {
      "namespace": "",
      "methods": {
        "verifyequipmentisassignedtoon()": {
          "name": "Verify_equipment__is_assigned_to__on__",
          "key": "verifyequipmentisassignedtoon()",
          "definition": "Verify_equipment__is_assigned_to__on__(string equipmentName, string className, string blockName)"
        },
        "clearschedule()": {
          "name": "Clear_schedule",
          "key": "clearschedule()",
          "definition": "Clear_schedule()"
        },
        "verifyschedulewillstartona()": {
          "name": "Verify_schedule_will_start_on_a",
          "key": "verifyschedulewillstartona()",
          "definition": "Verify_schedule_will_start_on_a(string layoutName, ScheduleLayoutType layoutType)"
        },
        "authorizefor()": {
          "name": "Authorize__for__",
          "key": "authorizefor()",
          "definition": "Authorize__for__(string instructorFullName, string activityName)"
        },
        "placeblockatondayinmode()": {
          "name": "Place_block__at__on_day__in__mode",
          "key": "placeblockatondayinmode()",
          "definition": "Place_block__at__on_day__in__mode(string blockName, string time, int day, string placementMode)"
        },
        "assignto()": {
          "name": "Assign__to__",
          "key": "assignto()",
          "definition": "Assign__to__( string instructorName, string blockName )"
        },
        "verifyinstructorisassignedasamanualassignment()": {
          "name": "Verify_instructor__is_assigned_as_a_manual_assignment",
          "key": "verifyinstructorisassignedasamanualassignment()",
          "definition": "Verify_instructor__is_assigned_as_a_manual_assignment( string instructorName )"
        },
        "verifyscheduledclasswaspersisted()": {
          "name": "verify_scheduled_class__was_persisted",
          "key": "verifyscheduledclasswaspersisted()",
          "definition": "verify_scheduled_class__was_persisted(string className)"
        },
        "createblockforactivityschedule()": {
          "name": "Create_block_for_activity_schedule__",
          "key": "createblockforactivityschedule()",
          "definition": "Create_block_for_activity_schedule__(string activityName)"
        },
        "verifyisassignedtoclassfororbutnotboth()": {
          "name": "Verify_is_assigned_to_class_for__or__but_not_both",
          "key": "verifyisassignedtoclassfororbutnotboth()",
          "definition": "Verify_is_assigned_to_class_for__or__but_not_both(string assignableName, string className, string block1, string block2)"
        },
        "assigntoon()": {
          "name": "Assign__to__on__",
          "key": "assigntoon()",
          "definition": "Assign__to__on__( string instructorName, string blockName, string className )"
        },
        "placeblockaton()": {
          "name": "Place_block__at__on__",
          "key": "placeblockaton()",
          "definition": "Place_block__at__on__(string blockName, string time, DateTime date)"
        },
        "verifyclassschedulenamedexistsforclasstemplate()": {
          "name": "Verify_class_schedule_named__exists_for_class_template__",
          "key": "verifyclassschedulenamedexistsforclasstemplate()",
          "definition": "Verify_class_schedule_named__exists_for_class_template__(string scheduleName, string templateName)"
        },
        "verifyclasshastrainingcategory()": {
          "name": "Verify_class__has_training_category_",
          "key": "verifyclasshastrainingcategory()",
          "definition": "Verify_class__has_training_category_(string className, string trainingCategoryString)"
        },
        "assigninstructor()": {
          "name": "Assign_instructor_",
          "key": "assigninstructor()",
          "definition": "Assign_instructor_(string instructorName)"
        },
        "verifyfacilityisassignedasamanualassignment()": {
          "name": "Verify_facility__is_assigned_as_a_manual_assignment",
          "key": "verifyfacilityisassignedasamanualassignment()",
          "definition": "Verify_facility__is_assigned_as_a_manual_assignment( string facilityName )"
        },
        "reflowschedule()": {
          "name": "Reflow_schedule",
          "key": "reflowschedule()",
          "definition": "Reflow_schedule()"
        },
        "assignbaselineavailabiltyprofiletoclassschedule()": {
          "name": "Assign_baseline_availabilty_profile__to_class_schedule",
          "key": "assignbaselineavailabiltyprofiletoclassschedule()",
          "definition": "Assign_baseline_availabilty_profile__to_class_schedule( string profileName )"
        },
        "removeassignmentsonforin()": {
          "name": "Remove_assignments_on__for__in",
          "key": "removeassignmentsonforin()",
          "definition": "Remove_assignments_on__for__in(string blockName, string ruleName, string className)"
        },
        "scheduletobeginonanywithprofile()": {
          "name": "Schedule__to_begin_on_any__with_profile__",
          "key": "scheduletobeginonanywithprofile()",
          "definition": "Schedule__to_begin_on_any__with_profile__( string layoutName, string dayOfWeek, string profileName )"
        },
        "verifyschedulehasactivity()": {
          "name": "Verify_schedule__has_activity__",
          "key": "verifyschedulehasactivity()",
          "definition": "Verify_schedule__has_activity__(string scheduleTemplateName, string scheduleActivityName)"
        },
        "unassignfromon()": {
          "name": "Unassign__from__on__",
          "key": "unassignfromon()",
          "definition": "Unassign__from__on__(string instructorName, string blockName, string className)"
        },
        "assignavailabiltyprofiletoclassschedule()": {
          "name": "Assign_availabilty_profile__to_class_schedule",
          "key": "assignavailabiltyprofiletoclassschedule()",
          "definition": "Assign_availabilty_profile__to_class_schedule(string profileName)"
        },
        "placeblocklastinghoursatondayinmode()": {
          "name": "Place_block__lasting__hours_at__on_day__in__mode",
          "key": "placeblocklastinghoursatondayinmode()",
          "definition": "Place_block__lasting__hours_at__on_day__in__mode(string blockName, int hours, string time, int day, string placementMode)"
        },
        "verifyfacilitiesareassignedtoontofulfill()": {
          "name": "Verify__facilities_are_assigned_to__on__to_fulfill__",
          "key": "verifyfacilitiesareassignedtoontofulfill()",
          "definition": "Verify__facilities_are_assigned_to__on__to_fulfill__(int assignmentCount, string className, string blockName, string ruleName)"
        },
        "verifynoinstructorsareassigned()": {
          "name": "Verify_no_instructors_are_assigned",
          "key": "verifynoinstructorsareassigned()",
          "definition": "Verify_no_instructors_are_assigned()"
        },
        "verifyinstructorsareassignedtoontofulfill()": {
          "name": "Verify__instructors_are_assigned_to__on__to_fulfill__",
          "key": "verifyinstructorsareassignedtoontofulfill()",
          "definition": "Verify__instructors_are_assigned_to__on__to_fulfill__(int assignmentCount, string className, string blockName, string ruleName)"
        },
        "assignfacilitytoontofulfill()": {
          "name": "Assign_facility__to__on__to_fulfill__",
          "key": "assignfacilitytoontofulfill()",
          "definition": "Assign_facility__to__on__to_fulfill__(int quantity, string facilityName, string blockName, string className, string ruleName)"
        },
        "usingactivity()": {
          "name": "using_Activity_",
          "key": "usingactivity()",
          "definition": "using_Activity_( string activityName )"
        },
        "verifyscheduledclasshasactivity()": {
          "name": "Verify_scheduled_class__has_activity__",
          "key": "verifyscheduledclasshasactivity()",
          "definition": "Verify_scheduled_class__has_activity__(string className, string activityName)"
        },
        "verifyinstructorisassigned()": {
          "name": "Verify_instructor__is_assigned",
          "key": "verifyinstructorisassigned()",
          "definition": "Verify_instructor__is_assigned( string instructorName )"
        },
        "verifyschedulingclassendson()": {
          "name": "Verify_scheduling_class_ends_on__",
          "key": "verifyschedulingclassendson()",
          "definition": "Verify_scheduling_class_ends_on__(string className, DateTime end)"
        },
        "placeblockatoninmode()": {
          "name": "Place_block__at__on__in__mode",
          "key": "placeblockatoninmode()",
          "definition": "Place_block__at__on__in__mode(string blockName, string time, DateTime date, string placementMode)"
        },
        "placeblocklastinghoursatinmode()": {
          "name": "Place_block__lasting__hours_at__in__mode",
          "key": "placeblocklastinghoursatinmode()",
          "definition": "Place_block__lasting__hours_at__in__mode(string blockName, int hours, string time, string placementMode)"
        },
        "createworkweekprofilenamedwithavailabilitiesonat()": {
          "name": "Create_workweek_profile_named__with_availabilities_on__at__",
          "key": "createworkweekprofilenamedwithavailabilitiesonat()",
          "definition": "Create_workweek_profile_named__with_availabilities_on__at__(string profileName, string weekDays, string times)"
        },
        "verifyschedulehasactivitywithblock()": {
          "name": "Verify_schedule__has_activity__with_block__",
          "key": "verifyschedulehasactivitywithblock()",
          "definition": "Verify_schedule__has_activity__with_block__(string layoutName, string activityName, string blockName)"
        },
        "verifyscheduledclasshasblockinactivity()": {
          "name": "Verify_scheduled_class__has_block__in_activity__",
          "key": "verifyscheduledclasshasblockinactivity()",
          "definition": "Verify_scheduled_class__has_block__in_activity__(string className, string blockName, string activityName)"
        },
        "authorizeforexpiringon()": {
          "name": "Authorize__for__expiring_on",
          "key": "authorizeforexpiringon()",
          "definition": "Authorize__for__expiring_on(string instructorFullName, string activityName, DateTime expirationDate)"
        },
        "verifyschedulewaspersisted()": {
          "name": "Verify_schedule__was_persisted",
          "key": "verifyschedulewaspersisted()",
          "definition": "Verify_schedule__was_persisted(string scheduleTemplateName)"
        },
        "verifyschedulestartsona()": {
          "name": "Verify_schedule_starts_on_a__",
          "key": "verifyschedulestartsona()",
          "definition": "Verify_schedule_starts_on_a__(string layoutName, string dayOfWeek)"
        },
        "usingblock()": {
          "name": "using_Block_",
          "key": "usingblock()",
          "definition": "using_Block_( string blockName )"
        },
        "verifynofacilitiesareassigned()": {
          "name": "Verify_no_facilities_are_assigned",
          "key": "verifynofacilitiesareassigned()",
          "definition": "Verify_no_facilities_are_assigned()"
        },
        "placeblockatinmode()": {
          "name": "Place_block__at__in__mode",
          "key": "placeblockatinmode()",
          "definition": "Place_block__at__in__mode(string blockName, string time, string placementMode)"
        },
        "assignequipmenttoontofulfill()": {
          "name": "Assign__equipment__to__on__to_fulfill__",
          "key": "assignequipmenttoontofulfill()",
          "definition": "Assign__equipment__to__on__to_fulfill__(int quantity, string equipmentName, string blockName, string className, string ruleName)"
        },
        "verifyblockhastimeblockondaystartingatendingat()": {
          "name": "Verify_block_has_time_block_on_day__starting_at__ending_at__",
          "key": "verifyblockhastimeblockondaystartingatendingat()",
          "definition": "Verify_block_has_time_block_on_day__starting_at__ending_at__(int day, string startTime, string endTime)"
        },
        "assigntoontofulfill()": {
          "name": "Assign__to__on__to_fulfill__",
          "key": "assigntoontofulfill()",
          "definition": "Assign__to__on__to_fulfill__( string instructorName, string blockName, string className, string ruleName )"
        },
        "createtimestampwithcurrentsystemtime()": {
          "name": "Create_time_stamp_with_current_system_time",
          "key": "createtimestampwithcurrentsystemtime()",
          "definition": "Create_time_stamp_with_current_system_time(string timeStampName)"
        },
        "assigntotofulfill()": {
          "name": "Assign__to__to_fulfill__",
          "key": "assigntotofulfill()",
          "definition": "Assign__to__to_fulfill__( string instructorName, string blockName, string ruleName )"
        },
        "createstandardworkweekprofilenamed()": {
          "name": "Create_standard_workweek_profile_named_",
          "key": "createstandardworkweekprofilenamed()",
          "definition": "Create_standard_workweek_profile_named_(string profileName)"
        },
        "verifyisassignedtoclassforblock()": {
          "name": "Verify_is_assigned_to_class_for_block",
          "key": "verifyisassignedtoclassforblock()",
          "definition": "Verify_is_assigned_to_class_for_block(string assignableName, string className, string blockName)"
        },
        "createscheduleforclasstemplate()": {
          "name": "Create_schedule__for_class_template_",
          "key": "createscheduleforclasstemplate()",
          "definition": "Create_schedule__for_class_template_( string scheduleName, string classTemplateName )"
        },
        "verifynoequipmentisassignedtoon()": {
          "name": "Verify_no_equipment_is_assigned_to__on__",
          "key": "verifynoequipmentisassignedtoon()",
          "definition": "Verify_no_equipment_is_assigned_to__on__(string className, string blockName)"
        },
        "verifyisassignedtotofulfill()": {
          "name": "Verify__is_assigned_to__to_fulfill__",
          "key": "verifyisassignedtotofulfill()",
          "definition": "Verify__is_assigned_to__to_fulfill__(string instructorName, string blockName, string ruleName)"
        },
        "moveblockto()": {
          "name": "Move__block__to",
          "key": "moveblockto()",
          "definition": "Move__block__to(string scheduleName, string blockName, DateTime startTime)"
        },
        "verifyinstructorhasconflictson()": {
          "name": "Verify_instructor_has_conflicts_on",
          "key": "verifyinstructorhasconflictson()",
          "definition": "Verify_instructor_has_conflicts_on(string instructorName, DateTime start)"
        },
        "verifyisassignedtoonasamanualassignment()": {
          "name": "Verify__is_assigned_to__on__as_a_manual_assignment",
          "key": "verifyisassignedtoonasamanualassignment()",
          "definition": "Verify__is_assigned_to__on__as_a_manual_assignment( string instructorName, string blockName, string className )"
        },
        "autoassignpersonnelfor()": {
          "name": "AutoAssign_Personnel_for",
          "key": "autoassignpersonnelfor()",
          "definition": "AutoAssign_Personnel_for( string schedulingClassName )"
        },
        "verifyscheduledblockoccursto()": {
          "name": "Verify_scheduled_block__occurs__to_",
          "key": "verifyscheduledblockoccursto()",
          "definition": "Verify_scheduled_block__occurs__to_( string blockName, DateTime startTime, DateTime endTime )"
        },
        "createscheduledclassfromscheduletemplatewithprofilewhichstarts()": {
          "name": "Create_scheduled_class_from_schedule_template_with_profile_which_starts_",
          "key": "createscheduledclassfromscheduletemplatewithprofilewhichstarts()",
          "definition": "Create_scheduled_class_from_schedule_template_with_profile_which_starts_(string className, string layoutName, string profileName, DateTime start)"
        },
        "createscheduledclassfromschedule()": {
          "name": "Create_scheduled_class__from_schedule__",
          "key": "createscheduledclassfromschedule()",
          "definition": "Create_scheduled_class__from_schedule__(string className, string layoutName)"
        },
        "splitactivityintoblocks()": {
          "name": "Split_activity__into__blocks",
          "key": "splitactivityintoblocks()",
          "definition": "Split_activity__into__blocks(string activityName, int numSplit)"
        },
        "blockhastimeblocks()": {
          "name": "Block__has_timeblocks__",
          "key": "blockhastimeblocks()",
          "definition": "Block__has_timeblocks__(string blockName, string timeblocks)"
        },
        "verifyblockonclassstartsat()": {
          "name": "Verify_block__on_class__starts_at",
          "key": "verifyblockonclassstartsat()",
          "definition": "Verify_block__on_class__starts_at(string blockName, string className, DateTime startDateTime)"
        },
        "loadblockonclassas()": {
          "name": "Load_block_on_class_as_",
          "key": "loadblockonclassas()",
          "definition": "Load_block_on_class_as_(string blockName, string className, string classBlockName)"
        },
        "scheduletobeginonwithprofile()": {
          "name": "Schedule__to_begin_on__with_profile__",
          "key": "scheduletobeginonwithprofile()",
          "definition": "Schedule__to_begin_on__with_profile__(string layoutName, DateTime startingDate, string profileName)"
        },
        "usingclassschedule()": {
          "name": "using_class_schedule",
          "key": "usingclassschedule()",
          "definition": "using_class_schedule( string classScheduleName )"
        },
        "changeprofiletowithreflowing()": {
          "name": "Change_profile_to__with_reflowing",
          "key": "changeprofiletowithreflowing()",
          "definition": "Change_profile_to__with_reflowing(string profileName)"
        },
        "verifyisnotassignedto()": {
          "name": "Verify__is_not_assigned_to__",
          "key": "verifyisnotassignedto()",
          "definition": "Verify__is_not_assigned_to__(string instructorName, string blockName)"
        },
        "assignfacility()": {
          "name": "Assign_facility_",
          "key": "assignfacility()",
          "definition": "Assign_facility_( string facilityName )"
        },
        "verifyfacilityisassigned()": {
          "name": "Verify_facility__is_assigned",
          "key": "verifyfacilityisassigned()",
          "definition": "Verify_facility__is_assigned( string facilityName )"
        },
        "placeblocksatondayinmode()": {
          "name": "Place_blocks__at__on_day__in__mode",
          "key": "placeblocksatondayinmode()",
          "definition": "Place_blocks__at__on_day__in__mode(string blockNames, string time, int day, string placementMode)"
        },
        "usingclass()": {
          "name": "using_Class_",
          "key": "usingclass()",
          "definition": "using_Class_( string className )"
        },
        "verifyisnotassignedtoclassforblock()": {
          "name": "Verify_is_not_assigned_to_class_for_block",
          "key": "verifyisnotassignedtoclassforblock()",
          "definition": "Verify_is_not_assigned_to_class_for_block(string assignableName, string className, string blockName)"
        },
        "changeprofileto()": {
          "name": "Change_profile_to__",
          "key": "changeprofileto()",
          "definition": "Change_profile_to__(string profileName)"
        },
        "placeblockatonday()": {
          "name": "Place_block__at__on_day__",
          "key": "placeblockatonday()",
          "definition": "Place_block__at__on_day__(string blockName, string time, int day)"
        },
        "deletescheduleforclasstemplate()": {
          "name": "Delete_schedule__for_class_template_",
          "key": "deletescheduleforclasstemplate()",
          "definition": "Delete_schedule__for_class_template_(string scheduleName, string classTemplateName)"
        },
        "unassignfacilityfromon()": {
          "name": "Unassign_facility__from__on__",
          "key": "unassignfacilityfromon()",
          "definition": "Unassign_facility__from__on__(string facilityName, string blockName, string className)"
        },
        "assignequipmenttoonmanually()": {
          "name": "Assign__equipment__to__on__manually",
          "key": "assignequipmenttoonmanually()",
          "definition": "Assign__equipment__to__on__manually(int quantity, string equipmentName, string blockName, string className)"
        },
        "verifyequipmentisassignedtoontofulfill()": {
          "name": "Verify_equipment__is_assigned_to__on__to_fulfill__",
          "key": "verifyequipmentisassignedtoontofulfill()",
          "definition": "Verify_equipment__is_assigned_to__on__to_fulfill__(string equipmentName, string className, string blockName, string ruleName)"
        },
        "verifyschedulestartson()": {
          "name": "Verify_schedule_starts_on__",
          "key": "verifyschedulestartson()",
          "definition": "Verify_schedule_starts_on__(string layoutName, DateTime startingDate)"
        },
        "assignfacilitytoon()": {
          "name": "Assign_facility_to_on",
          "key": "assignfacilitytoon()",
          "definition": "Assign_facility_to_on(string facilityName, string blockName, string className)"
        },
        "verifyinstructorisassignedtoontofulfill()": {
          "name": "Verify_instructor__is_assigned_to__on__to_fulfill__",
          "key": "verifyinstructorisassignedtoontofulfill()",
          "definition": "Verify_instructor__is_assigned_to__on__to_fulfill__(string instructorName, string className, string blockName, string ruleName)"
        },
        "autoassignequipmentfor()": {
          "name": "Auto_assign_equipment_for",
          "key": "autoassignequipmentfor()",
          "definition": "Auto_assign_equipment_for(string schedulingClassName)"
        },
        "loadactivityonclassas()": {
          "name": "Load_activity_on_class_as_",
          "key": "loadactivityonclassas()",
          "definition": "Load_activity_on_class_as_(string activityName, string className, string classActivityName)"
        },
        "verifyfacilityisassignedtoontofulfill()": {
          "name": "Verify_facility__is_assigned_to__on__to_fulfill__",
          "key": "verifyfacilityisassignedtoontofulfill()",
          "definition": "Verify_facility__is_assigned_to__on__to_fulfill__(string facilityName, string className, string blockName, string ruleName)"
        },
        "authorizeforat()": {
          "name": "Authorize__for__at__",
          "key": "authorizeforat()",
          "definition": "Authorize__for__at__(string instructorFullName, string activityName, string authLevelName)"
        },
        "verifythereareclassschedulesforclasstemplate()": {
          "name": "Verify_there_are__class_schedules_for_class_template_",
          "key": "verifythereareclassschedulesforclasstemplate()",
          "definition": "Verify_there_are__class_schedules_for_class_template_(int numberExpected, string templateName)"
        },
        "unassignequipmentfromon()": {
          "name": "Unassign_equipment__from__on__",
          "key": "unassignequipmentfromon()",
          "definition": "Unassign_equipment__from__on__(string equipmentName, string blockName, string className)"
        },
        "setdivisionofactivityinclassto()": {
          "name": "Set_Division_of_Activity__in_Class__to__",
          "key": "setdivisionofactivityinclassto()",
          "definition": "Set_Division_of_Activity__in_Class__to__(string activityName, string className, string trainingDivisionName)"
        },
        "authorizeforatpriority()": {
          "name": "Authorize__for__at_priority__",
          "key": "authorizeforatpriority()",
          "definition": "Authorize__for__at_priority__(string instructorFullName, string activityName, int priority)"
        },
        "autoassignfacilitiesfor()": {
          "name": "AutoAssign_facilities_for",
          "key": "autoassignfacilitiesfor()",
          "definition": "AutoAssign_facilities_for(string schedulingClassName)"
        }
      },
      "key": "schedulingmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "SchedulingManagement",
      "instance-name": "SchedulingManagement"
    },
    "completedtrainingbycategory": {
      "namespace": "",
      "methods": {
        "verifyinprogressfootnotevisible()": {
          "name": "Verify_In_Progress_footnote__visible",
          "key": "verifyinprogressfootnotevisible()",
          "definition": "Verify_In_Progress_footnote__visible(string status)"
        },
        "verifyselectedappointmenttypeisempty()": {
          "name": "Verify_selected_Appointment_Type_is_empty",
          "key": "verifyselectedappointmenttypeisempty()",
          "definition": "Verify_selected_Appointment_Type_is_empty()"
        },
        "verifysuborganizationoptionsinclude()": {
          "name": "Verify_SubOrganization_options_include_",
          "key": "verifysuborganizationoptionsinclude()",
          "definition": "Verify_SubOrganization_options_include_(List<string> expectedOptions)"
        },
        "verifypersoncategoryiswithhours()": {
          "name": "Verify__person__category_is__with__hours",
          "key": "verifypersoncategoryiswithhours()",
          "definition": "Verify__person__category_is__with__hours(string ordinal, string categoryOrd, string categoryName, string hours)"
        },
        "verifytherearepeopleshown()": {
          "name": "Verify_there_are__people_shown",
          "key": "verifytherearepeopleshown()",
          "definition": "Verify_there_are__people_shown(int numPeople)"
        },
        "bindtraining()": {
          "name": "BindTraining",
          "key": "bindtraining()",
          "definition": "BindTraining(List<CompletedTrainingByCategoryDto> dto)"
        },
        "selectforsuborganizations()": {
          "name": "Select__for_Sub_Organizations",
          "key": "selectforsuborganizations()",
          "definition": "Select__for_Sub_Organizations(List<string> selections)"
        },
        "setfootnotedisplay()": {
          "name": "SetFootnoteDisplay",
          "key": "setfootnotedisplay()",
          "definition": "SetFootnoteDisplay(bool hasUnapproved, bool hasInProgress)"
        },
        "verifyemploymenttypeoptionsinclude()": {
          "name": "Verify_Employment_Type_options_include_",
          "key": "verifyemploymenttypeoptionsinclude()",
          "definition": "Verify_Employment_Type_options_include_(List<string> expectedOptions)"
        },
        "verifyselectedemploymenttypeisempty()": {
          "name": "Verify_selected_Employment_Type_is_empty",
          "key": "verifyselectedemploymenttypeisempty()",
          "definition": "Verify_selected_Employment_Type_is_empty()"
        },
        "selectforemploymenttypes()": {
          "name": "Select__for_Employment_Types",
          "key": "selectforemploymenttypes()",
          "definition": "Select__for_Employment_Types(List<string> selections)"
        },
        "verifypersonhastrainingcategories()": {
          "name": "Verify__person_has__Training_Categories",
          "key": "verifypersonhastrainingcategories()",
          "definition": "Verify__person_has__Training_Categories(string ordinal, int number)"
        },
        "setemptydatamessagevisibility()": {
          "name": "SetEmptyDataMessageVisibility",
          "key": "setemptydatamessagevisibility()",
          "definition": "SetEmptyDataMessageVisibility(bool visible)"
        },
        "verifyemptydatemessagevisible()": {
          "name": "Verify_empty_date_message__visible",
          "key": "verifyemptydatemessagevisible()",
          "definition": "Verify_empty_date_message__visible(string status)"
        },
        "verifyemptyfiltersmessagevisible()": {
          "name": "Verify_empty_filters_message__visible",
          "key": "verifyemptyfiltersmessagevisible()",
          "definition": "Verify_empty_filters_message__visible(string status)"
        },
        "selectforappointmenttypes()": {
          "name": "Select__for_Appointment_Types",
          "key": "selectforappointmenttypes()",
          "definition": "Select__for_Appointment_Types(List<string> selections)"
        },
        "verifypersoncategoryhaveanunapprovedfootnote()": {
          "name": "Verify__person__category__have_an_unapproved_footnote",
          "key": "verifypersoncategoryhaveanunapprovedfootnote()",
          "definition": "Verify__person__category__have_an_unapproved_footnote(string ordinal, string categoryOrd, string status)"
        },
        "browsetopage()": {
          "name": "Browse_to_Page",
          "key": "browsetopage()",
          "definition": "Browse_to_Page()"
        },
        "verifypersonhaveanunapprovedfootnote()": {
          "name": "Verify__person__have_an_unapproved_footnote",
          "key": "verifypersonhaveanunapprovedfootnote()",
          "definition": "Verify__person__have_an_unapproved_footnote(string ordinal, string status)"
        },
        "bindyearranges()": {
          "name": "BindYearRanges",
          "key": "bindyearranges()",
          "definition": "BindYearRanges(IEnumerable<int> years)"
        },
        "selectsearchbyyearrange()": {
          "name": "Select_Search_By_Year_Range",
          "key": "selectsearchbyyearrange()",
          "definition": "Select_Search_By_Year_Range()"
        },
        "clickdone()": {
          "name": "Click_Done",
          "key": "clickdone()",
          "definition": "Click_Done()"
        },
        "verifypersoncategoryhaveaninprogressfootnote()": {
          "name": "Verify__person__category__have_an_in_progress_footnote",
          "key": "verifypersoncategoryhaveaninprogressfootnote()",
          "definition": "Verify__person__category__have_an_in_progress_footnote(string ordinal, string categoryOrd, string status)"
        },
        "verifyunapprovedfootnotevisible()": {
          "name": "Verify_Unapproved_footnote__visible",
          "key": "verifyunapprovedfootnotevisible()",
          "definition": "Verify_Unapproved_footnote__visible(string status)"
        },
        "selectsearchbycustomdates()": {
          "name": "Select_Search_By_Custom_Dates",
          "key": "selectsearchbycustomdates()",
          "definition": "Select_Search_By_Custom_Dates()"
        },
        "clearallfilters()": {
          "name": "Clear_All_Filters",
          "key": "clearallfilters()",
          "definition": "Clear_All_Filters()"
        },
        "verifypersonhaveaninprogressfootnote()": {
          "name": "Verify__person__have_an_in_progress_footnote",
          "key": "verifypersonhaveaninprogressfootnote()",
          "definition": "Verify__person__have_an_in_progress_footnote(string ordinal, string status)"
        },
        "verifyappointmenttypeoptionsinclude()": {
          "name": "Verify_Appointment_Type_options_include_",
          "key": "verifyappointmenttypeoptionsinclude()",
          "definition": "Verify_Appointment_Type_options_include_(List<string> expectedOptions)"
        },
        "verifyselectedsuborganizationisempty()": {
          "name": "Verify_selected_SubOrganization_is_empty",
          "key": "verifyselectedsuborganizationisempty()",
          "definition": "Verify_selected_SubOrganization_is_empty()"
        },
        "verifypersoniswithacademyidandemploymenttypeandappointmenttypeandtotaltraininghours()": {
          "name": "Verify__person_is__with_academy_id__and_employment_type__and_appointment_type__and__total_training_hours",
          "key": "verifypersoniswithacademyidandemploymenttypeandappointmenttypeandtotaltraininghours()",
          "definition": "Verify__person_is__with_academy_id__and_employment_type__and_appointment_type__and__total_training_hours(string ordinal, string personName, string academyId, string employmentType, string appointmentType, string totalHours)"
        },
        "verifyyearrangefilterisselected()": {
          "name": "Verify_Year_range_filter_is_selected",
          "key": "verifyyearrangefilterisselected()",
          "definition": "Verify_Year_range_filter_is_selected()"
        },
        "setdefaultfiltermessagevisibility()": {
          "name": "SetDefaultFilterMessageVisibility",
          "key": "setdefaultfiltermessagevisibility()",
          "definition": "SetDefaultFilterMessageVisibility(bool visible)"
        }
      },
      "key": "completedtrainingbycategory",
      "is-parent": false,
      "parent-name": "MVBaseWorkflow",
      "class-name": "CompletedTrainingByCategoryWorkflow",
      "instance-name": "CompletedTrainingByCategory"
    },
    "automatedemailexpiringcertificationnotification": {
      "namespace": "",
      "methods": {
        "verifythatanemailmessagewassenttoforonatforexpiringon()": {
          "name": "Verify_that_an_email_message_was_sent_to__for__on__at__for__expiring_on__",
          "key": "verifythatanemailmessagewassenttoforonatforexpiringon()",
          "definition": "Verify_that_an_email_message_was_sent_to__for__on__at__for__expiring_on__(string personEmailed, string personWithExpiringCert, DateTime notifyDate, string emailAddress, string certName, DateTime expectedExpirationDate)"
        },
        "verifythattheemailsenttoforcontains()": {
          "name": "Verify_that_the_email_sent_to__for__contains__",
          "key": "verifythattheemailsenttoforcontains()",
          "definition": "Verify_that_the_email_sent_to__for__contains__(string emailAddress, string certName, string compareStr)"
        },
        "verifyemailmessagesweresent()": {
          "name": "Verify__email_messages_were_sent",
          "key": "verifyemailmessagesweresent()",
          "definition": "Verify__email_messages_were_sent(int num)"
        },
        "runexpiringcertsemailer()": {
          "name": "Run_Expiring_Certs_Emailer",
          "key": "runexpiringcertsemailer()",
          "definition": "Run_Expiring_Certs_Emailer()"
        },
        "verifythatanemailmessagewassenttoonatforexpiringon()": {
          "name": "Verify_that_an_email_message_was_sent_to__on__at__for__expiring_on__",
          "key": "verifythatanemailmessagewassenttoonatforexpiringon()",
          "definition": "Verify_that_an_email_message_was_sent_to__on__at__for__expiring_on__(string personName, DateTime notifyDate, string emailAddress, string certName, DateTime expectedExpirationDate)"
        }
      },
      "key": "automatedemailexpiringcertificationnotification",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "AutomatedEmailExpiringCertificationNotification",
      "instance-name": "AutomatedEmailExpiringCertificationNotification"
    },
    "configurationmanagement": {
      "namespace": "",
      "methods": {
        "setappsettingto()": {
          "name": "Set_app_setting__to__",
          "key": "setappsettingto()",
          "definition": "Set_app_setting__to__(string key, string value)"
        }
      },
      "key": "configurationmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "ConfigurationManagement",
      "instance-name": "ConfigurationManagement"
    },
    "acadisoutside": {
      "namespace": "",
      "methods": {
        "changeportalpasswordwithexistingpasswordfromwelcomeemailandnewpassword()": {
          "name": "Change_portal_password_with_existing_password_from_welcome_email_and_new_password__",
          "key": "changeportalpasswordwithexistingpasswordfromwelcomeemailandnewpassword()",
          "definition": "Change_portal_password_with_existing_password_from_welcome_email_and_new_password__(string newPassword)"
        }
      },
      "key": "acadisoutside",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "AcadisOutsideWorkflow",
      "instance-name": "AcadisOutside"
    },
    "nontrainingdaymanagement": {
      "namespace": "",
      "methods": {
        "createanontrainingdaynamedonwithdisplaytextforprograms()": {
          "name": "Create_a_non_training_day_named_on_with_display_text_for_programs_",
          "key": "createanontrainingdaynamedonwithdisplaytextforprograms()",
          "definition": "Create_a_non_training_day_named_on_with_display_text_for_programs_( string name, DateTime date, string displayName, List<string> programNames )"
        },
        "validatethatnontrainingdaynamedisonandhasprograms()": {
          "name": "Validate_that_non_training_day_named_is_on_and_has_programs",
          "key": "validatethatnontrainingdaynamedisonandhasprograms()",
          "definition": "Validate_that_non_training_day_named_is_on_and_has_programs(string name, DateTime date, List<string> programNames)"
        }
      },
      "key": "nontrainingdaymanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "NonTrainingDayManagement",
      "instance-name": "NonTrainingDayManagement"
    },
    "personmanagement": {
      "namespace": "",
      "methods": {
        "createpersonwithfullnameacademyidandssn()": {
          "name": "Create_person_with_full_name_academy_id_and_ssn",
          "key": "createpersonwithfullnameacademyidandssn()",
          "definition": "Create_person_with_full_name_academy_id_and_ssn( string fullName, string academyID, string ssn )"
        },
        "makeaninstructor()": {
          "name": "Make__an_instructor",
          "key": "makeaninstructor()",
          "definition": "Make__an_instructor(string personNameLastFirst)"
        },
        "selectstatus()": {
          "name": "Select_Status",
          "key": "selectstatus()",
          "definition": "Select_Status(PersonStatus status)"
        },
        "createpersonwithfirstnamelastnamemiddlenameacademyid()": {
          "name": "Create_Person_With_First_Name_Last_Name_Middle_Name_Academy_Id",
          "key": "createpersonwithfirstnamelastnamemiddlenameacademyid()",
          "definition": "Create_Person_With_First_Name_Last_Name_Middle_Name_Academy_Id( string firstName, string lastName, string middleName, string academyId, bool isInstructor )"
        },
        "employmentdutyassignmentendis()": {
          "name": "Employment_Duty_Assignment_end_is",
          "key": "employmentdutyassignmentendis()",
          "definition": "Employment_Duty_Assignment_end_is(DateTime date)"
        },
        "verifythatdoesnothaveaphonenumber()": {
          "name": "Verify_that_does_not_have_a_phone_number",
          "key": "verifythatdoesnothaveaphonenumber()",
          "definition": "Verify_that_does_not_have_a_phone_number( string name )"
        },
        "setstatusto()": {
          "name": "set_status_to__",
          "key": "setstatusto()",
          "definition": "set_status_to__(PersonStatus status)"
        },
        "selectgender()": {
          "name": "Select_Gender__",
          "key": "selectgender()",
          "definition": "Select_Gender__(string gender)"
        },
        "heightis()": {
          "name": "height_is__",
          "key": "heightis()",
          "definition": "height_is__(int height)"
        },
        "checkthatcurrentpersonhasemptygender()": {
          "name": "Check_that_current_person_has_empty_gender",
          "key": "checkthatcurrentpersonhasemptygender()",
          "definition": "Check_that_current_person_has_empty_gender()"
        },
        "employmenttitlerankis()": {
          "name": "Employment_TitleRank_is",
          "key": "employmenttitlerankis()",
          "definition": "Employment_TitleRank_is(string title)"
        },
        "verifypersonisinactive()": {
          "name": "Verify_Person_is_inactive",
          "key": "verifypersonisinactive()",
          "definition": "Verify_Person_is_inactive(string nameFirstLast)"
        },
        "createprimaryemploymentunder()": {
          "name": "create_primary_employment_under",
          "key": "createprimaryemploymentunder()",
          "definition": "create_primary_employment_under(string orgName)"
        },
        "eyecoloris()": {
          "name": "eye_color_is__",
          "key": "eyecoloris()",
          "definition": "eye_color_is__(string color)"
        },
        "verifyhasportalaccount()": {
          "name": "Verify__has_portal_account_",
          "key": "verifyhasportalaccount()",
          "definition": "Verify__has_portal_account_(string personName, string userName)"
        },
        "verifyhasend()": {
          "name": "Verify_has_end",
          "key": "verifyhasend()",
          "definition": "Verify_has_end(string dutyAssignmentName, DateTime date)"
        },
        "usingperson()": {
          "name": "Using_Person",
          "key": "usingperson()",
          "definition": "Using_Person(string nameFirstLast)"
        },
        "selectthispersonaninstructor()": {
          "name": "Select_This_Person__an_Instructor",
          "key": "selectthispersonaninstructor()",
          "definition": "Select_This_Person__an_Instructor(string isOrIsNot)"
        },
        "employmentdutyassignmentstartis()": {
          "name": "Employment_Duty_Assignment_start_is",
          "key": "employmentdutyassignmentstartis()",
          "definition": "Employment_Duty_Assignment_start_is(DateTime date)"
        },
        "createpersonwithfirstnamelastnameacademyid()": {
          "name": "Create_Person_With_First_Name_Last_Name_Academy_Id",
          "key": "createpersonwithfirstnamelastnameacademyid()",
          "definition": "Create_Person_With_First_Name_Last_Name_Academy_Id(string firstName, string lastName, string academyId)"
        },
        "personwithlastnamefirstnamessnacademyidisduplicate()": {
          "name": "Person_with_Last_Name_First_Name_SSN_Academy_ID_is_duplicate",
          "key": "personwithlastnamefirstnamessnacademyidisduplicate()",
          "definition": "Person_with_Last_Name_First_Name_SSN_Academy_ID_is_duplicate(string last, string first, string ssn, string academyID)"
        },
        "entersuffix()": {
          "name": "Enter_Suffix__",
          "key": "entersuffix()",
          "definition": "Enter_Suffix__(string suffix)"
        },
        "setemploymentstatusto()": {
          "name": "Set_Employment_Status_to",
          "key": "setemploymentstatusto()",
          "definition": "Set_Employment_Status_to(string statusName)"
        },
        "verifythathasaddressandtype()": {
          "name": "Verify_that_has_address_and_type",
          "key": "verifythathasaddressandtype()",
          "definition": "Verify_that_has_address_and_type( string name, string address, string phoneType )"
        },
        "driverslicenseforstateis()": {
          "name": "Drivers_license_for_state__is__",
          "key": "driverslicenseforstateis()",
          "definition": "Drivers_license_for_state__is__(string state, string number)"
        },
        "enterdateofbirth()": {
          "name": "Enter_Date_of_Birth__",
          "key": "enterdateofbirth()",
          "definition": "Enter_Date_of_Birth__(DateTime dob)"
        },
        "verifythathasemploymentat()": {
          "name": "Verify_that_has_employment_at",
          "key": "verifythathasemploymentat()",
          "definition": "Verify_that_has_employment_at( string personName, string orgName )"
        },
        "selectdivision()": {
          "name": "Select_Division",
          "key": "selectdivision()",
          "definition": "Select_Division(string divisions)"
        },
        "birthdateis()": {
          "name": "Birthdate_is",
          "key": "birthdateis()",
          "definition": "Birthdate_is( DateTime dob )"
        },
        "verifyhasdutyassignment()": {
          "name": "Verify_has_Duty_Assignment",
          "key": "verifyhasdutyassignment()",
          "definition": "Verify_has_Duty_Assignment(string nameFirstLast, string organization)"
        },
        "verifythatdoesnothaveanaddress()": {
          "name": "Verify_that_does_not_have_an_address",
          "key": "verifythatdoesnothaveanaddress()",
          "definition": "Verify_that_does_not_have_an_address( string name )"
        },
        "verifyhasstart()": {
          "name": "Verify_has_start",
          "key": "verifyhasstart()",
          "definition": "Verify_has_start(string dutyAssignmentName, DateTime date)"
        },
        "save()": {
          "name": "Save",
          "key": "save()",
          "definition": "Save(Person person)"
        },
        "verifyhasacadisaccount()": {
          "name": "Verify__has_Acadis_account_",
          "key": "verifyhasacadisaccount()",
          "definition": "Verify__has_Acadis_account_(string personName, string userName)"
        },
        "createmalepersonnamed()": {
          "name": "Create_male_person_named",
          "key": "createmalepersonnamed()",
          "definition": "Create_male_person_named( string fullName )"
        },
        "middlenameis()": {
          "name": "Middle_name_is__",
          "key": "middlenameis()",
          "definition": "Middle_name_is__(string middleName)"
        },
        "createinstructorwithavailabilityof()": {
          "name": "Create_instructor_with_availability_of",
          "key": "createinstructorwithavailabilityof()",
          "definition": "Create_instructor_with_availability_of( string fullName, string availProfileName )"
        },
        "alertonprimaryset()": {
          "name": "AlertOnPrimarySet",
          "key": "alertonprimaryset()",
          "definition": "AlertOnPrimarySet()"
        },
        "employmenthiredateis()": {
          "name": "Employment_Hire_Date_is",
          "key": "employmenthiredateis()",
          "definition": "Employment_Hire_Date_is(DateTime date)"
        },
        "ssnis()": {
          "name": "SSN_is",
          "key": "ssnis()",
          "definition": "SSN_is(string ssn)"
        },
        "setmaximumworkloadtohoursper()": {
          "name": "Set_Maximum_Workload_to_Hours__per__",
          "key": "setmaximumworkloadtohoursper()",
          "definition": "Set_Maximum_Workload_to_Hours__per__(string maxHours, string maxHourPer)"
        },
        "verifypersondoesnotexist()": {
          "name": "Verify_Person__does_not_exist",
          "key": "verifypersondoesnotexist()",
          "definition": "Verify_Person__does_not_exist( string fullName )"
        },
        "setudfto()": {
          "name": "Set_Udf__to__",
          "key": "setudfto()",
          "definition": "Set_Udf__to__(string label, string value)"
        },
        "createpersonas()": {
          "name": "create_Person_as",
          "key": "createpersonas()",
          "definition": "create_Person_as(string lastName)"
        },
        "enterssn()": {
          "name": "Enter_SSN__",
          "key": "enterssn()",
          "definition": "Enter_SSN__(string ssn)"
        },
        "verifypersonexists()": {
          "name": "Verify_Person__exists",
          "key": "verifypersonexists()",
          "definition": "Verify_Person__exists(string fullName)"
        },
        "createinstructorwithavailabilityofandmaxassignmentofhoursper()": {
          "name": "Create_instructor_with_availability_of_and_max_assignment_of_hours_per",
          "key": "createinstructorwithavailabilityofandmaxassignmentofhoursper()",
          "definition": "Create_instructor_with_availability_of_and_max_assignment_of_hours_per( string fullName, string availProfileName, string hours, string hourPer )"
        },
        "assigntodivision()": {
          "name": "Assign__to_division__",
          "key": "assigntodivision()",
          "definition": "Assign__to_division__(string personName, string divisionName)"
        },
        "createinstructorwithavailabilityofindivisions()": {
          "name": "Create_instructor_with_availability_of__in_divisions__",
          "key": "createinstructorwithavailabilityofindivisions()",
          "definition": "Create_instructor_with_availability_of__in_divisions__(string fullName, string availProfileName, string divisionNames)"
        },
        "verifythatdoesnothaveemploymentat()": {
          "name": "Verify_that_does_not_have_employment_at",
          "key": "verifythatdoesnothaveemploymentat()",
          "definition": "Verify_that_does_not_have_employment_at( string personName, string orgName )"
        },
        "verifygenderis()": {
          "name": "Verify_gender_is_",
          "key": "verifygenderis()",
          "definition": "Verify_gender_is_(Gender gender)"
        },
        "statusis()": {
          "name": "status_is__",
          "key": "statusis()",
          "definition": "status_is__(PersonStatus status)"
        },
        "createpersonnamed()": {
          "name": "Create_person_named__",
          "key": "createpersonnamed()",
          "definition": "Create_person_named__(string firstLastName)"
        },
        "createactiveportalaccesswithpermissionsinfrom()": {
          "name": "create_active_portal_access_with_permissions_in__from",
          "key": "createactiveportalaccesswithpermissionsinfrom()",
          "definition": "create_active_portal_access_with_permissions_in__from(string param1, string param2, string orgName)"
        },
        "employmentorganizationis()": {
          "name": "Employment_Organization_is",
          "key": "employmentorganizationis()",
          "definition": "Employment_Organization_is(string orgName)"
        },
        "driverslicenseforis()": {
          "name": "Drivers_License_for__is__",
          "key": "driverslicenseforis()",
          "definition": "Drivers_License_for__is__(string fullName, string driversLicense)"
        },
        "bloodtypeis()": {
          "name": "blood_type_is__",
          "key": "bloodtypeis()",
          "definition": "blood_type_is__(string bloodType)"
        },
        "driverslicenseis()": {
          "name": "Drivers_License_is",
          "key": "driverslicenseis()",
          "definition": "Drivers_License_is( string driversLicense )"
        },
        "verifypersonisactive()": {
          "name": "Verify_Person_is_active",
          "key": "verifypersonisactive()",
          "definition": "Verify_Person_is_active(string nameFirstLast)"
        },
        "createstudents()": {
          "name": "create_students",
          "key": "createstudents()",
          "definition": "create_students(int numOfPeople)"
        },
        "genderis()": {
          "name": "Gender_is__",
          "key": "genderis()",
          "definition": "Gender_is__(string gender)"
        },
        "wasabsentfor()": {
          "name": "_was_absent_for_",
          "key": "wasabsentfor()",
          "definition": "_was_absent_for_(string instructorFullName, string segmentName)"
        },
        "createpersonnamedwithssnandgender()": {
          "name": "Create_person_named_with_SSN_and_gender",
          "key": "createpersonnamedwithssnandgender()",
          "definition": "Create_person_named_with_SSN_and_gender( string name, string ssn, string gender )"
        },
        "eeoccategoryis()": {
          "name": "EEOC_Category_is__",
          "key": "eeoccategoryis()",
          "definition": "EEOC_Category_is__(string eeocCategory)"
        },
        "saveperson()": {
          "name": "Save_Person",
          "key": "saveperson()",
          "definition": "Save_Person( string personFullName )"
        },
        "saveemployment()": {
          "name": "Save_Employment",
          "key": "saveemployment()",
          "definition": "Save_Employment()"
        },
        "displayasprimary()": {
          "name": "DisplayAsPrimary",
          "key": "displayasprimary()",
          "definition": "DisplayAsPrimary(bool hasMultipleEmployments)"
        },
        "suffixis()": {
          "name": "Suffix_is__",
          "key": "suffixis()",
          "definition": "Suffix_is__(string suffix)"
        },
        "verifyhasstatus()": {
          "name": "Verify_has_status",
          "key": "verifyhasstatus()",
          "definition": "Verify_has_status(string dutyAssignmentName, string status)"
        },
        "setpersonudfto()": {
          "name": "set_person_udf__to__",
          "key": "setpersonudfto()",
          "definition": "set_person_udf__to__(string udfName, string value)"
        },
        "employmenttypeis()": {
          "name": "Employment_Type_is",
          "key": "employmenttypeis()",
          "definition": "Employment_Type_is(string title)"
        },
        "createpersonwithfirstnamelastnamemiddle()": {
          "name": "Create_person_with_first_name__last_name__middle__",
          "key": "createpersonwithfirstnamelastnamemiddle()",
          "definition": "Create_person_with_first_name__last_name__middle__(string firstName, string lastName, string middleName)"
        },
        "employmentappointmenttypeis()": {
          "name": "Employment_Appointment_Type_is",
          "key": "employmentappointmenttypeis()",
          "definition": "Employment_Appointment_Type_is(string title)"
        },
        "updatecurrentpersonfromdatabase()": {
          "name": "update_current_person_from_database",
          "key": "updatecurrentpersonfromdatabase()",
          "definition": "update_current_person_from_database()"
        },
        "haircoloris()": {
          "name": "hair_color_is__",
          "key": "haircoloris()",
          "definition": "hair_color_is__(string color)"
        },
        "verifythathasphonenumberandtype()": {
          "name": "Verify_that_has_phone_number_and_type",
          "key": "verifythathasphonenumberandtype()",
          "definition": "Verify_that_has_phone_number_and_type( string name, string number, string phoneType )"
        },
        "weightis()": {
          "name": "weight_is__",
          "key": "weightis()",
          "definition": "weight_is__(int weight)"
        },
        "checkthatcurrentpersonhasgender()": {
          "name": "Check_that_current_person_has_gender",
          "key": "checkthatcurrentpersonhasgender()",
          "definition": "Check_that_current_person_has_gender( Gender gender )"
        },
        "setavailabilityprofileto()": {
          "name": "Set_Availability_Profile_to__",
          "key": "setavailabilityprofileto()",
          "definition": "Set_Availability_Profile_to__(string availabilityProfile)"
        },
        "employmentdutyassignmentisstatus()": {
          "name": "Employment_Duty_Assignment_is_status",
          "key": "employmentdutyassignmentisstatus()",
          "definition": "Employment_Duty_Assignment_is_status(string orgName, string status)"
        },
        "deleteperson()": {
          "name": "Delete_Person",
          "key": "deleteperson()",
          "definition": "Delete_Person(string nameFirstLast)"
        },
        "dateofbirthis()": {
          "name": "date_of_birth_is__",
          "key": "dateofbirthis()",
          "definition": "date_of_birth_is__(DateTime dob)"
        }
      },
      "key": "personmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "PersonManagement",
      "instance-name": "PersonManagement"
    },
    "taskrunner": {
      "namespace": "",
      "methods": {
        "runtask()": {
          "name": "Run_task_",
          "key": "runtask()",
          "definition": "Run_task_( AcadisTaskType taskType )"
        },
        "tasktookzerotime()": {
          "name": "Task_took_zero_time",
          "key": "tasktookzerotime()",
          "definition": "Task_took_zero_time()"
        },
        "runcerttask()": {
          "name": "Run_cert_task_",
          "key": "runcerttask()",
          "definition": "Run_cert_task_(AcadisTaskType certTaskType)"
        }
      },
      "key": "taskrunner",
      "is-parent": true,
      "parent-name": "Workflow",
      "class-name": "TaskRunnerWorkflow",
      "instance-name": "TaskRunner"
    },
    "testopiaconfigurationmanager": {
      "namespace": "",
      "methods": {
        "setappsetting()": {
          "name": "SetAppSetting",
          "key": "setappsetting()",
          "definition": "SetAppSetting(AcadisConfigurationSettings key, string value)"
        },
        "reset()": {
          "name": "Reset",
          "key": "reset()",
          "definition": "Reset()"
        }
      },
      "key": "testopiaconfigurationmanager",
      "is-parent": false,
      "parent-name": null,
      "class-name": "TestopiaConfigurationManager",
      "instance-name": "TestopiaConfigurationManager"
    },
    "trainingeventtesthelpers": {
      "namespace": "",
      "methods": {
        
      },
      "key": "trainingeventtesthelpers",
      "is-parent": false,
      "parent-name": null,
      "class-name": "TrainingEventTestHelpers",
      "instance-name": "TrainingEventTestHelpers"
    },
    "viewverification": {
      "namespace": "",
      "methods": {
        "usingcurrentrowverifyisnull()": {
          "name": "Using_current_row_verify__is_null",
          "key": "usingcurrentrowverifyisnull()",
          "definition": "Using_current_row_verify__is_null(string columnName)"
        },
        "runviewexpectingresults()": {
          "name": "Run_view__expecting_results",
          "key": "runviewexpectingresults()",
          "definition": "Run_view__expecting_results(string viewName)"
        },
        "verifyresultscontainsrowswhere()": {
          "name": "Verify_results_contains__rows_where__",
          "key": "verifyresultscontainsrowswhere()",
          "definition": "Verify_results_contains__rows_where__(int numRows, string whereClause)"
        },
        "usingcurrentrowverifyis()": {
          "name": "Using_current_row_verify__is__",
          "key": "usingcurrentrowverifyis()",
          "definition": "Using_current_row_verify__is__(string columnName, string columnValue)"
        },
        "setrowwhereascurrent()": {
          "name": "Set_row_where__as_current",
          "key": "setrowwhereascurrent()",
          "definition": "Set_row_where__as_current(string whereClause)"
        }
      },
      "key": "viewverification",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "ViewVerification",
      "instance-name": "ViewVerification"
    },
    "quicksearch": {
      "namespace": "",
      "methods": {
        
      },
      "key": "quicksearch",
      "is-parent": false,
      "parent-name": "MVBaseWorkflow",
      "class-name": "QuickSearchWorkflow",
      "instance-name": "QuickSearch"
    },
    "resourcefnhmanagement": {
      "namespace": "",
      "methods": {
        "createresourcecategory()": {
          "name": "Create_resource_category",
          "key": "createresourcecategory()",
          "definition": "Create_resource_category( string categoryName )"
        },
        "verifythathasconflict()": {
          "name": "Verify_that_has_conflict",
          "key": "verifythathasconflict()",
          "definition": "Verify_that_has_conflict( string facilityName, int expectedConflictCount )"
        },
        "setquantityoffacilityto()": {
          "name": "Set_quantity_of_facility_to",
          "key": "setquantityoffacilityto()",
          "definition": "Set_quantity_of_facility_to( string facilityName, int quantity )"
        },
        "setstatusoffacilityto()": {
          "name": "Set_status_of_facility_to",
          "key": "setstatusoffacilityto()",
          "definition": "Set_status_of_facility_to(string facilityName, string status )"
        },
        "assignfacilitynamedtoruleinclass()": {
          "name": "Assign_facility_named_to_rule_in_class",
          "key": "assignfacilitynamedtoruleinclass()",
          "definition": "Assign_facility_named_to_rule_in_class( string facilityName, string ruleName, string className )"
        },
        "categorizeas()": {
          "name": "Categorize_as",
          "key": "categorizeas()",
          "definition": "Categorize_as( string facilityName, string categoryName )"
        },
        "createfacilitynamed()": {
          "name": "Create_facility_named__",
          "key": "createfacilitynamed()",
          "definition": "Create_facility_named__(string facilityName)"
        },
        "createfacilitynamedusingprofile()": {
          "name": "Create_facility_named__using_profile__",
          "key": "createfacilitynamedusingprofile()",
          "definition": "Create_facility_named__using_profile__(string facilityName, string profileName)"
        }
      },
      "key": "resourcefnhmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "ResourceFNHManagement",
      "instance-name": "ResourceFNHManagement"
    },
    "instructorpersistence": {
      "namespace": "",
      "methods": {
        "getinstructorsindivisions()": {
          "name": "Get_instructors_in_divisions",
          "key": "getinstructorsindivisions()",
          "definition": "Get_instructors_in_divisions(List<string> divisionNames)"
        },
        "verifythatresultscontain()": {
          "name": "Verify_that_results_contain__",
          "key": "verifythatresultscontain()",
          "definition": "Verify_that_results_contain__(List<string> instructorNames)"
        },
        "getinstructorswithcertifications()": {
          "name": "Get_instructors_with_certifications",
          "key": "getinstructorswithcertifications()",
          "definition": "Get_instructors_with_certifications(List<string> certificationNames)"
        },
        "verifythatthereareresults()": {
          "name": "Verify_that_there_are__results",
          "key": "verifythatthereareresults()",
          "definition": "Verify_that_there_are__results(int numResults)"
        },
        "getinstructorsindivisionandcertificationor()": {
          "name": "Get_instructors_in_division_and_certification_or",
          "key": "getinstructorsindivisionandcertificationor()",
          "definition": "Get_instructors_in_division_and_certification_or(string divisionName, string certificationName1, string certificationName2)"
        },
        "verifythatresultsdonotcontain()": {
          "name": "Verify_that_results_do_not_contain__",
          "key": "verifythatresultsdonotcontain()",
          "definition": "Verify_that_results_do_not_contain__(List<string> instructorNames)"
        },
        "getinstructorsindivisionandcertification()": {
          "name": "Get_instructors_in_division_and_certification",
          "key": "getinstructorsindivisionandcertification()",
          "definition": "Get_instructors_in_division_and_certification(string divisionName, string certificationName)"
        },
        "getinstructorsindivision()": {
          "name": "Get_instructors_in_division__",
          "key": "getinstructorsindivision()",
          "definition": "Get_instructors_in_division__(string divisionName)"
        },
        "getinstructorswithnodivisions()": {
          "name": "Get_instructors_with_no_divisions",
          "key": "getinstructorswithnodivisions()",
          "definition": "Get_instructors_with_no_divisions()"
        },
        "getinstructorsindivisionorandcertificationor()": {
          "name": "Get_instructors_in_division_or_and_certification_or",
          "key": "getinstructorsindivisionorandcertificationor()",
          "definition": "Get_instructors_in_division_or_and_certification_or(string divisionName1, string divisionName2, string certificationName1, string certificationName2)"
        }
      },
      "key": "instructorpersistence",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "InstructorPersistence",
      "instance-name": "InstructorPersistence"
    },
    "observedtestmanagement": {
      "namespace": "",
      "methods": {
        "eachattemptcanrangefromtowithbeingtheminpassingscore()": {
          "name": "Each_attempt_can_range_from_to_with_being_the_min_passing_score",
          "key": "eachattemptcanrangefromtowithbeingtheminpassingscore()",
          "definition": "Each_attempt_can_range_from_to_with_being_the_min_passing_score( decimal min, decimal max, decimal passing )"
        },
        "timedtestallowsattemptlabeled()": {
          "name": "Timed_Test_allows_attempt_labeled",
          "key": "timedtestallowsattemptlabeled()",
          "definition": "Timed_Test_allows_attempt_labeled( int numAttempts, string attemptLabel )"
        },
        "theoverallpassingscoreis()": {
          "name": "The_overall_passing_score_is",
          "key": "theoverallpassingscoreis()",
          "definition": "The_overall_passing_score_is( decimal passing )"
        },
        "setscoringmethodto()": {
          "name": "Set_Scoring_Method_To",
          "key": "setscoringmethodto()",
          "definition": "Set_Scoring_Method_To(string scoringMethod)"
        },
        "createscale()": {
          "name": "Create_Scale",
          "key": "createscale()",
          "definition": "Create_Scale()"
        },
        "settestscoretothebetheoftheparts()": {
          "name": "Set_Test_Score_To_The_Be_The__Of_The_Parts",
          "key": "settestscoretothebetheoftheparts()",
          "definition": "Set_Test_Score_To_The_Be_The__Of_The_Parts(string Average)"
        },
        "assignscaletotest()": {
          "name": "assign_scale_to_test",
          "key": "assignscaletotest()",
          "definition": "assign_scale_to_test(string scaleName)"
        },
        "setmininumnumberofattemptsrequiredtopassto()": {
          "name": "Set_mininum_number_of_attempts_required_to_pass_to",
          "key": "setmininumnumberofattemptsrequiredtopassto()",
          "definition": "Set_mininum_number_of_attempts_required_to_pass_to(int passingAttempts)"
        },
        "allowretestsforfailedtestsonly()": {
          "name": "Allow__retests_for_failed_tests_only",
          "key": "allowretestsforfailedtestsonly()",
          "definition": "Allow__retests_for_failed_tests_only(int numberOfRetests)"
        },
        "useexistingscale()": {
          "name": "use_existing_scale",
          "key": "useexistingscale()",
          "definition": "use_existing_scale()"
        },
        "allowattemptslabeled()": {
          "name": "Allow_attempts_labeled",
          "key": "allowattemptslabeled()",
          "definition": "Allow_attempts_labeled( int numAttempts, string attemptLabel )"
        },
        "timedtestscoredby()": {
          "name": "Timed_Test_scored_by",
          "key": "timedtestscoredby()",
          "definition": "Timed_Test_scored_by( string scaleName )"
        },
        "attemptsminscoreispassscoreismaxscoreis()": {
          "name": "attempts_min_score_is_pass_score_is_max_score_is",
          "key": "attemptsminscoreispassscoreismaxscoreis()",
          "definition": "attempts_min_score_is_pass_score_is_max_score_is(int minimumScore, int passingScore, int maximumScore)"
        },
        "passedscoredas()": {
          "name": "Passed_scored_as",
          "key": "passedscoredas()",
          "definition": "Passed_scored_as(string scoreType)"
        },
        "thescaleisbasedontheofattempts()": {
          "name": "The_scale_is_based_on_the_of__attempts",
          "key": "thescaleisbasedontheofattempts()",
          "definition": "The_scale_is_based_on_the_of__attempts(string scoringMethod, string topOrBottom, int numAttempts)"
        },
        "highscoreisthanalowscore()": {
          "name": "high_score_is_than_a_low_score",
          "key": "highscoreisthanalowscore()",
          "definition": "high_score_is_than_a_low_score(string highOrLow)"
        },
        "assigntestnamedweight()": {
          "name": "Assign_test_named__weight__",
          "key": "assigntestnamedweight()",
          "definition": "Assign_test_named__weight__(string testName, decimal weight)"
        },
        "retestsarenotallowed()": {
          "name": "Retests_are_not_allowed",
          "key": "retestsarenotallowed()",
          "definition": "Retests_are_not_allowed()"
        },
        "createobservedtestoftypewithnamewithapositiveresultofwithanegativeresultof()": {
          "name": "create_observed_test_of_type_with_name_with_a_positive_result_of_with_a_negative_result_of",
          "key": "createobservedtestoftypewithnamewithapositiveresultofwithanegativeresultof()",
          "definition": "create_observed_test_of_type_with_name_with_a_positive_result_of_with_a_negative_result_of(string testType, string testName, string positiveLabel, string negativeLabel)"
        },
        "setminimumoverallpassingscoretopercent()": {
          "name": "Set_Minimum_Overall_Passing_Score_To__Percent",
          "key": "setminimumoverallpassingscoretopercent()",
          "definition": "Set_Minimum_Overall_Passing_Score_To__Percent(decimal minPassing)"
        },
        "verifyobservedtestexists()": {
          "name": "Verify_observed_test__exists",
          "key": "verifyobservedtestexists()",
          "definition": "Verify_observed_test__exists(string testName)"
        },
        "waivedscoreis()": {
          "name": "waived_score_is",
          "key": "waivedscoreis()",
          "definition": "waived_score_is(decimal score)"
        },
        "assigntestnamedtoactivitynamed()": {
          "name": "Assign_test_named__to_activity_named__",
          "key": "assigntestnamedtoactivitynamed()",
          "definition": "Assign_test_named__to_activity_named__(string testName, string activityName)"
        },
        "usingtestnamed()": {
          "name": "Using_test_named__",
          "key": "usingtestnamed()",
          "definition": "Using_test_named__(string testName)"
        },
        "multiparttesthastests()": {
          "name": "Multipart_test_has_tests",
          "key": "multiparttesthastests()",
          "definition": "Multipart_test_has_tests(string testName, List<string> testParts)"
        },
        "duplicatenamed()": {
          "name": "Duplicate_named",
          "key": "duplicatenamed()",
          "definition": "Duplicate_named( string testToCopy, string newTestName )"
        },
        "defineastest()": {
          "name": "Define_as_Test",
          "key": "defineastest()",
          "definition": "Define_as_Test(string name, TestType type)"
        },
        "addexistingtest()": {
          "name": "Add_Existing_Test",
          "key": "addexistingtest()",
          "definition": "Add_Existing_Test( string testName )"
        },
        "waiversarenotallowed()": {
          "name": "Waivers_are_not_allowed",
          "key": "waiversarenotallowed()",
          "definition": "Waivers_are_not_allowed()"
        },
        "failedscoredas()": {
          "name": "Failed_scored_as",
          "key": "failedscoredas()",
          "definition": "Failed_scored_as(string scoreType)"
        },
        "scoretestasofattempts()": {
          "name": "Score_test_as_of__attempts",
          "key": "scoretestasofattempts()",
          "definition": "Score_test_as_of__attempts( string scoringMethod, string topOrBottom, int numAttempts )"
        },
        "headerfortestwillbe()": {
          "name": "Header_for_test_will_be",
          "key": "headerfortestwillbe()",
          "definition": "Header_for_test_will_be( string headerText )"
        },
        "iwanttoratethescoredvalue()": {
          "name": "I_want_to_rate_the_scored_value",
          "key": "iwanttoratethescoredvalue()",
          "definition": "I_want_to_rate_the_scored_value()"
        },
        "failedretestisdefinedwithascoreof()": {
          "name": "failed_retest_is_defined_with_a_score_of_",
          "key": "failedretestisdefinedwithascoreof()",
          "definition": "failed_retest_is_defined_with_a_score_of_(decimal score)"
        },
        "setpassfailsimplescoringmethodto()": {
          "name": "Set_pass_fail_simple_scoring_method_to",
          "key": "setpassfailsimplescoringmethodto()",
          "definition": "Set_pass_fail_simple_scoring_method_to(string scoringMethod)"
        },
        "allowwaivers()": {
          "name": "Allow_waivers",
          "key": "allowwaivers()",
          "definition": "Allow_waivers()"
        },
        "timedtestismeasuredas()": {
          "name": "Timed_Test_is_measured_as",
          "key": "timedtestismeasuredas()",
          "definition": "Timed_Test_is_measured_as( string timePattern )"
        },
        "decimalsallowedis()": {
          "name": "decimals_allowed_is",
          "key": "decimalsallowedis()",
          "definition": "decimals_allowed_is(int numberofDecimals)"
        },
        "retestsandwaiversarenotallowed()": {
          "name": "retests_and_waivers_are_not_allowed",
          "key": "retestsandwaiversarenotallowed()",
          "definition": "retests_and_waivers_are_not_allowed()"
        },
        "addinstructions()": {
          "name": "Add_instructions",
          "key": "addinstructions()",
          "definition": "Add_instructions( string instructions )"
        },
        "allowretests()": {
          "name": "Allow_retests",
          "key": "allowretests()",
          "definition": "Allow_retests(int numberOfRetests)"
        },
        "saveobservedtest()": {
          "name": "Save_Observed_Test",
          "key": "saveobservedtest()",
          "definition": "Save_Observed_Test( string testName )"
        },
        "passedretestisdefinedwithascoreof()": {
          "name": "passed_retest_is_defined_with_a_score_of_",
          "key": "passedretestisdefinedwithascoreof()",
          "definition": "passed_retest_is_defined_with_a_score_of_(decimal score)"
        }
      },
      "key": "observedtestmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "ObservedTestManagement",
      "instance-name": "ObservedTestManagement"
    },
    "adminshortcuts": {
      "namespace": "",
      "methods": {
        "deleteudffieldsfor()": {
          "name": "Delete_udf_fields_for__",
          "key": "deleteudffieldsfor()",
          "definition": "Delete_udf_fields_for__(string entityType)"
        }
      },
      "key": "adminshortcuts",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "AdminShortcuts",
      "instance-name": "AdminShortcuts"
    },
    "certificationqualificationdata": {
      "namespace": "",
      "methods": {
        
      },
      "key": "certificationqualificationdata",
      "is-parent": false,
      "parent-name": null,
      "class-name": "CertificationQualificationData",
      "instance-name": "CertificationQualificationData"
    },
    "classregistrationrecord": {
      "namespace": "",
      "methods": {
        "addudf()": {
          "name": "Add__udf__",
          "key": "addudf()",
          "definition": "Add__udf__(string entityType, string udf)"
        },
        "bindrequestedenrollmentinfo()": {
          "name": "BindRequestedEnrollmentInfo",
          "key": "bindrequestedenrollmentinfo()",
          "definition": "BindRequestedEnrollmentInfo(List<UdfDTO> udfs)"
        },
        "bindoldprerequisites()": {
          "name": "BindOldPrerequisites",
          "key": "bindoldprerequisites()",
          "definition": "BindOldPrerequisites(List<string> preReqs)"
        },
        "bindrequestedreginfo()": {
          "name": "BindRequestedRegInfo",
          "key": "bindrequestedreginfo()",
          "definition": "BindRequestedRegInfo(List<UdfDTO> udfs)"
        },
        "requireallprerequisitesbefulfilledforenrollmentrequests()": {
          "name": "Require_all_prerequisites_be_fulfilled_for_enrollment_requests",
          "key": "requireallprerequisitesbefulfilledforenrollmentrequests()",
          "definition": "Require_all_prerequisites_be_fulfilled_for_enrollment_requests()"
        },
        "allowunfulfilledprerequisitesforenrollmentrequests()": {
          "name": "Allow_unfulfilled_prerequisites_for_enrollment_requests",
          "key": "allowunfulfilledprerequisitesforenrollmentrequests()",
          "definition": "Allow_unfulfilled_prerequisites_for_enrollment_requests()"
        },
        "sethasstudentsalert()": {
          "name": "SetHasStudentsAlert",
          "key": "sethasstudentsalert()",
          "definition": "SetHasStudentsAlert(bool onlyDrafts)"
        },
        "verifyallprerequisitesmustbefulfilledforenrollmentrequests()": {
          "name": "Verify_all_prerequisites_must_be_fulfilled_for_enrollment_requests",
          "key": "verifyallprerequisitesmustbefulfilledforenrollmentrequests()",
          "definition": "Verify_all_prerequisites_must_be_fulfilled_for_enrollment_requests()"
        },
        "bindprerequisites()": {
          "name": "BindPrerequisites",
          "key": "bindprerequisites()",
          "definition": "BindPrerequisites()"
        },
        "returntoreferrer()": {
          "name": "ReturnToReferrer",
          "key": "returntoreferrer()",
          "definition": "ReturnToReferrer()"
        },
        "browsetoregistrationrecordforclass()": {
          "name": "Browse_to_registration_record_for_class__",
          "key": "browsetoregistrationrecordforclass()",
          "definition": "Browse_to_registration_record_for_class__(string className)"
        }
      },
      "key": "classregistrationrecord",
      "is-parent": false,
      "parent-name": "MVBaseWorkflow",
      "class-name": "ClassRegistrationRecordWorkflow",
      "instance-name": "ClassRegistrationRecord"
    },
    "personemploymentfnhmanagement": {
      "namespace": "",
      "methods": {
        "consideremploymentatstarting()": {
          "name": "Consider__employment_at__starting__",
          "key": "consideremploymentatstarting()",
          "definition": "Consider__employment_at__starting__(string personName, string organizationName, DateTime hireDate)"
        },
        "saveemploymentfails()": {
          "name": "SaveEmploymentFails",
          "key": "saveemploymentfails()",
          "definition": "SaveEmploymentFails()"
        },
        "verifyactionappointmenttypeis()": {
          "name": "Verify_action_appointment_type_is",
          "key": "verifyactionappointmenttypeis()",
          "definition": "Verify_action_appointment_type_is(string appointmentType)"
        },
        "verifyhassupervisorycodeat()": {
          "name": "Verify__has_supervisory_code__at__",
          "key": "verifyhassupervisorycodeat()",
          "definition": "Verify__has_supervisory_code__at__(string personName, string supervisoryCode, string orgName)"
        },
        "verifyhasasaprimaryemploymenteffective()": {
          "name": "Verify__has__as_a_primary_employment_effective_",
          "key": "verifyhasasaprimaryemploymenteffective()",
          "definition": "Verify__has__as_a_primary_employment_effective_(string employeeName, string companyName, string effectiveDate)"
        },
        "verifyprimaryemploymentis()": {
          "name": "VerifyPrimaryEmploymentIs",
          "key": "verifyprimaryemploymentis()",
          "definition": "VerifyPrimaryEmploymentIs(string employmentName)"
        },
        "verifycommentis()": {
          "name": "Verify_comment_is__",
          "key": "verifycommentis()",
          "definition": "Verify_comment_is__(string commentText)"
        },
        "verifywasneveremployedby()": {
          "name": "Verify__was_never_employed_by__",
          "key": "verifywasneveremployedby()",
          "definition": "Verify__was_never_employed_by__(string personName, string orgName)"
        },
        "addemploymentforatorganizationaswithtitleandhiredate()": {
          "name": "Add_employment_for_at_organization_as_with_Title_and_hire_date",
          "key": "addemploymentforatorganizationaswithtitleandhiredate()",
          "definition": "Add_employment_for_at_organization_as_with_Title_and_hire_date( string personName, string orgName, string empName, string title, DateTime hireDate )"
        },
        "defineemploymentinformationforsetorganizationtowithaneffectivedateofandtitleof()": {
          "name": "Define_employment_information_for__set_organization_to__with_an_effective_date_of__and_title_of_",
          "key": "defineemploymentinformationforsetorganizationtowithaneffectivedateofandtitleof()",
          "definition": "Define_employment_information_for__set_organization_to__with_an_effective_date_of__and_title_of_(string employeeName, string organizationName, string effectiveDate, string title)"
        },
        "setpaygradeto()": {
          "name": "set_pay_grade_to",
          "key": "setpaygradeto()",
          "definition": "set_pay_grade_to(string value)"
        },
        "verifyhasemploymenttypeat()": {
          "name": "Verify__has_employment_type__at__",
          "key": "verifyhasemploymenttypeat()",
          "definition": "Verify__has_employment_type__at__(string personName, string employmentType, string orgName)"
        },
        "setemploymentstatusto()": {
          "name": "SetEmploymentStatusTo",
          "key": "setemploymentstatusto()",
          "definition": "SetEmploymentStatusTo(string status, string subStatus)"
        },
        "verifyactionstatusis()": {
          "name": "Verify_action_status_is__",
          "key": "verifyactionstatusis()",
          "definition": "Verify_action_status_is__(string status)"
        },
        "verifyhassalaryat()": {
          "name": "Verify__has_salary__at__",
          "key": "verifyhassalaryat()",
          "definition": "Verify__has_salary__at__(string personName, string salary, string orgName)"
        },
        "setemploymentorganization()": {
          "name": "SetEmploymentOrganization",
          "key": "setemploymentorganization()",
          "definition": "SetEmploymentOrganization(string employmentName, string organization)"
        },
        "consideractioneffectiveon()": {
          "name": "Consider_action_effective_on__",
          "key": "consideractioneffectiveon()",
          "definition": "Consider_action_effective_on__(DateTime effectiveDate)"
        },
        "hireatstatus()": {
          "name": "HireAtStatus",
          "key": "hireatstatus()",
          "definition": "HireAtStatus(string person, string organizationName, string status)"
        },
        "setsalaryincentivesto()": {
          "name": "set_salary_incentives_to",
          "key": "setsalaryincentivesto()",
          "definition": "set_salary_incentives_to(string value)"
        },
        "setemploymenteffectivedate()": {
          "name": "SetEmploymentEffectiveDate",
          "key": "setemploymenteffectivedate()",
          "definition": "SetEmploymentEffectiveDate(string employmentName, string startDate)"
        },
        "verifyisnotemployedat()": {
          "name": "Verify__is_not_employed_at__",
          "key": "verifyisnotemployedat()",
          "definition": "Verify__is_not_employed_at__(string personName, string orgName)"
        },
        "verifyhaspaygradeat()": {
          "name": "Verify__has_pay_grade__at__",
          "key": "verifyhaspaygradeat()",
          "definition": "Verify__has_pay_grade__at__(string personName, string payGrade, string orgName)"
        },
        "setstatustofordutyassignmentat()": {
          "name": "Set_status_to__for_duty_assignment_at__",
          "key": "setstatustofordutyassignmentat()",
          "definition": "Set_status_to__for_duty_assignment_at__(AssignmentStatus status, string dutyLocation)"
        },
        "verifyhaspayplanat()": {
          "name": "Verify__has_pay_plan__at__",
          "key": "verifyhaspayplanat()",
          "definition": "Verify__has_pay_plan__at__(string personName, string payPlan, string orgName)"
        },
        "verifyassignmentstatusis()": {
          "name": "Verify_assignment_status_is__",
          "key": "verifyassignmentstatusis()",
          "definition": "Verify_assignment_status_is__(AssignmentStatus status)"
        },
        "verifyemploymentisprimary()": {
          "name": "VerifyEmploymentIsPrimary",
          "key": "verifyemploymentisprimary()",
          "definition": "VerifyEmploymentIsPrimary()"
        },
        "addtemporarydutyassignmentatstartingwithstatus()": {
          "name": "Add_temporary_duty_assignment_at__starting__with_status__",
          "key": "addtemporarydutyassignmentatstartingwithstatus()",
          "definition": "Add_temporary_duty_assignment_at__starting__with_status__(string orgName, DateTime startDate, AssignmentStatus status)"
        },
        "beginverifyingtheemploymentactionforatthattookeffecton()": {
          "name": "Begin_verifying_the_employment_action_for__at__that_took_effect_on__",
          "key": "beginverifyingtheemploymentactionforatthattookeffecton()",
          "definition": "Begin_verifying_the_employment_action_for__at__that_took_effect_on__(string personName, string orgName, DateTime effectiveDate)"
        },
        "verifyactionchangetypeisahireaction()": {
          "name": "Verify_action_change_type_is_a_hire_action",
          "key": "verifyactionchangetypeisahireaction()",
          "definition": "Verify_action_change_type_is_a_hire_action()"
        },
        "setemploymentasprimary()": {
          "name": "SetEmploymentAsPrimary",
          "key": "setemploymentasprimary()",
          "definition": "SetEmploymentAsPrimary(string employmentName)"
        },
        "usingemployment()": {
          "name": "Using_employment__",
          "key": "usingemployment()",
          "definition": "Using_employment__(string employmentName)"
        },
        "verifyactionisbefore()": {
          "name": "VerifyActionIsBefore",
          "key": "verifyactionisbefore()",
          "definition": "VerifyActionIsBefore(string action_1, string action_2)"
        },
        "verifypaygradeis()": {
          "name": "Verify_pay_grade_is__",
          "key": "verifypaygradeis()",
          "definition": "Verify_pay_grade_is__(string payGrade)"
        },
        "usingemploymentofat()": {
          "name": "Using_employment_of__at__",
          "key": "usingemploymentofat()",
          "definition": "Using_employment_of__at__(string personName, string orgName)"
        },
        "statusis()": {
          "name": "StatusIs",
          "key": "statusis()",
          "definition": "StatusIs(string str)"
        },
        "verifyhasemploymentactionfor()": {
          "name": "Verify__has__employment_action_for__",
          "key": "verifyhasemploymentactionfor()",
          "definition": "Verify__has__employment_action_for__(string personName, int count, string orgName)"
        },
        "verifyactionchangetypeis()": {
          "name": "Verify_action_change_type_is__",
          "key": "verifyactionchangetypeis()",
          "definition": "Verify_action_change_type_is__(string changeType)"
        },
        "verifypaystepis()": {
          "name": "Verify_pay_step_is__",
          "key": "verifypaystepis()",
          "definition": "Verify_pay_step_is__(string payStep)"
        },
        "verifyemploymentgapsexist()": {
          "name": "VerifyEmploymentGapsExist",
          "key": "verifyemploymentgapsexist()",
          "definition": "VerifyEmploymentGapsExist()"
        },
        "verifyhasdutyassignments()": {
          "name": "Verify_has__duty_assignments",
          "key": "verifyhasdutyassignments()",
          "definition": "Verify_has__duty_assignments(int count)"
        },
        "saveemployment()": {
          "name": "SaveEmployment",
          "key": "saveemployment()",
          "definition": "SaveEmployment()"
        },
        "saveaction()": {
          "name": "SaveAction",
          "key": "saveaction()",
          "definition": "SaveAction()"
        },
        "setpaystepto()": {
          "name": "set_pay_step_to",
          "key": "setpaystepto()",
          "definition": "set_pay_step_to(string value)"
        },
        "verifyhasappointmenttypeat()": {
          "name": "Verify__has_appointment_type__at__",
          "key": "verifyhasappointmenttypeat()",
          "definition": "Verify__has_appointment_type__at__(string personName, string appointmentType, string orgName)"
        },
        "setemploymentudftoforat()": {
          "name": "Set_employment_udf__to__for__at__",
          "key": "setemploymentudftoforat()",
          "definition": "Set_employment_udf__to__for__at__(string udfName, string value, string personName, string employerName)"
        },
        "titleis()": {
          "name": "TitleIs",
          "key": "titleis()",
          "definition": "TitleIs(string title)"
        },
        "addemploymentascopyof()": {
          "name": "AddEmploymentAsCopyOf",
          "key": "addemploymentascopyof()",
          "definition": "AddEmploymentAsCopyOf(string employmentName)"
        },
        "verifyemploymenttypeis()": {
          "name": "Verify_employment_type_is__",
          "key": "verifyemploymenttypeis()",
          "definition": "Verify_employment_type_is__(string employmentType)"
        },
        "addemploymentwithname()": {
          "name": "AddEmploymentWithName",
          "key": "addemploymentwithname()",
          "definition": "AddEmploymentWithName(string employmentName)"
        },
        "verifyemploymentwithhasdutyassignmentwiththatis()": {
          "name": "Verify_employment_with_has_duty_assignment_with_that_is",
          "key": "verifyemploymentwithhasdutyassignmentwiththatis()",
          "definition": "Verify_employment_with_has_duty_assignment_with_that_is(string companyName, string divisionName, string status)"
        },
        "adddutyassignmentatfromtowithstatus()": {
          "name": "Add_duty_assignment_at__from__to__with_status__",
          "key": "adddutyassignmentatfromtowithstatus()",
          "definition": "Add_duty_assignment_at__from__to__with_status__(string orgName, DateTime startDate, DateTime endDate, AssignmentStatus status)"
        },
        "verifyactiontitleis()": {
          "name": "Verify_action_title_is__",
          "key": "verifyactiontitleis()",
          "definition": "Verify_action_title_is__(string title)"
        },
        "addemploymenttousingorganizationwithtitleandemploymenttypeandstatus()": {
          "name": "AddEmploymentTo_UsingOrganization_WithTitle_AndEmploymentType_AndStatus_",
          "key": "addemploymenttousingorganizationwithtitleandemploymenttypeandstatus()",
          "definition": "AddEmploymentTo_UsingOrganization_WithTitle_AndEmploymentType_AndStatus_(string personName, string orgaName, string title, string type, string status)"
        },
        "verifytemporary()": {
          "name": "Verify__temporary",
          "key": "verifytemporary()",
          "definition": "Verify__temporary(string isIsNot)"
        },
        "verifyisemployedby()": {
          "name": "Verify_is_employed_by",
          "key": "verifyisemployedby()",
          "definition": "Verify_is_employed_by(string name, string employer)"
        },
        "addemploymentstatus()": {
          "name": "AddEmploymentStatus",
          "key": "addemploymentstatus()",
          "definition": "AddEmploymentStatus(string status)"
        },
        "verifypayplanis()": {
          "name": "Verify_pay_plan_is__",
          "key": "verifypayplanis()",
          "definition": "Verify_pay_plan_is__(string payPlan)"
        },
        "deleteemploymentforeffectivefor()": {
          "name": "Delete_employment_for__effective__for_",
          "key": "deleteemploymentforeffectivefor()",
          "definition": "Delete_employment_for__effective__for_(string companyName, string effectiveDate, string employeeName)"
        },
        "addemploymentforatorganizationas()": {
          "name": "Add_employment_for__at_organization__as__",
          "key": "addemploymentforatorganizationas()",
          "definition": "Add_employment_for__at_organization__as__(string personName, string orgName, string empName)"
        },
        "organizationis()": {
          "name": "OrganizationIs",
          "key": "organizationis()",
          "definition": "OrganizationIs(string name)"
        },
        "verifyemploymentwithaswithstartingdate()": {
          "name": "Verify_employment_with_as_with_starting_date",
          "key": "verifyemploymentwithaswithstartingdate()",
          "definition": "Verify_employment_with_as_with_starting_date(string companyName, string title, DateTime effectiveDate)"
        },
        "verifyhasemploymenteffective()": {
          "name": "Verify__has__employment_effective_",
          "key": "verifyhasemploymenteffective()",
          "definition": "Verify__has__employment_effective_(string employeeName, string companyName, string effectiveDate)"
        },
        "verifyassignmentstartis()": {
          "name": "Verify_assignment_start_is__",
          "key": "verifyassignmentstartis()",
          "definition": "Verify_assignment_start_is__(DateTime date)"
        },
        "verifysalaryincentivesis()": {
          "name": "Verify_salary_incentives_is__",
          "key": "verifysalaryincentivesis()",
          "definition": "Verify_salary_incentives_is__(string salaryIncentives)"
        },
        "actionis()": {
          "name": "ActionIs",
          "key": "actionis()",
          "definition": "ActionIs(string action)"
        },
        "verifyhasanactiveemploymentat()": {
          "name": "Verify_has_an_active_employment_at",
          "key": "verifyhasanactiveemploymentat()",
          "definition": "Verify_has_an_active_employment_at(string personName, string employer)"
        },
        "verifyactioneffectivedateis()": {
          "name": "VerifyActionEffectiveDateIs",
          "key": "verifyactioneffectivedateis()",
          "definition": "VerifyActionEffectiveDateIs(string actionName, string effectiveDate)"
        },
        "verifyemploymentatstarting()": {
          "name": "Verify__employment_at__starting__",
          "key": "verifyemploymentatstarting()",
          "definition": "Verify__employment_at__starting__(string personName, string hasDoesNotHave, string organizationName, DateTime hireDate)"
        },
        "effectivedateis()": {
          "name": "EffectiveDateIs",
          "key": "effectivedateis()",
          "definition": "EffectiveDateIs(DateTime date)"
        },
        "employmentdutylocationiswithstatus()": {
          "name": "Employment_duty_location_is_with_status",
          "key": "employmentdutylocationiswithstatus()",
          "definition": "Employment_duty_location_is_with_status(string divisionOrOrganization, string status)"
        },
        "verifyhastitleat()": {
          "name": "Verify__has_title__at__",
          "key": "verifyhastitleat()",
          "definition": "Verify__has_title__at__(string personName, string title, string orgName)"
        },
        "setsupervisorycodeto()": {
          "name": "set_supervisory_code_to",
          "key": "setsupervisorycodeto()",
          "definition": "set_supervisory_code_to(string value)"
        },
        "verifyhaschangecommentat()": {
          "name": "Verify__has_change_comment__at__",
          "key": "verifyhaschangecommentat()",
          "definition": "Verify__has_change_comment__at__(string personName, string comment, string orgName)"
        },
        "setcomments()": {
          "name": "SetComments",
          "key": "setcomments()",
          "definition": "SetComments(string comments)"
        },
        "setemploymentasnotprimary()": {
          "name": "SetEmploymentAsNotPrimary",
          "key": "setemploymentasnotprimary()",
          "definition": "SetEmploymentAsNotPrimary(string employmentName)"
        },
        "defineemploymentinformationforsetemploymenttofororganizationwithaneffectivedateofandtitleof()": {
          "name": "Define_employment_information_for__set_employment_to__for_organization__with_an_effective_date_of__and_title_of_",
          "key": "defineemploymentinformationforsetemploymenttofororganizationwithaneffectivedateofandtitleof()",
          "definition": "Define_employment_information_for__set_employment_to__for_organization__with_an_effective_date_of__and_title_of_(string employeeName, string employmentStatus, string organizationName, string effectiveDate, string title)"
        },
        "verifyhasaninactiveemploymentat()": {
          "name": "Verify_has_an_inactive_employment_at",
          "key": "verifyhasaninactiveemploymentat()",
          "definition": "Verify_has_an_inactive_employment_at(string personName, string employer)"
        },
        "setjobseriesto()": {
          "name": "set_job_series_to",
          "key": "setjobseriesto()",
          "definition": "set_job_series_to(string value)"
        },
        "verifyhaspaystepat()": {
          "name": "Verify__has_pay_step__at__",
          "key": "verifyhaspaystepat()",
          "definition": "Verify__has_pay_step__at__(string personName, string payStep, string orgName)"
        },
        "adddutyassignmentatstartingwithstatus()": {
          "name": "Add_duty_assignment_at__starting__with_status__",
          "key": "adddutyassignmentatstartingwithstatus()",
          "definition": "Add_duty_assignment_at__starting__with_status__(string orgName, DateTime startDate, AssignmentStatus status)"
        },
        "setasprimary()": {
          "name": "SetAsPrimary",
          "key": "setasprimary()",
          "definition": "SetAsPrimary()"
        },
        "verifytitleis()": {
          "name": "Verify_title_is__",
          "key": "verifytitleis()",
          "definition": "Verify_title_is__(string title)"
        },
        "adddutyassignmentatwithstatus()": {
          "name": "Add_duty_assignment_at__with_status__",
          "key": "adddutyassignmentatwithstatus()",
          "definition": "Add_duty_assignment_at__with_status__(string orgName, AssignmentStatus status)"
        },
        "appointmenttypeis()": {
          "name": "AppointmentTypeIs",
          "key": "appointmenttypeis()",
          "definition": "AppointmentTypeIs(string appointmentType)"
        },
        "addemploymentcommentforat()": {
          "name": "Add_employment_comment__for__at__",
          "key": "addemploymentcommentforat()",
          "definition": "Add_employment_comment__for__at__(string commentText, string personName, string orgName)"
        },
        "verifyhasactions()": {
          "name": "Verify_has__actions",
          "key": "verifyhasactions()",
          "definition": "Verify_has__actions(int count)"
        },
        "hireallatstatus()": {
          "name": "HireAllAtStatus",
          "key": "hireallatstatus()",
          "definition": "HireAllAtStatus(string organizationName, string status)"
        },
        "setemploymenttypeto()": {
          "name": "Set_Employment_Type_to_",
          "key": "setemploymenttypeto()",
          "definition": "Set_Employment_Type_to_(string employmentType)"
        },
        "createemploymentactionforofwithstatusandtitleandeffectivedate()": {
          "name": "Create_employment_action_for__of__with_status__and_title__and_effective_date__",
          "key": "createemploymentactionforofwithstatusandtitleandeffectivedate()",
          "definition": "Create_employment_action_for__of__with_status__and_title__and_effective_date__(string employmentKey, string reason, string status, string title, DateTime effectiveDate)"
        },
        "verifyactiontypeis()": {
          "name": "VerifyActionTypeIs",
          "key": "verifyactiontypeis()",
          "definition": "VerifyActionTypeIs(string actionName, string typeName)"
        },
        "verifyhasahiredateofat()": {
          "name": "Verify_has_a_hire_date_of_at",
          "key": "verifyhasahiredateofat()",
          "definition": "Verify_has_a_hire_date_of_at(string personName, DateTime hireDate, string employer)"
        },
        "deleteaction()": {
          "name": "DeleteAction",
          "key": "deleteaction()",
          "definition": "DeleteAction(string actionName)"
        },
        "verifyhassalaryincentivesat()": {
          "name": "Verify__has_salary_incentives__at__",
          "key": "verifyhassalaryincentivesat()",
          "definition": "Verify__has_salary_incentives__at__(string personName, string salaryIncentives, string orgName)"
        },
        "verifysupervisorycodeis()": {
          "name": "Verify_supervisory_code_is__",
          "key": "verifysupervisorycodeis()",
          "definition": "Verify_supervisory_code_is__(string supervisoryCode)"
        },
        "createemploymentforatorganizationaswithtitleandhiredate()": {
          "name": "Create_employment_for__at_organization__as__with_Title__and_hire_date__",
          "key": "createemploymentforatorganizationaswithtitleandhiredate()",
          "definition": "Create_employment_for__at_organization__as__with_Title__and_hire_date__(string personLabel, string orgLabel, string employmentLabel, string titleName, DateTime hireDate)"
        },
        "addseparationactiontocurrentemploymentwithstatuseffective()": {
          "name": "Add_separation_action_to_current_employment_with_status__effective__",
          "key": "addseparationactiontocurrentemploymentwithstatuseffective()",
          "definition": "Add_separation_action_to_current_employment_with_status__effective__(string status, DateTime effectiveDate)"
        },
        "verifyprimary()": {
          "name": "Verify__primary",
          "key": "verifyprimary()",
          "definition": "Verify__primary(string isIsNot)"
        },
        "deleteemploymentforat()": {
          "name": "Delete_employment_for__at__",
          "key": "deleteemploymentforat()",
          "definition": "Delete_employment_for__at__(string personName, string orgName)"
        },
        "setappointmenttypeto()": {
          "name": "Set_Appointment_Type_to_",
          "key": "setappointmenttypeto()",
          "definition": "Set_Appointment_Type_to_(string appointmentType)"
        },
        "verifyappointmenttypeis()": {
          "name": "Verify_appointment_type_is__",
          "key": "verifyappointmenttypeis()",
          "definition": "Verify_appointment_type_is__(string appointmentType)"
        },
        "addemploymentwithnameascopyof()": {
          "name": "AddEmploymentWithNameAsCopyOf",
          "key": "addemploymentwithnameascopyof()",
          "definition": "AddEmploymentWithNameAsCopyOf(string newName, string copyName)"
        },
        "verifysalaryis()": {
          "name": "Verify_salary_is__",
          "key": "verifysalaryis()",
          "definition": "Verify_salary_is__(string salary)"
        },
        "addtemporarydutyassignmentatfromtowithstatus()": {
          "name": "Add_temporary_duty_assignment_at__from__to__with_status__",
          "key": "addtemporarydutyassignmentatfromtowithstatus()",
          "definition": "Add_temporary_duty_assignment_at__from__to__with_status__(string orgName, DateTime startDate, DateTime endDate, AssignmentStatus status)"
        },
        "verifyhascommentat()": {
          "name": "Verify__has_comment__at__",
          "key": "verifyhascommentat()",
          "definition": "Verify__has_comment__at__(string personName, string commentText, string orgName)"
        },
        "verifyactioncommentis()": {
          "name": "Verify_action_comment_is__",
          "key": "verifyactioncommentis()",
          "definition": "Verify_action_comment_is__(string comment)"
        },
        "deleteemployment()": {
          "name": "DeleteEmployment",
          "key": "deleteemployment()",
          "definition": "DeleteEmployment(string employmentName)"
        },
        "hireallat()": {
          "name": "HireAllAt",
          "key": "hireallat()",
          "definition": "HireAllAt(string organizationName)"
        },
        "createemploymentactionforofwithtitleandeffectivedate()": {
          "name": "Create_employment_action_for__of__with_title__and_effective_date__",
          "key": "createemploymentactionforofwithtitleandeffectivedate()",
          "definition": "Create_employment_action_for__of__with_title__and_effective_date__(string employmentKey, string reason, string title, DateTime effectiveDate)"
        },
        "verifyassignmentendis()": {
          "name": "Verify_assignment_end_is__",
          "key": "verifyassignmentendis()",
          "definition": "Verify_assignment_end_is__(DateTime date)"
        },
        "assignmentstartiswithassignmentend()": {
          "name": "Assignment_start_is_with_assignment_end",
          "key": "assignmentstartiswithassignmentend()",
          "definition": "Assignment_start_is_with_assignment_end(DateTime start, DateTime end)"
        },
        "setemploymentcomments()": {
          "name": "SetEmploymentComments",
          "key": "setemploymentcomments()",
          "definition": "SetEmploymentComments(string employmentName, string comments)"
        },
        "verifyjobseriesis()": {
          "name": "Verify_job_series_is__",
          "key": "verifyjobseriesis()",
          "definition": "Verify_job_series_is__(string jobSeries)"
        },
        "verifyhasactioneffectivewithstatusandcomment()": {
          "name": "Verify_has_action__effective__with_status__and_comment__",
          "key": "verifyhasactioneffectivewithstatusandcomment()",
          "definition": "Verify_has_action__effective__with_status__and_comment__(string action, string effectiveDate, string status, string comment)"
        },
        "setemploymenttitle()": {
          "name": "SetEmploymentTitle",
          "key": "setemploymenttitle()",
          "definition": "SetEmploymentTitle(string employmentName, string employmentTitle)"
        },
        "setpayplanto()": {
          "name": "set_pay_plan_to",
          "key": "setpayplanto()",
          "definition": "set_pay_plan_to(string value)"
        },
        "considerdutyassignmentat()": {
          "name": "Consider__duty_assignment_at__",
          "key": "considerdutyassignmentat()",
          "definition": "Consider__duty_assignment_at__(AssignmentStatus status, string dutyLocation)"
        },
        "primaryemploymentequals()": {
          "name": "PrimaryEmploymentEquals",
          "key": "primaryemploymentequals()",
          "definition": "PrimaryEmploymentEquals(string organizationName)"
        },
        "verifyhasjobseriesat()": {
          "name": "Verify__has_job_series__at__",
          "key": "verifyhasjobseriesat()",
          "definition": "Verify__has_job_series__at__(string personName, string jobSeries, string orgName)"
        },
        "verifyactionemploymenttypeis()": {
          "name": "Verify_action_employment_type_is__",
          "key": "verifyactionemploymenttypeis()",
          "definition": "Verify_action_employment_type_is__(string employmentType)"
        },
        "verifyhasactioneffectivewithstatusandcommentat()": {
          "name": "Verify__has_action__effective__with_status__and_comment__at__",
          "key": "verifyhasactioneffectivewithstatusandcommentat()",
          "definition": "Verify__has_action__effective__with_status__and_comment__at__(string personName, string action, string effectiveDate, string status, string comment, string orgName)"
        },
        "employmenttypeis()": {
          "name": "EmploymentTypeIs",
          "key": "employmenttypeis()",
          "definition": "EmploymentTypeIs(string employmentType)"
        },
        "hireat()": {
          "name": "HireAt",
          "key": "hireat()",
          "definition": "HireAt( string person, string organizationName)"
        },
        "verifyhasudfofat()": {
          "name": "Verify__has_udf__of__at__",
          "key": "verifyhasudfofat()",
          "definition": "Verify__has_udf__of__at__(string personName, string udf, string value, string orgName)"
        },
        "addtemporarydutyassignmentatwithstatus()": {
          "name": "Add_temporary_duty_assignment_at__with_status__",
          "key": "addtemporarydutyassignmentatwithstatus()",
          "definition": "Add_temporary_duty_assignment_at__with_status__(string orgName, AssignmentStatus status)"
        },
        "verifyemploymentgapsdonotexist()": {
          "name": "VerifyEmploymentGapsDoNotExist",
          "key": "verifyemploymentgapsdonotexist()",
          "definition": "VerifyEmploymentGapsDoNotExist()"
        },
        "addemploymenttousingorganization()": {
          "name": "AddEmploymentToUsingOrganization",
          "key": "addemploymenttousingorganization()",
          "definition": "AddEmploymentToUsingOrganization(string personName, string orgaName)"
        },
        "verifyemploymentisnotprimary()": {
          "name": "VerifyEmploymentIsNotPrimary",
          "key": "verifyemploymentisnotprimary()",
          "definition": "VerifyEmploymentIsNotPrimary(string employmentName)"
        },
        "deleteactionfails()": {
          "name": "DeleteActionFails",
          "key": "deleteactionfails()",
          "definition": "DeleteActionFails(string actionName)"
        }
      },
      "key": "personemploymentfnhmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "PersonEmploymentFNHManagement",
      "instance-name": "PersonEmploymentFNHManagement"
    },
    "resourcecalendar": {
      "namespace": "",
      "methods": {
        "verifyconflictsexist()": {
          "name": "Verify__conflicts_exist",
          "key": "verifyconflictsexist()",
          "definition": "Verify__conflicts_exist(int totalConflicts)"
        },
        "browsetopageforforweekof()": {
          "name": "Browse_to_page_for__for_week_of__",
          "key": "browsetopageforforweekof()",
          "definition": "Browse_to_page_for__for_week_of__(string resourceName, DateTime weekOf)"
        },
        "verifythereareitemsscheduled()": {
          "name": "Verify_there_are__items_scheduled",
          "key": "verifythereareitemsscheduled()",
          "definition": "Verify_there_are__items_scheduled(int count)"
        }
      },
      "key": "resourcecalendar",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "ResourceCalendarWorkflow",
      "instance-name": "ResourceCalendar"
    },
    "onlineeventrosterexport": {
      "namespace": "",
      "methods": {
        "ensurecolumnisnotincluded()": {
          "name": "Ensure_column__is_not_included",
          "key": "ensurecolumnisnotincluded()",
          "definition": "Ensure_column__is_not_included(string field)"
        },
        "ensurecolumnisdaysfromtoday()": {
          "name": "Ensure_column__is__days_from_today",
          "key": "ensurecolumnisdaysfromtoday()",
          "definition": "Ensure_column__is__days_from_today(string field, int days)"
        },
        "exportallstudentsfor()": {
          "name": "Export_all_students_for__",
          "key": "exportallstudentsfor()",
          "definition": "Export_all_students_for__(string className)"
        },
        "findexportrowfor()": {
          "name": "Find_export_row__for__",
          "key": "findexportrowfor()",
          "definition": "Find_export_row__for__(int rowNumber, string personName)"
        },
        "ensurecolumnisempty()": {
          "name": "Ensure_column__is_empty",
          "key": "ensurecolumnisempty()",
          "definition": "Ensure_column__is_empty(string field)"
        },
        "ensurecolumnhasvalue()": {
          "name": "Ensure_column__has_value__",
          "key": "ensurecolumnhasvalue()",
          "definition": "Ensure_column__has_value__(string field, string value)"
        }
      },
      "key": "onlineeventrosterexport",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "OnlineEventRosterExport",
      "instance-name": "OnlineEventRosterExport"
    },
    "loginsimulator": {
      "namespace": "",
      "methods": {
        "verifyacadisloginsucceeded()": {
          "name": "Verify_acadis_login_succeeded",
          "key": "verifyacadisloginsucceeded()",
          "definition": "Verify_acadis_login_succeeded()"
        },
        "signinasproctorwithusernameandpassword()": {
          "name": "Sign_in_as_proctor_with_username__and_password",
          "key": "signinasproctorwithusernameandpassword()",
          "definition": "Sign_in_as_proctor_with_username__and_password(string userName, string password)"
        },
        "logintoacadisaswithpassword()": {
          "name": "Login_to_acadis_as__with_password__",
          "key": "logintoacadisaswithpassword()",
          "definition": "Login_to_acadis_as__with_password__(string userName, string password)"
        },
        "logintoportalaswithpassword()": {
          "name": "Login_to_portal_as__with_password",
          "key": "logintoportalaswithpassword()",
          "definition": "Login_to_portal_as__with_password(string userName, string password)"
        },
        "verifyportalloginsucceeded()": {
          "name": "Verify_portal_login_succeeded",
          "key": "verifyportalloginsucceeded()",
          "definition": "Verify_portal_login_succeeded()"
        },
        "verifyacadisloginfailed()": {
          "name": "Verify_acadis_login_failed",
          "key": "verifyacadisloginfailed()",
          "definition": "Verify_acadis_login_failed()"
        },
        "verifyproctorloginsucceeded()": {
          "name": "Verify_proctor_login_succeeded",
          "key": "verifyproctorloginsucceeded()",
          "definition": "Verify_proctor_login_succeeded()"
        }
      },
      "key": "loginsimulator",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "LoginSimulatorWorkflow",
      "instance-name": "LoginSimulator"
    },
    "rejectedinserviceautoemail": {
      "namespace": "",
      "methods": {
        "verifythattheemailsenttoforcontains()": {
          "name": "Verify_that_the_email_sent_to__for__contains__",
          "key": "verifythattheemailsenttoforcontains()",
          "definition": "Verify_that_the_email_sent_to__for__contains__(string emailAddress, string certName, string compareStr)"
        },
        "verifyemailmessagesweresent()": {
          "name": "Verify__email_messages_were_sent",
          "key": "verifyemailmessagesweresent()",
          "definition": "Verify__email_messages_were_sent(int num)"
        },
        "verifythattheemailsenttofordoesnotcontain()": {
          "name": "Verify_that_the_email_sent_to__for__does_not_contain__",
          "key": "verifythattheemailsenttofordoesnotcontain()",
          "definition": "Verify_that_the_email_sent_to__for__does_not_contain__(string emailAddress, string certName, string compareStr)"
        },
        "runexpiringcertsemailer()": {
          "name": "Run_Expiring_Certs_Emailer",
          "key": "runexpiringcertsemailer()",
          "definition": "Run_Expiring_Certs_Emailer()"
        }
      },
      "key": "rejectedinserviceautoemail",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "RejectedInServiceAutoEmailWorkflow",
      "instance-name": "RejectedInServiceAutoEmail"
    },
    "testopiadatetimeprovider": {
      "namespace": "",
      "methods": {
        
      },
      "key": "testopiadatetimeprovider",
      "is-parent": false,
      "parent-name": null,
      "class-name": "TestopiaDateTimeProvider",
      "instance-name": "TestopiaDateTimeProvider"
    },
    "importercleanuptaskrunner": {
      "namespace": "",
      "methods": {
        "verifyimportfileexists()": {
          "name": "Verify_import_file__exists",
          "key": "verifyimportfileexists()",
          "definition": "Verify_import_file__exists(string fileName)"
        },
        "verifyimportfiledoesnotexist()": {
          "name": "Verify_import_file__does_not_exist",
          "key": "verifyimportfiledoesnotexist()",
          "definition": "Verify_import_file__does_not_exist(string fileName)"
        },
        "runimportercleanuptask()": {
          "name": "Run_importer_cleanup_task",
          "key": "runimportercleanuptask()",
          "definition": "Run_importer_cleanup_task()"
        },
        "verifyimportjobdoesnotexist()": {
          "name": "Verify_import_job_does_not_exist",
          "key": "verifyimportjobdoesnotexist()",
          "definition": "Verify_import_job_does_not_exist()"
        },
        "verifyimportjobexists()": {
          "name": "Verify_import_job_exists",
          "key": "verifyimportjobexists()",
          "definition": "Verify_import_job_exists()"
        }
      },
      "key": "importercleanuptaskrunner",
      "is-parent": false,
      "parent-name": "TaskRunnerWorkflow",
      "class-name": "ImporterCleanupTaskRunnerWorkflow",
      "instance-name": "ImporterCleanupTaskRunner"
    },
    "sanitychecking": {
      "namespace": "",
      "methods": {
        "dispose()": {
          "name": "Dispose",
          "key": "dispose()",
          "definition": "Dispose()"
        },
        "validatesanityofclassstatus()": {
          "name": "Validate_sanity_of_class_status",
          "key": "validatesanityofclassstatus()",
          "definition": "Validate_sanity_of_class_status()"
        }
      },
      "key": "sanitychecking",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "SanityChecking",
      "instance-name": "SanityChecking"
    },
    "documentimportverification": {
      "namespace": "",
      "methods": {
        "verifypersonwithacademyiddocument()": {
          "name": "Verify_person_with_academy_id____document__",
          "key": "verifypersonwithacademyiddocument()",
          "definition": "Verify_person_with_academy_id____document__(string owner, string hasOrNot, string documentName)"
        },
        "processallimports()": {
          "name": "Process_all_imports",
          "key": "processallimports()",
          "definition": "Process_all_imports()"
        },
        "verifyactivityinclasstemplateinprograminacademyhasdocument()": {
          "name": "Verify_activity__in_class_template__in_program__in_academy__has_document",
          "key": "verifyactivityinclasstemplateinprograminacademyhasdocument()",
          "definition": "Verify_activity__in_class_template__in_program__in_academy__has_document(string owner, string @class, string program, string academy, string documentName)"
        },
        "verifypersonwithacademyidhasdocument()": {
          "name": "Verify_person_with_academy_id__has_document__",
          "key": "verifypersonwithacademyidhasdocument()",
          "definition": "Verify_person_with_academy_id__has_document__(string owner, string documentName)"
        },
        "verifyclasstemplateinprograminacademyhasdocument()": {
          "name": "Verify_class_template__in_program__in_academy__has_document",
          "key": "verifyclasstemplateinprograminacademyhasdocument()",
          "definition": "Verify_class_template__in_program__in_academy__has_document(string owner, string program, string academy, string documentName)"
        },
        "verifyclassinprograminacademyhasdocument()": {
          "name": "Verify_class__in_program__in_academy__has_document",
          "key": "verifyclassinprograminacademyhasdocument()",
          "definition": "Verify_class__in_program__in_academy__has_document(string owner, string program, string academy, string documentName)"
        },
        "verifyorganizationwithnamehasdocument()": {
          "name": "Verify_organization_with_name__has_document__",
          "key": "verifyorganizationwithnamehasdocument()",
          "definition": "Verify_organization_with_name__has_document__(string owner, string documentName)"
        },
        "verifytrainingeventhasdocument()": {
          "name": "Verify_training_event__has_document__",
          "key": "verifytrainingeventhasdocument()",
          "definition": "Verify_training_event__has_document__( string ownerName, string documentName )"
        },
        "verifypersonwithacademyidhasdocumentsnamed()": {
          "name": "Verify_person_with_academy_id___has___documents_named____",
          "key": "verifypersonwithacademyidhasdocumentsnamed()",
          "definition": "Verify_person_with_academy_id___has___documents_named____(string owner, int count, string documentName)"
        },
        "verifyactivityinclassinprograminacademyhasdocument()": {
          "name": "Verify_activity__in_class__in_program__in_academy__has_document",
          "key": "verifyactivityinclassinprograminacademyhasdocument()",
          "definition": "Verify_activity__in_class__in_program__in_academy__has_document(string owner, string @class, string program, string academy, string documentName)"
        }
      },
      "key": "documentimportverification",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "DocumentImportVerification",
      "instance-name": "DocumentImportVerification"
    },
    "performancemonitor": {
      "namespace": "",
      "methods": {
        "startstopwatch()": {
          "name": "Start_stopwatch",
          "key": "startstopwatch()",
          "definition": "Start_stopwatch()"
        },
        "ensurestopwatchtimeislessthanseconds()": {
          "name": "Ensure_stopwatch_time_is_less_than__seconds",
          "key": "ensurestopwatchtimeislessthanseconds()",
          "definition": "Ensure_stopwatch_time_is_less_than__seconds(double time)"
        }
      },
      "key": "performancemonitor",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "PerformanceMonitor",
      "instance-name": "PerformanceMonitor"
    },
    "learningobjectivemanagement": {
      "namespace": "",
      "methods": {
        "verifyelohascategory()": {
          "name": "Verify_ELO_has_category__",
          "key": "verifyelohascategory()",
          "definition": "Verify_ELO_has_category__(string category)"
        },
        "verifytlohascategory()": {
          "name": "Verify_TLO_has_category__",
          "key": "verifytlohascategory()",
          "definition": "Verify_TLO_has_category__(string category)"
        },
        "createtlowithidinprogramundercategoryandsubcategory()": {
          "name": "Create__TLO_with_ID__in_Program__under_Category__and_Subcategory__",
          "key": "createtlowithidinprogramundercategoryandsubcategory()",
          "definition": "Create__TLO_with_ID__in_Program__under_Category__and_Subcategory__(string status, string id, string program, string category, string subcategory)"
        },
        "createelowithidfortloinprogramundercategoryandsubcategorywithdescription()": {
          "name": "Create__ELO_with_ID__for_TLO__in_Program__under_Category__and_Subcategory__with_description__",
          "key": "createelowithidfortloinprogramundercategoryandsubcategorywithdescription()",
          "definition": "Create__ELO_with_ID__for_TLO__in_Program__under_Category__and_Subcategory__with_description__(string status, string id, string tloId, string program, string category, string subcategory, string description)"
        },
        "verifytlohaslessonplanid()": {
          "name": "Verify_TLO_has_LessonPlanID__",
          "key": "verifytlohaslessonplanid()",
          "definition": "Verify_TLO_has_LessonPlanID__(string lessonPlanID)"
        },
        "verifytlohasobjectivetext()": {
          "name": "Verify_TLO_has_objective_text__",
          "key": "verifytlohasobjectivetext()",
          "definition": "Verify_TLO_has_objective_text__(string description)"
        },
        "verifyeloactive()": {
          "name": "Verify_ELO__active",
          "key": "verifyeloactive()",
          "definition": "Verify_ELO__active(string isIsNot)"
        },
        "createelowithidfortloinprogramundercategoryandsubcategory()": {
          "name": "Create__ELO_with_ID__for_TLO__in_Program__under_Category__and_Subcategory__",
          "key": "createelowithidfortloinprogramundercategoryandsubcategory()",
          "definition": "Create__ELO_with_ID__for_TLO__in_Program__under_Category__and_Subcategory__(string status, string id, string tloId, string program, string category, string subcategory)"
        },
        "createelowithidfortloinprogramundercategory()": {
          "name": "Create__ELO_with_ID__for_TLO__in_Program__under_Category__",
          "key": "createelowithidfortloinprogramundercategory()",
          "definition": "Create__ELO_with_ID__for_TLO__in_Program__under_Category__(string status, string id, string tloId, string program, string category)"
        },
        "createelowithidfortloinprogramundercategorywithdescription()": {
          "name": "Create__ELO_with_ID__for_TLO__in_Program__under_Category__with_description__",
          "key": "createelowithidfortloinprogramundercategorywithdescription()",
          "definition": "Create__ELO_with_ID__for_TLO__in_Program__under_Category__with_description__(string status, string id, string tloId, string program, string category, string description)"
        },
        "verifyelohassubcategory()": {
          "name": "Verify_ELO_has_subcategory__",
          "key": "verifyelohassubcategory()",
          "definition": "Verify_ELO_has_subcategory__(string subcategory)"
        },
        "createtlowithidinprogramundercategory()": {
          "name": "Create__TLO_with_ID__in_Program__under_Category__",
          "key": "createtlowithidinprogramundercategory()",
          "definition": "Create__TLO_with_ID__in_Program__under_Category__(string status, string id, string program, string category)"
        },
        "considertlowithidinprogram()": {
          "name": "Consider_TLO_with_ID__in_program__",
          "key": "considertlowithidinprogram()",
          "definition": "Consider_TLO_with_ID__in_program__(string tloID, string program)"
        },
        "verifysubcategoryincategoryhasdescriptionandactive()": {
          "name": "Verify_SubCategory__in_Category__has_description__and__active",
          "key": "verifysubcategoryincategoryhasdescriptionandactive()",
          "definition": "Verify_SubCategory__in_Category__has_description__and__active(string subname, string catname, string description, string isIsNot)"
        },
        "verifytlohassubcategory()": {
          "name": "Verify_TLO_has_subcategory__",
          "key": "verifytlohassubcategory()",
          "definition": "Verify_TLO_has_subcategory__(string subcategory)"
        },
        "verifyelohasjobtaskid()": {
          "name": "Verify_ELO_has_JobTaskID__",
          "key": "verifyelohasjobtaskid()",
          "definition": "Verify_ELO_has_JobTaskID__(string jobTaskID)"
        },
        "considerelowithid()": {
          "name": "Consider_ELO_with_ID__",
          "key": "considerelowithid()",
          "definition": "Consider_ELO_with_ID__(string eloID)"
        },
        "setdescriptionofelowithidto()": {
          "name": "Set_description_of_ELO_with_ID__to__",
          "key": "setdescriptionofelowithidto()",
          "definition": "Set_description_of_ELO_with_ID__to__(string eloId, string eloDesc)"
        },
        "createcategorywithdescription()": {
          "name": "Create_Category__with_description__",
          "key": "createcategorywithdescription()",
          "definition": "Create_Category__with_description__(string name, string description)"
        },
        "verifyelohaslessongplanid()": {
          "name": "Verify_ELO_has_LessongPlanID__",
          "key": "verifyelohaslessongplanid()",
          "definition": "Verify_ELO_has_LessongPlanID__(string lessonPlanID)"
        },
        "createsubcategorywithdescriptionundercategory()": {
          "name": "Create_SubCategory__with_description__under_category__",
          "key": "createsubcategorywithdescriptionundercategory()",
          "definition": "Create_SubCategory__with_description__under_category__(string name, string description, string category)"
        },
        "verifytlohasjobtaskid()": {
          "name": "Verify_TLO_has_JobTaskID__",
          "key": "verifytlohasjobtaskid()",
          "definition": "Verify_TLO_has_JobTaskID__(string jobTaskID)"
        },
        "verifyelohasobjectivetext()": {
          "name": "Verify_ELO_has_objective_text__",
          "key": "verifyelohasobjectivetext()",
          "definition": "Verify_ELO_has_objective_text__(string description)"
        },
        "createtlowithidinprogramundercategorywithdescription()": {
          "name": "Create__TLO_with_ID__in_Program__under_Category__with_description__",
          "key": "createtlowithidinprogramundercategorywithdescription()",
          "definition": "Create__TLO_with_ID__in_Program__under_Category__with_description__(string status, string id, string program, string category, string description)"
        },
        "verifycategoryhasdescriptionandactive()": {
          "name": "Verify_Category__has_description__and__active",
          "key": "verifycategoryhasdescriptionandactive()",
          "definition": "Verify_Category__has_description__and__active(string name, string description, string isIsNot)"
        },
        "verifytloactive()": {
          "name": "Verify_TLO__active",
          "key": "verifytloactive()",
          "definition": "Verify_TLO__active(string isIsNot)"
        },
        "createtlowithidinprogramundercategoryandsubcategorywithdescription()": {
          "name": "Create__TLO_with_ID__in_Program__under_Category__and_Subcategory__with_description__",
          "key": "createtlowithidinprogramundercategoryandsubcategorywithdescription()",
          "definition": "Create__TLO_with_ID__in_Program__under_Category__and_Subcategory__with_description__(string status, string id, string program, string category, string subcategory, string description)"
        }
      },
      "key": "learningobjectivemanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "LearningObjectiveManagement",
      "instance-name": "LearningObjectiveManagement"
    },
    "scenarioconfiguration": {
      "namespace": "",
      "methods": {
        
      },
      "key": "scenarioconfiguration",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "ScenarioConfiguration",
      "instance-name": "ScenarioConfiguration"
    },
    "academyrecords": {
      "namespace": "",
      "methods": {
        "getpersonasync()": {
          "name": "GetPersonAsync",
          "key": "getpersonasync()",
          "definition": "GetPersonAsync(string requestingUsername, string requestingPassword, string academyID, object userState)"
        }
      },
      "key": "academyrecords",
      "is-parent": false,
      "parent-name": null,
      "class-name": "AcademyRecords",
      "instance-name": "AcademyRecords"
    },
    "personemploymentmanagement": {
      "namespace": "",
      "methods": {
        "deleteemploymentforeffectivefor()": {
          "name": "Delete_employment_for__effective__for_",
          "key": "deleteemploymentforeffectivefor()",
          "definition": "Delete_employment_for__effective__for_(string companyName, string effectiveDate, string employeeName)"
        },
        "addemploymentforatorganizationas()": {
          "name": "Add_employment_for__at_organization__as__",
          "key": "addemploymentforatorganizationas()",
          "definition": "Add_employment_for__at_organization__as__(string personName, string orgName, string empName)"
        },
        "organizationis()": {
          "name": "OrganizationIs",
          "key": "organizationis()",
          "definition": "OrganizationIs(string name)"
        },
        "verifyemploymentwithaswithstartingdate()": {
          "name": "Verify_employment_with_as_with_starting_date",
          "key": "verifyemploymentwithaswithstartingdate()",
          "definition": "Verify_employment_with_as_with_starting_date(string companyName, string title, DateTime effectiveDate)"
        },
        "saveemploymentfails()": {
          "name": "SaveEmploymentFails",
          "key": "saveemploymentfails()",
          "definition": "SaveEmploymentFails()"
        },
        "verifyhasasaprimaryemploymenteffective()": {
          "name": "Verify__has__as_a_primary_employment_effective_",
          "key": "verifyhasasaprimaryemploymenteffective()",
          "definition": "Verify__has__as_a_primary_employment_effective_(string employeeName, string companyName, string effectiveDate)"
        },
        "verifyprimaryemploymentis()": {
          "name": "Verify_Primary_Employment_Is",
          "key": "verifyprimaryemploymentis()",
          "definition": "Verify_Primary_Employment_Is( string param1 )"
        },
        "verifyhasemploymenteffective()": {
          "name": "Verify__has__employment_effective_",
          "key": "verifyhasemploymenteffective()",
          "definition": "Verify__has__employment_effective_(string employeeName, string companyName, string effectiveDate)"
        },
        "verifyhasanactiveemploymentat()": {
          "name": "Verify_has_an_active_employment_at",
          "key": "verifyhasanactiveemploymentat()",
          "definition": "Verify_has_an_active_employment_at(string personName, string employer)"
        },
        "verifyactioneffectivedateis()": {
          "name": "VerifyActionEffectiveDateIs",
          "key": "verifyactioneffectivedateis()",
          "definition": "VerifyActionEffectiveDateIs(string actionName, string effectiveDate)"
        },
        "actionis()": {
          "name": "ActionIs",
          "key": "actionis()",
          "definition": "ActionIs(string action)"
        },
        "verifyhastitleat()": {
          "name": "Verify__has_title__at__",
          "key": "verifyhastitleat()",
          "definition": "Verify__has_title__at__(string personName, string title, string orgName)"
        },
        "employmentdutylocationiswithstatus()": {
          "name": "Employment_duty_location_is_with_status",
          "key": "employmentdutylocationiswithstatus()",
          "definition": "Employment_duty_location_is_with_status(string divisionOrOrganization, string status)"
        },
        "addemploymentforatorganizationaswithtitleandhiredate()": {
          "name": "Add_employment_for_at_organization_as_with_Title_and_hire_date",
          "key": "addemploymentforatorganizationaswithtitleandhiredate()",
          "definition": "Add_employment_for_at_organization_as_with_Title_and_hire_date( string personName, string orgName, string empName, string title, DateTime hireDate )"
        },
        "usingperson()": {
          "name": "Using_Person",
          "key": "usingperson()",
          "definition": "Using_Person(string nameFirstLast)"
        },
        "effectivedateis()": {
          "name": "EffectiveDateIs",
          "key": "effectivedateis()",
          "definition": "EffectiveDateIs(DateTime date)"
        },
        "defineemploymentinformationforsetemploymenttofororganizationwithaneffectivedateofandtitleof()": {
          "name": "Define_employment_information_for__set_employment_to__for_organization__with_an_effective_date_of__and_title_of_",
          "key": "defineemploymentinformationforsetemploymenttofororganizationwithaneffectivedateofandtitleof()",
          "definition": "Define_employment_information_for__set_employment_to__for_organization__with_an_effective_date_of__and_title_of_(string employeeName, string employmentStatus, string organizationName, string effectiveDate, string title)"
        },
        "setemploymentasnotprimary()": {
          "name": "SetEmploymentAsNotPrimary",
          "key": "setemploymentasnotprimary()",
          "definition": "SetEmploymentAsNotPrimary(string employmentName)"
        },
        "verifyhasaninactiveemploymentat()": {
          "name": "Verify_has_an_inactive_employment_at",
          "key": "verifyhasaninactiveemploymentat()",
          "definition": "Verify_has_an_inactive_employment_at(string personName, string employer)"
        },
        "verifyhasemploymenttypeat()": {
          "name": "Verify__has_employment_type__at__",
          "key": "verifyhasemploymenttypeat()",
          "definition": "Verify__has_employment_type__at__(string personName, string employmentType, string orgName)"
        },
        "setcomments()": {
          "name": "SetComments",
          "key": "setcomments()",
          "definition": "SetComments(string comments)"
        },
        "setemploymentstatusto()": {
          "name": "SetEmploymentStatusTo",
          "key": "setemploymentstatusto()",
          "definition": "SetEmploymentStatusTo(string status, string subStatus)"
        },
        "defineemploymentinformationforsetorganizationtowithaneffectivedateofandtitleof()": {
          "name": "Define_employment_information_for__set_organization_to__with_an_effective_date_of__and_title_of_",
          "key": "defineemploymentinformationforsetorganizationtowithaneffectivedateofandtitleof()",
          "definition": "Define_employment_information_for__set_organization_to__with_an_effective_date_of__and_title_of_(string employeeName, string organizationName, string effectiveDate, string title)"
        },
        "setasprimary()": {
          "name": "SetAsPrimary",
          "key": "setasprimary()",
          "definition": "SetAsPrimary()"
        },
        "setemploymentorganization()": {
          "name": "SetEmploymentOrganization",
          "key": "setemploymentorganization()",
          "definition": "SetEmploymentOrganization(string employmentName, string organization)"
        },
        "verifyactionstatusis()": {
          "name": "VerifyActionStatusIs",
          "key": "verifyactionstatusis()",
          "definition": "VerifyActionStatusIs(string actionName, string statusName)"
        },
        "appointmenttypeis()": {
          "name": "AppointmentTypeIs",
          "key": "appointmenttypeis()",
          "definition": "AppointmentTypeIs(string appointmentType)"
        },
        "defineemploymentactionforsetactionto()": {
          "name": "Define_employment_action_for__set_action_to_",
          "key": "defineemploymentactionforsetactionto()",
          "definition": "Define_employment_action_for__set_action_to_(string employeeName, string action)"
        },
        "hireallatstatus()": {
          "name": "Hire_All_At_Status_",
          "key": "hireallatstatus()",
          "definition": "Hire_All_At_Status_(string organizationName, string status)"
        },
        "setemploymenteffectivedate()": {
          "name": "SetEmploymentEffectiveDate",
          "key": "setemploymenteffectivedate()",
          "definition": "SetEmploymentEffectiveDate(string employmentName, string startDate)"
        },
        "hireatstatus()": {
          "name": "Hire_At_Status",
          "key": "hireatstatus()",
          "definition": "Hire_At_Status(string person, string organizationName, string status)"
        },
        "deleteaction()": {
          "name": "DeleteAction",
          "key": "deleteaction()",
          "definition": "DeleteAction(string actionName)"
        },
        "verifyhasahiredateofat()": {
          "name": "Verify_has_a_hire_date_of_at",
          "key": "verifyhasahiredateofat()",
          "definition": "Verify_has_a_hire_date_of_at(string personName, DateTime hireDate, string employer)"
        },
        "verifyactiontypeis()": {
          "name": "VerifyActionTypeIs",
          "key": "verifyactiontypeis()",
          "definition": "VerifyActionTypeIs(string actionName, string typeName)"
        },
        "verifyemploymentisprimary()": {
          "name": "VerifyEmploymentIsPrimary",
          "key": "verifyemploymentisprimary()",
          "definition": "VerifyEmploymentIsPrimary()"
        },
        "setemploymentasprimary()": {
          "name": "SetEmploymentAsPrimary",
          "key": "setemploymentasprimary()",
          "definition": "SetEmploymentAsPrimary(string employmentName)"
        },
        "statusis()": {
          "name": "StatusIs",
          "key": "statusis()",
          "definition": "StatusIs(string str)"
        },
        "addemploymentwithnameascopyof()": {
          "name": "AddEmploymentWithNameAsCopyOf",
          "key": "addemploymentwithnameascopyof()",
          "definition": "AddEmploymentWithNameAsCopyOf(string newName, string copyName)"
        },
        "verifyactionisbefore()": {
          "name": "VerifyActionIsBefore",
          "key": "verifyactionisbefore()",
          "definition": "VerifyActionIsBefore(string action_1, string action_2)"
        },
        "deleteemployment()": {
          "name": "DeleteEmployment",
          "key": "deleteemployment()",
          "definition": "DeleteEmployment(string employmentName)"
        },
        "hireallat()": {
          "name": "Hire_All_At",
          "key": "hireallat()",
          "definition": "Hire_All_At(string organizationName)"
        },
        "setemploymentemploymenttype()": {
          "name": "Set_Employment_Employment_Type",
          "key": "setemploymentemploymenttype()",
          "definition": "Set_Employment_Employment_Type( string param1, string param2 )"
        },
        "assignmentstartiswithassignmentend()": {
          "name": "Assignment_start_is_with_assignment_end",
          "key": "assignmentstartiswithassignmentend()",
          "definition": "Assignment_start_is_with_assignment_end(DateTime start, DateTime end)"
        },
        "setemploymenttitle()": {
          "name": "SetEmploymentTitle",
          "key": "setemploymenttitle()",
          "definition": "SetEmploymentTitle(string employmentName, string employmentTitle)"
        },
        "addemployment()": {
          "name": "AddEmployment",
          "key": "addemployment()",
          "definition": "AddEmployment()"
        },
        "setappointmenttype()": {
          "name": "SetAppointmentType",
          "key": "setappointmenttype()",
          "definition": "SetAppointmentType(string appointmentType)"
        },
        "setemploymentcomments()": {
          "name": "SetEmploymentComments",
          "key": "setemploymentcomments()",
          "definition": "SetEmploymentComments(string employmentName, string comments)"
        },
        "saveemployment()": {
          "name": "SaveEmployment",
          "key": "saveemployment()",
          "definition": "SaveEmployment()"
        },
        "verifyhasappointmenttypeat()": {
          "name": "Verify__has_appointment_type__at__",
          "key": "verifyhasappointmenttypeat()",
          "definition": "Verify__has_appointment_type__at__(string personName, string appointmentType, string orgName)"
        },
        "primaryemploymentequals()": {
          "name": "PrimaryEmploymentEquals",
          "key": "primaryemploymentequals()",
          "definition": "PrimaryEmploymentEquals(string organizationName)"
        },
        "saveaction()": {
          "name": "SaveAction",
          "key": "saveaction()",
          "definition": "SaveAction()"
        },
        "verifyemploymentgapsexist()": {
          "name": "VerifyEmploymentGapsExist",
          "key": "verifyemploymentgapsexist()",
          "definition": "VerifyEmploymentGapsExist()"
        },
        "setemploymentappointmenttype()": {
          "name": "Set_Employment_Appointment_Type",
          "key": "setemploymentappointmenttype()",
          "definition": "Set_Employment_Appointment_Type(string param1, string param2)"
        },
        "setemploymenttype()": {
          "name": "SetEmploymentType",
          "key": "setemploymenttype()",
          "definition": "SetEmploymentType(string employmentType)"
        },
        "addemploymentascopyof()": {
          "name": "AddEmploymentAsCopyOf",
          "key": "addemploymentascopyof()",
          "definition": "AddEmploymentAsCopyOf(string employmentName)"
        },
        "addemploymentwithname()": {
          "name": "AddEmploymentWithName",
          "key": "addemploymentwithname()",
          "definition": "AddEmploymentWithName(string employmentName)"
        },
        "employmenttypeis()": {
          "name": "EmploymentTypeIs",
          "key": "employmenttypeis()",
          "definition": "EmploymentTypeIs(string employmentType)"
        },
        "titleis()": {
          "name": "TitleIs",
          "key": "titleis()",
          "definition": "TitleIs(string title)"
        },
        "verifyemploymentgapsdonotexist()": {
          "name": "VerifyEmploymentGapsDoNotExist",
          "key": "verifyemploymentgapsdonotexist()",
          "definition": "VerifyEmploymentGapsDoNotExist()"
        },
        "addemploymenttousingorganizationwithtitleandemploymenttypeandstatus()": {
          "name": "AddEmploymentToUsingOrganizationWithTitleAndEmploymentTypeAndStatus",
          "key": "addemploymenttousingorganizationwithtitleandemploymenttypeandstatus()",
          "definition": "AddEmploymentToUsingOrganizationWithTitleAndEmploymentTypeAndStatus(string personName, string orgaName, string title, string type, string status)"
        },
        "verifyemploymentwithhasdutyassignmentwiththatis()": {
          "name": "Verify_employment_with_has_duty_assignment_with_that_is",
          "key": "verifyemploymentwithhasdutyassignmentwiththatis()",
          "definition": "Verify_employment_with_has_duty_assignment_with_that_is(string companyName, string divisionName, string status)"
        },
        "verifyemploymentisnotprimary()": {
          "name": "VerifyEmploymentIsNotPrimary",
          "key": "verifyemploymentisnotprimary()",
          "definition": "VerifyEmploymentIsNotPrimary(string employmentName)"
        },
        "verifyisemployedby()": {
          "name": "Verify_is_employed_by",
          "key": "verifyisemployedby()",
          "definition": "Verify_is_employed_by(string name, string employer)"
        },
        "addemploymenttousingorganization()": {
          "name": "AddEmploymentToUsingOrganization",
          "key": "addemploymenttousingorganization()",
          "definition": "AddEmploymentToUsingOrganization(string personName, string orgaName)"
        },
        "deleteactionfails()": {
          "name": "DeleteActionFails",
          "key": "deleteactionfails()",
          "definition": "DeleteActionFails(string actionName)"
        },
        "addemploymentstatus()": {
          "name": "AddEmploymentStatus",
          "key": "addemploymentstatus()",
          "definition": "AddEmploymentStatus(string status)"
        }
      },
      "key": "personemploymentmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "PersonEmploymentManagement",
      "instance-name": "PersonEmploymentManagement"
    },
    "testopiamessagequeue": {
      "namespace": "",
      "methods": {
        "sendbatch()": {
          "name": "SendBatch",
          "key": "sendbatch()",
          "definition": "SendBatch(IEnumerable<IMessage> messages)"
        },
        "remove()": {
          "name": "Remove",
          "key": "remove()",
          "definition": "Remove(Guid id)"
        },
        "purgeall()": {
          "name": "PurgeAll",
          "key": "purgeall()",
          "definition": "PurgeAll()"
        },
        "send()": {
          "name": "Send",
          "key": "send()",
          "definition": "Send(IMessage message)"
        }
      },
      "key": "testopiamessagequeue",
      "is-parent": false,
      "parent-name": null,
      "class-name": "TestopiaMessageQueue",
      "instance-name": "TestopiaMessageQueue"
    },
    "": {
      "namespace": "",
      "methods": {
        "settodaytocurrentdateplusdays()": {
          "name": "Set_today_to_current_date_plus__days",
          "key": "settodaytocurrentdateplusdays()",
          "definition": "Set_today_to_current_date_plus__days(int days)"
        },
        "loginas()": {
          "name": "Log_in_as",
          "key": "loginas()",
          "definition": "Log_in_as(string userName)"
        },
        "setup()": {
          "name": "SetUp",
          "key": "setup()",
          "definition": "SetUp()"
        },
        "teardown()": {
          "name": "TearDown",
          "key": "teardown()",
          "definition": "TearDown()"
        },
        "signinasproctorwithusername()": {
          "name": "Sign_in_as_proctor_with_username__",
          "key": "signinasproctorwithusername()",
          "definition": "Sign_in_as_proctor_with_username__(string emailAddress)"
        },
        "debug()": {
          "name": "Debug",
          "key": "debug()",
          "definition": "Debug()"
        },
        "settodaytoendoffiscalyear()": {
          "name": "set_today_to_end_of_fiscal_year",
          "key": "settodaytoendoffiscalyear()",
          "definition": "set_today_to_end_of_fiscal_year()"
        },
        "verifyuserloggedinasproctor()": {
          "name": "Verify_user_logged_in_as_proctor",
          "key": "verifyuserloggedinasproctor()",
          "definition": "Verify_user_logged_in_as_proctor()"
        },
        "verifyuserloggedintoportal()": {
          "name": "Verify_user_logged_into_portal",
          "key": "verifyuserloggedintoportal()",
          "definition": "Verify_user_logged_into_portal()"
        },
        "settodayto()": {
          "name": "Set_today_to_",
          "key": "settodayto()",
          "definition": "Set_today_to_( DateTime today )"
        },
        "settodaytoendoffiscalyearplus()": {
          "name": "set_today_to_end_of_fiscal_year_plus",
          "key": "settodaytoendoffiscalyearplus()",
          "definition": "set_today_to_end_of_fiscal_year_plus( int interval, string timeUnit )"
        },
        "addtosetup()": {
          "name": "AddToSetUp",
          "key": "addtosetup()",
          "definition": "AddToSetUp(SetUpAction action)"
        },
        "logintoportalas()": {
          "name": "Log_into_portal_as",
          "key": "logintoportalas()",
          "definition": "Log_into_portal_as(string emailAddress)"
        },
        "logoutproctor()": {
          "name": "Logout_proctor",
          "key": "logoutproctor()",
          "definition": "Logout_proctor()"
        },
        "enablelogininscenarioscope()": {
          "name": "Enable_login_in_scenario_scope",
          "key": "enablelogininscenarioscope()",
          "definition": "Enable_login_in_scenario_scope()"
        },
        "scenariosetup()": {
          "name": "ScenarioSetUp",
          "key": "scenariosetup()",
          "definition": "ScenarioSetUp()"
        },
        "addtoteardown()": {
          "name": "AddToTearDown",
          "key": "addtoteardown()",
          "definition": "AddToTearDown(TearDownAction action)"
        },
        "settodaytostartoffiscalyear()": {
          "name": "set_today_to_start_of_fiscal_year",
          "key": "settodaytostartoffiscalyear()",
          "definition": "set_today_to_start_of_fiscal_year()"
        },
        "verifyproctorloginfailed()": {
          "name": "Verify_proctor_login_failed",
          "key": "verifyproctorloginfailed()",
          "definition": "Verify_proctor_login_failed()"
        },
        "addtoscenariosetup()": {
          "name": "AddToScenarioSetUp",
          "key": "addtoscenariosetup()",
          "definition": "AddToScenarioSetUp(SetUpAction action)"
        },
        "logout()": {
          "name": "Log_out",
          "key": "logout()",
          "definition": "Log_out()"
        },
        "verifyportalloginfailed()": {
          "name": "Verify_portal_login_failed",
          "key": "verifyportalloginfailed()",
          "definition": "Verify_portal_login_failed()"
        },
        "waitseconds()": {
          "name": "Wait__seconds",
          "key": "waitseconds()",
          "definition": "Wait__seconds(int duration)"
        },
        "addtoscenarioteardown()": {
          "name": "AddToScenarioTearDown",
          "key": "addtoscenarioteardown()",
          "definition": "AddToScenarioTearDown(TearDownAction action)"
        },
        "scenarioteardown()": {
          "name": "ScenarioTearDown",
          "key": "scenarioteardown()",
          "definition": "ScenarioTearDown()"
        },
        "addtotoday()": {
          "name": "Add__to_today",
          "key": "addtotoday()",
          "definition": "Add__to_today( int interval, string timeUnit )"
        }
      },
      "key": "",
      "is-parent": true,
      "parent-name": null,
      "class-name": "Workflow",
      "instance-name": ""
    },
    "mvbase": {
      "namespace": "",
      "methods": {
        
      },
      "key": "mvbase",
      "is-parent": true,
      "parent-name": null,
      "class-name": "MVBaseWorkflow",
      "instance-name": "MVBase"
    },
    "reportmanagement": {
      "namespace": "",
      "methods": {
        "create()": {
          "name": "Create",
          "key": "create()",
          "definition": "Create()"
        },
        "verifytimerangerowforshowson()": {
          "name": "Verify_time_range_row_for__shows__on__",
          "key": "verifytimerangerowforshowson()",
          "definition": "Verify_time_range_row_for__shows__on__(string label, string timeRange, string dayOfWeek)"
        },
        "savecustomtranscripttemplate()": {
          "name": "Save_custom_transcript_template",
          "key": "savecustomtranscripttemplate()",
          "definition": "Save_custom_transcript_template()"
        },
        "verifyreportshowsrowsofresources()": {
          "name": "Verify_report_shows__rows_of_resources",
          "key": "verifyreportshowsrowsofresources()",
          "definition": "Verify_report_shows__rows_of_resources(int rowCount)"
        },
        "verifyreportcontains()": {
          "name": "Verify_report_contains",
          "key": "verifyreportcontains()",
          "definition": "Verify_report_contains(string instructor)"
        },
        "createcustomtranscripttemplate()": {
          "name": "Create_custom_transcript_template__",
          "key": "createcustomtranscripttemplate()",
          "definition": "Create_custom_transcript_template__(string transcriptName)"
        },
        "verifyresourcerowforshowscategoryquantityandstandard()": {
          "name": "Verify_resource_row_for__shows_category__quantity__and_standard__",
          "key": "verifyresourcerowforshowscategoryquantityandstandard()",
          "definition": "Verify_resource_row_for__shows_category__quantity__and_standard__(string resourceName, string category, int quantity, float utilizationPercentage)"
        },
        "uncheckboxtoincludecustomizablefield()": {
          "name": "Uncheck_box_to_include_customizable_field__",
          "key": "uncheckboxtoincludecustomizablefield()",
          "definition": "Uncheck_box_to_include_customizable_field__(PlaceableTemplateField field)"
        },
        "criteriadate()": {
          "name": "Criteria_Date",
          "key": "criteriadate()",
          "definition": "Criteria_Date(DateTime startDate)"
        },
        "verifyreportdoesnotcontain()": {
          "name": "Verify_report_does_not_contain",
          "key": "verifyreportdoesnotcontain()",
          "definition": "Verify_report_does_not_contain(string instructor)"
        },
        "criteriadateto()": {
          "name": "Criteria_Date_to",
          "key": "criteriadateto()",
          "definition": "Criteria_Date_to(DateTime startDate, DateTime endDate)"
        },
        "instructorsforroware()": {
          "name": "Instructors_for_row_are",
          "key": "instructorsforroware()",
          "definition": "Instructors_for_row_are(int rowNum, string instructors)"
        },
        "group()": {
          "name": "Group",
          "key": "group()",
          "definition": "Group(string groupName)"
        },
        "setcustomtranscripttemplateownerto()": {
          "name": "Set_custom_transcript_template_owner_to__",
          "key": "setcustomtranscripttemplateownerto()",
          "definition": "Set_custom_transcript_template_owner_to__(string ownerName)"
        },
        "generatereport()": {
          "name": "Generate_Report",
          "key": "generatereport()",
          "definition": "Generate_Report( string which )"
        },
        "resultcountequals()": {
          "name": "Result_Count_Equals",
          "key": "resultcountequals()",
          "definition": "Result_Count_Equals(int rowCount)"
        },
        "segmentnameforrowis()": {
          "name": "Segment_Name_for_row_is",
          "key": "segmentnameforrowis()",
          "definition": "Segment_Name_for_row_is(int rowNum, string expectedValue)"
        },
        "resourcenameforrowis()": {
          "name": "Resource_Name_for_row_is",
          "key": "resourcenameforrowis()",
          "definition": "Resource_Name_for_row_is(int rowNum, string expectedValue)"
        },
        "verifyboxtoincludecustomizablefieldchecked()": {
          "name": "Verify_box_to_include_customizable_field____checked",
          "key": "verifyboxtoincludecustomizablefieldchecked()",
          "definition": "Verify_box_to_include_customizable_field____checked(PlaceableTemplateField field, string isIsNotString)"
        },
        "checkboxtoincludecustomizablefield()": {
          "name": "Check_box_to_include_customizable_field__",
          "key": "checkboxtoincludecustomizablefield()",
          "definition": "Check_box_to_include_customizable_field__(PlaceableTemplateField field)"
        }
      },
      "key": "reportmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "ReportManagement",
      "instance-name": "ReportManagement"
    },
    "portaltrainingmanagement": {
      "namespace": "",
      "methods": {
        "launchandcompletewithpassing()": {
          "name": "Launch__and_complete_with_passing",
          "key": "launchandcompletewithpassing()",
          "definition": "Launch__and_complete_with_passing(string eventName)"
        },
        "launchandcompleteon()": {
          "name": "Launch__and_complete_on_",
          "key": "launchandcompleteon()",
          "definition": "Launch__and_complete_on_( string eventName, DateTime completionDate )"
        },
        "launchandnotcomplete()": {
          "name": "Launch_and_not_complete",
          "key": "launchandnotcomplete()",
          "definition": "Launch_and_not_complete(string eventName)"
        },
        "launchandworkonforbutdonotfinish()": {
          "name": "Launch__and_work_on_for__but_do_not_finish",
          "key": "launchandworkonforbutdonotfinish()",
          "definition": "Launch__and_work_on_for__but_do_not_finish(string eventName, double minutes)"
        },
        "launchandcomplete()": {
          "name": "Launch__and_complete",
          "key": "launchandcomplete()",
          "definition": "Launch__and_complete(string eventName)"
        },
        "launchandcompletewithpercent()": {
          "name": "Launch__and_complete_with__percent",
          "key": "launchandcompletewithpercent()",
          "definition": "Launch__and_complete_with__percent(string eventName, double percent)"
        },
        "launchandcompletewithpercentinminutes()": {
          "name": "Launch__and_complete_with__percent_in__minutes",
          "key": "launchandcompletewithpercentinminutes()",
          "definition": "Launch__and_complete_with__percent_in__minutes(string eventName, double percent, double minutes)"
        },
        "launchandcompletewithpassinginminutes()": {
          "name": "Launch__and_complete_with_passing_in__minutes",
          "key": "launchandcompletewithpassinginminutes()",
          "definition": "Launch__and_complete_with_passing_in__minutes(string eventName, double minutes)"
        },
        "launchandcompleteinminutes()": {
          "name": "Launch__and_complete_in__minutes",
          "key": "launchandcompleteinminutes()",
          "definition": "Launch__and_complete_in__minutes( string eventName, double minutes )"
        }
      },
      "key": "portaltrainingmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "PortalTrainingManagement",
      "instance-name": "PortalTrainingManagement"
    },
    "grademanagement": {
      "namespace": "",
      "methods": {
        "takescoreisempty()": {
          "name": "take_score_is_empty",
          "key": "takescoreisempty()",
          "definition": "take_score_is_empty()"
        },
        "enterattemptscoresofforon()": {
          "name": "enter_attempt_scores_of__for__on__",
          "key": "enterattemptscoresofforon()",
          "definition": "enter_attempt_scores_of__for__on__(string attempts, string studentName, string testName)"
        },
        "enterattemptscoreofforon()": {
          "name": "enter_attempt_score_of__for__on__",
          "key": "enterattemptscoreofforon()",
          "definition": "enter_attempt_score_of__for__on__(string attempt, string studentName, string testName)"
        },
        "takegradeisempty()": {
          "name": "take_grade_is_empty",
          "key": "takegradeisempty()",
          "definition": "take_grade_is_empty()"
        },
        "takegradeis()": {
          "name": "take_grade_is",
          "key": "takegradeis()",
          "definition": "take_grade_is(decimal grade)"
        },
        "weaponserialnumberis()": {
          "name": "weapon_serial_number_is",
          "key": "weaponserialnumberis()",
          "definition": "weapon_serial_number_is(string serialNumber)"
        },
        "studentthetake()": {
          "name": "student_the_take",
          "key": "studentthetake()",
          "definition": "student_the_take(string pass)"
        },
        "makeofweaponismodelofweaponisserialofweaponis()": {
          "name": "make_of_weapon_is_model_of_weapon_is_serial_of_weapon_is",
          "key": "makeofweaponismodelofweaponisserialofweaponis()",
          "definition": "make_of_weapon_is_model_of_weapon_is_serial_of_weapon_is(string make, string model, string serial)"
        },
        "takescoredisplayvalueisempty()": {
          "name": "take_score_display_value_is_empty",
          "key": "takescoredisplayvalueisempty()",
          "definition": "take_score_display_value_is_empty()"
        },
        "recordedtestgradeisempty()": {
          "name": "recorded_test_grade_is_empty",
          "key": "recordedtestgradeisempty()",
          "definition": "recorded_test_grade_is_empty()"
        },
        "usingstudenttestfor()": {
          "name": "Using_student_test__for__",
          "key": "usingstudenttestfor()",
          "definition": "Using_student_test__for__(string testName, string studentName)"
        },
        "recordedtestgradeis()": {
          "name": "recorded_test_grade_is",
          "key": "recordedtestgradeis()",
          "definition": "recorded_test_grade_is(decimal grade)"
        },
        "studentthetest()": {
          "name": "student_the_test",
          "key": "studentthetest()",
          "definition": "student_the_test(string pass)"
        },
        "weaponmakeis()": {
          "name": "weapon_make_is",
          "key": "weaponmakeis()",
          "definition": "weapon_make_is( string make )"
        },
        "studentactivitywithagradeofpercent()": {
          "name": "Student__activity__with_a_grade_of__percent",
          "key": "studentactivitywithagradeofpercent()",
          "definition": "Student__activity__with_a_grade_of__percent(string studentName, string passed, string activityName, decimal grade)"
        },
        "savestudenttest()": {
          "name": "save_student_test",
          "key": "savestudenttest()",
          "definition": "save_student_test()"
        },
        "takeratingisempty()": {
          "name": "take_rating_is_empty",
          "key": "takeratingisempty()",
          "definition": "take_rating_is_empty()"
        },
        "weaponmodelis()": {
          "name": "weapon_model_is",
          "key": "weaponmodelis()",
          "definition": "weapon_model_is(string model)"
        },
        "entertimeofforonpartof()": {
          "name": "enter_time_of__for__on__part_of__",
          "key": "entertimeofforonpartof()",
          "definition": "enter_time_of__for__on__part_of__(string time, string studentName, string partName, string multipartTestName)"
        },
        "recordedtestscoredisplayvalueis()": {
          "name": "recorded_test_score_display_value_is",
          "key": "recordedtestscoredisplayvalueis()",
          "definition": "recorded_test_score_display_value_is(string score)"
        },
        "studentfulfilledofrequiredclasseswithanaverageofpercent()": {
          "name": "student_fulfilled_of_required_classes_with_an_average_of_percent",
          "key": "studentfulfilledofrequiredclasseswithanaverageofpercent()",
          "definition": "student_fulfilled_of_required_classes_with_an_average_of_percent(string studentName, int fufilledClasses, int requiredClasses, decimal classGrade)"
        },
        "enterforon()": {
          "name": "enter__for__on__",
          "key": "enterforon()",
          "definition": "enter__for__on__(string pass, string studentName, string testName)"
        },
        "didnotcompletetake()": {
          "name": "did_not_complete_take",
          "key": "didnotcompletetake()",
          "definition": "did_not_complete_take()"
        },
        "entercommentoffortest()": {
          "name": "enter_comment_of__for_test",
          "key": "entercommentoffortest()",
          "definition": "enter_comment_of__for_test(string comment)"
        },
        "waivefor()": {
          "name": "waive__for__",
          "key": "waivefor()",
          "definition": "waive__for__(string testName, string studentName)"
        },
        "takescoredisplayvalueis()": {
          "name": "take_score_display_value_is",
          "key": "takescoredisplayvalueis()",
          "definition": "take_score_display_value_is(string score)"
        },
        "recordedtestscoreis()": {
          "name": "recorded_test_score_is",
          "key": "recordedtestscoreis()",
          "definition": "recorded_test_score_is(decimal score)"
        },
        "startnewtakeoffor()": {
          "name": "start_new_take_of_for",
          "key": "startnewtakeoffor()",
          "definition": "start_new_take_of_for(string multipartTest, string studentName)"
        },
        "verifyhasgradeontest()": {
          "name": "Verify__has_grade__on_test__",
          "key": "verifyhasgradeontest()",
          "definition": "Verify__has_grade__on_test__(string studentName, decimal score, string test)"
        },
        "recordedtestscoredisplayvalueisempty()": {
          "name": "recorded_test_score_display_value_is_empty",
          "key": "recordedtestscoredisplayvalueisempty()",
          "definition": "recorded_test_score_display_value_is_empty()"
        },
        "entercommentofforitem()": {
          "name": "enter_comment_of__for_item__",
          "key": "entercommentofforitem()",
          "definition": "enter_comment_of__for_item__(string comment, string itemName)"
        },
        "takescoreis()": {
          "name": "take_score_is",
          "key": "takescoreis()",
          "definition": "take_score_is(decimal score)"
        },
        "entertimeofforon()": {
          "name": "enter_time_of__for__on__",
          "key": "entertimeofforon()",
          "definition": "enter_time_of__for__on__( string time, string studentName, string testName )"
        },
        "takeratingis()": {
          "name": "take_rating_is",
          "key": "takeratingis()",
          "definition": "take_rating_is(string rating)"
        },
        "enterattemptscoresofforonpartof()": {
          "name": "enter_attempt_scores_of__for__on__part_of__",
          "key": "enterattemptscoresofforonpartof()",
          "definition": "enter_attempt_scores_of__for__on__part_of__(string attempts, string studentName, string partName, string multipartTestName)"
        },
        "gradestudenttest()": {
          "name": "grade_student_test",
          "key": "gradestudenttest()",
          "definition": "grade_student_test()"
        },
        "recordedtestscoreisempty()": {
          "name": "recorded_test_score_is_empty",
          "key": "recordedtestscoreisempty()",
          "definition": "recorded_test_score_is_empty()"
        }
      },
      "key": "grademanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "GradeManagement",
      "instance-name": "GradeManagement"
    },
    "portalclasstestresults": {
      "namespace": "",
      "methods": {
        "enterfortestdate()": {
          "name": "Enter__for_test_date",
          "key": "enterfortestdate()",
          "definition": "Enter__for_test_date(DateTime testDate)"
        },
        "bindclassenrollmentlist()": {
          "name": "BindClassEnrollmentList",
          "key": "bindclassenrollmentlist()",
          "definition": "BindClassEnrollmentList(IEnumerable<PortalClassTestEntryListItemDto> dtos)"
        },
        "verifyalreadyhasgrade()": {
          "name": "Verify_already_has_grade",
          "key": "verifyalreadyhasgrade()",
          "definition": "Verify_already_has_grade()"
        },
        "clickfinishlater()": {
          "name": "Click_finish_later",
          "key": "clickfinishlater()",
          "definition": "Click_finish_later()"
        },
        "enterforcomments()": {
          "name": "Enter__for_comments",
          "key": "enterforcomments()",
          "definition": "Enter__for_comments(string comments)"
        },
        "verifypercentageresultis()": {
          "name": "Verify_percentage_result_is__",
          "key": "verifypercentageresultis()",
          "definition": "Verify_percentage_result_is__(decimal score)"
        },
        "clicksubmit()": {
          "name": "Click_submit",
          "key": "clicksubmit()",
          "definition": "Click_submit()"
        },
        "verifytestdateis()": {
          "name": "Verify_test_date_is__",
          "key": "verifytestdateis()",
          "definition": "Verify_test_date_is__(DateTime testDate)"
        },
        "selectforpassfailresult()": {
          "name": "Select__for_pass_fail_result",
          "key": "selectforpassfailresult()",
          "definition": "Select__for_pass_fail_result(string passFail)"
        },
        "verifytestresultsforeachstudentaretosubmit()": {
          "name": "Verify_test_results_for_each_student_are__to_submit",
          "key": "verifytestresultsforeachstudentaretosubmit()",
          "definition": "Verify_test_results_for_each_student_are__to_submit(string requiredOrNot)"
        },
        "clearpercentageresult()": {
          "name": "Clear_percentage_result",
          "key": "clearpercentageresult()",
          "definition": "Clear_percentage_result()"
        },
        "considerstudent()": {
          "name": "Consider_student__",
          "key": "considerstudent()",
          "definition": "Consider_student__(string studentName, string academyId)"
        },
        "verifypassfailresultis()": {
          "name": "Verify_pass_fail_result_is__",
          "key": "verifypassfailresultis()",
          "definition": "Verify_pass_fail_result_is__(string passFail)"
        },
        "verifytestdateisnotset()": {
          "name": "Verify_test_date_is_not_set",
          "key": "verifytestdateisnotset()",
          "definition": "Verify_test_date_is_not_set()"
        },
        "enterforpercentageresult()": {
          "name": "Enter__for_percentage_result",
          "key": "enterforpercentageresult()",
          "definition": "Enter__for_percentage_result(decimal? score)"
        },
        "clearpassfailresult()": {
          "name": "Clear_pass_fail_result",
          "key": "clearpassfailresult()",
          "definition": "Clear_pass_fail_result()"
        },
        "verifyresultisnotset()": {
          "name": "Verify_result_is_not_set",
          "key": "verifyresultisnotset()",
          "definition": "Verify_result_is_not_set()"
        },
        "waitforclicktolandusongradeentrypage()": {
          "name": "Wait_for_click_to_land_us_on_grade_entry_page",
          "key": "waitforclicktolandusongradeentrypage()",
          "definition": "Wait_for_click_to_land_us_on_grade_entry_page()"
        },
        "verifycommentsare()": {
          "name": "Verify_comments_are__",
          "key": "verifycommentsare()",
          "definition": "Verify_comments_are__(string comments)"
        }
      },
      "key": "portalclasstestresults",
      "is-parent": false,
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalClassTestResultsWorkflow",
      "instance-name": "PortalClassTestResults"
    },
    "reviewportaltestlist": {
      "namespace": "",
      "methods": {
        "considertestinactivity()": {
          "name": "Consider_test__in_activity__",
          "key": "considertestinactivity()",
          "definition": "Consider_test__in_activity__(string testName, string activityName)"
        },
        "verifynumberofresultsenteredis()": {
          "name": "Verify_number_of_results_entered_is__",
          "key": "verifynumberofresultsenteredis()",
          "definition": "Verify_number_of_results_entered_is__(int resultsEntered)"
        },
        "clicktodismiss()": {
          "name": "Click_to_dismiss",
          "key": "clicktodismiss()",
          "definition": "Click_to_dismiss()"
        },
        "considerclass()": {
          "name": "Consider_class__",
          "key": "considerclass()",
          "definition": "Consider_class__(string className)"
        },
        "verifysubmittingorganizationis()": {
          "name": "Verify_submitting_organization_is__",
          "key": "verifysubmittingorganizationis()",
          "definition": "Verify_submitting_organization_is__(string orgName)"
        },
        "verifytestinactivityisnotdisplayed()": {
          "name": "Verify_test__in_activity__is_not_displayed",
          "key": "verifytestinactivityisnotdisplayed()",
          "definition": "Verify_test__in_activity__is_not_displayed(string testName, string activityName)"
        },
        "verifynumberofstudentsis()": {
          "name": "Verify_number_of_students_is__",
          "key": "verifynumberofstudentsis()",
          "definition": "Verify_number_of_students_is__(int students)"
        },
        "clicktodismissall()": {
          "name": "Click_to_dismiss_all",
          "key": "clicktodismissall()",
          "definition": "Click_to_dismiss_all()"
        },
        "verifysubmittedonby()": {
          "name": "Verify_submitted_on__by__",
          "key": "verifysubmittedonby()",
          "definition": "Verify_submitted_on__by__(DateTime submissionDate, string submittedBy)"
        },
        "clicktoviewgrades()": {
          "name": "Click_to_view_grades",
          "key": "clicktoviewgrades()",
          "definition": "Click_to_view_grades()"
        },
        "bindclasstestlist()": {
          "name": "BindClassTestList",
          "key": "bindclasstestlist()",
          "definition": "BindClassTestList(IEnumerable<PortalClassTestListItemDto> dtos)"
        },
        "verifyclassisnotdisplayed()": {
          "name": "Verify_class__is_not_displayed",
          "key": "verifyclassisnotdisplayed()",
          "definition": "Verify_class__is_not_displayed(string className)"
        },
        "verifycommentsare()": {
          "name": "Verify_comments_are__",
          "key": "verifycommentsare()",
          "definition": "Verify_comments_are__(string comments)"
        }
      },
      "key": "reviewportaltestlist",
      "is-parent": false,
      "parent-name": "MVBaseWorkflow",
      "class-name": "ReviewPortalTestListWorkflow",
      "instance-name": "ReviewPortalTestList"
    },
    "housingreservationshortcuts": {
      "namespace": "",
      "methods": {
        "createreservationfor()": {
          "name": "Create_reservation_for__",
          "key": "createreservationfor()",
          "definition": "Create_reservation_for__(string className)"
        }
      },
      "key": "housingreservationshortcuts",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "HousingReservationShortcuts",
      "instance-name": "HousingReservationShortcuts"
    },
    "savepointmanagement": {
      "namespace": "",
      "methods": {
        "createsavepoint()": {
          "name": "CreateSavePoint",
          "key": "createsavepoint()",
          "definition": "CreateSavePoint(string savePointName)"
        },
        "rollbacktosavepoint()": {
          "name": "RollbackToSavePoint",
          "key": "rollbacktosavepoint()",
          "definition": "RollbackToSavePoint(string savePointName)"
        }
      },
      "key": "savepointmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "SavePointManagement",
      "instance-name": "SavePointManagement"
    },
    "proctorstudentsearch": {
      "namespace": "",
      "methods": {
        "enterforlastname()": {
          "name": "Enter_for_last_name",
          "key": "enterforlastname()",
          "definition": "Enter_for_last_name(string lastName)"
        },
        "enterfortestname()": {
          "name": "Enter_for_test_name",
          "key": "enterfortestname()",
          "definition": "Enter_for_test_name(string testName)"
        },
        "verifystudenttestsincludeclassandtest()": {
          "name": "Verify_student_tests__include_class__and_test__",
          "key": "verifystudenttestsincludeclassandtest()",
          "definition": "Verify_student_tests__include_class__and_test__(string doOrDoNot, string className, string testName)"
        },
        "clickloginstudentforclassandtest()": {
          "name": "Click_login_student_for_class__and_test__",
          "key": "clickloginstudentforclassandtest()",
          "definition": "Click_login_student_for_class__and_test__(string className, string testName)"
        },
        "verifyresultcountis()": {
          "name": "Verify_result_count_is__",
          "key": "verifyresultcountis()",
          "definition": "Verify_result_count_is__(int count)"
        },
        "verifyresultsinclude()": {
          "name": "Verify_results__include",
          "key": "verifyresultsinclude()",
          "definition": "Verify_results__include(string doOrDoNot, string fullNameWithSuffix)"
        },
        "enterforclassname()": {
          "name": "Enter_for_class_name",
          "key": "enterforclassname()",
          "definition": "Enter_for_class_name(string className)"
        },
        "clickverifystudentfor()": {
          "name": "Click_verify_student_for__",
          "key": "clickverifystudentfor()",
          "definition": "Click_verify_student_for__(string fullNameWithSuffix)"
        },
        "enterforacademyid()": {
          "name": "Enter_for_academy_id",
          "key": "enterforacademyid()",
          "definition": "Enter_for_academy_id(string academyId)"
        },
        "clicksearch()": {
          "name": "Click_search",
          "key": "clicksearch()",
          "definition": "Click_search()"
        },
        "verifystudentloginwassuccessfulandproctorloggedout()": {
          "name": "Verify_student_login_was_successful_and_proctor_logged_out",
          "key": "verifystudentloginwassuccessfulandproctorloggedout()",
          "definition": "Verify_student_login_was_successful_and_proctor_logged_out()"
        }
      },
      "key": "proctorstudentsearch",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "ProctorStudentSearchWorkflow",
      "instance-name": "ProctorStudentSearch"
    },
    "trainingeventmanagement": {
      "namespace": "",
      "methods": {
        "considerinserviceeventnamed()": {
          "name": "Consider_inservice_event_named__",
          "key": "considerinserviceeventnamed()",
          "definition": "Consider_inservice_event_named__(string name)"
        },
        "addtoeventundertrainingcategoryof()": {
          "name": "Add_to_event_under_training_category_of",
          "key": "addtoeventundertrainingcategoryof()",
          "definition": "Add_to_event_under_training_category_of( string attendee, string eventName, string trainingCategory )"
        },
        "findeventwithstartdate()": {
          "name": "Find_event_with_start_date",
          "key": "findeventwithstartdate()",
          "definition": "Find_event_with_start_date(string eventName, DateTime startDate)"
        },
        "verifyeventinstructorphoneis()": {
          "name": "Verify_event_Instructor_Phone__is__",
          "key": "verifyeventinstructorphoneis()",
          "definition": "Verify_event_Instructor_Phone__is__(string value)"
        },
        "considerinserviceattendee()": {
          "name": "Consider_inservice_attendee__",
          "key": "considerinserviceattendee()",
          "definition": "Consider_inservice_attendee__(string name)"
        },
        "createtrainingeventwithtitlestartingonendingonwithvariablehours()": {
          "name": "create_training_event_with_title__starting_on__ending_on__with_variable_hours",
          "key": "createtrainingeventwithtitlestartingonendingonwithvariablehours()",
          "definition": "create_training_event_with_title__starting_on__ending_on__with_variable_hours(string eventTitle, DateTime startDate, DateTime endDate)"
        },
        "verifyattendeedidnotpass()": {
          "name": "Verify_attendee_did_not_pass",
          "key": "verifyattendeedidnotpass()",
          "definition": "Verify_attendee_did_not_pass()"
        },
        "verifyattendeepassed()": {
          "name": "Verify_attendee_passed",
          "key": "verifyattendeepassed()",
          "definition": "Verify_attendee_passed()"
        },
        "addtrainingeventto()": {
          "name": "add_training_event_to",
          "key": "addtrainingeventto()",
          "definition": "add_training_event_to(string eventName, string personName)"
        },
        "findunderapproved()": {
          "name": "Find_under_Approved",
          "key": "findunderapproved()",
          "definition": "Find_under_Approved(string eventName)"
        },
        "dispose()": {
          "name": "Dispose",
          "key": "dispose()",
          "definition": "Dispose()"
        },
        "verifyeventstartdateis()": {
          "name": "Verify_event_StartDate_is__",
          "key": "verifyeventstartdateis()",
          "definition": "Verify_event_StartDate_is__(DateTime value)"
        },
        "saveevent()": {
          "name": "Save_event",
          "key": "saveevent()",
          "definition": "Save_event()"
        },
        "verifyeventenddateis()": {
          "name": "Verify_event_EndDate_is__",
          "key": "verifyeventenddateis()",
          "definition": "Verify_event_EndDate_is__(DateTime value)"
        },
        "rejecttrainingeventwithcomment()": {
          "name": "Reject_training_event__with_comment_",
          "key": "rejecttrainingeventwithcomment()",
          "definition": "Reject_training_event__with_comment_(string status, string comment)"
        },
        "verifyeventvariablehours()": {
          "name": "Verify_event__Variable_Hours",
          "key": "verifyeventvariablehours()",
          "definition": "Verify_event__Variable_Hours(string hasHasNot)"
        },
        "verifyeventcommentsare()": {
          "name": "Verify_event_Comments_are__",
          "key": "verifyeventcommentsare()",
          "definition": "Verify_event_Comments_are__(string value)"
        },
        "verifyeventofficialprovideris()": {
          "name": "Verify_event_Official_Provider_is__",
          "key": "verifyeventofficialprovideris()",
          "definition": "Verify_event_Official_Provider_is__(string value)"
        },
        "addtoevent()": {
          "name": "Add__to_event__",
          "key": "addtoevent()",
          "definition": "Add__to_event__(string attendee, string eventName)"
        },
        "verifyemailmessagesweresentto()": {
          "name": "Verify__email_messages_were_sent_to__",
          "key": "verifyemailmessagesweresentto()",
          "definition": "Verify__email_messages_were_sent_to__(int num, string emailAddress)"
        },
        "findevent()": {
          "name": "Find_event",
          "key": "findevent()",
          "definition": "Find_event(string eventName)"
        },
        "verifyeventhasattendees()": {
          "name": "Verify_event_has__Attendees",
          "key": "verifyeventhasattendees()",
          "definition": "Verify_event_has__Attendees(int count)"
        },
        "verifyemailmessagesweresent()": {
          "name": "Verify__email_messages_were_sent",
          "key": "verifyemailmessagesweresent()",
          "definition": "Verify__email_messages_were_sent(int num)"
        },
        "verifyeventhoursis()": {
          "name": "Verify_event_Hours_is__",
          "key": "verifyeventhoursis()",
          "definition": "Verify_event_Hours_is__(string value)"
        },
        "createtrainingeventwithtitlestartingonendingonwithdurationofhours()": {
          "name": "create_training_event_with_title_starting_on_ending_on_with_duration_of_hours",
          "key": "createtrainingeventwithtitlestartingonendingonwithdurationofhours()",
          "definition": "create_training_event_with_title_starting_on_ending_on_with_duration_of_hours( string eventTitle, DateTime startDate, DateTime endDate, string eventDuration )"
        },
        "verifythattheemailsenttocontains()": {
          "name": "Verify_that_the_email_sent_to__contains__",
          "key": "verifythattheemailsenttocontains()",
          "definition": "Verify_that_the_email_sent_to__contains__(string emailAddress, string compareStr)"
        },
        "verifyeventisreportedto()": {
          "name": "Verify_event_is_reported_to__",
          "key": "verifyeventisreportedto()",
          "definition": "Verify_event_is_reported_to__(string value)"
        },
        "considerinserviceeventnamedwithcoursenumber()": {
          "name": "Consider_inservice_event_named__with_course_number__",
          "key": "considerinserviceeventnamedwithcoursenumber()",
          "definition": "Consider_inservice_event_named__with_course_number__(string name, string courseNumber)"
        },
        "createtrainingeventwithtitlefortodaywithdurationofhours()": {
          "name": "create_training_event_with_title_for_today_with_duration_of_hours",
          "key": "createtrainingeventwithtitlefortodaywithdurationofhours()",
          "definition": "create_training_event_with_title_for_today_with_duration_of_hours( string eventTitle, string eventDuration )"
        },
        "verifyattendeeaninstructor()": {
          "name": "Verify_attendee__an_instructor",
          "key": "verifyattendeeaninstructor()",
          "definition": "Verify_attendee__an_instructor(string isIsNot)"
        },
        "verifyattendeetrainingcategoryis()": {
          "name": "Verify_attendee_Training_Category_is__",
          "key": "verifyattendeetrainingcategoryis()",
          "definition": "Verify_attendee_Training_Category_is__(string value)"
        },
        "verifyeventdescriptionis()": {
          "name": "Verify_event_Description_is__",
          "key": "verifyeventdescriptionis()",
          "definition": "Verify_event_Description_is__(string value)"
        },
        "verifycoursenumberhoursstartingonendingonattendees()": {
          "name": "Verify_Course_Number_hours_starting_on_ending_on_attendees",
          "key": "verifycoursenumberhoursstartingonendingonattendees()",
          "definition": "Verify_Course_Number_hours_starting_on_ending_on_attendees(string coursenumber, string hours, DateTime starting, DateTime ending, int attendees)"
        },
        "addtoeventwithstartdate()": {
          "name": "Add__to_event__with_start_date__",
          "key": "addtoeventwithstartdate()",
          "definition": "Add__to_event__with_start_date__(string attendee, string eventName, DateTime startDate)"
        },
        "saveeventasdraft()": {
          "name": "Save_event_as_draft",
          "key": "saveeventasdraft()",
          "definition": "Save_event_as_draft()"
        },
        "verifyeventotherprovideris()": {
          "name": "Verify_event_Other_Provider_is__",
          "key": "verifyeventotherprovideris()",
          "definition": "Verify_event_Other_Provider_is__(string value)"
        },
        "verifyattendeepassfailisnotspecified()": {
          "name": "Verify_attendee_pass_fail_is_not_specified",
          "key": "verifyattendeepassfailisnotspecified()",
          "definition": "Verify_attendee_pass_fail_is_not_specified()"
        },
        "selecttrainingcategorynamed()": {
          "name": "Select_training_category_named_",
          "key": "selecttrainingcategorynamed()",
          "definition": "Select_training_category_named_( string name )"
        },
        "verifyeventinstructorphonetypeis()": {
          "name": "Verify_event_Instructor_Phone_Type_is__",
          "key": "verifyeventinstructorphonetypeis()",
          "definition": "Verify_event_Instructor_Phone_Type_is__(string value)"
        },
        "loadmonitor()": {
          "name": "Load_monitor",
          "key": "loadmonitor()",
          "definition": "Load_monitor()"
        },
        "verifyeventvariabletrainingcategories()": {
          "name": "Verify_event__Variable_Training_Categories",
          "key": "verifyeventvariabletrainingcategories()",
          "definition": "Verify_event__Variable_Training_Categories(string hasHasNot)"
        },
        "verifyattendeehashoursrecorded()": {
          "name": "Verify_attendee_has__Hours_recorded",
          "key": "verifyattendeehashoursrecorded()",
          "definition": "Verify_attendee_has__Hours_recorded(decimal hours)"
        },
        "verifyeventinstructoris()": {
          "name": "Verify_event_Instructor_is__",
          "key": "verifyeventinstructoris()",
          "definition": "Verify_event_Instructor_is__(string value)"
        },
        "verifytrackingstatuscontains()": {
          "name": "Verify_tracking_status_contains",
          "key": "verifytrackingstatuscontains()",
          "definition": "Verify_tracking_status_contains(string list)"
        },
        "verifyattendeecommentis()": {
          "name": "Verify_attendee_comment_is__",
          "key": "verifyattendeecommentis()",
          "definition": "Verify_attendee_comment_is__(string value)"
        },
        "createtrainingeventwithtitleforownerstartingonendingonwithdurationofhours()": {
          "name": "create_training_event_with_title_for_owner_starting_on_ending_on_with_duration_of_hours",
          "key": "createtrainingeventwithtitleforownerstartingonendingonwithdurationofhours()",
          "definition": "create_training_event_with_title_for_owner_starting_on_ending_on_with_duration_of_hours( string eventTitle, string ownerName, DateTime startDate, DateTime endDate, string eventDuration )"
        },
        "verify1emailmessagewassentto()": {
          "name": "Verify_1_email_message_was_sent_to__",
          "key": "verify1emailmessagewassentto()",
          "definition": "Verify_1_email_message_was_sent_to__(string emailAddress)"
        },
        "selectotherprovidernameorg()": {
          "name": "Select_Other_Provider_name_org",
          "key": "selectotherprovidernameorg()",
          "definition": "Select_Other_Provider_name_org(string name, string org)"
        },
        "verifyevent()": {
          "name": "verify_event",
          "key": "verifyevent()",
          "definition": "verify_event()"
        },
        "verifyeventinstructoremailis()": {
          "name": "Verify_event_Instructor_Email_is__",
          "key": "verifyeventinstructoremailis()",
          "definition": "Verify_event_Instructor_Email_is__(string value)"
        },
        "verifyeventcoursenumberis()": {
          "name": "Verify_event_CourseNumber_is__",
          "key": "verifyeventcoursenumberis()",
          "definition": "Verify_event_CourseNumber_is__(string value)"
        },
        "verifyattendeegradeis()": {
          "name": "Verify_attendee_grade_is__",
          "key": "verifyattendeegradeis()",
          "definition": "Verify_attendee_grade_is__(string value)"
        },
        "selectofficialprovidernamed()": {
          "name": "Select_Official_Provider_named",
          "key": "selectofficialprovidernamed()",
          "definition": "Select_Official_Provider_named(string name)"
        },
        "verifyeventtrainingcategoryis()": {
          "name": "Verify_event_Training_Category_is__",
          "key": "verifyeventtrainingcategoryis()",
          "definition": "Verify_event_Training_Category_is__(string value)"
        }
      },
      "key": "trainingeventmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "TrainingEventManagement",
      "instance-name": "TrainingEventManagement"
    },
    "instructormanagement": {
      "namespace": "",
      "methods": {
        "makeaninstructorwithprofile()": {
          "name": "Make__an_instructor_with_profile__",
          "key": "makeaninstructorwithprofile()",
          "definition": "Make__an_instructor_with_profile__(string personName, string profileName)"
        },
        "removefromdivision()": {
          "name": "Remove_from_division",
          "key": "removefromdivision()",
          "definition": "Remove_from_division(string instructorName, string divisionName)"
        },
        "verifyavailabilityisonstartingatandendingat()": {
          "name": "Verify_availability__is_on__starting_at__and_ending_at__",
          "key": "verifyavailabilityisonstartingatandendingat()",
          "definition": "Verify_availability__is_on__starting_at__and_ending_at__(int availIndex, DateTime date, TimeSpan start, TimeSpan end)"
        },
        "addinstructoravailabilityforonfromto()": {
          "name": "Add_instructor_availability_for__on__from__to__",
          "key": "addinstructoravailabilityforonfromto()",
          "definition": "Add_instructor_availability_for__on__from__to__(string instructorName, DateTime date, Time startTime, Time endTime)"
        },
        "assigntodivision()": {
          "name": "Assign_to_division",
          "key": "assigntodivision()",
          "definition": "Assign_to_division( string instructorName, string divisionName )"
        },
        "addinstructorunavailabilityforonfromto()": {
          "name": "Add_instructor_unavailability_for_on_from_to",
          "key": "addinstructorunavailabilityforonfromto()",
          "definition": "Add_instructor_unavailability_for_on_from_to( string instructorName, DateTime date, Time startTime, Time endTime )"
        },
        "makenotaninstructor()": {
          "name": "Make__not_an_instructor",
          "key": "makenotaninstructor()",
          "definition": "Make__not_an_instructor(string personName)"
        },
        "markinstructorabsentforallsegmentsonforreason()": {
          "name": "Mark_Instructor_Absent_for_all_segments_on_for_reason",
          "key": "markinstructorabsentforallsegmentsonforreason()",
          "definition": "Mark_Instructor_Absent_for_all_segments_on_for_reason(string instructorName, DateTime segmentDate, string absenceReason)"
        },
        "verifymaxhoursperquarterforissetto()": {
          "name": "Verify_max_hours_per_quarter_for_is_set_to",
          "key": "verifymaxhoursperquarterforissetto()",
          "definition": "Verify_max_hours_per_quarter_for_is_set_to( string instructorName, int perQuarter )"
        },
        "verifyhasdivisions()": {
          "name": "Verify__has_divisions__",
          "key": "verifyhasdivisions()",
          "definition": "Verify__has_divisions__(string instructorName, string divisionString)"
        },
        "verifyhasavailabilityprofile()": {
          "name": "Verify__has_availability_profile_",
          "key": "verifyhasavailabilityprofile()",
          "definition": "Verify__has_availability_profile_(string instructorName, string profileName)"
        },
        "createinstructornamedwithavailabilityof()": {
          "name": "Create_instructor_named__with_availability_of__",
          "key": "createinstructornamedwithavailabilityof()",
          "definition": "Create_instructor_named__with_availability_of__( string instructorName, string profileName )"
        },
        "hireinstructoratas()": {
          "name": "Hire_instructor__at__as__",
          "key": "hireinstructoratas()",
          "definition": "Hire_instructor__at__as__(string instructorName, string organizationName, string titleName)"
        },
        "verifythereareavailabilities()": {
          "name": "Verify_there_are__availabilities",
          "key": "verifythereareavailabilities()",
          "definition": "Verify_there_are__availabilities(int numAvail)"
        },
        "changestatusto()": {
          "name": "Change_status_to",
          "key": "changestatusto()",
          "definition": "Change_status_to(string instructorName, string status)"
        },
        "addbaselineinstructorunavailabilityforonfromto()": {
          "name": "Add_baseline_instructor_unavailability_for_on_from_to",
          "key": "addbaselineinstructorunavailabilityforonfromto()",
          "definition": "Add_baseline_instructor_unavailability_for_on_from_to(string instructorName, DateTime date, Time startTime, Time endTime)"
        },
        "verifymaxhoursperissetto()": {
          "name": "Verify__max_hours_per__is_set_to_",
          "key": "verifymaxhoursperissetto()",
          "definition": "Verify__max_hours_per__is_set_to_( string instructorName, string period, int perDay )"
        },
        "verifyisunavailableonfromto()": {
          "name": "Verify__is_unavailable_on__from__to_",
          "key": "verifyisunavailableonfromto()",
          "definition": "Verify__is_unavailable_on__from__to_(string instructorName, DateTime date, Time startTime, Time endTime )"
        },
        "setmaxhoursperto()": {
          "name": "Set__max_hours_per__to",
          "key": "setmaxhoursperto()",
          "definition": "Set__max_hours_per__to(string instructorName, DayOrWeek period, int hours)"
        },
        "createinstructornamedwithemailaddressandavailabilityof()": {
          "name": "Create_instructor_named__with_email_address__and_availability_of__",
          "key": "createinstructornamedwithemailaddressandavailabilityof()",
          "definition": "Create_instructor_named__with_email_address__and_availability_of__( string instructorName, string emailAddress, string profileName)"
        },
        "verifynotavailableon()": {
          "name": "Verify_not_available_on",
          "key": "verifynotavailableon()",
          "definition": "Verify_not_available_on(DayOfWeek day)"
        },
        "verifymaxhourspermonthforissetto()": {
          "name": "Verify_max_hours_per_month_for_is_set_to",
          "key": "verifymaxhourspermonthforissetto()",
          "definition": "Verify_max_hours_per_month_for_is_set_to( string instructorName, int perMonth )"
        },
        "verifyhasabsenceson()": {
          "name": "Verify_has_absences_on",
          "key": "verifyhasabsenceson()",
          "definition": "Verify_has_absences_on(string instructorName, DateTime absenceDate)"
        },
        "createinstructornamedwithacademyidof()": {
          "name": "Create_instructor_named__with_academy_id_of__",
          "key": "createinstructornamedwithacademyidof()",
          "definition": "Create_instructor_named__with_academy_id_of__(string fullName, string academyId)"
        },
        "instructorhasunavailabilityonfromto()": {
          "name": "Instructor_has_unavailability_on_from_to",
          "key": "instructorhasunavailabilityonfromto()",
          "definition": "Instructor_has_unavailability_on_from_to( string instructorName, DateTime date, Time startTime, Time endTime )"
        },
        "getavailabilityforfromto()": {
          "name": "Get_Availability_for_from_to",
          "key": "getavailabilityforfromto()",
          "definition": "Get_Availability_for_from_to(string instructorName, DateTime start, DateTime end)"
        },
        "createinstructornamed()": {
          "name": "Create_instructor_named__",
          "key": "createinstructornamed()",
          "definition": "Create_instructor_named__(string fullName)"
        }
      },
      "key": "instructormanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "InstructorManagement",
      "instance-name": "InstructorManagement"
    },
    "schedulemanagement": {
      "namespace": "",
      "methods": {
        "authorizeforsegments()": {
          "name": "Authorize_for_segments",
          "key": "authorizeforsegments()",
          "definition": "Authorize_for_segments( string instructorName )"
        },
        "savescheduletemplateas()": {
          "name": "Save_schedule_template_as__",
          "key": "savescheduletemplateas()",
          "definition": "Save_schedule_template_as__( string templateLabel )"
        },
        "verifycontainsclassaward()": {
          "name": "Verify__contains_class_award__",
          "key": "verifycontainsclassaward()",
          "definition": "Verify__contains_class_award__(string className, string awardName)"
        },
        "specifystartingdateas()": {
          "name": "Specify_starting_date_as__",
          "key": "specifystartingdateas()",
          "definition": "Specify_starting_date_as__( string date )"
        },
        "setlistofauthorizationsegmentsto()": {
          "name": "Set_list_of_authorization_segments_to",
          "key": "setlistofauthorizationsegmentsto()",
          "definition": "Set_list_of_authorization_segments_to( string ids )"
        },
        "authorizebaselineinstructorforsegmentswithpriorityandlevel()": {
          "name": "Authorize_baseline_instructor_for_segments_with_priority_and_level",
          "key": "authorizebaselineinstructorforsegmentswithpriorityandlevel()",
          "definition": "Authorize_baseline_instructor_for_segments_with_priority_and_level(string instructorName, string priority, string level)"
        },
        "authorizeforsegmentswithpriorityandlevel()": {
          "name": "Authorize_for_segments_with_priority_and_level",
          "key": "authorizeforsegmentswithpriorityandlevel()",
          "definition": "Authorize_for_segments_with_priority_and_level( string instructorName, string priority, string level )"
        },
        "authorizebaselineinstructorforsegments()": {
          "name": "Authorize_baseline_instructor_for_segments",
          "key": "authorizebaselineinstructorforsegments()",
          "definition": "Authorize_baseline_instructor_for_segments(string instructorName)"
        },
        "verifyhasconflicts()": {
          "name": "Verify__has_conflicts",
          "key": "verifyhasconflicts()",
          "definition": "Verify__has_conflicts(string schedulingClassName, int numConflicts)"
        },
        "setavailabilityprofileto()": {
          "name": "Set_availability_profile_to__",
          "key": "setavailabilityprofileto()",
          "definition": "Set_availability_profile_to__( string profileName )"
        }
      },
      "key": "schedulemanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "ScheduleManagement",
      "instance-name": "ScheduleManagement"
    },
    "personperformancetester": {
      "namespace": "",
      "methods": {
        "insertpeoplewithdac()": {
          "name": "Insert__people_with_dac",
          "key": "insertpeoplewithdac()",
          "definition": "Insert__people_with_dac(int count)"
        },
        "insertpeoplewithsql()": {
          "name": "Insert__people_with_sql",
          "key": "insertpeoplewithsql()",
          "definition": "Insert__people_with_sql(int count)"
        }
      },
      "key": "personperformancetester",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "PersonPerformanceTester",
      "instance-name": "PersonPerformanceTester"
    },
    "testsetretakelimitpersistence": {
      "namespace": "",
      "methods": {
        "canroundtripatestsetretakelimit()": {
          "name": "Can_roundtrip_a_TestSetRetakeLimit",
          "key": "canroundtripatestsetretakelimit()",
          "definition": "Can_roundtrip_a_TestSetRetakeLimit()"
        }
      },
      "key": "testsetretakelimitpersistence",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "TestSetRetakeLimitPersistence",
      "instance-name": "TestSetRetakeLimitPersistence"
    },
    "portalclasstestlist": {
      "namespace": "",
      "methods": {
        "considertestinactivity()": {
          "name": "Consider_test__in_activity__",
          "key": "considertestinactivity()",
          "definition": "Consider_test__in_activity__(string testName, string activityName)"
        },
        "verifynumberofresultsenteredis()": {
          "name": "Verify_number_of_results_entered_is__",
          "key": "verifynumberofresultsenteredis()",
          "definition": "Verify_number_of_results_entered_is__(int resultsEntered)"
        },
        "verifyentergrades()": {
          "name": "Verify__enter_grades",
          "key": "verifyentergrades()",
          "definition": "Verify__enter_grades(string canCannot)"
        },
        "verifyclassdatesare()": {
          "name": "Verify_class_dates_are__",
          "key": "verifyclassdatesare()",
          "definition": "Verify_class_dates_are__(DateTime startDate, DateTime endDate)"
        },
        "considerclass()": {
          "name": "Consider_class__",
          "key": "considerclass()",
          "definition": "Consider_class__(string className)"
        },
        "verifystatusis()": {
          "name": "Verify_status_is__",
          "key": "verifystatusis()",
          "definition": "Verify_status_is__(PortalAssessmentTestStatus status)"
        },
        "verifynumberofstudentsis()": {
          "name": "Verify_number_of_students_is__",
          "key": "verifynumberofstudentsis()",
          "definition": "Verify_number_of_students_is__(int students)"
        },
        "clicktoviewgrades()": {
          "name": "Click_to_view_grades",
          "key": "clicktoviewgrades()",
          "definition": "Click_to_view_grades()"
        },
        "bindclasstestlist()": {
          "name": "BindClassTestList",
          "key": "bindclasstestlist()",
          "definition": "BindClassTestList(IEnumerable<PortalClassTestListItemDto> dtos)"
        },
        "verifyclassisnotdisplayed()": {
          "name": "Verify_class__is_not_displayed",
          "key": "verifyclassisnotdisplayed()",
          "definition": "Verify_class__is_not_displayed(string className)"
        },
        "clicktoentergrades()": {
          "name": "Click_to_enter_grades",
          "key": "clicktoentergrades()",
          "definition": "Click_to_enter_grades()"
        }
      },
      "key": "portalclasstestlist",
      "is-parent": false,
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalClassTestListWorkflow",
      "instance-name": "PortalClassTestList"
    },
    "testopiadocumentstorageproviderfactory": {
      "namespace": "",
      "methods": {
        
      },
      "key": "testopiadocumentstorageproviderfactory",
      "is-parent": false,
      "parent-name": null,
      "class-name": "TestopiaDocumentStorageProviderFactory",
      "instance-name": "TestopiaDocumentStorageProviderFactory"
    },
    "multiparttestpartpersistence": {
      "namespace": "",
      "methods": {
        "canroundtripamultiparttestpart()": {
          "name": "Can_roundtrip_a_multipart_testpart",
          "key": "canroundtripamultiparttestpart()",
          "definition": "Can_roundtrip_a_multipart_testpart()"
        }
      },
      "key": "multiparttestpartpersistence",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "MultiPartTestPartPersistence",
      "instance-name": "MultiPartTestPartPersistence"
    },
    "certificationmanagementfnh": {
      "namespace": "",
      "methods": {
        "setauditnotificationtextofto()": {
          "name": "Set_audit_notification_text_of__to__",
          "key": "setauditnotificationtextofto()",
          "definition": "Set_audit_notification_text_of__to__(string masterName, string auditNotificationTxt)"
        },
        "commandeerrenewalviewsfromcustomerwithcode()": {
          "name": "Commandeer_renewal_views_from_customer_with_code_",
          "key": "commandeerrenewalviewsfromcustomerwithcode()",
          "definition": "Commandeer_renewal_views_from_customer_with_code_( string customerCode )"
        },
        "haveportalrenewmeetingrequirementswithnocriminaloffense()": {
          "name": "Have__portal_renew__meeting_requirements_with_no_criminal_offense",
          "key": "haveportalrenewmeetingrequirementswithnocriminaloffense()",
          "definition": "Have__portal_renew__meeting_requirements_with_no_criminal_offense(string personName, string masterName)"
        },
        "verifyrequirementofisfulfilledwithtrainingclass()": {
          "name": "Verify_requirement__of__is_fulfilled_with_training_class__",
          "key": "verifyrequirementofisfulfilledwithtrainingclass()",
          "definition": "Verify_requirement__of__is_fulfilled_with_training_class__(string reqText, string appName, string className)"
        },
        "verifyrequirementofisfulfilledwithcertification()": {
          "name": "Verify_requirement__of__is_fulfilled_with_certification__",
          "key": "verifyrequirementofisfulfilledwithcertification()",
          "definition": "Verify_requirement__of__is_fulfilled_with_certification__(string reqText, string appName, string certVersionName)"
        },
        "verifythatapplicationhasrequirement()": {
          "name": "Verify_that_application__has__requirement__",
          "key": "verifythatapplicationhasrequirement()",
          "definition": "Verify_that_application__has__requirement__(string appName, InquiryItemType category, string reqText)"
        },
        "verifycertificationisnotavailableforconferralandrenewal()": {
          "name": "Verify_certification__is_not_available_for_conferral_and_renewal",
          "key": "verifycertificationisnotavailableforconferralandrenewal()",
          "definition": "Verify_certification__is_not_available_for_conferral_and_renewal(string certName)"
        },
        "verifyapplicationhasaffirmationtext()": {
          "name": "Verify_application_has_affirmation_text",
          "key": "verifyapplicationhasaffirmationtext()",
          "definition": "Verify_application_has_affirmation_text(string appName, string text)"
        },
        "createcertificationtemplateoftypenamedwithdescriptionthatneverexpires()": {
          "name": "Create__certification_template_of_type__named__with_description__that_never_expires",
          "key": "createcertificationtemplateoftypenamedwithdescriptionthatneverexpires()",
          "definition": "Create__certification_template_of_type__named__with_description__that_never_expires(string isActive, string certTypeName, string name, string description)"
        },
        "verifythereareclassdefinitionsusing()": {
          "name": "Verify_there_are_class_definitions_using",
          "key": "verifythereareclassdefinitionsusing()",
          "definition": "Verify_there_are_class_definitions_using(int number, string masterName)"
        },
        "allowautorenewalofusingcustomviewnamedwithrenewalcommentsof()": {
          "name": "Allow_AutoRenewal_of__using_custom_view_named__with_renewal_comments_of_",
          "key": "allowautorenewalofusingcustomviewnamedwithrenewalcommentsof()",
          "definition": "Allow_AutoRenewal_of__using_custom_view_named__with_renewal_comments_of_( string masterName, string customViewName, string renewalComments )"
        },
        "verifyrequirementofisfulfilledwithemployment()": {
          "name": "Verify_requirement__of__is_fulfilled_with_employment__",
          "key": "verifyrequirementofisfulfilledwithemployment()",
          "definition": "Verify_requirement__of__is_fulfilled_with_employment__(string reqText, string appName, string empName)"
        },
        "verifyversionofforpersonhasrenewalguidelines()": {
          "name": "Verify_version_of__for_person__has_renewal_guidelines__",
          "key": "verifyversionofforpersonhasrenewalguidelines()",
          "definition": "Verify_version_of__for_person__has_renewal_guidelines__(string masterName, string personName, string guidelines)"
        },
        "verifythereareactivitiesusing()": {
          "name": "Verify_there_are_activities_using",
          "key": "verifythereareactivitiesusing()",
          "definition": "Verify_there_are_activities_using(int number, string masterName)"
        },
        "setaffirmationtextofto()": {
          "name": "Set_affirmation_text_of__to_",
          "key": "setaffirmationtextofto()",
          "definition": "Set_affirmation_text_of__to_(string masterName, string affirmation)"
        },
        "donotallowportalrenewalof()": {
          "name": "Do_Not_Allow_Portal_Renewal_of__",
          "key": "donotallowportalrenewalof()",
          "definition": "Do_Not_Allow_Portal_Renewal_of__( string masterName )"
        },
        "verifytherearetestsusing()": {
          "name": "Verify_there_are_tests_using",
          "key": "verifytherearetestsusing()",
          "definition": "Verify_there_are_tests_using(int number, string masterName)"
        },
        "verifyversionofforpersonhasnorequirements()": {
          "name": "Verify_version_of__for_person__has_no_requirements",
          "key": "verifyversionofforpersonhasnorequirements()",
          "definition": "Verify_version_of__for_person__has_no_requirements(string masterName, string personName)"
        },
        "createcopyofas()": {
          "name": "Create_copy_of__as__",
          "key": "createcopyofas()",
          "definition": "Create_copy_of__as__(string certToCopyName, string newCertName)"
        },
        "verifythathascertificationapplication()": {
          "name": "Verify_that__has_certification_application__",
          "key": "verifythathascertificationapplication()",
          "definition": "Verify_that__has_certification_application__(string personName, string appName)"
        },
        "selectportalrenewalrequirementfulfillmentrequiredfor()": {
          "name": "Select_portal_renewal_requirement_fulfillment_required_for__",
          "key": "selectportalrenewalrequirementfulfillmentrequiredfor()",
          "definition": "Select_portal_renewal_requirement_fulfillment_required_for__(string masterName)"
        },
        "allowinactiverenewalsfor()": {
          "name": "Allow_inactive_renewals_for__",
          "key": "allowinactiverenewalsfor()",
          "definition": "Allow_inactive_renewals_for__( string masterName )"
        },
        "createcertificationtemplateoftypenamedthatexpireseverywithowner()": {
          "name": "Create__certification_template_of_type__named__that_expires_every__with_owner__",
          "key": "createcertificationtemplateoftypenamedthatexpireseverywithowner()",
          "definition": "Create__certification_template_of_type__named__that_expires_every__with_owner__(string isActive, string certTypeName, string name, int expireInterval, string expireType, string ownerName)"
        },
        "setauditpercentageofto()": {
          "name": "Set_audit_percentage_of_to",
          "key": "setauditpercentageofto()",
          "definition": "Set_audit_percentage_of_to(string masterName, int auditPercentage)"
        },
        "haveapplyforconferralofas()": {
          "name": "Have__apply_for_conferral_of__as__",
          "key": "haveapplyforconferralofas()",
          "definition": "Have__apply_for_conferral_of__as__(string personName, string masterName, string appName)"
        },
        "setcertificationnameofto()": {
          "name": "Set_certification_name_of__to__",
          "key": "setcertificationnameofto()",
          "definition": "Set_certification_name_of__to__(string origName, string newName)"
        },
        "createcertificationtemplateoftypenamedthatexpiresevery()": {
          "name": "Create__certification_template_of_type__named__that_expires_every__",
          "key": "createcertificationtemplateoftypenamedthatexpiresevery()",
          "definition": "Create__certification_template_of_type__named__that_expires_every__(string isActive, string certTypeName, string name, int expireInterval, string expireType)"
        },
        "removeconferralforinclass()": {
          "name": "Remove__conferral_for__in_class_",
          "key": "removeconferralforinclass()",
          "definition": "Remove__conferral_for__in_class_(string certVersionName, string personName, string className)"
        },
        "donotallowinactiverenewalsfor()": {
          "name": "Do_not_allow_inactive_renewals_for__",
          "key": "donotallowinactiverenewalsfor()",
          "definition": "Do_not_allow_inactive_renewals_for__(string masterName)"
        },
        "verifythathasaportalrenewalapplicationforwithrequirementsmet()": {
          "name": "Verify_that__has_a_portal_renewal_application_for__with_requirements_met",
          "key": "verifythathasaportalrenewalapplicationforwithrequirementsmet()",
          "definition": "Verify_that__has_a_portal_renewal_application_for__with_requirements_met(string personName, string masterName)"
        },
        "verifyversionofforpersonhasaffirmationtext()": {
          "name": "Verify_version_of__for_person__has_affirmation_text__",
          "key": "verifyversionofforpersonhasaffirmationtext()",
          "definition": "Verify_version_of__for_person__has_affirmation_text__(string masterName, string personName, string affirmationTxt)"
        },
        "createcertificationtemplateoftypenamedwithdescriptionthatexpiresevery()": {
          "name": "Create__certification_template_of_type__named__with_description__that_expires_every__",
          "key": "createcertificationtemplateoftypenamedwithdescriptionthatexpiresevery()",
          "definition": "Create__certification_template_of_type__named__with_description__that_expires_every__(string isActive, string certTypeName, string name, string description, int expireInterval, string expireType)"
        },
        "verifyrequirementofisfulfilledwithinserviceevent()": {
          "name": "Verify_requirement__of__is_fulfilled_with_inservice_event__",
          "key": "verifyrequirementofisfulfilledwithinserviceevent()",
          "definition": "Verify_requirement__of__is_fulfilled_with_inservice_event__(string reqText, string appName, string inserviceName)"
        },
        "verifycertificationisavailableforconferralandrenewal()": {
          "name": "Verify_certification__is_available_for_conferral_and_renewal",
          "key": "verifycertificationisavailableforconferralandrenewal()",
          "definition": "Verify_certification__is_available_for_conferral_and_renewal(string certName)"
        },
        "setdisciplinetoon()": {
          "name": "Set_discipline_to__on__",
          "key": "setdisciplinetoon()",
          "definition": "Set_discipline_to__on__(string disciplineName, string masterName)"
        },
        "verifyapplicationhasrequirement()": {
          "name": "Verify_application_has_requirement_",
          "key": "verifyapplicationhasrequirement()",
          "definition": "Verify_application_has_requirement_(string appName, CertRequirementContext context, string text)"
        },
        "createcertificationtemplateoftypenamedthatneverexpires()": {
          "name": "Create__certification_template_of_type__named__that_never_expires",
          "key": "createcertificationtemplateoftypenamedthatneverexpires()",
          "definition": "Create__certification_template_of_type__named__that_never_expires(string isActive, string certTypeName, string name)"
        },
        "allowportalrenewalof()": {
          "name": "Allow_Portal_Renewal_of__",
          "key": "allowportalrenewalof()",
          "definition": "Allow_Portal_Renewal_of__( string masterName )"
        },
        "verifyapplicationhasrenewalguidelines()": {
          "name": "Verify_application_has_renewal_guidelines",
          "key": "verifyapplicationhasrenewalguidelines()",
          "definition": "Verify_application_has_renewal_guidelines(string appName, string text)"
        },
        "deletecertificationactionforperson()": {
          "name": "Delete__certification_action__for_person__",
          "key": "deletecertificationactionforperson()",
          "definition": "Delete__certification_action__for_person__(string certName, int actionNumber, string personName)"
        },
        "selectportalrenewalrequirementaffirmationonlyfor()": {
          "name": "Select_portal_renewal_requirement_affirmation_only_for__",
          "key": "selectportalrenewalrequirementaffirmationonlyfor()",
          "definition": "Select_portal_renewal_requirement_affirmation_only_for__(string masterName)"
        },
        "verifyapplicationdoesnothaverequirement()": {
          "name": "Verify_application__does_not_have__requirement__",
          "key": "verifyapplicationdoesnothaverequirement()",
          "definition": "Verify_application__does_not_have__requirement__(string appName, CertRequirementContext context, string text)"
        },
        "setguidelinetextofto()": {
          "name": "Set_guideline_text_of__to__",
          "key": "setguidelinetextofto()",
          "definition": "Set_guideline_text_of__to__(string masterName, string guidelines)"
        },
        "setactiverenewalexpirationdatetobebasedonrenewaldateforcertificationtemplate()": {
          "name": "Set_active_renewal_expiration_date_to_be_based_on_renewal_date_for_certification_template__",
          "key": "setactiverenewalexpirationdatetobebasedonrenewaldateforcertificationtemplate()",
          "definition": "Set_active_renewal_expiration_date_to_be_based_on_renewal_date_for_certification_template__(string certTemplateName)"
        }
      },
      "key": "certificationmanagementfnh",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "CertificationManagementFNH",
      "instance-name": "CertificationManagementFNH"
    },
    "resourcemanagement": {
      "namespace": "",
      "methods": {
        "inactivate()": {
          "name": "Inactivate",
          "key": "inactivate()",
          "definition": "Inactivate(string resourceName)"
        },
        "scenariosetup()": {
          "name": "ScenarioSetUp",
          "key": "scenariosetup()",
          "definition": "ScenarioSetUp()"
        },
        "createfacilitynamed()": {
          "name": "Create_facility_named",
          "key": "createfacilitynamed()",
          "definition": "Create_facility_named(string facilityName)"
        },
        "scheduleforfromto()": {
          "name": "Schedule_for_from_to",
          "key": "scheduleforfromto()",
          "definition": "Schedule_for_from_to(string resourceName, string unavailableReason, DateTime starting, DateTime ending)"
        }
      },
      "key": "resourcemanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "ResourceManagement",
      "instance-name": "ResourceManagement"
    },
    "employerauthoritydata": {
      "namespace": "",
      "methods": {
        
      },
      "key": "employerauthoritydata",
      "is-parent": false,
      "parent-name": null,
      "class-name": "EmployerAuthorityData",
      "instance-name": "EmployerAuthorityData"
    },
    "acadisdataservices": {
      "namespace": "",
      "methods": {
        "validatetheemployingagencyis()": {
          "name": "Validate_the_employing_agency_is",
          "key": "validatetheemployingagencyis()",
          "definition": "Validate_the_employing_agency_is(string agency)"
        },
        "validatetheappointmenttypeis()": {
          "name": "Validate_the_appointment_type_is",
          "key": "validatetheappointmenttypeis()",
          "definition": "Validate_the_appointment_type_is(string type)"
        },
        "validatethemiddlenameis()": {
          "name": "Validate_the_middle_name_is",
          "key": "validatethemiddlenameis()",
          "definition": "Validate_the_middle_name_is(string initial)"
        },
        "validatetheeyecoloris()": {
          "name": "Validate_the_eye_color_is",
          "key": "validatetheeyecoloris()",
          "definition": "Validate_the_eye_color_is(string color)"
        },
        "validatethebloodtypeis()": {
          "name": "Validate_the_blood_type_is",
          "key": "validatethebloodtypeis()",
          "definition": "Validate_the_blood_type_is(string type)"
        },
        "setup()": {
          "name": "SetUp",
          "key": "setup()",
          "definition": "SetUp()"
        },
        "teardown()": {
          "name": "TearDown",
          "key": "teardown()",
          "definition": "TearDown()"
        },
        "validatetheemployercontactaddress1is()": {
          "name": "Validate_the_employer_contact_address1_is",
          "key": "validatetheemployercontactaddress1is()",
          "definition": "Validate_the_employer_contact_address1_is(string address1)"
        },
        "getpersondatawithusernamepasswordandacademyid()": {
          "name": "Get_person_data_with_username__password__and_academy_id__",
          "key": "getpersondatawithusernamepasswordandacademyid()",
          "definition": "Get_person_data_with_username__password__and_academy_id__(string username, string password, string academyId)"
        },
        "validatethehaircoloris()": {
          "name": "Validate_the_hair_color_is",
          "key": "validatethehaircoloris()",
          "definition": "Validate_the_hair_color_is(string color)"
        },
        "validatethegenderis()": {
          "name": "Validate_the_Gender_is",
          "key": "validatethegenderis()",
          "definition": "Validate_the_Gender_is(string gender)"
        },
        "validatethefirstnameis()": {
          "name": "Validate_the_first_name_is__",
          "key": "validatethefirstnameis()",
          "definition": "Validate_the_first_name_is__(string firstName)"
        },
        "getanypersondatafromthenewwebservicewithusernamepassword()": {
          "name": "Get_any_person_data_from_the_new_webservice_with_username__password__",
          "key": "getanypersondatafromthenewwebservicewithusernamepassword()",
          "definition": "Get_any_person_data_from_the_new_webservice_with_username__password__(string username, string password)"
        },
        "validatetheemployercontacttitleis()": {
          "name": "Validate_the_employer_contact_title_is",
          "key": "validatetheemployercontacttitleis()",
          "definition": "Validate_the_employer_contact_title_is(string title)"
        },
        "getpersondatawithacademyid()": {
          "name": "get_person_data_with_academy_id",
          "key": "getpersondatawithacademyid()",
          "definition": "get_person_data_with_academy_id(string academyId)"
        },
        "validatethedateofbirthis()": {
          "name": "Validate_the_date_of_birth_is",
          "key": "validatethedateofbirthis()",
          "definition": "Validate_the_date_of_birth_is(DateTime date)"
        },
        "validatetheemploymenttypeis()": {
          "name": "Validate_the_employment_type_is",
          "key": "validatetheemploymenttypeis()",
          "definition": "Validate_the_employment_type_is(string type)"
        },
        "validatethelastnameis()": {
          "name": "Validate_the_Last_Name_is",
          "key": "validatethelastnameis()",
          "definition": "Validate_the_Last_Name_is(string name)"
        },
        "attempthttpsconnectionwithacadisdataserviceswithusernameandpassword()": {
          "name": "Attempt_https_connection_with_AcadisDataServices_with_username__and_password__",
          "key": "attempthttpsconnectionwithacadisdataserviceswithusernameandpassword()",
          "definition": "Attempt_https_connection_with_AcadisDataServices_with_username__and_password__(string username, string password)"
        },
        "getanypersondatawithusernamepassword()": {
          "name": "Get_any_person_data_with_username_password",
          "key": "getanypersondatawithusernamepassword()",
          "definition": "Get_any_person_data_with_username_password(string username, string password)"
        },
        "validatethepublicsafetyidis()": {
          "name": "Validate_the_Public_Safety_ID_is__",
          "key": "validatethepublicsafetyidis()",
          "definition": "Validate_the_Public_Safety_ID_is__(string academyId)"
        },
        "configuredtousessl()": {
          "name": "Configured_to_use_SSL",
          "key": "configuredtousessl()",
          "definition": "Configured_to_use_SSL()"
        },
        "validatetheweightis()": {
          "name": "Validate_the_weight_is",
          "key": "validatetheweightis()",
          "definition": "Validate_the_weight_is(string weight, string units)"
        },
        "configuredtonotusessl()": {
          "name": "Configured_to_not_use_SSL",
          "key": "configuredtonotusessl()",
          "definition": "Configured_to_not_use_SSL()"
        },
        "validatethesuffixis()": {
          "name": "Validate_the_Suffix_is",
          "key": "validatethesuffixis()",
          "definition": "Validate_the_Suffix_is(string suffix)"
        },
        "validatethenewacadisdataservicespublicsafetyidiscorrect()": {
          "name": "Validate_the_new_AcadisDataServices_Public_Safety_ID_is_correct",
          "key": "validatethenewacadisdataservicespublicsafetyidiscorrect()",
          "definition": "Validate_the_new_AcadisDataServices_Public_Safety_ID_is_correct()"
        },
        "validatetheheightis()": {
          "name": "Validate_the_height_is",
          "key": "validatetheheightis()",
          "definition": "Validate_the_height_is(string height, string units)"
        },
        "validatetheemploymenttitleis()": {
          "name": "Validate_the_employment_title_is",
          "key": "validatetheemploymenttitleis()",
          "definition": "Validate_the_employment_title_is(string title)"
        },
        "validatetheemployercontactphonenumberis()": {
          "name": "Validate_the_employer_contact_phone_number_is",
          "key": "validatetheemployercontactphonenumberis()",
          "definition": "Validate_the_employer_contact_phone_number_is(string phoneNumber)"
        },
        "validatethestatusis()": {
          "name": "Validate_the_status_is",
          "key": "validatethestatusis()",
          "definition": "Validate_the_status_is(string status)"
        },
        "validatethedriverslicenseforis()": {
          "name": "Validate_the_Drivers_license_for_is",
          "key": "validatethedriverslicenseforis()",
          "definition": "Validate_the_Drivers_license_for_is(string state, string number)"
        }
      },
      "key": "acadisdataservices",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "AcadisDataServicesWorkflow",
      "instance-name": "AcadisDataServices"
    },
    "testmanagementfnh": {
      "namespace": "",
      "methods": {
        "addtestasapartwithheader()": {
          "name": "Add_test__as_a_part_with_header__",
          "key": "addtestasapartwithheader()",
          "definition": "Add_test__as_a_part_with_header__(string testName, string header)"
        },
        "allowretakesperstudent()": {
          "name": "Allow__retakes_per_student",
          "key": "allowretakesperstudent()",
          "definition": "Allow__retakes_per_student(int numberOfRetakes)"
        },
        "createnewtestnamed()": {
          "name": "create_new__test_named__",
          "key": "createnewtestnamed()",
          "definition": "create_new__test_named__(TestType testType, string testName)"
        },
        "collectweaponmakeandmodel()": {
          "name": "Collect_weapon_make_and_model",
          "key": "collectweaponmakeandmodel()",
          "definition": "Collect_weapon_make_and_model()"
        },
        "theattemptpassinggradeis()": {
          "name": "The_attempt_passing_grade_is__",
          "key": "theattemptpassinggradeis()",
          "definition": "The_attempt_passing_grade_is__(decimal grade)"
        },
        "addanitemwithtextwhichrequiresascoreofoutoftopassandiscritical()": {
          "name": "Add_an_item_with_text__which_requires_a_score_of__out_of__to_pass_and_is_critical",
          "key": "addanitemwithtextwhichrequiresascoreofoutoftopassandiscritical()",
          "definition": "Add_an_item_with_text__which_requires_a_score_of__out_of__to_pass_and_is_critical(string itemText, decimal passingScore, decimal maxScore)"
        },
        "recordthegradeaseither0or100()": {
          "name": "Record_the_grade_as_either_0_or_100",
          "key": "recordthegradeaseither0or100()",
          "definition": "Record_the_grade_as_either_0_or_100()"
        },
        "addanitemwithtext()": {
          "name": "Add_an_item_with_text__",
          "key": "addanitemwithtext()",
          "definition": "Add_an_item_with_text__(string itemText)"
        },
        "theoverallpassinggradeis()": {
          "name": "The_overall_passing_grade_is__",
          "key": "theoverallpassinggradeis()",
          "definition": "The_overall_passing_grade_is__(decimal grade)"
        },
        "saveassessmenttest()": {
          "name": "Save_assessment_test",
          "key": "saveassessmenttest()",
          "definition": "Save_assessment_test()"
        },
        "collectweaponserialnumber()": {
          "name": "Collect_weapon_serial_number",
          "key": "collectweaponserialnumber()",
          "definition": "Collect_weapon_serial_number()"
        },
        "attemptscoresaremeasuredas()": {
          "name": "Attempt_scores_are_measured_as__",
          "key": "attemptscoresaremeasuredas()",
          "definition": "Attempt_scores_are_measured_as__(TimeEntryFormat timeFormat)"
        },
        "addanitemwithtextandabbreviationandlearningobjectives()": {
          "name": "Add_an_item_with_text__and_abbreviation__and_learning_objectives__",
          "key": "addanitemwithtextandabbreviationandlearningobjectives()",
          "definition": "Add_an_item_with_text__and_abbreviation__and_learning_objectives__(string itemText, string itemAbbreviation, List<string> eloNames)"
        },
        "allowattemptslabeled()": {
          "name": "Allow__attempts_labeled__",
          "key": "allowattemptslabeled()",
          "definition": "Allow__attempts_labeled__(int numAttempts, string attemptLabel)"
        },
        "addanitemwithtextandlearningobjectives()": {
          "name": "Add_an_item_with_text__and_learning_objectives__",
          "key": "addanitemwithtextandlearningobjectives()",
          "definition": "Add_an_item_with_text__and_learning_objectives__(string itemText, List<string> eloNames)"
        },
        "createanewpassfailchecklisttestnamed()": {
          "name": "Create_a_new_pass_fail_checklist_test_named__",
          "key": "createanewpassfailchecklisttestnamed()",
          "definition": "Create_a_new_pass_fail_checklist_test_named__(string testName)"
        },
        "addanitemwithtextwhichiscritical()": {
          "name": "Add_an_item_with_text__which_is_critical",
          "key": "addanitemwithtextwhichiscritical()",
          "definition": "Add_an_item_with_text__which_is_critical(string itemText)"
        },
        "assigntoactivityinclass()": {
          "name": "Assign__to_activity__in_class__",
          "key": "assigntoactivityinclass()",
          "definition": "Assign__to_activity__in_class__(string testName, string activityName, string className)"
        },
        "createanewscoredchecklisttestnamed()": {
          "name": "Create_a_new_scored_checklist_test_named__",
          "key": "createanewscoredchecklisttestnamed()",
          "definition": "Create_a_new_scored_checklist_test_named__(string testName)"
        },
        "comparetimestoamaximumpassingscoreofbutdonotassignagrade()": {
          "name": "Compare_times_to_a_maximum_passing_score_of__but_do_not_assign_a_grade",
          "key": "comparetimestoamaximumpassingscoreofbutdonotassignagrade()",
          "definition": "Compare_times_to_a_maximum_passing_score_of__but_do_not_assign_a_grade(string time)"
        },
        "marktestatrisk()": {
          "name": "Mark_test_at_risk",
          "key": "marktestatrisk()",
          "definition": "Mark_test_at_risk()"
        },
        "addanitemwithtextwhichrequiresascoreofoutoftopass()": {
          "name": "Add_an_item_with_text__which_requires_a_score_of__out_of__to_pass",
          "key": "addanitemwithtextwhichrequiresascoreofoutoftopass()",
          "definition": "Add_an_item_with_text__which_requires_a_score_of__out_of__to_pass(string itemText, decimal passingScore, decimal maxScore)"
        },
        "settonongraded()": {
          "name": "Set_to_non_graded",
          "key": "settonongraded()",
          "definition": "Set_to_non_graded()"
        },
        "createfirearmstestnamed()": {
          "name": "Create_firearms_test_named__",
          "key": "createfirearmstestnamed()",
          "definition": "Create_firearms_test_named__(string testName)"
        },
        "setthepassedretestpolicyto()": {
          "name": "Set_the_passed_retest_policy_to__",
          "key": "setthepassedretestpolicyto()",
          "definition": "Set_the_passed_retest_policy_to__( PassedRetestPolicy policy )"
        },
        "addlearningobjectives()": {
          "name": "Add_learning_objectives__",
          "key": "addlearningobjectives()",
          "definition": "Add_learning_objectives__(List<string> eloNames)"
        },
        "setthefailedretestpolicyto()": {
          "name": "Set_the_failed_retest_policy_to__",
          "key": "setthefailedretestpolicyto()",
          "definition": "Set_the_failed_retest_policy_to__(FailedRetestPolicy policy)"
        },
        "eachattemptcanrangefromto()": {
          "name": "Each_attempt_can_range_from__to__",
          "key": "eachattemptcanrangefromto()",
          "definition": "Each_attempt_can_range_from__to__(decimal min, decimal max)"
        },
        "overridegradewithzerooronehundred()": {
          "name": "Override_grade_with_zero_or_one_hundred",
          "key": "overridegradewithzerooronehundred()",
          "definition": "Override_grade_with_zero_or_one_hundred()"
        },
        "marktestasmustpass()": {
          "name": "Mark_test_as_must_pass",
          "key": "marktestasmustpass()",
          "definition": "Mark_test_as_must_pass()"
        },
        "scoretestasofattempts()": {
          "name": "Score_test_as__of____attempts",
          "key": "scoretestasofattempts()",
          "definition": "Score_test_as__of____attempts(ScoredAssessmentTest.AttemptScoringMethod scoringMethod, ScoredAssessmentTest.ScoredTestAttemptSelect whichAttempts, int numAttempts)"
        },
        "thestudentmustpassatleastitemstopassthetest()": {
          "name": "The_student_must_pass_at_least__items_to_pass_the_test",
          "key": "thestudentmustpassatleastitemstopassthetest()",
          "definition": "The_student_must_pass_at_least__items_to_pass_the_test(int numItems)"
        },
        "thescoreisbasedonpassingalltestpartsandnogradeisassigned()": {
          "name": "The_score_is_based_on_passing_all_test_parts_and_no_grade_is_assigned",
          "key": "thescoreisbasedonpassingalltestpartsandnogradeisassigned()",
          "definition": "The_score_is_based_on_passing_all_test_parts_and_no_grade_is_assigned()"
        },
        "allowattemptslabeledrequiringstudentstopassattemptstopassthetest()": {
          "name": "Allow__attempts_labeled__requiring_students_to_pass__attempts_to_pass_the_test",
          "key": "allowattemptslabeledrequiringstudentstopassattemptstopassthetest()",
          "definition": "Allow__attempts_labeled__requiring_students_to_pass__attempts_to_pass_the_test(int numAttempts, string attemptLabel, int numPassedAttemptsRequired)"
        },
        "thetesthasaminimumpassingof()": {
          "name": "The_test_has_a_minimum_passing__of__",
          "key": "thetesthasaminimumpassingof()",
          "definition": "The_test_has_a_minimum_passing__of__(MinimumPassingValueType minPassingValueType, decimal minPassingValue)"
        },
        "labelpassinggradesasandfailinggradesas()": {
          "name": "Label_passing_grades_as__and_failing_grades_as__",
          "key": "labelpassinggradesasandfailinggradesas()",
          "definition": "Label_passing_grades_as__and_failing_grades_as__(string passLabel, string failLabel)"
        },
        "addapassfailitemwithtext()": {
          "name": "Add_a_pass_fail_item_with_text__",
          "key": "addapassfailitemwithtext()",
          "definition": "Add_a_pass_fail_item_with_text__(string itemText)"
        },
        "assigntoactivityinclasstemplate()": {
          "name": "Assign__to_activity__in_class_template__",
          "key": "assigntoactivityinclasstemplate()",
          "definition": "Assign__to_activity__in_class_template__(string testName, string activityName, string className)"
        }
      },
      "key": "testmanagementfnh",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "TestManagementFNH",
      "instance-name": "TestManagementFNH"
    },
    "globalsettingmanagement": {
      "namespace": "",
      "methods": {
        "setdependentfunddescriptionto()": {
          "name": "Set_dependent_fund_description_to__",
          "key": "setdependentfunddescriptionto()",
          "definition": "Set_dependent_fund_description_to__(string description)"
        },
        "setwebformsubmissiondelayto()": {
          "name": "Set_WebForm_submission_delay_to__",
          "key": "setwebformsubmissiondelayto()",
          "definition": "Set_WebForm_submission_delay_to__(int seconds)"
        },
        "verifyrentableresourcesmodeis()": {
          "name": "Verify_rentable_resources_mode_is__",
          "key": "verifyrentableresourcesmodeis()",
          "definition": "Verify_rentable_resources_mode_is__(string mode)"
        },
        "iwantportaluserstousesinglesignonusingactivedirectory()": {
          "name": "I_want_portal_users_to_use_single_sign_on_using_Active_Directory",
          "key": "iwantportaluserstousesinglesignonusingactivedirectory()",
          "definition": "I_want_portal_users_to_use_single_sign_on_using_Active_Directory()"
        },
        "setclasseswillbenamed()": {
          "name": "Set_classes_will_be__named",
          "key": "setclasseswillbenamed()",
          "definition": "Set_classes_will_be__named(string manualOrAuto)"
        },
        "enableselecthousingassignmentstartingfloor()": {
          "name": "Enable_select_housing_assignment_starting_floor",
          "key": "enableselecthousingassignmentstartingfloor()",
          "definition": "Enable_select_housing_assignment_starting_floor()"
        },
        "verifyproctorswillbeusedtoverifystudentswith()": {
          "name": "Verify_proctors_will_be_used_to_verify_students_with__",
          "key": "verifyproctorswillbeusedtoverifystudentswith()",
          "definition": "Verify_proctors_will_be_used_to_verify_students_with__(string fields)"
        },
        "allowoverridingofdefaultendofclassstaffsurvey()": {
          "name": "Allow_overriding_of_default_end_of_class_staff_survey",
          "key": "allowoverridingofdefaultendofclassstaffsurvey()",
          "definition": "Allow_overriding_of_default_end_of_class_staff_survey()"
        },
        "setupdateclassstatustoauto()": {
          "name": "Set_update_class_status_to_auto",
          "key": "setupdateclassstatustoauto()",
          "definition": "Set_update_class_status_to_auto()"
        },
        "setportalpersonaccessforregistrationto()": {
          "name": "Set_portal_person_access_for_registration_to__",
          "key": "setportalpersonaccessforregistrationto()",
          "definition": "Set_portal_person_access_for_registration_to__(PortalPersonAccess access)"
        },
        "setactivecertificationtorenewoncurrentexpirationdate()": {
          "name": "Set_active_certification_to_renew_on_current_expiration_date",
          "key": "setactivecertificationtorenewoncurrentexpirationdate()",
          "definition": "Set_active_certification_to_renew_on_current_expiration_date()"
        },
        "setinstructorwarningthresholdto()": {
          "name": "Set_instructor_warning_threshold_to",
          "key": "setinstructorwarningthresholdto()",
          "definition": "Set_instructor_warning_threshold_to(int threshold)"
        },
        "sethousingavailabilitytosamedayascheckout()": {
          "name": "Set_Housing_Availability_to_same_day_as_check_out",
          "key": "sethousingavailabilitytosamedayascheckout()",
          "definition": "Set_Housing_Availability_to_same_day_as_check_out()"
        },
        "verifyautomaticallygeneratednameswillstartatnumber()": {
          "name": "Verify_automatically_generated_names_will_start_at_number_",
          "key": "verifyautomaticallygeneratednameswillstartatnumber()",
          "definition": "Verify_automatically_generated_names_will_start_at_number_(int startingNumber)"
        },
        "singlesignondirectorydomainis()": {
          "name": "Single_Sign_On_Directory_Domain_is",
          "key": "singlesignondirectorydomainis()",
          "definition": "Single_Sign_On_Directory_Domain_is(string domain)"
        },
        "disallowoverridingofdefaultendofclassstudentsurvey()": {
          "name": "Disallow_overriding_of_default_end_of_class_student_survey",
          "key": "disallowoverridingofdefaultendofclassstudentsurvey()",
          "definition": "Disallow_overriding_of_default_end_of_class_student_survey()"
        },
        "setupdateclassstatustomanual()": {
          "name": "Set_update_class_status_to_manual",
          "key": "setupdateclassstatustomanual()",
          "definition": "Set_update_class_status_to_manual()"
        },
        "setautomaticallygeneratednameswillstartatnumber()": {
          "name": "Set_automatically_generated_names_will_start_at_number",
          "key": "setautomaticallygeneratednameswillstartatnumber()",
          "definition": "Set_automatically_generated_names_will_start_at_number(int startingNumber)"
        },
        "iwanttousesinglesignonusingsaml()": {
          "name": "I_want_to_use_single_sign_on_using_SAML",
          "key": "iwanttousesinglesignonusingsaml()",
          "definition": "I_want_to_use_single_sign_on_using_SAML()"
        },
        "setfiscalyearstartmonthtowithyearoffsetof()": {
          "name": "Set_fiscal_year_start_month_to__with_year_offset_of__",
          "key": "setfiscalyearstartmonthtowithyearoffsetof()",
          "definition": "Set_fiscal_year_start_month_to__with_year_offset_of__(int month, int offset)"
        },
        "verifysubmissionofbankinginformationisdisabled()": {
          "name": "Verify_submission_of_banking_information_is_disabled",
          "key": "verifysubmissionofbankinginformationisdisabled()",
          "definition": "Verify_submission_of_banking_information_is_disabled()"
        },
        "verifywebformsubmissiondelayis()": {
          "name": "Verify_WebForm_submission_delay_is__",
          "key": "verifywebformsubmissiondelayis()",
          "definition": "Verify_WebForm_submission_delay_is__(int seconds)"
        },
        "disallowoverridingofdefaultendofclasssendingorgsurvey()": {
          "name": "Disallow_overriding_of_default_end_of_class_sending_org_survey",
          "key": "disallowoverridingofdefaultendofclasssendingorgsurvey()",
          "definition": "Disallow_overriding_of_default_end_of_class_sending_org_survey()"
        },
        "setrentableresourcesmodeto()": {
          "name": "Set_rentable_resources_mode_to__",
          "key": "setrentableresourcesmodeto()",
          "definition": "Set_rentable_resources_mode_to__(string mode)"
        },
        "idonotwantportaluserstousesinglesignon()": {
          "name": "I_do_not_want_portal_users_to_use_single_sign_on",
          "key": "idonotwantportaluserstousesinglesignon()",
          "definition": "I_do_not_want_portal_users_to_use_single_sign_on()"
        },
        "setacademyidcreationtoauto()": {
          "name": "Set_AcademyID_Creation_to_Auto",
          "key": "setacademyidcreationtoauto()",
          "definition": "Set_AcademyID_Creation_to_Auto()"
        },
        "allowoverridingofdefaultendofclassstudentsurvey()": {
          "name": "Allow_overriding_of_default_end_of_class_student_survey",
          "key": "allowoverridingofdefaultendofclassstudentsurvey()",
          "definition": "Allow_overriding_of_default_end_of_class_student_survey()"
        },
        "verifyproctorswillnotbeused()": {
          "name": "Verify_proctors_will_not_be_used",
          "key": "verifyproctorswillnotbeused()",
          "definition": "Verify_proctors_will_not_be_used()"
        },
        "enabledatapartitioning()": {
          "name": "Enable_Data_Partitioning",
          "key": "enabledatapartitioning()",
          "definition": "Enable_Data_Partitioning()"
        },
        "verifybillingtrackingisenabled()": {
          "name": "Verify_billing_tracking_is_enabled",
          "key": "verifybillingtrackingisenabled()",
          "definition": "Verify_billing_tracking_is_enabled()"
        },
        "verifyfiscalyearstartforyearis()": {
          "name": "Verify_fiscal_year_start_for_year__is__",
          "key": "verifyfiscalyearstartforyearis()",
          "definition": "Verify_fiscal_year_start_for_year__is__(int requestedYear, DateTime expectedDate)"
        },
        "iwanttousesinglesignonusingactivedirectory()": {
          "name": "I_want_to_use_single_sign_on_using_Active_Directory",
          "key": "iwanttousesinglesignonusingactivedirectory()",
          "definition": "I_want_to_use_single_sign_on_using_Active_Directory()"
        },
        "disabledatapartitioning()": {
          "name": "Disable_Data_Partitioning",
          "key": "disabledatapartitioning()",
          "definition": "Disable_Data_Partitioning()"
        },
        "setfiscalyearstartmonthto()": {
          "name": "Set_fiscal_year_start_month_to",
          "key": "setfiscalyearstartmonthto()",
          "definition": "Set_fiscal_year_start_month_to(int month)"
        },
        "verifyfiscalyearstartmonthis()": {
          "name": "Verify_fiscal_year_start_month_is__",
          "key": "verifyfiscalyearstartmonthis()",
          "definition": "Verify_fiscal_year_start_month_is__(int month)"
        },
        "disabledutylocations()": {
          "name": "Disable_Duty_Locations",
          "key": "disabledutylocations()",
          "definition": "Disable_Duty_Locations()"
        },
        "setportalpersonaccessforinserviceto()": {
          "name": "Set_portal_person_access_for_inservice_to__",
          "key": "setportalpersonaccessforinserviceto()",
          "definition": "Set_portal_person_access_for_inservice_to__(PortalPersonAccess access)"
        },
        "disableselecthousingassignmentstartingfloor()": {
          "name": "Disable_select_housing_assignment_starting_floor",
          "key": "disableselecthousingassignmentstartingfloor()",
          "definition": "Disable_select_housing_assignment_starting_floor()"
        },
        "verifybillingtrackingisdisabled()": {
          "name": "Verify_billing_tracking_is_disabled",
          "key": "verifybillingtrackingisdisabled()",
          "definition": "Verify_billing_tracking_is_disabled()"
        },
        "setdependentfundinstructionsto()": {
          "name": "Set_dependent_fund_instructions_to__",
          "key": "setdependentfundinstructionsto()",
          "definition": "Set_dependent_fund_instructions_to__(string instructions)"
        },
        "disallowoverridingofdefaultendofclassstaffsurvey()": {
          "name": "Disallow_overriding_of_default_end_of_class_staff_survey",
          "key": "disallowoverridingofdefaultendofclassstaffsurvey()",
          "definition": "Disallow_overriding_of_default_end_of_class_staff_survey()"
        },
        "idonotwanttousesinglesignonusingactivedirectory()": {
          "name": "I_do_not_want_to_use_single_sign_on_using_Active_Directory",
          "key": "idonotwanttousesinglesignonusingactivedirectory()",
          "definition": "I_do_not_want_to_use_single_sign_on_using_Active_Directory()"
        },
        "verifyupdateclassstatusismanual()": {
          "name": "Verify_update_class_status_is_manual",
          "key": "verifyupdateclassstatusismanual()",
          "definition": "Verify_update_class_status_is_manual()"
        },
        "sethousingavailabilitytodayaftercheckout()": {
          "name": "Set_Housing_Availability_to_day_after_check_out",
          "key": "sethousingavailabilitytodayaftercheckout()",
          "definition": "Set_Housing_Availability_to_day_after_check_out()"
        },
        "verifyactivecertificationsrenewonrenewaldate()": {
          "name": "Verify_active_certifications_renew_on_renewal_date",
          "key": "verifyactivecertificationsrenewonrenewaldate()",
          "definition": "Verify_active_certifications_renew_on_renewal_date()"
        },
        "verifyhousingavailabilityisdayaftercheckout()": {
          "name": "Verify_Housing_Availability_is_day_after_check_out",
          "key": "verifyhousingavailabilityisdayaftercheckout()",
          "definition": "Verify_Housing_Availability_is_day_after_check_out()"
        },
        "iwantportaluserstousesinglesignonusingsaml()": {
          "name": "I_want_portal_users_to_use_single_sign_on_using_SAML",
          "key": "iwantportaluserstousesinglesignonusingsaml()",
          "definition": "I_want_portal_users_to_use_single_sign_on_using_SAML()"
        },
        "verifysubmissionofbankinginformationisenabled()": {
          "name": "Verify_submission_of_banking_information_is_enabled",
          "key": "verifysubmissionofbankinginformationisenabled()",
          "definition": "Verify_submission_of_banking_information_is_enabled()"
        },
        "verifyactivecertificationsrenewoncurrentexpiration()": {
          "name": "Verify_active_certifications_renew_on_current_expiration",
          "key": "verifyactivecertificationsrenewoncurrentexpiration()",
          "definition": "Verify_active_certifications_renew_on_current_expiration()"
        },
        "verifyfiscalyearstartmonthiswithyearoffsetof()": {
          "name": "Verify_fiscal_year_start_month_is__with_year_offset_of__",
          "key": "verifyfiscalyearstartmonthiswithyearoffsetof()",
          "definition": "Verify_fiscal_year_start_month_is__with_year_offset_of__(int month, int offset)"
        },
        "verifyclasseswillbenamed()": {
          "name": "Verify_classes_will_be__named",
          "key": "verifyclasseswillbenamed()",
          "definition": "Verify_classes_will_be__named(string manualOrAuto)"
        },
        "verifyhousingavailabilityissamedayascheckout()": {
          "name": "Verify_Housing_Availability_is_same_day_as_check_out",
          "key": "verifyhousingavailabilityissamedayascheckout()",
          "definition": "Verify_Housing_Availability_is_same_day_as_check_out()"
        },
        "setactivecertificationtorenewonrenewaldate()": {
          "name": "Set_active_certification_to_renew_on_renewal_date",
          "key": "setactivecertificationtorenewonrenewaldate()",
          "definition": "Set_active_certification_to_renew_on_renewal_date()"
        },
        "setenrollmentimporttouseassendingorganizationifomittedfromimportfile()": {
          "name": "Set_Enrollment_Import_to_use__as_sending_organization_if_omitted_from_import_file",
          "key": "setenrollmentimporttouseassendingorganizationifomittedfromimportfile()",
          "definition": "Set_Enrollment_Import_to_use__as_sending_organization_if_omitted_from_import_file(string orgOption)"
        },
        "allowoverridingofdefaultendofclasssendingorgsurvey()": {
          "name": "Allow_overriding_of_default_end_of_class_sending_org_survey",
          "key": "allowoverridingofdefaultendofclasssendingorgsurvey()",
          "definition": "Allow_overriding_of_default_end_of_class_sending_org_survey()"
        },
        "enabledutylocations()": {
          "name": "Enable_Duty_Locations",
          "key": "enabledutylocations()",
          "definition": "Enable_Duty_Locations()"
        },
        "setgraceperiodtodays()": {
          "name": "Set_grace_period_to__days",
          "key": "setgraceperiodtodays()",
          "definition": "Set_grace_period_to__days(int days)"
        },
        "verifyupdateclassstatusisauto()": {
          "name": "Verify_update_class_status_is_auto",
          "key": "verifyupdateclassstatusisauto()",
          "definition": "Verify_update_class_status_is_auto()"
        },
        "turndependentfund()": {
          "name": "Turn_dependent_fund__",
          "key": "turndependentfund()",
          "definition": "Turn_dependent_fund__(string onOrOff)"
        },
        "setacademyidcreationtomanual()": {
          "name": "Set_AcademyID_Creation_to_Manual",
          "key": "setacademyidcreationtomanual()",
          "definition": "Set_AcademyID_Creation_to_Manual()"
        },
        "verifyfiscalyearstartforis()": {
          "name": "Verify_fiscal_year_start_for__is__",
          "key": "verifyfiscalyearstartforis()",
          "definition": "Verify_fiscal_year_start_for__is__(DateTime requestedDate, DateTime expectedDate)"
        },
        "setinstructormaxhourstopermonthandperquarter()": {
          "name": "Set_instructor_max_hours_to_per_month_and_per_quarter",
          "key": "setinstructormaxhourstopermonthandperquarter()",
          "definition": "Set_instructor_max_hours_to_per_month_and_per_quarter(int perMonth, int perQuarter)"
        }
      },
      "key": "globalsettingmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "GlobalSettingManagement",
      "instance-name": "GlobalSettingManagement"
    },
    "gradeexport": {
      "namespace": "",
      "methods": {
        "findexportrowfor()": {
          "name": "Find_export_row_for__",
          "key": "findexportrowfor()",
          "definition": "Find_export_row_for__(string personName)"
        },
        "verifythatfieldhasvalue()": {
          "name": "Verify_that__field_has_value__",
          "key": "verifythatfieldhasvalue()",
          "definition": "Verify_that__field_has_value__(string field, string value)"
        },
        "exportgradesfor()": {
          "name": "Export_Grades_for__",
          "key": "exportgradesfor()",
          "definition": "Export_Grades_for__(string className)"
        }
      },
      "key": "gradeexport",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "GradeExportWorkflow",
      "instance-name": "GradeExport"
    },
    "testopiaperson": {
      "namespace": "",
      "methods": {
        
      },
      "key": "testopiaperson",
      "is-parent": false,
      "parent-name": null,
      "class-name": "TestopiaPerson",
      "instance-name": "TestopiaPerson"
    },
    "organizationmanagement": {
      "namespace": "",
      "methods": {
        "definedivision()": {
          "name": "DefineDivision",
          "key": "definedivision()",
          "definition": "DefineDivision()"
        },
        "settypeto()": {
          "name": "Set_Type_To__",
          "key": "settypeto()",
          "definition": "Set_Type_To__(string type)"
        },
        "setnameto()": {
          "name": "Set_Name_To__",
          "key": "setnameto()",
          "definition": "Set_Name_To__(string name)"
        },
        "verifydisciplinecomesbefore()": {
          "name": "Verify_discipline_comes_before_",
          "key": "verifydisciplinecomesbefore()",
          "definition": "Verify_discipline_comes_before_(string div1, string div2)"
        },
        "setabbreviationto()": {
          "name": "Set_Abbreviation__To",
          "key": "setabbreviationto()",
          "definition": "Set_Abbreviation__To(string abbr)"
        },
        "findorganizationnamed()": {
          "name": "Find_organization_named__",
          "key": "findorganizationnamed()",
          "definition": "Find_organization_named__(string name)"
        },
        "isemploying()": {
          "name": "is_employing",
          "key": "isemploying()",
          "definition": "is_employing(string name)"
        },
        "disciplineforis()": {
          "name": "Discipline_for__is__",
          "key": "disciplineforis()",
          "definition": "Discipline_for__is__(string organizationName, List<string> disciplines)"
        },
        "setstatusto()": {
          "name": "Set_Status_To__",
          "key": "setstatusto()",
          "definition": "Set_Status_To__(string status)"
        },
        "retrievealldivisions()": {
          "name": "Retrieve_All_Divisions",
          "key": "retrievealldivisions()",
          "definition": "Retrieve_All_Divisions()"
        },
        "addsuborganizationto()": {
          "name": "AddSuborganizationTo",
          "key": "addsuborganizationto()",
          "definition": "AddSuborganizationTo(string suborgName, string orgName)"
        },
        "createdivisionswithnameprefix()": {
          "name": "Create__Divisions_with_Name_Prefix__",
          "key": "createdivisionswithnameprefix()",
          "definition": "Create__Divisions_with_Name_Prefix__( int numberOf, string prefix )"
        },
        "verifyorganizationcannotbedeleted()": {
          "name": "Verify_organization__cannot_be_deleted",
          "key": "verifyorganizationcannotbedeleted()",
          "definition": "Verify_organization__cannot_be_deleted(string orgName)"
        },
        "verifyisnotduplicatename()": {
          "name": "VerifyIsNotDuplicateName",
          "key": "verifyisnotduplicatename()",
          "definition": "VerifyIsNotDuplicateName()"
        },
        "externalsystemisid()": {
          "name": "External_system_is_id",
          "key": "externalsystemisid()",
          "definition": "External_system_is_id( string system, string id)"
        },
        "setparentto()": {
          "name": "Set_Parent_To__",
          "key": "setparentto()",
          "definition": "Set_Parent_To__(string parentName)"
        },
        "descriptionforis()": {
          "name": "Description_for__is",
          "key": "descriptionforis()",
          "definition": "Description_for__is(string organizationName, string description)"
        },
        "setdivisionabbreviationto()": {
          "name": "Set_Division_Abbreviation_To__",
          "key": "setdivisionabbreviationto()",
          "definition": "Set_Division_Abbreviation_To__(string abbr)"
        },
        "savedivision()": {
          "name": "Save_Division",
          "key": "savedivision()",
          "definition": "Save_Division()"
        },
        "retrievedisciplinesfor()": {
          "name": "Retrieve_Disciplines_for",
          "key": "retrievedisciplinesfor()",
          "definition": "Retrieve_Disciplines_for(string org)"
        },
        "createcommentfor()": {
          "name": "Create_comment_for__",
          "key": "createcommentfor()",
          "definition": "Create_comment_for__(string organizationName, string comment)"
        },
        "currentdivisionnameequals()": {
          "name": "CurrentDivisionNameEquals",
          "key": "currentdivisionnameequals()",
          "definition": "CurrentDivisionNameEquals( string divName )"
        },
        "createorganizationnamedunderparentgroupoftype()": {
          "name": "Create_organization_named__under_parent_group__of_type__",
          "key": "createorganizationnamedunderparentgroupoftype()",
          "definition": "Create_organization_named__under_parent_group__of_type__(string childName, string parentName, string orgTypeName)"
        },
        "createchildorganizationof()": {
          "name": "CreateChildOrganizationOf",
          "key": "createchildorganizationof()",
          "definition": "CreateChildOrganizationOf( string childName, string parentName )"
        },
        "verifyisduplicatedivisionabbreviation()": {
          "name": "Verify_is_duplicate_division_abbreviation",
          "key": "verifyisduplicatedivisionabbreviation()",
          "definition": "Verify_is_duplicate_division_abbreviation()"
        },
        "setdivisionnameto()": {
          "name": "Set_Division_Name_To__",
          "key": "setdivisionnameto()",
          "definition": "Set_Division_Name_To__(string name)"
        },
        "setdivisionstatusto()": {
          "name": "Set_Division_Status_To__",
          "key": "setdivisionstatusto()",
          "definition": "Set_Division_Status_To__(string status)"
        },
        "createorganizationnamedoftypeunderbaseparentgroup()": {
          "name": "Create_organization_named__of_type__under_base_parent_group",
          "key": "createorganizationnamedoftypeunderbaseparentgroup()",
          "definition": "Create_organization_named__of_type__under_base_parent_group(string childName, string orgTypeName)"
        },
        "employingis()": {
          "name": "employing_is",
          "key": "employingis()",
          "definition": "employing_is(string enabled)"
        },
        "setorganizationudfto()": {
          "name": "set_organization_udf__to__",
          "key": "setorganizationudfto()",
          "definition": "set_organization_udf__to__(string udfName, string value)"
        },
        "createacademynamedunderbaseparentgroupwithbaselicense()": {
          "name": "Create_Academy_named__under_base_parent_group_with_base_license",
          "key": "createacademynamedunderbaseparentgroupwithbaselicense()",
          "definition": "Create_Academy_named__under_base_parent_group_with_base_license(string academyName)"
        },
        "verifythatorganizationhasnoauthority()": {
          "name": "Verify_that_organization_has_no_authority",
          "key": "verifythatorganizationhasnoauthority()",
          "definition": "Verify_that_organization_has_no_authority( string orgName )"
        },
        "verifydivisioncomesbefore()": {
          "name": "Verify_division_comes_before_",
          "key": "verifydivisioncomesbefore()",
          "definition": "Verify_division_comes_before_(string div1, string div2)"
        },
        "verifyorganizationcanbedeleted()": {
          "name": "Verify_organization__can_be_deleted",
          "key": "verifyorganizationcanbedeleted()",
          "definition": "Verify_organization__can_be_deleted(string orgName)"
        },
        "organizationreferenceforis()": {
          "name": "Organization_Reference_For__Is_",
          "key": "organizationreferenceforis()",
          "definition": "Organization_Reference_For__Is_(string organizationName, string reference)"
        },
        "saveorganization()": {
          "name": "Save_Organization",
          "key": "saveorganization()",
          "definition": "Save_Organization()"
        },
        "renamebaseparentorganizationto()": {
          "name": "Rename_Base_Parent_Organization_to__",
          "key": "renamebaseparentorganizationto()",
          "definition": "Rename_Base_Parent_Organization_to__(string parentName)"
        },
        "verifythatorganizationhasauthority()": {
          "name": "Verify_that_organization_has_authority",
          "key": "verifythatorganizationhasauthority()",
          "definition": "Verify_that_organization_has_authority( string orgName, string personName )"
        },
        "createdivisionforwithnameaswithabbreviation()": {
          "name": "Create_division_for__with_name__as__with_abbreviation_",
          "key": "createdivisionforwithnameaswithabbreviation()",
          "definition": "Create_division_for__with_name__as__with_abbreviation_( string organizationName, string divisionName, string status, string abbreviation )"
        },
        "setshowinportalto()": {
          "name": "Set_show_in_portal_to__",
          "key": "setshowinportalto()",
          "definition": "Set_show_in_portal_to__(bool show)"
        },
        "verifyisduplicatename()": {
          "name": "VerifyIsDuplicateName",
          "key": "verifyisduplicatename()",
          "definition": "VerifyIsDuplicateName()"
        },
        "addauthoritytousing()": {
          "name": "AddAuthorityToUsing",
          "key": "addauthoritytousing()",
          "definition": "AddAuthorityToUsing(string orgName, string personName)"
        }
      },
      "key": "organizationmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "OrganizationManagement",
      "instance-name": "OrganizationManagement"
    },
    "billablepartiesapi": {
      "namespace": "",
      "methods": {
        "verifydependentfundpropertyvaluationis()": {
          "name": "Verify_dependent_fund_property_valuation_is__",
          "key": "verifydependentfundpropertyvaluationis()",
          "definition": "Verify_dependent_fund_property_valuation_is__(decimal? propertyValuation)"
        },
        "verifynameis()": {
          "name": "Verify_Name_is__",
          "key": "verifynameis()",
          "definition": "Verify_Name_is__(string name)"
        },
        "getbillablepartiessincelastupdate()": {
          "name": "Get_billable_parties_since_last_update",
          "key": "getbillablepartiessincelastupdate()",
          "definition": "Get_billable_parties_since_last_update()"
        },
        "verifysuffixis()": {
          "name": "Verify_Suffix_is__",
          "key": "verifysuffixis()",
          "definition": "Verify_Suffix_is__(string suffixName)"
        },
        "recordlastupdateinstant()": {
          "name": "Record_last_update_instant",
          "key": "recordlastupdateinstant()",
          "definition": "Record_last_update_instant()"
        },
        "verifyreferencenumberis()": {
          "name": "Verify_Reference_Number_is__",
          "key": "verifyreferencenumberis()",
          "definition": "Verify_Reference_Number_is__(string referenceNumber)"
        },
        "dispose()": {
          "name": "Dispose",
          "key": "dispose()",
          "definition": "Dispose()"
        },
        "verifyistheprimaryphonenumber()": {
          "name": "Verify__is_the_primary_phone_number",
          "key": "verifyistheprimaryphonenumber()",
          "definition": "Verify__is_the_primary_phone_number(string phoneNumber)"
        },
        "verifydependentfundsecretarysuffixis()": {
          "name": "Verify_dependent_fund_secretary_suffix_is__",
          "key": "verifydependentfundsecretarysuffixis()",
          "definition": "Verify_dependent_fund_secretary_suffix_is__(string suffix)"
        },
        "verifyistheprimaryemailaddress()": {
          "name": "Verify__is_the_primary_email_address",
          "key": "verifyistheprimaryemailaddress()",
          "definition": "Verify__is_the_primary_email_address(string emailAddress)"
        },
        "verifyphonenumberscontainwithtype()": {
          "name": "Verify_PhoneNumbers_contain__with_type__",
          "key": "verifyphonenumberscontainwithtype()",
          "definition": "Verify_PhoneNumbers_contain__with_type__(string phoneNumber, string phoneType)"
        },
        "verifydependentfundfiscalofficerfirstnameis()": {
          "name": "Verify_dependent_fund_fiscal_officer_first_name_is__",
          "key": "verifydependentfundfiscalofficerfirstnameis()",
          "definition": "Verify_dependent_fund_fiscal_officer_first_name_is__(string firstName)"
        },
        "verifydependentfundbillingaddresszipis()": {
          "name": "Verify_dependent_fund_billing_address_zip_is__",
          "key": "verifydependentfundbillingaddresszipis()",
          "definition": "Verify_dependent_fund_billing_address_zip_is__(string zip)"
        },
        "verifydependentfundsecretarymiddlenameis()": {
          "name": "Verify_dependent_fund_secretary_middle_name_is__",
          "key": "verifydependentfundsecretarymiddlenameis()",
          "definition": "Verify_dependent_fund_secretary_middle_name_is__(string middleName)"
        },
        "verifydependentfundbillingaddresscityis()": {
          "name": "Verify_dependent_fund_billing_address_city_is__",
          "key": "verifydependentfundbillingaddresscityis()",
          "definition": "Verify_dependent_fund_billing_address_city_is__(string city)"
        },
        "verifydependentfundfiscalofficernameis()": {
          "name": "Verify_dependent_fund_fiscal_officer_name_is__",
          "key": "verifydependentfundfiscalofficernameis()",
          "definition": "Verify_dependent_fund_fiscal_officer_name_is__(string name)"
        },
        "verifymailingaddressisnull()": {
          "name": "Verify_MailingAddress_is_null",
          "key": "verifymailingaddressisnull()",
          "definition": "Verify_MailingAddress_is_null()"
        },
        "verifyemailaddressescontain()": {
          "name": "Verify__EmailAddresses_contain__",
          "key": "verifyemailaddressescontain()",
          "definition": "Verify__EmailAddresses_contain__(string email)"
        },
        "verifylastnameisblank()": {
          "name": "Verify_LastName_is_blank",
          "key": "verifylastnameisblank()",
          "definition": "Verify_LastName_is_blank()"
        },
        "verifydependentfundassessmentdateis()": {
          "name": "Verify_dependent_fund_assessment_date_is__",
          "key": "verifydependentfundassessmentdateis()",
          "definition": "Verify_dependent_fund_assessment_date_is__(DateTime assessmentDate)"
        },
        "verifylastnameis()": {
          "name": "Verify_LastName_is__",
          "key": "verifylastnameis()",
          "definition": "Verify_LastName_is__(string lastName)"
        },
        "verifydependentfundbillingaddressstateis()": {
          "name": "Verify_dependent_fund_billing_address_state_is__",
          "key": "verifydependentfundbillingaddressstateis()",
          "definition": "Verify_dependent_fund_billing_address_state_is__(string state)"
        },
        "verifydependentfundfiscalofficerlastnameis()": {
          "name": "Verify_dependent_fund_fiscal_officer_last_name_is__",
          "key": "verifydependentfundfiscalofficerlastnameis()",
          "definition": "Verify_dependent_fund_fiscal_officer_last_name_is__(string lastName)"
        },
        "verifydependentfundparticipationflagis()": {
          "name": "Verify_dependent_fund_participation_flag_is__",
          "key": "verifydependentfundparticipationflagis()",
          "definition": "Verify_dependent_fund_participation_flag_is__(bool flag)"
        },
        "verifydependentfundsecretaryfirstnameis()": {
          "name": "Verify_dependent_fund_secretary_first_name_is__",
          "key": "verifydependentfundsecretaryfirstnameis()",
          "definition": "Verify_dependent_fund_secretary_first_name_is__(string firstName)"
        },
        "verifydependentfundsecretarylastnameis()": {
          "name": "Verify_dependent_fund_secretary_last_name_is__",
          "key": "verifydependentfundsecretarylastnameis()",
          "definition": "Verify_dependent_fund_secretary_last_name_is__(string lastName)"
        },
        "verifybillablepartytypeis()": {
          "name": "Verify_BillablePartyType_is__",
          "key": "verifybillablepartytypeis()",
          "definition": "Verify_BillablePartyType_is__(BillablePartyType type)"
        },
        "verifydependentfundbillingaddressline1is()": {
          "name": "Verify_dependent_fund_billing_address_line_1_is__",
          "key": "verifydependentfundbillingaddressline1is()",
          "definition": "Verify_dependent_fund_billing_address_line_1_is__(string line1)"
        },
        "verifytherearebillableparties()": {
          "name": "Verify_there_are__billable_parties",
          "key": "verifytherearebillableparties()",
          "definition": "Verify_there_are__billable_parties(int count)"
        },
        "verifydependentfundsecretarynameis()": {
          "name": "Verify_dependent_fund_secretary_name_is__",
          "key": "verifydependentfundsecretarynameis()",
          "definition": "Verify_dependent_fund_secretary_name_is__(string name)"
        },
        "waitforonesecond()": {
          "name": "Wait_for_one_second",
          "key": "waitforonesecond()",
          "definition": "Wait_for_one_second()"
        },
        "verifythereareemailaddresses()": {
          "name": "Verify_there_are__EmailAddresses",
          "key": "verifythereareemailaddresses()",
          "definition": "Verify_there_are__EmailAddresses(int count)"
        },
        "verifyfirstnameis()": {
          "name": "Verify_FirstName_is__",
          "key": "verifyfirstnameis()",
          "definition": "Verify_FirstName_is__(string firstName)"
        },
        "verifyfirstnameisblank()": {
          "name": "Verify_FirstName_is_blank",
          "key": "verifyfirstnameisblank()",
          "definition": "Verify_FirstName_is_blank()"
        },
        "verifydependentfundbillingaddresstypeis()": {
          "name": "Verify_dependent_fund_billing_address_type_is__",
          "key": "verifydependentfundbillingaddresstypeis()",
          "definition": "Verify_dependent_fund_billing_address_type_is__(string type)"
        },
        "verifydependentfundbillingaddressline2is()": {
          "name": "Verify_dependent_fund_billing_address_line_2_is__",
          "key": "verifydependentfundbillingaddressline2is()",
          "definition": "Verify_dependent_fund_billing_address_line_2_is__(string line2)"
        },
        "beginverifyingresult()": {
          "name": "Begin_verifying_result__",
          "key": "beginverifyingresult()",
          "definition": "Begin_verifying_result__(int position)"
        },
        "verifymiddlenameis()": {
          "name": "Verify_MiddleName_is__",
          "key": "verifymiddlenameis()",
          "definition": "Verify_MiddleName_is__(string middleName)"
        },
        "verifymiddlenameisblank()": {
          "name": "Verify_MiddleName_is_blank",
          "key": "verifymiddlenameisblank()",
          "definition": "Verify_MiddleName_is_blank()"
        },
        "verifytherearephonenumbers()": {
          "name": "Verify_there_are__PhoneNumbers",
          "key": "verifytherearephonenumbers()",
          "definition": "Verify_there_are__PhoneNumbers(int count)"
        },
        "verifydependentfundfiscalofficermiddlenameis()": {
          "name": "Verify_dependent_fund_fiscal_officer_middle_name_is__",
          "key": "verifydependentfundfiscalofficermiddlenameis()",
          "definition": "Verify_dependent_fund_fiscal_officer_middle_name_is__(string middleName)"
        },
        "verifydependentfundfiscalofficersuffixis()": {
          "name": "Verify_dependent_fund_fiscal_officer_suffix_is__",
          "key": "verifydependentfundfiscalofficersuffixis()",
          "definition": "Verify_dependent_fund_fiscal_officer_suffix_is__(string suffix)"
        },
        "verifyreferencenumberisblank()": {
          "name": "Verify_Reference_Number_is_blank",
          "key": "verifyreferencenumberisblank()",
          "definition": "Verify_Reference_Number_is_blank()"
        },
        "verifysuffixisblank()": {
          "name": "Verify_Suffix_is_blank",
          "key": "verifysuffixisblank()",
          "definition": "Verify_Suffix_is_blank()"
        }
      },
      "key": "billablepartiesapi",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "BillablePartiesApiWorkflow",
      "instance-name": "BillablePartiesApi"
    },
    "questionbank": {
      "namespace": "",
      "methods": {
        "addanswerwithtext()": {
          "name": "Add__Answer__with_text_",
          "key": "addanswerwithtext()",
          "definition": "Add__Answer__with_text_(string correct, string letter, string answerText)"
        },
        "updatequestionwithtextownedby()": {
          "name": "Update_question_with_text__owned_by__",
          "key": "updatequestionwithtextownedby()",
          "definition": "Update_question_with_text__owned_by__(string questionText, string ownerName)"
        },
        "questionsubcategoryis()": {
          "name": "Question_Subcategory_is__",
          "key": "questionsubcategoryis()",
          "definition": "Question_Subcategory_is__(string subcategory)"
        },
        "createquestionwithtextownedby()": {
          "name": "Create__Question_with_text__owned_by__",
          "key": "createquestionwithtextownedby()",
          "definition": "Create__Question_with_text__owned_by__(QuestionType type, string questionText, string ownerName)"
        },
        "setquestiontextto()": {
          "name": "Set_question_text_to__",
          "key": "setquestiontextto()",
          "definition": "Set_question_text_to__(string questionText)"
        },
        "removeelofromquestion()": {
          "name": "Remove_ELO__from_question__",
          "key": "removeelofromquestion()",
          "definition": "Remove_ELO__from_question__(string eloName, string questionName)"
        },
        "verifythatcurrentversionofquestionis()": {
          "name": "Verify_that_current_version_of_question__is__",
          "key": "verifythatcurrentversionofquestionis()",
          "definition": "Verify_that_current_version_of_question__is__(string questionName, int versionNumber)"
        },
        "createquestionwithtextownedbyforprogram()": {
          "name": "Create__Question_with_text__owned_by__for_program__",
          "key": "createquestionwithtextownedbyforprogram()",
          "definition": "Create__Question_with_text__owned_by__for_program__(QuestionType type, string questionText, string ownerName, string programName)"
        },
        "questionpriorityis()": {
          "name": "Question_Priority_is__",
          "key": "questionpriorityis()",
          "definition": "Question_Priority_is__(string priority)"
        },
        "questionfilenameis()": {
          "name": "Question_File_Name_is__",
          "key": "questionfilenameis()",
          "definition": "Question_File_Name_is__(string fileName)"
        },
        "createnewversionofquestionwithtextownedby()": {
          "name": "Create_new_version_of_question_with_text__owned_by__",
          "key": "createnewversionofquestionwithtextownedby()",
          "definition": "Create_new_version_of_question_with_text__owned_by__(string questionText, string ownerName)"
        },
        "setcorrectanswerto()": {
          "name": "Set_correct_answer_to__",
          "key": "setcorrectanswerto()",
          "definition": "Set_correct_answer_to__(string correctAnswer)"
        },
        "answerfeedbackis()": {
          "name": "Answer_Feedback_is__",
          "key": "answerfeedbackis()",
          "definition": "Answer_Feedback_is__(string str)"
        },
        "savequestion()": {
          "name": "Save_Question",
          "key": "savequestion()",
          "definition": "Save_Question()"
        },
        "addelotoquestion()": {
          "name": "Add_ELO__to_question",
          "key": "addelotoquestion()",
          "definition": "Add_ELO__to_question(string eloName)"
        },
        "questioncategoryis()": {
          "name": "Question_Category_is__",
          "key": "questioncategoryis()",
          "definition": "Question_Category_is__(string category)"
        }
      },
      "key": "questionbank",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "QuestionBankWorkflow",
      "instance-name": "QuestionBank"
    },
    "hooverimport": {
      "namespace": "",
      "methods": {
        "exporterrors()": {
          "name": "Export_errors",
          "key": "exporterrors()",
          "definition": "Export_errors()"
        },
        "uploadfilewithcontents()": {
          "name": "Upload_file_with_contents",
          "key": "uploadfilewithcontents()",
          "definition": "Upload_file_with_contents(string fileContents)"
        },
        "mapcolumnto()": {
          "name": "Map_column__to__",
          "key": "mapcolumnto()",
          "definition": "Map_column__to__(string columnName, string typeName, string fieldKey)"
        },
        "verifyerrorlistcontains()": {
          "name": "Verify_Error_list_contains__",
          "key": "verifyerrorlistcontains()",
          "definition": "Verify_Error_list_contains__(string expectedError)"
        },
        "selectmodule()": {
          "name": "Select_module__",
          "key": "selectmodule()",
          "definition": "Select_module__(string moduleName)"
        },
        "performimport()": {
          "name": "Perform_import",
          "key": "performimport()",
          "definition": "Perform_import()"
        },
        "matchon()": {
          "name": "Match_on__",
          "key": "matchon()",
          "definition": "Match_on__(string typeName, string traitKey)"
        },
        "specifyoptionas()": {
          "name": "Specify_option__as__",
          "key": "specifyoptionas()",
          "definition": "Specify_option__as__(string optionName, string value)"
        }
      },
      "key": "hooverimport",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "HooverImport",
      "instance-name": "HooverImport"
    },
    "housingmanagement": {
      "namespace": "",
      "methods": {
        "lookatreservationforevent()": {
          "name": "Look_at_reservation_for_event__",
          "key": "lookatreservationforevent()",
          "definition": "Look_at_reservation_for_event__(string eventName)"
        },
        "verifyreservationisoftype()": {
          "name": "Verify_reservation_is_of_type__",
          "key": "verifyreservationisoftype()",
          "definition": "Verify_reservation_is_of_type__(string reservationTypeStr)"
        },
        "verifyreservationhasrequirements()": {
          "name": "Verify_reservation_has__requirements",
          "key": "verifyreservationhasrequirements()",
          "definition": "Verify_reservation_has__requirements(int numRequirements)"
        },
        "verifyeventhaveareservation()": {
          "name": "Verify_event_____have_a_reservation",
          "key": "verifyeventhaveareservation()",
          "definition": "Verify_event_____have_a_reservation(string eventName, string doesDoesNot)"
        },
        "deletereservationforevent()": {
          "name": "Delete_reservation_for_event__",
          "key": "deletereservationforevent()",
          "definition": "Delete_reservation_for_event__(string eventName)"
        },
        "verifyreservationisfromto()": {
          "name": "Verify_reservation_is_from__to__",
          "key": "verifyreservationisfromto()",
          "definition": "Verify_reservation_is_from__to__(DateTime checkInDate, DateTime checkOutDate)"
        },
        "verifyrequestforeventhaveanevent()": {
          "name": "Verify_request_for_event_____have_an_event",
          "key": "verifyrequestforeventhaveanevent()",
          "definition": "Verify_request_for_event_____have_an_event(string eventName, string doesDoesNot)"
        }
      },
      "key": "housingmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "HousingManagement",
      "instance-name": "HousingManagement"
    },
    "automatedemaillessonplanrequeststatuschange": {
      "namespace": "",
      "methods": {
        "verifythatthesubjectoftheemailsenttocontains()": {
          "name": "Verify_that_the_subject_of_the_email_sent_to__contains__",
          "key": "verifythatthesubjectoftheemailsenttocontains()",
          "definition": "Verify_that_the_subject_of_the_email_sent_to__contains__(string emailAddress, string subjectText)"
        },
        "clearsentmail()": {
          "name": "Clear_sent_mail",
          "key": "clearsentmail()",
          "definition": "Clear_sent_mail()"
        },
        "verifyemailmessagesweresent()": {
          "name": "Verify__email_messages_were_sent",
          "key": "verifyemailmessagesweresent()",
          "definition": "Verify__email_messages_were_sent(int num)"
        },
        "verifythattheemailsenttocontains()": {
          "name": "Verify_that_the_email_sent_to__contains__",
          "key": "verifythattheemailsenttocontains()",
          "definition": "Verify_that_the_email_sent_to__contains__(string emailAddress, string bodyText)"
        },
        "verifythatanemailmessagewassentto()": {
          "name": "Verify_that_an_email_message_was_sent_to__",
          "key": "verifythatanemailmessagewassentto()",
          "definition": "Verify_that_an_email_message_was_sent_to__(string emailAddress)"
        },
        "verifythattheemailsenttodoesnotcontain()": {
          "name": "Verify_that_the_email_sent_to__does_not_contain__",
          "key": "verifythattheemailsenttodoesnotcontain()",
          "definition": "Verify_that_the_email_sent_to__does_not_contain__(string emailAddress, string bodyText)"
        }
      },
      "key": "automatedemaillessonplanrequeststatuschange",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "AutomatedEmailLessonPlanRequestStatusChange",
      "instance-name": "AutomatedEmailLessonPlanRequestStatusChange"
    },
    "testopiaurlresolver": {
      "namespace": "",
      "methods": {
        
      },
      "key": "testopiaurlresolver",
      "is-parent": false,
      "parent-name": null,
      "class-name": "TestopiaUrlResolver",
      "instance-name": "TestopiaUrlResolver"
    },
    "testopiaimportmessagehandler": {
      "namespace": "",
      "methods": {
        "handleallmessages()": {
          "name": "HandleAllMessages",
          "key": "handleallmessages()",
          "definition": "HandleAllMessages()"
        }
      },
      "key": "testopiaimportmessagehandler",
      "is-parent": false,
      "parent-name": null,
      "class-name": "TestopiaImportMessageHandler",
      "instance-name": "TestopiaImportMessageHandler"
    },
    "autoupdateclassstatusmanagement": {
      "namespace": "",
      "methods": {
        "updateclassesthatstartonorbeforetoactive()": {
          "name": "Update_classes_that_start_on_or_before__to_active",
          "key": "updateclassesthatstartonorbeforetoactive()",
          "definition": "Update_classes_that_start_on_or_before__to_active(DateTime startDate)"
        },
        "verifyclassstatusesshouldbeupdatedmanually()": {
          "name": "Verify_class_statuses_should_be_updated_manually",
          "key": "verifyclassstatusesshouldbeupdatedmanually()",
          "definition": "Verify_class_statuses_should_be_updated_manually()"
        },
        "updateclassesthatendbeforetocompleted()": {
          "name": "Update_classes_that_end_before__to_completed",
          "key": "updateclassesthatendbeforetocompleted()",
          "definition": "Update_classes_that_end_before__to_completed(DateTime endDate)"
        },
        "verifyclassstatusesshouldbeupdatedautomatically()": {
          "name": "Verify_class_statuses_should_be_updated_automatically",
          "key": "verifyclassstatusesshouldbeupdatedautomatically()",
          "definition": "Verify_class_statuses_should_be_updated_automatically()"
        }
      },
      "key": "autoupdateclassstatusmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "AutoUpdateClassStatusManagement",
      "instance-name": "AutoUpdateClassStatusManagement"
    },
    "basecertsearchcriteria": {
      "namespace": "",
      "methods": {
        "selectcertification()": {
          "name": "Select_certification__",
          "key": "selectcertification()",
          "definition": "Select_certification__(string certificationName)"
        },
        "entercertificationactionbetweenand()": {
          "name": "Enter_certification_action_between__and__",
          "key": "entercertificationactionbetweenand()",
          "definition": "Enter_certification_action_between__and__(DateTime start, DateTime end)"
        },
        "selectcertificationstatus()": {
          "name": "Select_certification_status__",
          "key": "selectcertificationstatus()",
          "definition": "Select_certification_status__(string certStatus)"
        },
        "enterexpirationbetweenand()": {
          "name": "Enter_expiration_between__and__",
          "key": "enterexpirationbetweenand()",
          "definition": "Enter_expiration_between__and__(DateTime start, DateTime end)"
        },
        "selectcertificationaction()": {
          "name": "Select_certification_action__",
          "key": "selectcertificationaction()",
          "definition": "Select_certification_action__(CertRecordAction actionType)"
        },
        "enterissuedbetweenand()": {
          "name": "Enter_issued_between__and__",
          "key": "enterissuedbetweenand()",
          "definition": "Enter_issued_between__and__(DateTime start, DateTime end)"
        },
        "selectsearchforcertifications()": {
          "name": "Select_search_for__certifications",
          "key": "selectsearchforcertifications()",
          "definition": "Select_search_for__certifications(CertSearchInclusionOptions inclusionOption)"
        }
      },
      "key": "basecertsearchcriteria",
      "is-parent": true,
      "parent-name": null,
      "class-name": "BaseCertSearchCriteriaWorkflow",
      "instance-name": "BaseCertSearchCriteria"
    },
    "testopiaacadisservice": {
      "namespace": "",
      "methods": {
        
      },
      "key": "testopiaacadisservice",
      "is-parent": false,
      "parent-name": null,
      "class-name": "TestopiaAcadisService",
      "instance-name": "TestopiaAcadisService"
    },
    "addeditclassregistration": {
      "namespace": "",
      "methods": {
        "setregistrationtoendclassstart()": {
          "name": "Set_registration_to_end__class_start",
          "key": "setregistrationtoendclassstart()",
          "definition": "Set_registration_to_end__class_start(string beforeOrAfter)"
        },
        "createclassregistrationfortostartdaysbeforeandenddaysafterwithstudentsmax()": {
          "name": "Create_class_registration_for__to_start__days_before_and_end__days_after_with__students_max",
          "key": "createclassregistrationfortostartdaysbeforeandenddaysafterwithstudentsmax()",
          "definition": "Create_class_registration_for__to_start__days_before_and_end__days_after_with__students_max(string className, int daysBefore, int daysAfter, int numStudents)"
        },
        "browsetoeditclassregistrationforclass()": {
          "name": "Browse_to_edit_class_registration_for_class",
          "key": "browsetoeditclassregistrationforclass()",
          "definition": "Browse_to_edit_class_registration_for_class(string className)"
        },
        "selectautomaticallyenrollstudentsthatrequestenrollment()": {
          "name": "Select_Automatically_enroll_students_that_request_enrollment",
          "key": "selectautomaticallyenrollstudentsthatrequestenrollment()",
          "definition": "Select_Automatically_enroll_students_that_request_enrollment()"
        },
        "setregisteringorganizationsto()": {
          "name": "Set_registering_organizations_to__",
          "key": "setregisteringorganizationsto()",
          "definition": "Set_registering_organizations_to__(List<string> orgNames)"
        },
        "browsetoaddclassregistrationfor()": {
          "name": "Browse_to_add_class_registration_for__",
          "key": "browsetoaddclassregistrationfor()",
          "definition": "Browse_to_add_class_registration_for__(string className)"
        },
        "browsetoaddclassregistrationforclasstemplate()": {
          "name": "Browse_to_add_class_registration_for_class_template__",
          "key": "browsetoaddclassregistrationforclasstemplate()",
          "definition": "Browse_to_add_class_registration_for_class_template__(string templateName)"
        },
        "selectallowtrainingcoordinatorandselfregistration()": {
          "name": "Select_Allow_Training_Coordinator_and_Self_Registration",
          "key": "selectallowtrainingcoordinatorandselfregistration()",
          "definition": "Select_Allow_Training_Coordinator_and_Self_Registration()"
        },
        "browsetoaddclassregistrationforclass()": {
          "name": "Browse_to_add_class_registration_for_class__",
          "key": "browsetoaddclassregistrationforclass()",
          "definition": "Browse_to_add_class_registration_for_class__(string className)"
        }
      },
      "key": "addeditclassregistration",
      "is-parent": false,
      "parent-name": "MVBaseWorkflow",
      "class-name": "AddEditClassRegistrationWorkflow",
      "instance-name": "AddEditClassRegistration"
    },
    "listmanagementfnh": {
      "namespace": "",
      "methods": {
        "sequenceforis()": {
          "name": "Sequence_for__is__",
          "key": "sequenceforis()",
          "definition": "Sequence_for__is__(LookupType lookupType, List<string> names)"
        },
        "edititemnamedsetnametoanddescriptionto()": {
          "name": "Edit__item_named__set_name_to__and_description_to__",
          "key": "edititemnamedsetnametoanddescriptionto()",
          "definition": "Edit__item_named__set_name_to__and_description_to__(LookupType lookupType, string name, string newName, string description)"
        },
        "edititemnamedsetdescriptionto()": {
          "name": "Edit__item_named__set_description_to__",
          "key": "edititemnamedsetdescriptionto()",
          "definition": "Edit__item_named__set_description_to__(LookupType lookupType, string name, string description)"
        }
      },
      "key": "listmanagementfnh",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "ListManagementFNH",
      "instance-name": "ListManagementFNH"
    },
    "organizationfnhmanagement": {
      "namespace": "",
      "methods": {
        "createdivisionnamedunderparent()": {
          "name": "Create_division_named__under_parent__",
          "key": "createdivisionnamedunderparent()",
          "definition": "Create_division_named__under_parent__(string divisionName, string parentName)"
        },
        "createorganizationnamed()": {
          "name": "Create_organization_named_",
          "key": "createorganizationnamed()",
          "definition": "Create_organization_named_(string childName)"
        },
        "verifyorgaddressstateis()": {
          "name": "Verify_org_address_state_is_",
          "key": "verifyorgaddressstateis()",
          "definition": "Verify_org_address_state_is_(string state)"
        },
        "setreferencenumberfororganizationto()": {
          "name": "Set_reference_number_for_organization__to__",
          "key": "setreferencenumberfororganizationto()",
          "definition": "Set_reference_number_for_organization__to__(string orgName, string referenceNumber)"
        },
        "createacademynamed()": {
          "name": "Create_academy_named_",
          "key": "createacademynamed()",
          "definition": "Create_academy_named_(string academyName)"
        },
        "verifyorgactive()": {
          "name": "Verify_org__active",
          "key": "verifyorgactive()",
          "definition": "Verify_org__active(string isIsNot)"
        },
        "addprimaryphonenumberwithtypetoorganization()": {
          "name": "add_primary_phone_number__with_type__to_organization__",
          "key": "addprimaryphonenumberwithtypetoorganization()",
          "definition": "add_primary_phone_number__with_type__to_organization__(string phoneNumber, string type, string orgName)"
        },
        "verifyorgaddressline1is()": {
          "name": "Verify_org_address_line_1_is_",
          "key": "verifyorgaddressline1is()",
          "definition": "Verify_org_address_line_1_is_(string address1)"
        },
        "verifyorgreferenceis()": {
          "name": "Verify_org_reference_is_",
          "key": "verifyorgreferenceis()",
          "definition": "Verify_org_reference_is_(string reference)"
        },
        "verifyorgaddressdescriptionis()": {
          "name": "Verify_org_address_description_is_",
          "key": "verifyorgaddressdescriptionis()",
          "definition": "Verify_org_address_description_is_(string description)"
        },
        "addphonenumberwithtypetoorganization()": {
          "name": "add_phone_number__with_type__to_organization__",
          "key": "addphonenumberwithtypetoorganization()",
          "definition": "add_phone_number__with_type__to_organization__(string phoneNumber, string type, string orgName)"
        },
        "verifyorgemploying()": {
          "name": "Verify_org__employing",
          "key": "verifyorgemploying()",
          "definition": "Verify_org__employing(string isIsNot)"
        },
        "renamebaseparentorganizationto()": {
          "name": "Rename_Base_Parent_Organization_to__",
          "key": "renamebaseparentorganizationto()",
          "definition": "Rename_Base_Parent_Organization_to__(string parentName)"
        },
        "verifyorgaddressprimarysettingis()": {
          "name": "Verify_org_address_primary_setting_is_",
          "key": "verifyorgaddressprimarysettingis()",
          "definition": "Verify_org_address_primary_setting_is_(bool setting)"
        },
        "verifyorgexternalsystemrecordwithtypeandvalue()": {
          "name": "Verify_org__External_System_Record_with_type__and_value_",
          "key": "verifyorgexternalsystemrecordwithtypeandvalue()",
          "definition": "Verify_org__External_System_Record_with_type__and_value_(string hasHasNot, string externalType, string externalID)"
        },
        "verifyorgaddresszipis()": {
          "name": "Verify_org_address_zip_is_",
          "key": "verifyorgaddresszipis()",
          "definition": "Verify_org_address_zip_is_(string zip)"
        },
        "verifyorgemailis()": {
          "name": "Verify_org_email_is_",
          "key": "verifyorgemailis()",
          "definition": "Verify_org_email_is_(string email)"
        },
        "setabbreviationfororganizationto()": {
          "name": "Set_abbreviation_for_organization__to__",
          "key": "setabbreviationfororganizationto()",
          "definition": "Set_abbreviation_for_organization__to__(string orgName, string abbrev)"
        },
        "verifyorgaddresscountyis()": {
          "name": "Verify_org_address_county_is_",
          "key": "verifyorgaddresscountyis()",
          "definition": "Verify_org_address_county_is_(string county)"
        },
        "addasauthoritytoorganizationusingcontacttype()": {
          "name": "add__as_authority_to_organization__using_contact_type__",
          "key": "addasauthoritytoorganizationusingcontacttype()",
          "definition": "add__as_authority_to_organization__using_contact_type__(string person, string orgName, string contactTypeName)"
        },
        "verifythatdiscipline()": {
          "name": "Verify_that__discipline__",
          "key": "verifythatdiscipline()",
          "definition": "Verify_that__discipline__(string orgName, string hasHasNot, string discipline)"
        },
        "addcontacttype()": {
          "name": "Add_contact_type__",
          "key": "addcontacttype()",
          "definition": "Add_contact_type__(string contactTypeName)"
        },
        "verifyorgaddresstypeidis()": {
          "name": "Verify_org_address_type_id_is_",
          "key": "verifyorgaddresstypeidis()",
          "definition": "Verify_org_address_type_id_is_(int typeID)"
        },
        "verifyorgaddressline2is()": {
          "name": "Verify_org_address_line_2_is_",
          "key": "verifyorgaddressline2is()",
          "definition": "Verify_org_address_line_2_is_(string address2)"
        },
        "usingorganization()": {
          "name": "Using_organization__",
          "key": "usingorganization()",
          "definition": "Using_organization__( string orgName )"
        },
        "verifyorgdiscipline()": {
          "name": "Verify_org__discipline__",
          "key": "verifyorgdiscipline()",
          "definition": "Verify_org__discipline__(string hasHasNot, string discipline)"
        },
        "verifyorghasudfsetto()": {
          "name": "Verify_org_has_udf__set_to_",
          "key": "verifyorghasudfsetto()",
          "definition": "Verify_org_has_udf__set_to_(string fieldName, string value)"
        },
        "verifyorgabbreviationis()": {
          "name": "Verify_org_abbreviation_is_",
          "key": "verifyorgabbreviationis()",
          "definition": "Verify_org_abbreviation_is_(string abbr)"
        },
        "setdisciplineforto()": {
          "name": "Set_discipline_for__to__",
          "key": "setdisciplineforto()",
          "definition": "Set_discipline_for__to__(string orgName, List<string> disciplines)"
        },
        "makeorganizationactive()": {
          "name": "Make_organization__active",
          "key": "makeorganizationactive()",
          "definition": "Make_organization__active(string name)"
        },
        "verifyorgaddressline2isnull()": {
          "name": "Verify_org_address_line_2_is_null",
          "key": "verifyorgaddressline2isnull()",
          "definition": "Verify_org_address_line_2_is_null()"
        },
        "createacademynamedunderparent()": {
          "name": "Create_academy_named__under_parent__",
          "key": "createacademynamedunderparent()",
          "definition": "Create_academy_named__under_parent__(string childName, string parentName)"
        },
        "setorganizationtoemploying()": {
          "name": "Set_organization__to_employing",
          "key": "setorganizationtoemploying()",
          "definition": "Set_organization__to_employing(string orgName)"
        },
        "verifyorgpointofcontactof()": {
          "name": "Verify_org__point_of_contact__of__",
          "key": "verifyorgpointofcontactof()",
          "definition": "Verify_org__point_of_contact__of__(string hasHasNot, string contactType, string personName)"
        },
        "setorganizationtonotemploying()": {
          "name": "Set_organization__to_not_employing",
          "key": "setorganizationtonotemploying()",
          "definition": "Set_organization__to_not_employing(string orgName)"
        },
        "verifyorgvisibleinportal()": {
          "name": "Verify_org__visible_in_portal",
          "key": "verifyorgvisibleinportal()",
          "definition": "Verify_org__visible_in_portal(string isIsNot)"
        },
        "addmailingaddresstoorganization()": {
          "name": "add_mailing_address__to_organization__",
          "key": "addmailingaddresstoorganization()",
          "definition": "add_mailing_address__to_organization__(string addressLine1, string addressLine2, string city, string state, string zip, string orgName)"
        },
        "createorganizationnamedunderparentgroupoftype()": {
          "name": "CreateOrganizationNamedUnderParentGroupOfType",
          "key": "createorganizationnamedunderparentgroupoftype()",
          "definition": "CreateOrganizationNamedUnderParentGroupOfType(string active, string childName, OrganizationBase parentOrg, string orgTypeName)"
        },
        "renameorganizationto()": {
          "name": "Rename_organization__to__",
          "key": "renameorganizationto()",
          "definition": "Rename_organization__to__(string oldName, string newName)"
        },
        "setorganizationudfto()": {
          "name": "set_organization_udf__to__",
          "key": "setorganizationudfto()",
          "definition": "set_organization_udf__to__(string udfName, string value)"
        },
        "setexternalsystemfororganizationto()": {
          "name": "Set_external_system_for_organization__to__",
          "key": "setexternalsystemfororganizationto()",
          "definition": "Set_external_system_for_organization__to__(string orgName, string systemType, string systemKey)"
        },
        "createorganizationnamedoftypeunderbaseparentgroup()": {
          "name": "Create_organization_named__of_type__under_base_parent_group",
          "key": "createorganizationnamedoftypeunderbaseparentgroup()",
          "definition": "Create_organization_named__of_type__under_base_parent_group(string childName, string orgTypeName)"
        },
        "addasprimaryauthoritytoorganizationusingcontacttype()": {
          "name": "add__as_primary_authority_to_organization__using_contact_type__",
          "key": "addasprimaryauthoritytoorganizationusingcontacttype()",
          "definition": "add__as_primary_authority_to_organization__using_contact_type__(string person, string orgName, string contactTypeName)"
        },
        "makeorganizationinactive()": {
          "name": "Make_organization__inactive",
          "key": "makeorganizationinactive()",
          "definition": "Make_organization__inactive(string name)"
        },
        "addprimaryemailtoorganization()": {
          "name": "Add_primary_email_to_organization",
          "key": "addprimaryemailtoorganization()",
          "definition": "Add_primary_email_to_organization(string emailAddress, string orgName)"
        },
        "verifyorghasparentnamed()": {
          "name": "Verify_org_has_parent_named_",
          "key": "verifyorghasparentnamed()",
          "definition": "Verify_org_has_parent_named_(string parentName)"
        },
        "verifyorghascomment()": {
          "name": "Verify_org_has_comment_",
          "key": "verifyorghascomment()",
          "definition": "Verify_org_has_comment_(string comment)"
        },
        "verifyorgaddresscityis()": {
          "name": "Verify_org_address_city_is_",
          "key": "verifyorgaddresscityis()",
          "definition": "Verify_org_address_city_is_(string city)"
        },
        "verifyorgaddressmailingsettingis()": {
          "name": "Verify_org_address_mailing_setting_is_",
          "key": "verifyorgaddressmailingsettingis()",
          "definition": "Verify_org_address_mailing_setting_is_(bool setting)"
        }
      },
      "key": "organizationfnhmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "OrganizationFNHManagement",
      "instance-name": "OrganizationFNHManagement"
    },
    "certificatemanagement": {
      "namespace": "",
      "methods": {
        "setprinttemplateto()": {
          "name": "Set__print_template_to__",
          "key": "setprinttemplateto()",
          "definition": "Set__print_template_to__(string cert, string template)"
        },
        "verifycertificationhasprinttemplateof()": {
          "name": "Verify_certification__has_print_template_of__",
          "key": "verifycertificationhasprinttemplateof()",
          "definition": "Verify_certification__has_print_template_of__(string certName, string templateName)"
        },
        "createcertificatetemplatenamedforversionofcertification()": {
          "name": "Create__certificate_template_named__for_version__of_certification__",
          "key": "createcertificatetemplatenamedforversionofcertification()",
          "definition": "Create__certificate_template_named__for_version__of_certification__(string certLayout, string templateName, int version, string certificationName)"
        },
        "createpressuresealcertificatetemplatenamedforcertification()": {
          "name": "create_pressure_seal_certificate_template_named_for_certification",
          "key": "createpressuresealcertificatetemplatenamedforcertification()",
          "definition": "create_pressure_seal_certificate_template_named_for_certification(string certificateTemplateName, string certificationName)"
        },
        "createwallandwalletcertificatetemplatenamedforcertification()": {
          "name": "create_wall_and_wallet_certificate_template_named_for_certification",
          "key": "createwallandwalletcertificatetemplatenamedforcertification()",
          "definition": "create_wall_and_wallet_certificate_template_named_for_certification(string certificateTemplateName, string certificationName)"
        },
        "createcertificatetemplatenamedforcertification()": {
          "name": "Create__certificate_template_named__for_certification__",
          "key": "createcertificatetemplatenamedforcertification()",
          "definition": "Create__certificate_template_named__for_certification__(string certLayout, string templateName, string certificationName)"
        },
        "verifyversionofcertificationhasprinttemplateof()": {
          "name": "Verify_version__of_certification__has_print_template_of__",
          "key": "verifyversionofcertificationhasprinttemplateof()",
          "definition": "Verify_version__of_certification__has_print_template_of__(int version, string certName, string templateName)"
        },
        "createclasscompletiondiplomatemplate()": {
          "name": "create_class_completion_diploma_template",
          "key": "createclasscompletiondiplomatemplate()",
          "definition": "create_class_completion_diploma_template()"
        },
        "createwallcertificatetemplatenamedforcertification()": {
          "name": "create_wall_certificate_template_named_for_certification",
          "key": "createwallcertificatetemplatenamedforcertification()",
          "definition": "create_wall_certificate_template_named_for_certification(string certificateTemplateName, string certificationName)"
        }
      },
      "key": "certificatemanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "CertificateManagement",
      "instance-name": "CertificateManagement"
    },
    "usagestatisticsmanagement": {
      "namespace": "",
      "methods": {
        "recordstatisticsfromto()": {
          "name": "Record_statistics_from_to",
          "key": "recordstatisticsfromto()",
          "definition": "Record_statistics_from_to(DateTime startDate, DateTime endDate)"
        },
        "updatestatisticsforcurrentmonth()": {
          "name": "Update_statistics_for_current_month",
          "key": "updatestatisticsforcurrentmonth()",
          "definition": "Update_statistics_for_current_month()"
        },
        "countbaselinestatisticsfromto()": {
          "name": "Count_baseline_statistics_from_to_",
          "key": "countbaselinestatisticsfromto()",
          "definition": "Count_baseline_statistics_from_to_(DateTime startDate, DateTime endDate)"
        },
        "recordstatisticsforcurrentmonth()": {
          "name": "Record_statistics_for_current_month",
          "key": "recordstatisticsforcurrentmonth()",
          "definition": "Record_statistics_for_current_month()"
        },
        "countbaselinestatisticsforcurrentmonth()": {
          "name": "Count_baseline_statistics_for_current_month",
          "key": "countbaselinestatisticsforcurrentmonth()",
          "definition": "Count_baseline_statistics_for_current_month()"
        }
      },
      "key": "usagestatisticsmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "UsageStatisticsManagement",
      "instance-name": "UsageStatisticsManagement"
    },
    "testopiasmtpclient": {
      "namespace": "",
      "methods": {
        "sendasync()": {
          "name": "SendAsync",
          "key": "sendasync()",
          "definition": "SendAsync(MailMessage message, object userToken)"
        },
        "dispose()": {
          "name": "Dispose",
          "key": "dispose()",
          "definition": "Dispose()"
        },
        "wiresendasynccompletedevent()": {
          "name": "WireSendAsyncCompletedEvent",
          "key": "wiresendasynccompletedevent()",
          "definition": "WireSendAsyncCompletedEvent(SendCompletedEventHandler sendAsyncCompleted)"
        },
        "send()": {
          "name": "Send",
          "key": "send()",
          "definition": "Send(MailMessage message)"
        }
      },
      "key": "testopiasmtpclient",
      "is-parent": false,
      "parent-name": null,
      "class-name": "TestopiaSmtpClient",
      "instance-name": "TestopiaSmtpClient"
    },
    "housingresidentshortcuts": {
      "namespace": "",
      "methods": {
        "changeresidenthousingtypeto()": {
          "name": "Change_resident_housing_type_to",
          "key": "changeresidenthousingtypeto()",
          "definition": "Change_resident_housing_type_to(string personName, string type)"
        },
        "verifynameis()": {
          "name": "Verify_name_is__",
          "key": "verifynameis()",
          "definition": "Verify_name_is__(string value)"
        },
        "verifyresidenthasassignedpricelevelwithpricesnapshotat()": {
          "name": "Verify_resident_has_assigned_price_level__with_price_snapshot_at",
          "key": "verifyresidenthasassignedpricelevelwithpricesnapshotat()",
          "definition": "Verify_resident_has_assigned_price_level__with_price_snapshot_at(string personName, string priceLevel, decimal price)"
        },
        "verifyaddressstreet2is()": {
          "name": "Verify_address_street2_is__",
          "key": "verifyaddressstreet2is()",
          "definition": "Verify_address_street2_is__(string value)"
        },
        "changeactualcheckindateforto()": {
          "name": "Change_actual_checkin_date_for__to__",
          "key": "changeactualcheckindateforto()",
          "definition": "Change_actual_checkin_date_for__to__(string personName, DateTime checkInDate)"
        },
        "verifygenderis()": {
          "name": "Verify_gender_is__",
          "key": "verifygenderis()",
          "definition": "Verify_gender_is__(string value)"
        },
        "assigntoroominforclass()": {
          "name": "Assign__to_room__in__for_class__",
          "key": "assigntoroominforclass()",
          "definition": "Assign__to_room__in__for_class__(string personName, string roomName, string buildingName, string floorName, string className)"
        },
        "verifybillingpartyis()": {
          "name": "Verify_billing_party_is__",
          "key": "verifybillingpartyis()",
          "definition": "Verify_billing_party_is__(string value)"
        },
        "verifyphoneextensionis()": {
          "name": "Verify_phone_extension_is__",
          "key": "verifyphoneextensionis()",
          "definition": "Verify_phone_extension_is__(string value)"
        },
        "verifybillingorganizationis()": {
          "name": "Verify_billing_organization_is__",
          "key": "verifybillingorganizationis()",
          "definition": "Verify_billing_organization_is__(string value)"
        },
        "verifyresidentisunassigned()": {
          "name": "Verify_resident__is_unassigned",
          "key": "verifyresidentisunassigned()",
          "definition": "Verify_resident__is_unassigned(string personName)"
        },
        "verifyphonetypeis()": {
          "name": "Verify_phone_type_is__",
          "key": "verifyphonetypeis()",
          "definition": "Verify_phone_type_is__(string value)"
        },
        "verifyphonenumberis()": {
          "name": "Verify_phone_number_is__",
          "key": "verifyphonenumberis()",
          "definition": "Verify_phone_number_is__(string value)"
        },
        "verifyexpectedcheckindateis()": {
          "name": "Verify_expected_checkin_date_is__",
          "key": "verifyexpectedcheckindateis()",
          "definition": "Verify_expected_checkin_date_is__(DateTime value)"
        },
        "verifyspecialinstructionsare()": {
          "name": "Verify_special_instructions_are__",
          "key": "verifyspecialinstructionsare()",
          "definition": "Verify_special_instructions_are__(string value)"
        },
        "verifyaddressstreet1is()": {
          "name": "Verify_address_street1_is__",
          "key": "verifyaddressstreet1is()",
          "definition": "Verify_address_street1_is__(string value)"
        },
        "changeresidentgenderto()": {
          "name": "Change_resident_gender_to",
          "key": "changeresidentgenderto()",
          "definition": "Change_resident_gender_to(string personName, string gender)"
        },
        "verifyaddresszipis()": {
          "name": "Verify_address_zip_is__",
          "key": "verifyaddresszipis()",
          "definition": "Verify_address_zip_is__(string value)"
        },
        "verifyresidentisassignedtoroom()": {
          "name": "Verify_resident__is_assigned_to_room__",
          "key": "verifyresidentisassignedtoroom()",
          "definition": "Verify_resident__is_assigned_to_room__(string personName, string roomName)"
        },
        "verifyresidentanaddress()": {
          "name": "Verify_resident__an_address",
          "key": "verifyresidentanaddress()",
          "definition": "Verify_resident__an_address(string hasDoesNotHave)"
        },
        "verifyrequestedusagetypeis()": {
          "name": "Verify_requested_usage_type_is__",
          "key": "verifyrequestedusagetypeis()",
          "definition": "Verify_requested_usage_type_is__(string value)"
        },
        "verifyresidentischeckedintoroomwithusage()": {
          "name": "Verify_resident__is_checked_in_to_room__with_usage__",
          "key": "verifyresidentischeckedintoroomwithusage()",
          "definition": "Verify_resident__is_checked_in_to_room__with_usage__(string personName, string roomName, string usage)"
        },
        "checkintoassignedhousingon()": {
          "name": "Check__in_to_assigned_housing_on__",
          "key": "checkintoassignedhousingon()",
          "definition": "Check__in_to_assigned_housing_on__(string personName, DateTime checkInDate)"
        },
        "verifystatusis()": {
          "name": "Verify_status_is__",
          "key": "verifystatusis()",
          "definition": "Verify_status_is__(HousingStatus value)"
        },
        "verifytitleis()": {
          "name": "Verify_title_is__",
          "key": "verifytitleis()",
          "definition": "Verify_title_is__(string value)"
        },
        "verifybillinggrantis()": {
          "name": "Verify_billing_grant_is__",
          "key": "verifybillinggrantis()",
          "definition": "Verify_billing_grant_is__(string value)"
        },
        "changeresidentreservationto()": {
          "name": "Change_resident_reservation_to",
          "key": "changeresidentreservationto()",
          "definition": "Change_resident_reservation_to(string personName, string res)"
        },
        "verifyexpectedcheckoutdateis()": {
          "name": "Verify_expected_checkout_date_is__",
          "key": "verifyexpectedcheckoutdateis()",
          "definition": "Verify_expected_checkout_date_is__(DateTime value)"
        },
        "verifyaddresscityis()": {
          "name": "Verify_address_city_is__",
          "key": "verifyaddresscityis()",
          "definition": "Verify_address_city_is__(string value)"
        },
        "checkoutofassignedhousingon()": {
          "name": "Check__out_of_assigned_housing_on__",
          "key": "checkoutofassignedhousingon()",
          "definition": "Check__out_of_assigned_housing_on__(string personName, DateTime checkOutDate)"
        },
        "verifypurposeis()": {
          "name": "Verify_purpose_is__",
          "key": "verifypurposeis()",
          "definition": "Verify_purpose_is__(string value)"
        },
        "verifypriceatrequesttimeis()": {
          "name": "Verify_price_at_request_time_is__",
          "key": "verifypriceatrequesttimeis()",
          "definition": "Verify_price_at_request_time_is__(string value)"
        },
        "verifybillingcategoryis()": {
          "name": "Verify_billing_category_is__",
          "key": "verifybillingcategoryis()",
          "definition": "Verify_billing_category_is__(string value)"
        },
        "verifyspecialaccomodationsare()": {
          "name": "Verify_special_accomodations_are__",
          "key": "verifyspecialaccomodationsare()",
          "definition": "Verify_special_accomodations_are__(string value)"
        },
        "assigntoroomin()": {
          "name": "Assign__to_room__in____",
          "key": "assigntoroomin()",
          "definition": "Assign__to_room__in____(string personName, string roomName, string buildingName, string floorName)"
        },
        "verifyaddressstateis()": {
          "name": "Verify_address_state_is__",
          "key": "verifyaddressstateis()",
          "definition": "Verify_address_state_is__(string value)"
        },
        "verifyastudent()": {
          "name": "Verify__a_student",
          "key": "verifyastudent()",
          "definition": "Verify__a_student(string isIsNot)"
        },
        "verifyrequestedpricelevelis()": {
          "name": "Verify_requested_price_level_is__",
          "key": "verifyrequestedpricelevelis()",
          "definition": "Verify_requested_price_level_is__(string value)"
        },
        "verifyemailis()": {
          "name": "Verify_email_is__",
          "key": "verifyemailis()",
          "definition": "Verify_email_is__(string value)"
        },
        "considerresidentinevent()": {
          "name": "Consider_resident__in_event__",
          "key": "considerresidentinevent()",
          "definition": "Consider_resident__in_event__(string residentName, string eventName)"
        },
        "verifycommentsare()": {
          "name": "Verify_comments_are__",
          "key": "verifycommentsare()",
          "definition": "Verify_comments_are__(string value)"
        }
      },
      "key": "housingresidentshortcuts",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "HousingResidentShortcuts",
      "instance-name": "HousingResidentShortcuts"
    },
    "reservationmanagement": {
      "namespace": "",
      "methods": {
        "addacademyreservationnamedforstartingendingforstudents()": {
          "name": "Add_Academy_Reservation_named_for_starting_ending_for_students",
          "key": "addacademyreservationnamedforstartingendingforstudents()",
          "definition": "Add_Academy_Reservation_named_for_starting_ending_for_students( string resName, string className, DateTime start, DateTime end, int howManyStudents )"
        }
      },
      "key": "reservationmanagement",
      "is-parent": false,
      "parent-name": null,
      "class-name": "ReservationManagement",
      "instance-name": "ReservationManagement"
    },
    "compliancesetup": {
      "namespace": "",
      "methods": {
        "issuecertificationtofirearmexpiringonwithstatus()": {
          "name": "Issue_certification__to_firearm__expiring_on__with_status__",
          "key": "issuecertificationtofirearmexpiringonwithstatus()",
          "definition": "Issue_certification__to_firearm__expiring_on__with_status__(string cert, string firearmSN, DateTime expireDate, string status)"
        },
        "issuecertificationtoorganizationexpiringonwithstatus()": {
          "name": "Issue_certification__to_organization__expiring_on__with_status__",
          "key": "issuecertificationtoorganizationexpiringonwithstatus()",
          "definition": "Issue_certification__to_organization__expiring_on__with_status__(string cert, string org, DateTime expireDate, string status)"
        },
        "addactiontofororganizationwitheffectivedateexpiringandstatus()": {
          "name": "Add_action_to__for_organization__with_effective_date__expiring__and_status__",
          "key": "addactiontofororganizationwitheffectivedateexpiringandstatus()",
          "definition": "Add_action_to__for_organization__with_effective_date__expiring__and_status__(string certName, string orgName, DateTime effDate, DateTime expDate, string statusName)"
        },
        "createvehiclefor()": {
          "name": "Create_vehicle__for__",
          "key": "createvehiclefor()",
          "definition": "Create_vehicle__for__(string name, string orgName)"
        },
        "createaccountablepropertynamedwithserialnumberfor()": {
          "name": "Create_accountable_property_named__with_serial_number__for__",
          "key": "createaccountablepropertynamedwithserialnumberfor()",
          "definition": "Create_accountable_property_named__with_serial_number__for__(string name, string serialNumber, string orgName)"
        },
        "addactiontoforfirearmwitheffectivedateexpiringandstatus()": {
          "name": "Add_action_to__for_firearm__with_effective_date__expiring__and_status__",
          "key": "addactiontoforfirearmwitheffectivedateexpiringandstatus()",
          "definition": "Add_action_to__for_firearm__with_effective_date__expiring__and_status__(string certName, string firearmName, DateTime effDate, DateTime expDate, string statusName)"
        },
        "issuecertificationtovehiclewithissuedateexpiringonwithstatus()": {
          "name": "Issue_certification__to_vehicle__with_issue_date__expiring_on__with_status__",
          "key": "issuecertificationtovehiclewithissuedateexpiringonwithstatus()",
          "definition": "Issue_certification__to_vehicle__with_issue_date__expiring_on__with_status__(string cert, string vehicle, DateTime issueDate, DateTime expireDate, string status)"
        },
        "allowtoseefirearmcerts()": {
          "name": "Allow__to_see_firearm_certs",
          "key": "allowtoseefirearmcerts()",
          "definition": "Allow__to_see_firearm_certs(string username)"
        },
        "issuecertificationtovehicleexpiringonwithstatus()": {
          "name": "Issue_certification__to_vehicle__expiring_on__with_status__",
          "key": "issuecertificationtovehicleexpiringonwithstatus()",
          "definition": "Issue_certification__to_vehicle__expiring_on__with_status__(string cert, string vehicle, DateTime expireDate, string status)"
        },
        "createfirearmwithmodelandserialnumberfor()": {
          "name": "Create_firearm_with_model_and_serial_number_for__",
          "key": "createfirearmwithmodelandserialnumberfor()",
          "definition": "Create_firearm_with_model_and_serial_number_for__(string model, string serialNum, string orgName)"
        },
        "allowtoseepersoncerts()": {
          "name": "Allow__to_see_person_certs",
          "key": "allowtoseepersoncerts()",
          "definition": "Allow__to_see_person_certs(string username)"
        },
        "removeexistingbaselinecerts()": {
          "name": "Remove_existing_baseline_certs",
          "key": "removeexistingbaselinecerts()",
          "definition": "Remove_existing_baseline_certs()"
        },
        "allowtoseefacilitycerts()": {
          "name": "Allow__to_see_facility_certs",
          "key": "allowtoseefacilitycerts()",
          "definition": "Allow__to_see_facility_certs(string username)"
        },
        "employaton()": {
          "name": "Employ__at__on__",
          "key": "employaton()",
          "definition": "Employ__at__on__(string person, string org, DateTime hireDate)"
        },
        "issuecertificationtoaccountablepropertywithserialnumberexpiringonwithstatus()": {
          "name": "Issue_certification__to_accountable_property_with_serial_number__expiring_on__with_status__",
          "key": "issuecertificationtoaccountablepropertywithserialnumberexpiringonwithstatus()",
          "definition": "Issue_certification__to_accountable_property_with_serial_number__expiring_on__with_status__(string cert, string serialNumber, DateTime expireDate, string status)"
        },
        "createanimaloftypefor()": {
          "name": "Create_animal__of_type__for__",
          "key": "createanimaloftypefor()",
          "definition": "Create_animal__of_type__for__(string name, string type, string orgName)"
        },
        "issuecertificationtofacilityexpiringonwithstatus()": {
          "name": "Issue_certification__to_facility__expiring_on__with_status__",
          "key": "issuecertificationtofacilityexpiringonwithstatus()",
          "definition": "Issue_certification__to_facility__expiring_on__with_status__(string cert, string facilityName, DateTime expireDate, string status)"
        },
        "issuecertificationtopersonwithissuedateexpiringonwithstatus()": {
          "name": "Issue_certification__to_person__with_issue_date__expiring_on__with_status__",
          "key": "issuecertificationtopersonwithissuedateexpiringonwithstatus()",
          "definition": "Issue_certification__to_person__with_issue_date__expiring_on__with_status__(string cert, string person, DateTime issueDate, DateTime expireDate, string status)"
        },
        "addactiontoforpersonwitheffectivedateexpiringandstatus()": {
          "name": "Add_action_to__for_person__with_effective_date__expiring__and_status__",
          "key": "addactiontoforpersonwitheffectivedateexpiringandstatus()",
          "definition": "Add_action_to__for_person__with_effective_date__expiring__and_status__(string certName, string personName, DateTime effDate, DateTime expDate, string statusName)"
        },
        "allowtoseeanimalcerts()": {
          "name": "Allow__to_see_animal_certs",
          "key": "allowtoseeanimalcerts()",
          "definition": "Allow__to_see_animal_certs(string username)"
        },
        "createfacilityfor()": {
          "name": "Create_facility__for__",
          "key": "createfacilityfor()",
          "definition": "Create_facility__for__(string name, string orgName)"
        },
        "addactiontoforfacilitywitheffectivedateexpiringandstatus()": {
          "name": "Add_action_to__for_facility__with_effective_date__expiring__and_status__",
          "key": "addactiontoforfacilitywitheffectivedateexpiringandstatus()",
          "definition": "Add_action_to__for_facility__with_effective_date__expiring__and_status__(string certName, string facilityName, DateTime effDate, DateTime expDate, string statusName)"
        },
        "createcertificationstatus()": {
          "name": "Create_certification_status__",
          "key": "createcertificationstatus()",
          "definition": "Create_certification_status__(string name)"
        },
        "addactiontoforanimalwitheffectivedateexpiringandstatus()": {
          "name": "Add_action_to__for_animal__with_effective_date__expiring__and_status__",
          "key": "addactiontoforanimalwitheffectivedateexpiringandstatus()",
          "definition": "Add_action_to__for_animal__with_effective_date__expiring__and_status__(string certName, string animalName, DateTime effDate, DateTime expDate, string statusName)"
        },
        "createcertificationtype()": {
          "name": "Create_certification_type__",
          "key": "createcertificationtype()",
          "definition": "Create_certification_type__(string name)"
        },
        "allowtoseevehiclecerts()": {
          "name": "Allow__to_see_vehicle_certs",
          "key": "allowtoseevehiclecerts()",
          "definition": "Allow__to_see_vehicle_certs(string username)"
        },
        "createfirearmmakeandmodeloftype()": {
          "name": "Create_firearm_make__and_model__of_type__",
          "key": "createfirearmmakeandmodeloftype()",
          "definition": "Create_firearm_make__and_model__of_type__(string make, string model, string type)"
        },
        "createcertificationoftype()": {
          "name": "Create_certification__of_type__",
          "key": "createcertificationoftype()",
          "definition": "Create_certification__of_type__(string name, string type)"
        },
        "issuecertificationtopersonexpiringonwithstatus()": {
          "name": "Issue_certification__to_person__expiring_on__with_status__",
          "key": "issuecertificationtopersonexpiringonwithstatus()",
          "definition": "Issue_certification__to_person__expiring_on__with_status__(string cert, string person, DateTime expireDate, string status)"
        },
        "allowtoseeorganizationcerts()": {
          "name": "Allow__to_see_organization_certs",
          "key": "allowtoseeorganizationcerts()",
          "definition": "Allow__to_see_organization_certs(string username)"
        },
        "preventfromseeingpersoncerts()": {
          "name": "Prevent___from_seeing_person_certs",
          "key": "preventfromseeingpersoncerts()",
          "definition": "Prevent___from_seeing_person_certs(string username)"
        },
        "issuecertificationtoanimalwithissuedateexpiringonwithstatus()": {
          "name": "Issue_certification__to_animal__with_issue_date___expiring_on__with_status__",
          "key": "issuecertificationtoanimalwithissuedateexpiringonwithstatus()",
          "definition": "Issue_certification__to_animal__with_issue_date___expiring_on__with_status__(string cert, string animal, DateTime issueDate, DateTime expireDate, string status)"
        },
        "issuecertificationtofirearmwithissuedateexpiringonwithstatus()": {
          "name": "Issue_certification__to_firearm__with_issue_date___expiring_on__with_status__",
          "key": "issuecertificationtofirearmwithissuedateexpiringonwithstatus()",
          "definition": "Issue_certification__to_firearm__with_issue_date___expiring_on__with_status__(string cert, string firearm, DateTime issueDate, DateTime expireDate, string status)"
        },
        "createfirearmtype()": {
          "name": "Create_firearm_type__",
          "key": "createfirearmtype()",
          "definition": "Create_firearm_type__(string typeName)"
        },
        "addactiontoforvehiclewitheffectivedateexpiringandstatus()": {
          "name": "Add_action_to__for_vehicle__with_effective_date__expiring__and_status__",
          "key": "addactiontoforvehiclewitheffectivedateexpiringandstatus()",
          "definition": "Add_action_to__for_vehicle__with_effective_date__expiring__and_status__(string certName, string vehicleName, DateTime effDate, DateTime expDate, string statusName)"
        },
        "allowtoseeaccountablepropertycerts()": {
          "name": "Allow__to_see_accountable_property_certs",
          "key": "allowtoseeaccountablepropertycerts()",
          "definition": "Allow__to_see_accountable_property_certs(string username)"
        },
        "issuecertificationtoanimalexpiringonwithstatus()": {
          "name": "Issue_certification__to_animal__expiring_on__with_status__",
          "key": "issuecertificationtoanimalexpiringonwithstatus()",
          "definition": "Issue_certification__to_animal__expiring_on__with_status__(string cert, string animal, DateTime expireDate, string status)"
        },
        "issuecertificationtofacilitywithissuedateexpiringonwithstatus()": {
          "name": "Issue_certification__to_facility__with_issue_date___expiring_on__with_status__",
          "key": "issuecertificationtofacilitywithissuedateexpiringonwithstatus()",
          "definition": "Issue_certification__to_facility__with_issue_date___expiring_on__with_status__(string cert, string facilityName, DateTime issueDate, DateTime expireDate, string status)"
        },
        "issuecertificationtoorganizationwithissuedateexpiringonwithstatus()": {
          "name": "Issue_certification__to_organization__with_issue_date__expiring_on__with_status__",
          "key": "issuecertificationtoorganizationwithissuedateexpiringonwithstatus()",
          "definition": "Issue_certification__to_organization__with_issue_date__expiring_on__with_status__(string cert, string org, DateTime issueDate, DateTime expireDate, string status)"
        }
      },
      "key": "compliancesetup",
      "is-parent": false,
      "parent-name": "SetupWorkflow",
      "class-name": "ComplianceSetup",
      "instance-name": "ComplianceSetup"
    },
    "permissionuser": {
      "namespace": "",
      "methods": {
        "restrictusertoassignedclassesonly()": {
          "name": "Restrict_user__to_assigned_classes_only",
          "key": "restrictusertoassignedclassesonly()",
          "definition": "Restrict_user__to_assigned_classes_only(string userName)"
        },
        "withuser()": {
          "name": "With_user",
          "key": "withuser()",
          "definition": "With_user(string userName)"
        },
        "allowviewingofunemployedpeople()": {
          "name": "Allow_viewing_of_unemployed_people",
          "key": "allowviewingofunemployedpeople()",
          "definition": "Allow_viewing_of_unemployed_people()"
        },
        "removepermissionsfromrole()": {
          "name": "Remove_permissions_from_role",
          "key": "removepermissionsfromrole()",
          "definition": "Remove_permissions_from_role(string bizfunc, string role)"
        },
        "assignrole()": {
          "name": "AssignRole",
          "key": "assignrole()",
          "definition": "AssignRole(string roleName)"
        },
        "grantdatapermissionon()": {
          "name": "GrantDataPermissionOn",
          "key": "grantdatapermissionon()",
          "definition": "GrantDataPermissionOn(string orgName)"
        },
        "verifyhasroleaccess()": {
          "name": "Verifyhasroleaccess",
          "key": "verifyhasroleaccess()",
          "definition": "Verifyhasroleaccess(string userName, string roleName)"
        },
        "verifyhaspermissiontodata()": {
          "name": "Verify__has_permission_to__Data",
          "key": "verifyhaspermissiontodata()",
          "definition": "Verify__has_permission_to__Data(string userName, string orgName)"
        },
        "revokefromrole()": {
          "name": "Revoke___from_role__",
          "key": "revokefromrole()",
          "definition": "Revoke___from_role__(string bizFuncDisplayName, BizFuncPerms permission, string roleName)"
        },
        "verifylackspermissiontodata()": {
          "name": "Verify__lacks_permission_to__Data",
          "key": "verifylackspermissiontodata()",
          "definition": "Verify__lacks_permission_to__Data(string userName, string orgName)"
        },
        "removepermissionfromrole()": {
          "name": "Remove__permission_from_role__",
          "key": "removepermissionfromrole()",
          "definition": "Remove__permission_from_role__(string moduleName, string bizfunc, string role)"
        },
        "allowforonrole()": {
          "name": "Allow__for__on_role__",
          "key": "allowforonrole()",
          "definition": "Allow__for__on_role__(string bizFuncDisplayName, string permission, string module, string role)"
        },
        "grantdatapermissiononto()": {
          "name": "GrantDataPermissionOnTo",
          "key": "grantdatapermissiononto()",
          "definition": "GrantDataPermissionOnTo(string orgName, string userName)"
        },
        "removedatapermissiontoallbutfrom()": {
          "name": "Remove_Data_Permission_To_All_But_From",
          "key": "removedatapermissiontoallbutfrom()",
          "definition": "Remove_Data_Permission_To_All_But_From(string orgName, string userName)"
        },
        "verifyonlyhaspermissiontodata()": {
          "name": "Verify__Only_Has_Permission_To__Data",
          "key": "verifyonlyhaspermissiontodata()",
          "definition": "Verify__Only_Has_Permission_To__Data(string userName, string orgName)"
        },
        "setassignedclassesonly()": {
          "name": "Set_Assigned_Classes_Only",
          "key": "setassignedclassesonly()",
          "definition": "Set_Assigned_Classes_Only()"
        },
        "restrictusertospecificorganizations()": {
          "name": "Restrict_user__to_specific_organizations",
          "key": "restrictusertospecificorganizations()",
          "definition": "Restrict_user__to_specific_organizations(string userName)"
        },
        "unassignrolefromuser()": {
          "name": "Unassign_role__from_user__",
          "key": "unassignrolefromuser()",
          "definition": "Unassign_role__from_user__(string roleName, string userName)"
        },
        "removedatapermissionforfrom()": {
          "name": "Remove_data_permission_for_from",
          "key": "removedatapermissionforfrom()",
          "definition": "Remove_data_permission_for_from(string orgName, string userName)"
        },
        "validatecurrentlyloggedinuseris()": {
          "name": "Validate_currently_logged_in_user_is",
          "key": "validatecurrentlyloggedinuseris()",
          "definition": "Validate_currently_logged_in_user_is(string userName)"
        },
        "hasaccessto()": {
          "name": "Has_access_to",
          "key": "hasaccessto()",
          "definition": "Has_access_to(string permission, BizFunc bizFunc)"
        },
        "allowonrole()": {
          "name": "Allow__on_role__",
          "key": "allowonrole()",
          "definition": "Allow__on_role__(string bizFuncDisplayName, string permission, string role)"
        },
        "grantallpermissionstorole()": {
          "name": "Grant_all_permissions_to_role__",
          "key": "grantallpermissionstorole()",
          "definition": "Grant_all_permissions_to_role__(string roleName)"
        },
        "assignroletouser()": {
          "name": "AssignRoleToUser",
          "key": "assignroletouser()",
          "definition": "AssignRoleToUser(string roleName, string userName)"
        },
        "addtorole()": {
          "name": "Add___to_role__",
          "key": "addtorole()",
          "definition": "Add___to_role__(string bizFuncDisplayName, BizFuncPerms permission, string roleName)"
        },
        "createrolewithstatus()": {
          "name": "Create_role_with_status",
          "key": "createrolewithstatus()",
          "definition": "Create_role_with_status(string roleName, string status)"
        },
        "verifypermittedorganizationsincludeonly()": {
          "name": "Verify_permitted_organizations_include_only",
          "key": "verifypermittedorganizationsincludeonly()",
          "definition": "Verify_permitted_organizations_include_only(string orgNameList)"
        },
        "disallowviewingofunemployedpeople()": {
          "name": "Disallow_viewing_of_unemployed_people",
          "key": "disallowviewingofunemployedpeople()",
          "definition": "Disallow_viewing_of_unemployed_people()"
        }
      },
      "key": "permissionuser",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "PermissionUser",
      "instance-name": "PermissionUser"
    },
    "usermanagementfnh": {
      "namespace": "",
      "methods": {
        "verifypersondoesnothaveauseraccount()": {
          "name": "Verify_person__does_not_have_a_user_account",
          "key": "verifypersondoesnothaveauseraccount()",
          "definition": "Verify_person__does_not_have_a_user_account(string personName)"
        }
      },
      "key": "usermanagementfnh",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "UserManagementFNH",
      "instance-name": "UserManagementFNH"
    },
    "missedtrainingreportmanagement": {
      "namespace": "",
      "methods": {
        "checkthatreportsearchedtrainingwithdescriptionfromto()": {
          "name": "Check_that_report_searched_training_with_description_from_to",
          "key": "checkthatreportsearchedtrainingwithdescriptionfromto()",
          "definition": "Check_that_report_searched_training_with_description_from_to( string training, string description, DateTime fromDate, DateTime toDate )"
        },
        "checkthatsearchfoundnomissedtraining()": {
          "name": "Check_that_search_found_no_missed_training",
          "key": "checkthatsearchfoundnomissedtraining()",
          "definition": "Check_that_search_found_no_missed_training()"
        },
        "searchtrainingfororganizationfromto()": {
          "name": "Search_training_for_organization_from_to",
          "key": "searchtrainingfororganizationfromto()",
          "definition": "Search_training_for_organization_from_to( string training, string orgName, DateTime fromDate, DateTime toDate )"
        },
        "checkthatsearchfoundwithacademyidandemploymentat()": {
          "name": "Check_that_search_found_with_academy_id_and_employment_at",
          "key": "checkthatsearchfoundwithacademyidandemploymentat()",
          "definition": "Check_that_search_found_with_academy_id_and_employment_at( string personName, string academyID, string employmentStatus, string orgName )"
        },
        "searchtrainingforpersonwithlastnamefromto()": {
          "name": "Search_training_for_person_with_last_name_from_to",
          "key": "searchtrainingforpersonwithlastnamefromto()",
          "definition": "Search_training_for_person_with_last_name_from_to( string training, string personName, DateTime fromDate, DateTime toDate )"
        }
      },
      "key": "missedtrainingreportmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "MissedTrainingReportManagement",
      "instance-name": "MissedTrainingReportManagement"
    },
    "autograduatertask": {
      "namespace": "",
      "methods": {
        "runautograduationtask()": {
          "name": "Run_auto_graduation_task",
          "key": "runautograduationtask()",
          "definition": "Run_auto_graduation_task()"
        }
      },
      "key": "autograduatertask",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "AutoGraduaterTaskWorkflow",
      "instance-name": "AutoGraduaterTask"
    },
    "organizationsearchcriteria": {
      "namespace": "",
      "methods": {
        "excludeinactiveorganizations()": {
          "name": "Exclude_inactive_organizations",
          "key": "excludeinactiveorganizations()",
          "definition": "Exclude_inactive_organizations()"
        },
        "setup()": {
          "name": "SetUp",
          "key": "setup()",
          "definition": "SetUp()"
        },
        "enterasnamecriteria()": {
          "name": "Enter__as_Name_Criteria",
          "key": "enterasnamecriteria()",
          "definition": "Enter__as_Name_Criteria(string name)"
        },
        "chooseasthematchesoption()": {
          "name": "Choose__as_the_Matches_option",
          "key": "chooseasthematchesoption()",
          "definition": "Choose__as_the_Matches_option(SearchComparison matchMode)"
        },
        "includeastypetosearch()": {
          "name": "Include__as_type_to_search",
          "key": "includeastypetosearch()",
          "definition": "Include__as_type_to_search(string type)"
        },
        "excludeactiveorganizations()": {
          "name": "Exclude_active_organizations",
          "key": "excludeactiveorganizations()",
          "definition": "Exclude_active_organizations()"
        },
        "enterasorganizationreferencecriteria()": {
          "name": "Enter__as_Organization_Reference_Criteria",
          "key": "enterasorganizationreferencecriteria()",
          "definition": "Enter__as_Organization_Reference_Criteria(string organizationReference)"
        },
        "includeasdisciplinetosearch()": {
          "name": "Include__as_discipline_to_search",
          "key": "includeasdisciplinetosearch()",
          "definition": "Include__as_discipline_to_search(string disciplineName)"
        },
        "enterasabbreviationcriteria()": {
          "name": "Enter__as_Abbreviation_Criteria",
          "key": "enterasabbreviationcriteria()",
          "definition": "Enter__as_Abbreviation_Criteria(string abbreviation)"
        },
        "includeinactiveorganizations()": {
          "name": "Include_inactive_organizations",
          "key": "includeinactiveorganizations()",
          "definition": "Include_inactive_organizations()"
        },
        "includeactiveorganizations()": {
          "name": "Include_active_organizations",
          "key": "includeactiveorganizations()",
          "definition": "Include_active_organizations()"
        }
      },
      "key": "organizationsearchcriteria",
      "is-parent": false,
      "parent-name": "BaseCertSearchCriteriaWorkflow",
      "class-name": "OrganizationSearchCriteria",
      "instance-name": "OrganizationSearchCriteria"
    },
    "facilitypersistence": {
      "namespace": "",
      "methods": {
        "verifythatresultscontain()": {
          "name": "Verify_that_results_contain__",
          "key": "verifythatresultscontain()",
          "definition": "Verify_that_results_contain__(List<string> facilityNames)"
        },
        "verifythatthereareresults()": {
          "name": "Verify_that_there_are__results",
          "key": "verifythatthereareresults()",
          "definition": "Verify_that_there_are__results(int numResults)"
        },
        "getfacilitiesincategory()": {
          "name": "Get_facilities_in_category__",
          "key": "getfacilitiesincategory()",
          "definition": "Get_facilities_in_category__(string categoryName)"
        }
      },
      "key": "facilitypersistence",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "FacilityPersistence",
      "instance-name": "FacilityPersistence"
    },
    "employmentdata": {
      "namespace": "",
      "methods": {
        
      },
      "key": "employmentdata",
      "is-parent": false,
      "parent-name": null,
      "class-name": "EmploymentData",
      "instance-name": "EmploymentData"
    },
    "implementationhelper": {
      "namespace": "",
      "methods": {
        
      },
      "key": "implementationhelper",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "ImplementationHelper",
      "instance-name": "ImplementationHelper"
    },
    "awardsmanagement": {
      "namespace": "",
      "methods": {
        "thisisawardedtothestudentwithagradeequalorhigherto()": {
          "name": "This_is_awarded_to_the_student_with_a_grade_equal_or_higher_to__",
          "key": "thisisawardedtothestudentwithagradeequalorhigherto()",
          "definition": "This_is_awarded_to_the_student_with_a_grade_equal_or_higher_to__( decimal minimumGrade )"
        },
        "verifyclassawardawardeescanfail()": {
          "name": "Verify_Class_award_awardees_can_fail",
          "key": "verifyclassawardawardeescanfail()",
          "definition": "Verify_Class_award_awardees_can_fail(string awardName, string testNames)"
        },
        "verifyclassawardawardeescanhaveretestson()": {
          "name": "Verify_Class_award__awardees_can_have_retests_on__",
          "key": "verifyclassawardawardeescanhaveretestson()",
          "definition": "Verify_Class_award__awardees_can_have_retests_on__( string awardName, string retestCriteria )"
        },
        "awardto()": {
          "name": "Award_to",
          "key": "awardto()",
          "definition": "Award_to( string awardName, string studentName )"
        },
        "verifydoesnotdisqualifyon()": {
          "name": "Verify_does_not_disqualify_on",
          "key": "verifydoesnotdisqualifyon()",
          "definition": "Verify_does_not_disqualify_on(string award1Name, string award2Name, string classDefName)"
        },
        "verifyawardconferredtoin()": {
          "name": "Verify_award_conferred_to_in",
          "key": "verifyawardconferredtoin()",
          "definition": "Verify_award_conferred_to_in(string awardName, string conferred, string personName, string className)"
        },
        "addclassawardto()": {
          "name": "Add_Class_Award_to",
          "key": "addclassawardto()",
          "definition": "Add_Class_Award_to(string awardName, string classDefinitionName)"
        },
        "saveclassaward()": {
          "name": "Save_Class_Award",
          "key": "saveclassaward()",
          "definition": "Save_Class_Award()"
        },
        "verifyclassawardawardeescanhavewaivers()": {
          "name": "Verify_Class_award__awardees_can_have__waivers",
          "key": "verifyclassawardawardeescanhavewaivers()",
          "definition": "Verify_Class_award__awardees_can_have__waivers( string awardName, string waiverCriteria )"
        },
        "conferallawardson()": {
          "name": "Confer_All_Awards_on",
          "key": "conferallawardson()",
          "definition": "Confer_All_Awards_on(string trainingClassName)"
        },
        "theawarddoesnotdisqualifyon()": {
          "name": "The_award_does_not_disqualify_on",
          "key": "theawarddoesnotdisqualifyon()",
          "definition": "The_award_does_not_disqualify_on(string award1Name, string award2Name, string classDefName)"
        },
        "theawardeehavetakenaclassintheprogrambefore()": {
          "name": "The_awardee_have_taken_a_class_in_the_program_before",
          "key": "theawardeehavetakenaclassintheprogrambefore()",
          "definition": "The_awardee_have_taken_a_class_in_the_program_before( string priorClassCriteria )"
        },
        "theawardisbasedonactivities()": {
          "name": "The_award_is_based_on_activities__",
          "key": "theawardisbasedonactivities()",
          "definition": "The_award_is_based_on_activities__( string activities )"
        },
        "resequenceawardstoon()": {
          "name": "Resequence_awards_to__on_",
          "key": "resequenceawardstoon()",
          "definition": "Resequence_awards_to__on_(string newClassAwardSequence, string classDefinitionName)"
        },
        "thisisawardedtothestudentwith()": {
          "name": "This_is_awarded_to_the_student_with__",
          "key": "thisisawardedtothestudentwith()",
          "definition": "This_is_awarded_to_the_student_with__( string gradeCriteria )"
        },
        "verifyclassawardawardeeshavetakenaclassintheprogrambefore()": {
          "name": "Verify_Class_award_awardees_have_taken_a_class_in_the_program_before",
          "key": "verifyclassawardawardeeshavetakenaclassintheprogrambefore()",
          "definition": "Verify_Class_award_awardees_have_taken_a_class_in_the_program_before( string awardName, string priorClassCriteria )"
        },
        "theawardeecannothaveanyofthefollowingawards()": {
          "name": "The_awardee_cannot_have_any_of_the_following_awards",
          "key": "theawardeecannothaveanyofthefollowingawards()",
          "definition": "The_awardee_cannot_have_any_of_the_following_awards(string listOfAwards)"
        },
        "theawardeecannotfailanytest()": {
          "name": "The_awardee_cannot_fail_any_test",
          "key": "theawardeecannotfailanytest()",
          "definition": "The_awardee_cannot_fail_any_test()"
        },
        "theawarddisqualifieson()": {
          "name": "The_award_disqualifies_on",
          "key": "theawarddisqualifieson()",
          "definition": "The_award_disqualifies_on(string award1Name, string award2Name, string classDefName)"
        },
        "theawardeecanfailthefollowingtests()": {
          "name": "The_awardee_can_fail_the_following_tests",
          "key": "theawardeecanfailthefollowingtests()",
          "definition": "The_awardee_can_fail_the_following_tests(string testNames)"
        },
        "verifyclassawardisbasedonexamsandactivities()": {
          "name": "Verify_Class_award__is_based_on__exams_and_activities",
          "key": "verifyclassawardisbasedonexamsandactivities()",
          "definition": "Verify_Class_award__is_based_on__exams_and_activities( string awardName, string examCriteria )"
        },
        "conferawardtonewrecipients()": {
          "name": "Confer_award_to_new_recipients",
          "key": "conferawardtonewrecipients()",
          "definition": "Confer_award_to_new_recipients()"
        },
        "theawardeecannothaveretestsonanytest()": {
          "name": "The_awardee_cannot_have_retests_on_any_test",
          "key": "theawardeecannothaveretestsonanytest()",
          "definition": "The_awardee_cannot_have_retests_on_any_test()"
        },
        "verifyawardconferredto()": {
          "name": "Verify__award__conferred_to__",
          "key": "verifyawardconferredto()",
          "definition": "Verify__award__conferred_to__( string awardName, string conferred, string personName )"
        },
        "conferawardonto()": {
          "name": "Confer_award__on__to_",
          "key": "conferawardonto()",
          "definition": "Confer_award__on__to_(string awardName, string trainingClassName, string studentName)"
        },
        "verifyclassnolongerhasawardrecipients()": {
          "name": "Verify_class__no_longer_has_award_recipients",
          "key": "verifyclassnolongerhasawardrecipients()",
          "definition": "Verify_class__no_longer_has_award_recipients( string className )"
        },
        "verifydisqualifieson()": {
          "name": "Verify_disqualifies_on",
          "key": "verifydisqualifieson()",
          "definition": "Verify_disqualifies_on(string award1Name, string award2Name, string classDefName)"
        },
        "usingclassaward()": {
          "name": "Using_class_award__",
          "key": "usingclassaward()",
          "definition": "Using_class_award__( string awardName )"
        },
        "theawardonallowsanyotherawards()": {
          "name": "The_award__on__allows_any_other_awards",
          "key": "theawardonallowsanyotherawards()",
          "definition": "The_award__on__allows_any_other_awards(string awardName, string classDefName)"
        },
        "verifystudentnolongerhasawards()": {
          "name": "Verify_student_no_longer_has_awards",
          "key": "verifystudentnolongerhasawards()",
          "definition": "Verify_student_no_longer_has_awards()"
        },
        "theawardisbasedontests()": {
          "name": "The_award_is_based_on_tests",
          "key": "theawardisbasedontests()",
          "definition": "The_award_is_based_on_tests( string tests )"
        },
        "verifycontainsclassaward()": {
          "name": "Verify__contains_class_award__",
          "key": "verifycontainsclassaward()",
          "definition": "Verify__contains_class_award__( string classDefinitionName, string awardName )"
        },
        "theawardisbasedonexamsandactivities()": {
          "name": "The_award_is_based_on__exams_and_activities",
          "key": "theawardisbasedonexamsandactivities()",
          "definition": "The_award_is_based_on__exams_and_activities(string examCriteria)"
        },
        "selectawardrecipients()": {
          "name": "Select_award_recipients__",
          "key": "selectawardrecipients()",
          "definition": "Select_award_recipients__( string recipientNames )"
        },
        "deletefrom()": {
          "name": "Delete_from",
          "key": "deletefrom()",
          "definition": "Delete_from( string awardName, string className )"
        },
        "assignaward()": {
          "name": "Assign_award",
          "key": "assignaward()",
          "definition": "Assign_award( string awardName )"
        },
        "verifystudenthasaward()": {
          "name": "Verify_student_has_award",
          "key": "verifystudenthasaward()",
          "definition": "Verify_student_has_award( string awardName )"
        },
        "verifyclassawardisbasedonactivities()": {
          "name": "Verify_Class_Award__is_based_on_activities__",
          "key": "verifyclassawardisbasedonactivities()",
          "definition": "Verify_Class_Award__is_based_on_activities__( string awardName, string activities )"
        },
        "verifyclassawardallowsretestson()": {
          "name": "Verify_Class_award__allows_retests_on__",
          "key": "verifyclassawardallowsretestson()",
          "definition": "Verify_Class_award__allows_retests_on__( string awardName, string testsAllowingRetests )"
        },
        "theawardeecanhaveretestsonthefollowingtests()": {
          "name": "The_awardee_can_have_retests_on_the_following_tests__",
          "key": "theawardeecanhaveretestsonthefollowingtests()",
          "definition": "The_awardee_can_have_retests_on_the_following_tests__(string testsForRetest)"
        },
        "theawardeecanhavewaivers()": {
          "name": "The_awardee_can_have_waivers",
          "key": "theawardeecanhavewaivers()",
          "definition": "The_awardee_can_have_waivers()"
        },
        "verifyclassawardisawardedtothestudentwith()": {
          "name": "Verify_Class_award__is_awarded_to_the_student_with__",
          "key": "verifyclassawardisawardedtothestudentwith()",
          "definition": "Verify_Class_award__is_awarded_to_the_student_with__( string awardName, string gradeCriteria )"
        },
        "verifyclassawardawardeescannotfailanytest()": {
          "name": "Verify_Class_award_awardees_cannot_fail_any_test",
          "key": "verifyclassawardawardeescannotfailanytest()",
          "definition": "Verify_Class_award_awardees_cannot_fail_any_test(string awardName)"
        },
        "theawardeecannothavewaivers()": {
          "name": "The_awardee_cannot_have_waivers",
          "key": "theawardeecannothavewaivers()",
          "definition": "The_awardee_cannot_have_waivers()"
        },
        "verifyclassawardisbasedontests()": {
          "name": "Verify_Class_Award__is_based_on_tests__",
          "key": "verifyclassawardisbasedontests()",
          "definition": "Verify_Class_Award__is_based_on_tests__( string awardName, string tests )"
        },
        "verifyclassawardsequenceon()": {
          "name": "Verify_class_award_sequence_on",
          "key": "verifyclassawardsequenceon()",
          "definition": "Verify_class_award_sequence_on( string classAwardSequence, string classDefinitionName )"
        },
        "usingclassawardinclass()": {
          "name": "Using_class_award__in_class__",
          "key": "usingclassawardinclass()",
          "definition": "Using_class_award__in_class__( string awardName, string className )"
        }
      },
      "key": "awardsmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "AwardsManagement",
      "instance-name": "AwardsManagement"
    },
    "ohiovfdfview": {
      "namespace": "",
      "methods": {
        "getdatafororganizationview()": {
          "name": "Get_data_for_organization_view",
          "key": "getdatafororganizationview()",
          "definition": "Get_data_for_organization_view()"
        },
        "getdataforbeneficiaryview()": {
          "name": "Get_data_for_beneficiary_view",
          "key": "getdataforbeneficiaryview()",
          "definition": "Get_data_for_beneficiary_view()"
        }
      },
      "key": "ohiovfdfview",
      "is-parent": false,
      "parent-name": "CustomerViewWorkflowBase",
      "class-name": "OhioVFDFView",
      "instance-name": "OhioVFDFView"
    },
    "duplicatesearch": {
      "namespace": "",
      "methods": {
        "thereareduplicatesoffirstnamelastname()": {
          "name": "There_are__duplicates_of_first_name__last_name__",
          "key": "thereareduplicatesoffirstnamelastname()",
          "definition": "There_are__duplicates_of_first_name__last_name__(int numExpectedResults, string firstName, string lastName)"
        },
        "thereareduplicatesoflastnamebirthdate()": {
          "name": "There_are__duplicates_of_last_name__birthdate__",
          "key": "thereareduplicatesoflastnamebirthdate()",
          "definition": "There_are__duplicates_of_last_name__birthdate__( int numExpectedResults, string lastName, DateTime bithdate )"
        },
        "searchforduplicateswithcriteria()": {
          "name": "Search_for_duplicates_with_criteria__",
          "key": "searchforduplicateswithcriteria()",
          "definition": "Search_for_duplicates_with_criteria__(List<string> criteria)"
        },
        "thereareduplicatesoffirstnamebirthdate()": {
          "name": "There_are_duplicates_of_first_name_birthdate",
          "key": "thereareduplicatesoffirstnamebirthdate()",
          "definition": "There_are_duplicates_of_first_name_birthdate( int numExpectedResults, string firstName, DateTime bithdate )"
        },
        "thereareduplicatesofdriverslicense()": {
          "name": "There_are__duplicates_of_drivers_license__",
          "key": "thereareduplicatesofdriverslicense()",
          "definition": "There_are__duplicates_of_drivers_license__( int numExpectedResults, string driversLicense )"
        }
      },
      "key": "duplicatesearch",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "DuplicateSearch",
      "instance-name": "DuplicateSearch"
    },
    "atmanagement": {
      "namespace": "",
      "methods": {
        "createcriteriarulewithquestionsofpriority()": {
          "name": "Create_criteria_rule_with_questions_of_priority",
          "key": "createcriteriarulewithquestionsofpriority()",
          "definition": "Create_criteria_rule_with_questions_of_priority(int count, string priorityName)"
        },
        "createtesttemplatenamedwithownerandprogram()": {
          "name": "Create_test_template_named_with_owner_and_program",
          "key": "createtesttemplatenamedwithownerandprogram()",
          "definition": "Create_test_template_named_with_owner_and_program(string templateName, string ownerName, string programName)"
        },
        "createtesteditionnamedwithsamerulesetasbutwithdifferentquestions()": {
          "name": "Create_test_edition_named_with_same_ruleset_as_but_with_different_questions",
          "key": "createtesteditionnamedwithsamerulesetasbutwithdifferentquestions()",
          "definition": "Create_test_edition_named_with_same_ruleset_as_but_with_different_questions(string editionName, string copiedEditionName)"
        },
        "verifyeditionhasrules()": {
          "name": "Verify_edition_has_rules",
          "key": "verifyeditionhasrules()",
          "definition": "Verify_edition_has_rules(int count)"
        },
        "createtesteditionnamedwithnewruleset()": {
          "name": "Create_test_edition_named_with_new_ruleset",
          "key": "createtesteditionnamedwithnewruleset()",
          "definition": "Create_test_edition_named_with_new_ruleset(string editionName)"
        },
        "gettesttemplateedition()": {
          "name": "Get_test_template_edition",
          "key": "gettesttemplateedition()",
          "definition": "Get_test_template_edition(string templateName, string editionName)"
        },
        "createcriteriarulewithquestionsfromcategory()": {
          "name": "Create_criteria_rule_with_questions_from_category",
          "key": "createcriteriarulewithquestionsfromcategory()",
          "definition": "Create_criteria_rule_with_questions_from_category(int count, string categoryName)"
        },
        "verifytesttemplatehaseditions()": {
          "name": "Verify_test_template_has_editions",
          "key": "verifytesttemplatehaseditions()",
          "definition": "Verify_test_template_has_editions(int count)"
        },
        "createtesteditionnamedwithsamequestionsetas()": {
          "name": "Create_test_edition_named_with_same_question_set_as",
          "key": "createtesteditionnamedwithsamequestionsetas()",
          "definition": "Create_test_edition_named_with_same_question_set_as(string editionName, string copiedEditionName)"
        }
      },
      "key": "atmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "ATManagement",
      "instance-name": "ATManagement"
    },
    "humanresourceimportmanagement": {
      "namespace": "",
      "methods": {
        "verifyhumanresourceimportsareuse()": {
          "name": "Verify_Human_Resource_Imports_are__use",
          "key": "verifyhumanresourceimportsareuse()",
          "definition": "Verify_Human_Resource_Imports_are__use(string inUse)"
        },
        "verifyparentofneworgis()": {
          "name": "Verify_parent_of_new_org_is__",
          "key": "verifyparentofneworgis()",
          "definition": "Verify_parent_of_new_org_is__(string orgName)"
        },
        "sethumanresourcesystemnameto()": {
          "name": "Set_human_resource_system_name_to__",
          "key": "sethumanresourcesystemnameto()",
          "definition": "Set_human_resource_system_name_to__(string name)"
        },
        "verifyfilecontenttypeis()": {
          "name": "Verify_file_content_type_is__",
          "key": "verifyfilecontenttypeis()",
          "definition": "Verify_file_content_type_is__(ExternalHRImportMode contentType)"
        },
        "verifyhumanresourcesystemnameis()": {
          "name": "Verify_human_resource_system_name_is__",
          "key": "verifyhumanresourcesystemnameis()",
          "definition": "Verify_human_resource_system_name_is__(string name)"
        },
        "setparentorgofneworgsto()": {
          "name": "Set_parent_org_of_new_orgs_to",
          "key": "setparentorgofneworgsto()",
          "definition": "Set_parent_org_of_new_orgs_to(string orgName)"
        },
        "setfilecontenttypeto()": {
          "name": "Set_file_content_type_to__",
          "key": "setfilecontenttypeto()",
          "definition": "Set_file_content_type_to__(ExternalHRImportMode contentType)"
        },
        "whenimportfileincludesonlyadutyassignmentemploythemwiththefirstemployingorgupthetree()": {
          "name": "When_import_file_includes_only_a_duty_assignment_employ_them_with_the_first_employing_org_up_the_tree",
          "key": "whenimportfileincludesonlyadutyassignmentemploythemwiththefirstemployingorgupthetree()",
          "definition": "When_import_file_includes_only_a_duty_assignment_employ_them_with_the_first_employing_org_up_the_tree()"
        },
        "verifydutyassignmentswithoutorginfileemployswith()": {
          "name": "Verify_duty_assignments_without_org_in_file_employs_with__",
          "key": "verifydutyassignmentswithoutorginfileemployswith()",
          "definition": "Verify_duty_assignments_without_org_in_file_employs_with__(string orgName)"
        },
        "sethumanresourceimportstouse()": {
          "name": "Set_Human_Resource_Imports_to__use",
          "key": "sethumanresourceimportstouse()",
          "definition": "Set_Human_Resource_Imports_to__use(string inUse)"
        },
        "whenimportfileincludesonlyadutyassignmentemploythemwith()": {
          "name": "When_import_file_includes_only_a_duty_assignment_employ_them_with",
          "key": "whenimportfileincludesonlyadutyassignmentemploythemwith()",
          "definition": "When_import_file_includes_only_a_duty_assignment_employ_them_with(string orgName)"
        }
      },
      "key": "humanresourceimportmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "HumanResourceImportManagement",
      "instance-name": "HumanResourceImportManagement"
    },
    "setup": {
      "namespace": "",
      "methods": {
        "preventfromseeingclasses()": {
          "name": "Prevent__from_seeing__classes",
          "key": "preventfromseeingclasses()",
          "definition": "Prevent__from_seeing__classes(string username, string activeOrHistorical)"
        },
        "allowtoonlyseestudents()": {
          "name": "Allow__to_only_see_students",
          "key": "allowtoonlyseestudents()",
          "definition": "Allow__to_only_see_students(string username)"
        },
        "allowtoviewrecords()": {
          "name": "Allow__to_view__records",
          "key": "allowtoviewrecords()",
          "definition": "Allow__to_view__records(string username, string permission)"
        },
        "preventfromviewingrecords()": {
          "name": "Prevent__from_viewing__records",
          "key": "preventfromviewingrecords()",
          "definition": "Prevent__from_viewing__records(string username, string permission)"
        },
        "enabledatapartitioning()": {
          "name": "Enable_data_partitioning",
          "key": "enabledatapartitioning()",
          "definition": "Enable_data_partitioning()"
        },
        "disabledatapartitioning()": {
          "name": "Disable_data_partitioning",
          "key": "disabledatapartitioning()",
          "definition": "Disable_data_partitioning()"
        },
        "allowtoseeclasses()": {
          "name": "Allow__to_see__classes",
          "key": "allowtoseeclasses()",
          "definition": "Allow__to_see__classes(string username, string activeOrHistorical)"
        },
        "createpersonwithusername()": {
          "name": "Create_person__with_user_name__",
          "key": "createpersonwithusername()",
          "definition": "Create_person__with_user_name__(string name, string username)"
        },
        "createorganization()": {
          "name": "Create_organization__",
          "key": "createorganization()",
          "definition": "Create_organization__(string name)"
        },
        "allowtoseeorganization()": {
          "name": "Allow__to_see_organization__",
          "key": "allowtoseeorganization()",
          "definition": "Allow__to_see_organization__(string username, string organization)"
        },
        "allowtoeditrecords()": {
          "name": "Allow__to_edit__records",
          "key": "allowtoeditrecords()",
          "definition": "Allow__to_edit__records(string username, string permission)"
        },
        "setgraceperiodtodays()": {
          "name": "Set_grace_period_to__days",
          "key": "setgraceperiodtodays()",
          "definition": "Set_grace_period_to__days(int days)"
        }
      },
      "key": "setup",
      "is-parent": true,
      "parent-name": null,
      "class-name": "SetupWorkflow",
      "instance-name": "Setup"
    },
    "inservicetrainingmanagement": {
      "namespace": "",
      "methods": {
        "verifyoneeventwithhourswascreated()": {
          "name": "Verify_one_event_with__hours_was_created",
          "key": "verifyoneeventwithhourswascreated()",
          "definition": "Verify_one_event_with__hours_was_created(string expectedHours)"
        },
        "verifytheeventisintheapprovedstatus()": {
          "name": "Verify_the_event_is_in_the_approved_status",
          "key": "verifytheeventisintheapprovedstatus()",
          "definition": "Verify_the_event_is_in_the_approved_status()"
        },
        "verifytheeventcontainsattendeenamed()": {
          "name": "Verify_the_event_contains_attendee_named__",
          "key": "verifytheeventcontainsattendeenamed()",
          "definition": "Verify_the_event_contains_attendee_named__(string attendeeName)"
        },
        "approveevent()": {
          "name": "Approve_event",
          "key": "approveevent()",
          "definition": "Approve_event()"
        },
        "verifyeventswerecreated()": {
          "name": "Verify__events_were_created",
          "key": "verifyeventswerecreated()",
          "definition": "Verify__events_were_created(int eventCout)"
        },
        "verifyeventisinsubmittedstatus()": {
          "name": "Verify_event_is_in_submitted_status",
          "key": "verifyeventisinsubmittedstatus()",
          "definition": "Verify_event_is_in_submitted_status()"
        },
        "verifytheeventhasattendees()": {
          "name": "Verify_the_event_has__attendees",
          "key": "verifytheeventhasattendees()",
          "definition": "Verify_the_event_has__attendees(int attendeeCount)"
        },
        "useeventnamed()": {
          "name": "Use_event_named__",
          "key": "useeventnamed()",
          "definition": "Use_event_named__(string eventName)"
        },
        "useeventsnamed()": {
          "name": "Use_events_named__",
          "key": "useeventsnamed()",
          "definition": "Use_events_named__(string eventName)"
        }
      },
      "key": "inservicetrainingmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "InServiceTrainingManagement",
      "instance-name": "InServiceTrainingManagement"
    },
    "trainingmanagement": {
      "namespace": "",
      "methods": {
        "createprogramcategory()": {
          "name": "Create_Program_Category",
          "key": "createprogramcategory()",
          "definition": "Create_Program_Category(string categoryName)"
        }
      },
      "key": "trainingmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "TrainingManagement",
      "instance-name": "TrainingManagement"
    },
    "xadrinvokegetusertests": {
      "namespace": "",
      "methods": {
        "testxadrinvokealiases()": {
          "name": "TestXadrInvokeAliases",
          "key": "testxadrinvokealiases()",
          "definition": "TestXadrInvokeAliases()"
        },
        "testexecspxmlwitharrayxmlxpath()": {
          "name": "TestExecSPXmlWithArrayXmlXpath",
          "key": "testexecspxmlwitharrayxmlxpath()",
          "definition": "TestExecSPXmlWithArrayXmlXpath()"
        },
        "testexecspxmlwithxmlxpath()": {
          "name": "TestExecSPXmlWithXmlXpath",
          "key": "testexecspxmlwithxmlxpath()",
          "definition": "TestExecSPXmlWithXmlXpath()"
        },
        "testexecspxml()": {
          "name": "TestExecSPXml",
          "key": "testexecspxml()",
          "definition": "TestExecSPXml()"
        },
        "testexecspxmlwitharray()": {
          "name": "TestExecSPXmlWithArray",
          "key": "testexecspxmlwitharray()",
          "definition": "TestExecSPXmlWithArray()"
        },
        "testinvoke()": {
          "name": "TestInvoke",
          "key": "testinvoke()",
          "definition": "TestInvoke()"
        }
      },
      "key": "xadrinvokegetusertests",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "XadrInvokeGetUserTests",
      "instance-name": "XadrInvokeGetUserTests"
    },
    "testopiareadonlydbconnectionfactory": {
      "namespace": "",
      "methods": {
        
      },
      "key": "testopiareadonlydbconnectionfactory",
      "is-parent": false,
      "parent-name": null,
      "class-name": "TestopiaReadonlyDBConnectionFactory",
      "instance-name": "TestopiaReadonlyDBConnectionFactory"
    },
    "testopiaobjectbuilder": {
      "namespace": "",
      "methods": {
        
      },
      "key": "testopiaobjectbuilder",
      "is-parent": false,
      "parent-name": null,
      "class-name": "TestopiaObjectBuilder",
      "instance-name": "TestopiaObjectBuilder"
    },
    "heightdata": {
      "namespace": "",
      "methods": {
        
      },
      "key": "heightdata",
      "is-parent": false,
      "parent-name": null,
      "class-name": "HeightData",
      "instance-name": "HeightData"
    },
    "surveymanagement": {
      "namespace": "",
      "methods": {
        "verifyastudentsurveyresponseforwasgeneratedforinclasswithacohortof()": {
          "name": "Verify_a_student_survey_response_for__was_generated_for__in_class__with_a_cohort_of__",
          "key": "verifyastudentsurveyresponseforwasgeneratedforinclasswithacohortof()",
          "definition": "Verify_a_student_survey_response_for__was_generated_for__in_class__with_a_cohort_of__(string surveyName, string personName, string className, string cohortName)"
        },
        "verifyasendingorganizationsurveyresponseforwasgeneratedforinclasswithacohortof()": {
          "name": "Verify_a_sending_organization_survey_response_for__was_generated_for__in_class__with_a_cohort_of__",
          "key": "verifyasendingorganizationsurveyresponseforwasgeneratedforinclasswithacohortof()",
          "definition": "Verify_a_sending_organization_survey_response_for__was_generated_for__in_class__with_a_cohort_of__(string surveyName, string personName, string className, string cohortName)"
        },
        "verifynosendingorganizationsurveyresponsesforweregeneratedforinclass()": {
          "name": "Verify_no_sending_organization_survey_responses_for_were_generated_for_in_class",
          "key": "verifynosendingorganizationsurveyresponsesforweregeneratedforinclass()",
          "definition": "Verify_no_sending_organization_survey_responses_for_were_generated_for_in_class(string surveyName, string personName, string className)"
        },
        "verifyasupervisorsurveyresponseforwasgeneratedforinclasswithacohortofandstudent()": {
          "name": "Verify_a_supervisor_survey_response_for__was_generated_for__in_class__with_a_cohort_of__and_student__",
          "key": "verifyasupervisorsurveyresponseforwasgeneratedforinclasswithacohortofandstudent()",
          "definition": "Verify_a_supervisor_survey_response_for__was_generated_for__in_class__with_a_cohort_of__and_student__(string surveyName, string personName, string className, string cohortName, string studentName)"
        },
        "verifynostaffsurveyresponsesforweregeneratedforinclass()": {
          "name": "Verify_no_staff_survey_responses_for__were_generated_for__in_class__",
          "key": "verifynostaffsurveyresponsesforweregeneratedforinclass()",
          "definition": "Verify_no_staff_survey_responses_for__were_generated_for__in_class__(string surveyName, string personName, string className)"
        },
        "verifyastaffsurveyresponseforwasgeneratedforinclasswithacohortof()": {
          "name": "Verify_a_staff_survey_response_for__was_generated_for__in_class__with_a_cohort_of__",
          "key": "verifyastaffsurveyresponseforwasgeneratedforinclasswithacohortof()",
          "definition": "Verify_a_staff_survey_response_for__was_generated_for__in_class__with_a_cohort_of__(string surveyName, string personName, string className, string cohortName)"
        },
        "verifyasurveyresponseforwasgeneratedwithacohortof()": {
          "name": "Verify_a_survey_response_for__was_generated_with_a_cohort_of__",
          "key": "verifyasurveyresponseforwasgeneratedwithacohortof()",
          "definition": "Verify_a_survey_response_for__was_generated_with_a_cohort_of__(string surveyName, string cohortName)"
        },
        "verifyresponsesforweregeneratedforcohort()": {
          "name": "Verify__responses_for__were_generated_for_cohort__",
          "key": "verifyresponsesforweregeneratedforcohort()",
          "definition": "Verify__responses_for__were_generated_for_cohort__(int numResponses, string surveyName, string cohortName)"
        }
      },
      "key": "surveymanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "SurveyManagement",
      "instance-name": "SurveyManagement"
    },
    "gradingscalemanagement": {
      "namespace": "",
      "methods": {
        "savescale()": {
          "name": "Save_Scale",
          "key": "savescale()",
          "definition": "Save_Scale()"
        },
        "ahighscoreisthanalowscore()": {
          "name": "A_high_score_is_than_a_low_score",
          "key": "ahighscoreisthanalowscore()",
          "definition": "A_high_score_is_than_a_low_score(string betterOrWorse)"
        },
        "addscalerangeformattedfromtois()": {
          "name": "Add_Scale_range_formatted__from__to__is__",
          "key": "addscalerangeformattedfromtois()",
          "definition": "Add_Scale_range_formatted__from__to__is__(TimeEntryFormat format, string min, string max, decimal grade)"
        },
        "verifytimedscalehasminimum()": {
          "name": "Verify_Timed_Scale_has_Minimum",
          "key": "verifytimedscalehasminimum()",
          "definition": "Verify_Timed_Scale_has_Minimum()"
        },
        "verifyscalehasranges()": {
          "name": "Verify_Scale_has_ranges",
          "key": "verifyscalehasranges()",
          "definition": "Verify_Scale_has_ranges( int expected )"
        },
        "timedscalehightimeisthanlowtime()": {
          "name": "Timed_Scale_high_time_is_than_low_time",
          "key": "timedscalehightimeisthanlowtime()",
          "definition": "Timed_Scale_high_time_is_than_low_time(string betterOrWorse)"
        },
        "verifyrangewithgradeisfromto()": {
          "name": "Verify_range_with_grade_is_from_to",
          "key": "verifyrangewithgradeisfromto()",
          "definition": "Verify_range_with_grade_is_from_to(decimal grade, string min, string max)"
        },
        "validatingscalefortestreturnsoverlapvalidation()": {
          "name": "Validating_scale_for_test_returns_overlap_validation",
          "key": "validatingscalefortestreturnsoverlapvalidation()",
          "definition": "Validating_scale_for_test_returns_overlap_validation(string testName)"
        },
        "timedscaledoesnothavemaximum()": {
          "name": "Timed_Scale_does_not_have_Maximum",
          "key": "timedscaledoesnothavemaximum()",
          "definition": "Timed_Scale_does_not_have_Maximum()"
        },
        "addscalerangefromtowithgradeisrated()": {
          "name": "Add_Scale_range_from_to_with_grade_is_rated",
          "key": "addscalerangefromtowithgradeisrated()",
          "definition": "Add_Scale_range_from_to_with_grade_is_rated(string min, string max, decimal grade, string rated)"
        },
        "verifytimedscaledoesnothavemaximum()": {
          "name": "Verify_Timed_Scale_does_not_have_Maximum",
          "key": "verifytimedscaledoesnothavemaximum()",
          "definition": "Verify_Timed_Scale_does_not_have_Maximum()"
        },
        "timedscaledoesnothaveminimum()": {
          "name": "Timed_Scale_does_not_have_Minimum",
          "key": "timedscaledoesnothaveminimum()",
          "definition": "Timed_Scale_does_not_have_Minimum()"
        },
        "verifyhightimeisthanlowtime()": {
          "name": "Verify_high_time_is_than_low_time",
          "key": "verifyhightimeisthanlowtime()",
          "definition": "Verify_high_time_is_than_low_time( string betterOrWorse )"
        },
        "definenumericscale()": {
          "name": "Define_numeric_scale",
          "key": "definenumericscale()",
          "definition": "Define_numeric_scale(string scaleName)"
        },
        "retrievelistofscales()": {
          "name": "Retrieve_List_of_Scales",
          "key": "retrievelistofscales()",
          "definition": "Retrieve_List_of_Scales()"
        },
        "removerangewithgrade()": {
          "name": "Remove_Range_with_Grade",
          "key": "removerangewithgrade()",
          "definition": "Remove_Range_with_Grade( int grade )"
        },
        "addscalerangefromtois()": {
          "name": "Add_Scale_range_from_to_is",
          "key": "addscalerangefromtois()",
          "definition": "Add_Scale_range_from_to_is(string min, string max, decimal grade)"
        },
        "validatingscalefortestreturnsgapvalidation()": {
          "name": "Validating_scale_for_test_returns_gap_validation",
          "key": "validatingscalefortestreturnsgapvalidation()",
          "definition": "Validating_scale_for_test_returns_gap_validation(string testName)"
        },
        "makeretrievedscalenamedthetopic()": {
          "name": "Make_retrieved_scale_named_the_topic",
          "key": "makeretrievedscalenamedthetopic()",
          "definition": "Make_retrieved_scale_named_the_topic( string scaleName )"
        },
        "loadscalenamed()": {
          "name": "Load_scale_named",
          "key": "loadscalenamed()",
          "definition": "Load_scale_named(string scaleName)"
        },
        "definetimedscale()": {
          "name": "Define_Timed_Scale",
          "key": "definetimedscale()",
          "definition": "Define_Timed_Scale( string scaleName )"
        }
      },
      "key": "gradingscalemanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "GradingScaleManagement",
      "instance-name": "GradingScaleManagement"
    },
    "certificationverification": {
      "namespace": "",
      "methods": {
        "verifyforhasexpirationfromtoday()": {
          "name": "Verify__for____has_expiration____from_today",
          "key": "verifyforhasexpirationfromtoday()",
          "definition": "Verify__for____has_expiration____from_today(string certVersionName, string recipientType, string recipientName, int expireInterval, string expireTimeUnit)"
        },
        "verifycurrentversionofwillbaserenewalexpirationonrenewaldate()": {
          "name": "Verify_current_version_of__will_base_renewal_expiration_on_renewal_date",
          "key": "verifycurrentversionofwillbaserenewalexpirationonrenewaldate()",
          "definition": "Verify_current_version_of__will_base_renewal_expiration_on_renewal_date(string certMasterName)"
        },
        "verifyforhasexpirationoftoday()": {
          "name": "Verify__for____has_expiration_of_today",
          "key": "verifyforhasexpirationoftoday()",
          "definition": "Verify__for____has_expiration_of_today(string certVersionName, string recipientType, string recipientName)"
        },
        "verifyforhasanactionofwithastatusofnocommentsaneffectivedateoftodayandcontingentexpiration()": {
          "name": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of_today_and_contingent_expiration",
          "key": "verifyforhasanactionofwithastatusofnocommentsaneffectivedateoftodayandcontingentexpiration()",
          "definition": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of_today_and_contingent_expiration(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus)"
        },
        "verifyforhasanactionofwithastatusofnocommentsaneffectivedateofandcontingentexpiration()": {
          "name": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of__and_contingent_expiration",
          "key": "verifyforhasanactionofwithastatusofnocommentsaneffectivedateofandcontingentexpiration()",
          "definition": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of__and_contingent_expiration(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, DateTime actionEffectiveDate)"
        },
        "verifyconferralrequirementoncannotbeeditedbecauseofreuse()": {
          "name": "Verify__conferral_requirement__on__cannot_be_edited_because_of_reuse",
          "key": "verifyconferralrequirementoncannotbeeditedbecauseofreuse()",
          "definition": "Verify__conferral_requirement__on__cannot_be_edited_because_of_reuse(CertRequirementContext requirementType, string requirementText, string certMasterName)"
        },
        "verifycurrentversionofhasprinttemplateof()": {
          "name": "Verify_current_version_of__has_print_template_of__",
          "key": "verifycurrentversionofhasprinttemplateof()",
          "definition": "Verify_current_version_of__has_print_template_of__(string certMasterName, string tenplate)"
        },
        "verifycurrentversionofhasdisciplineof()": {
          "name": "Verify_current_version_of__has_discipline_of__",
          "key": "verifycurrentversionofhasdisciplineof()",
          "definition": "Verify_current_version_of__has_discipline_of__(string certMasterName, string discipline)"
        },
        "verifycurrentversionofwillbaserenewalexpirationoncurrentexpiration()": {
          "name": "Verify_current_version_of__will_base_renewal_expiration_on_current_expiration",
          "key": "verifycurrentversionofwillbaserenewalexpirationoncurrentexpiration()",
          "definition": "Verify_current_version_of__will_base_renewal_expiration_on_current_expiration(string certMasterName)"
        },
        "verifyforhasexpirationof()": {
          "name": "Verify__for____has_expiration_of__",
          "key": "verifyforhasexpirationof()",
          "definition": "Verify__for____has_expiration_of__(string certVersionName, string recipientType, string recipientName, DateTime expirationDate)"
        },
        "verifycurrentversionofhasbriefdescriptionof()": {
          "name": "Verify_current_version_of__has_brief_description_of__",
          "key": "verifycurrentversionofhasbriefdescriptionof()",
          "definition": "Verify_current_version_of__has_brief_description_of__(string masterName, string description)"
        },
        "verifyforhasanactionofwithastatusofnocommentsaneffectivedateofandnoexpirationdate()": {
          "name": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of__and_no_expiration_date",
          "key": "verifyforhasanactionofwithastatusofnocommentsaneffectivedateofandnoexpirationdate()",
          "definition": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of__and_no_expiration_date(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, DateTime actionEffectiveDate)"
        },
        "verifyforhasanactionofwithastatusofacommentofaneffectivedateoftodayandanexpirationdatefromtoday()": {
          "name": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of_today_and_an_expiration_date____from_today",
          "key": "verifyforhasanactionofwithastatusofacommentofaneffectivedateoftodayandanexpirationdatefromtoday()",
          "definition": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of_today_and_an_expiration_date____from_today(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment, int expireInterval, string expireTimeUnit)"
        },
        "verifycurrentversionofhasaffirmationtextof()": {
          "name": "Verify_current_version_of__has_affirmation_text_of__",
          "key": "verifycurrentversionofhasaffirmationtextof()",
          "definition": "Verify_current_version_of__has_affirmation_text_of__(string certMasterName, string affirmationTxt)"
        },
        "verifythateveryoneingrouphascertautorenewedwithexpiration()": {
          "name": "Verify_that_everyone_in_group_has_cert_autorenewed_with_expiration_",
          "key": "verifythateveryoneingrouphascertautorenewedwithexpiration()",
          "definition": "Verify_that_everyone_in_group_has_cert_autorenewed_with_expiration_(string groupName, string certVersionName, DateTime expirationDate)"
        },
        "verifyforhasanactionofwithastatusofnocommentsaneffectivedateoftodayandanexpirationdatefromtoday()": {
          "name": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of_today_and_an_expiration_date____from_today",
          "key": "verifyforhasanactionofwithastatusofnocommentsaneffectivedateoftodayandanexpirationdatefromtoday()",
          "definition": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of_today_and_an_expiration_date____from_today(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, int expireInterval, string expireTimeUnit)"
        },
        "verifycurrentversionofhasauditnotificationtextof()": {
          "name": "Verify_current_version_of__has_audit_notification_text_of__",
          "key": "verifycurrentversionofhasauditnotificationtextof()",
          "definition": "Verify_current_version_of__has_audit_notification_text_of__(string certMasterName, string auditNotifTxt)"
        },
        "verifyforhasanactionofwithastatusofacommentofaneffectivedateoftodayandanexpirationdateoftoday()": {
          "name": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of_today_and_an_expiration_date_of_today",
          "key": "verifyforhasanactionofwithastatusofacommentofaneffectivedateoftodayandanexpirationdateoftoday()",
          "definition": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of_today_and_an_expiration_date_of_today(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment)"
        },
        "verifycurrentversionofhasrenewalrequirements()": {
          "name": "Verify_current_version_of__has__renewal_requirements",
          "key": "verifycurrentversionofhasrenewalrequirements()",
          "definition": "Verify_current_version_of__has__renewal_requirements(string certMasterName, int numReqs)"
        },
        "verifycurrentversionofallowsinactiverenewals()": {
          "name": "Verify_current_version_of__allows_inactive_renewals",
          "key": "verifycurrentversionofallowsinactiverenewals()",
          "definition": "Verify_current_version_of__allows_inactive_renewals(string certMasterName)"
        },
        "verifycurrentversionofhasguidelinetextof()": {
          "name": "Verify_current_version_of__has_guideline_text_of__",
          "key": "verifycurrentversionofhasguidelinetextof()",
          "definition": "Verify_current_version_of__has_guideline_text_of__(string certMasterName, string guidelineTxt)"
        },
        "verifycurrentversionofhasreferencenumberof()": {
          "name": "Verify_current_version_of__has_reference_number_of__",
          "key": "verifycurrentversionofhasreferencenumberof()",
          "definition": "Verify_current_version_of__has_reference_number_of__(string masterName, string referenceNumber)"
        },
        "verifyforhasissuedateof()": {
          "name": "Verify__for____has_issue_date_of__",
          "key": "verifyforhasissuedateof()",
          "definition": "Verify__for____has_issue_date_of__(string certVersionName, string recipientType, string recipientName, DateTime issueDate)"
        },
        "verifyconferralrequirementoncanbeedited()": {
          "name": "Verify__conferral_requirement__on__can_be_edited",
          "key": "verifyconferralrequirementoncanbeedited()",
          "definition": "Verify__conferral_requirement__on__can_be_edited(CertRequirementContext requirementType, string requirementText, string certMasterName)"
        },
        "verifyforhasanactionofwithastatusofacommentofaneffectivedateoftodayplusandanexpirationdateof()": {
          "name": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of_today_plus____and_an_expiration_date_of__",
          "key": "verifyforhasanactionofwithastatusofacommentofaneffectivedateoftodayplusandanexpirationdateof()",
          "definition": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of_today_plus____and_an_expiration_date_of__(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment, int effDateInterval, string effDateTimeUnit, DateTime actionExpirationDate)"
        },
        "verifyforhasothercertificationidof()": {
          "name": "Verify__for____has_other_certification_ID_of__",
          "key": "verifyforhasothercertificationidof()",
          "definition": "Verify__for____has_other_certification_ID_of__(string certVersionName, string recipientType, string recipientName, string otherNumber)"
        },
        "verifyforhasanactionofwithastatusofnocommentsaneffectivedateoftodayplusandanexpirationdateof()": {
          "name": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of_today_plus____and_an_expiration_date_of__",
          "key": "verifyforhasanactionofwithastatusofnocommentsaneffectivedateoftodayplusandanexpirationdateof()",
          "definition": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of_today_plus____and_an_expiration_date_of__(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, int effDateInterval, string effDateTimeUnit, DateTime actionExpirationDate)"
        },
        "verifycurrentversionofdoesnotallowinactiverenewals()": {
          "name": "Verify_current_version_of__does_not_allow_inactive_renewals",
          "key": "verifycurrentversionofdoesnotallowinactiverenewals()",
          "definition": "Verify_current_version_of__does_not_allow_inactive_renewals(string certMasterName)"
        },
        "verifyforhasanactionofwithastatusofnocommentsaneffectivedateoftodayandanexpirationdateof()": {
          "name": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of_today_and_an_expiration_date_of__",
          "key": "verifyforhasanactionofwithastatusofnocommentsaneffectivedateoftodayandanexpirationdateof()",
          "definition": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of_today_and_an_expiration_date_of__(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, DateTime actionExpirationDate)"
        },
        "verifydoesnothavesamerequirementsas()": {
          "name": "Verify__does_not_have_same_requirements_as__",
          "key": "verifydoesnothavesamerequirementsas()",
          "definition": "Verify__does_not_have_same_requirements_as__(string certName1, string certName2)"
        },
        "verifycurrentversionofhasauditpercentageof()": {
          "name": "Verify_current_version_of__has_audit_percentage_of__",
          "key": "verifycurrentversionofhasauditpercentageof()",
          "definition": "Verify_current_version_of__has_audit_percentage_of__(string certMasterName, int percentage)"
        },
        "verifythatdoesnothavecertification()": {
          "name": "Verify_that____does_not_have_certification",
          "key": "verifythatdoesnothavecertification()",
          "definition": "Verify_that____does_not_have_certification(string recipientType, string recipientName, string certVersionName)"
        },
        "verifycurrentversionofisoftype()": {
          "name": "Verify_current_version_of__is_of_type",
          "key": "verifycurrentversionofisoftype()",
          "definition": "Verify_current_version_of__is_of_type(string masterName, string type)"
        },
        "verifyforhasanactionofwithastatusofacommentofaneffectivedateoftodayplusandanexpirationdatefromtoday()": {
          "name": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of_today_plus____and_an_expiration_date____from_today",
          "key": "verifyforhasanactionofwithastatusofacommentofaneffectivedateoftodayplusandanexpirationdatefromtoday()",
          "definition": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of_today_plus____and_an_expiration_date____from_today(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment, int effDateInterval, string effDateTimeUnit, int expireInterval, string expireTimeUnit)"
        },
        "verifythatnorecipienthascertification()": {
          "name": "Verify_that_no_recipient_has_certification__",
          "key": "verifythatnorecipienthascertification()",
          "definition": "Verify_that_no_recipient_has_certification__(string certVersionName)"
        },
        "verifyforhasactions()": {
          "name": "Verify__for____has__actions",
          "key": "verifyforhasactions()",
          "definition": "Verify__for____has__actions(string certVersionName, string recipientType, string recipientName, int numActions)"
        },
        "verifyforhasnotbeenprinted()": {
          "name": "Verify__for____has_not_been_printed",
          "key": "verifyforhasnotbeenprinted()",
          "definition": "Verify__for____has_not_been_printed(string certVersionName, string recipientType, string recipientName)"
        },
        "verifyforhasanactionofwithastatusofnocommentsaneffectivedateoftodayandnoexpirationdate()": {
          "name": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of_today_and_no_expiration_date",
          "key": "verifyforhasanactionofwithastatusofnocommentsaneffectivedateoftodayandnoexpirationdate()",
          "definition": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of_today_and_no_expiration_date(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus)"
        },
        "verifyforhasanactionofwithastatusofacommentofaneffectivedateofandanexpirationdateof()": {
          "name": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of__and_an_expiration_date_of__",
          "key": "verifyforhasanactionofwithastatusofacommentofaneffectivedateofandanexpirationdateof()",
          "definition": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of__and_an_expiration_date_of__(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment, DateTime actionEffectiveDate, DateTime actionExpirationDate)"
        },
        "verifyhassamerequirementsas()": {
          "name": "Verify__has_same_requirements_as__",
          "key": "verifyhassamerequirementsas()",
          "definition": "Verify__has_same_requirements_as__(string certName1, string certName2)"
        },
        "verifycurrentversionofhasnoowner()": {
          "name": "Verify_current_version_of__has_no_owner",
          "key": "verifycurrentversionofhasnoowner()",
          "definition": "Verify_current_version_of__has_no_owner(string certMasterName)"
        },
        "verifyforhasanactionofwithastatusofacommentofaneffectivedateofandcontingentexpiration()": {
          "name": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of__and_contingent_expiration",
          "key": "verifyforhasanactionofwithastatusofacommentofaneffectivedateofandcontingentexpiration()",
          "definition": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of__and_contingent_expiration(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment, DateTime actionEffectiveDate)"
        },
        "verifycurrentversionofhasguidelinesof()": {
          "name": "Verify_current_version_of__has_guidelines_of__",
          "key": "verifycurrentversionofhasguidelinesof()",
          "definition": "Verify_current_version_of__has_guidelines_of__(string masterName, string guideline)"
        },
        "verifyforhasanactionofwithastatusofacommentofaneffectivedateofandnoexpirationdate()": {
          "name": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of__and_no_expiration_date",
          "key": "verifyforhasanactionofwithastatusofacommentofaneffectivedateofandnoexpirationdate()",
          "definition": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of__and_no_expiration_date(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment, DateTime actionEffectiveDate)"
        },
        "verifyforhasadeletedactionofwithastatusofacommentofaneffectivedateofandanexpirationdateof()": {
          "name": "Verify__for____has_a_deleted_action_of__with_a_status_of__a_comment_of__an_effective_date_of__and_an_expiration_date_of__",
          "key": "verifyforhasadeletedactionofwithastatusofacommentofaneffectivedateofandanexpirationdateof()",
          "definition": "Verify__for____has_a_deleted_action_of__with_a_status_of__a_comment_of__an_effective_date_of__and_an_expiration_date_of__(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment, DateTime actionEffectiveDate, DateTime actionExpirationDate)"
        },
        "verifycurrentversionofportalrenewalrequiresrequirementfulfillment()": {
          "name": "Verify_current_version_of__portal_renewal_requires_requirement_fulfillment",
          "key": "verifycurrentversionofportalrenewalrequiresrequirementfulfillment()",
          "definition": "Verify_current_version_of__portal_renewal_requires_requirement_fulfillment(string certMasterName)"
        },
        "verifycurrentversionofportalrenewalrequiresrequirementaffirmationonly()": {
          "name": "Verify_current_version_of__portal_renewal_requires_requirement_affirmation_only",
          "key": "verifycurrentversionofportalrenewalrequiresrequirementaffirmationonly()",
          "definition": "Verify_current_version_of__portal_renewal_requires_requirement_affirmation_only(string certMasterName)"
        },
        "verifycurrentversionofdoesnotexpire()": {
          "name": "Verify_current_version_of__does_not_expire",
          "key": "verifycurrentversionofdoesnotexpire()",
          "definition": "Verify_current_version_of__does_not_expire(string masterName)"
        },
        "verifyforhasanactionofwithastatusofnocommentsaneffectivedateofandanexpirationdateof()": {
          "name": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of__and_an_expiration_date_of__",
          "key": "verifyforhasanactionofwithastatusofnocommentsaneffectivedateofandanexpirationdateof()",
          "definition": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of__and_an_expiration_date_of__(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, DateTime actionEffectiveDate, DateTime actionExpirationDate)"
        },
        "verifyforhasanactionofwithastatusofacommentofaneffectivedateofandanexpirationdatefromtoday()": {
          "name": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of__and_an_expiration_date____from_today",
          "key": "verifyforhasanactionofwithastatusofacommentofaneffectivedateofandanexpirationdatefromtoday()",
          "definition": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of__and_an_expiration_date____from_today(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment, DateTime actionEffectiveDate, int expireInterval, string expireTimeUnit)"
        },
        "verifyforhasnoexpiration()": {
          "name": "Verify__for____has_no_expiration",
          "key": "verifyforhasnoexpiration()",
          "definition": "Verify__for____has_no_expiration(string certVersionName, string recipientType, string recipientName)"
        },
        "verifyforhasissuedateoftodayplus()": {
          "name": "Verify__for____has_issue_date_of_today_plus____",
          "key": "verifyforhasissuedateoftodayplus()",
          "definition": "Verify__for____has_issue_date_of_today_plus____(string certVersionName, string recipientType, string recipientName, int interval, string timeUnit)"
        },
        "verifyforhasanactionofwithastatusofnocommentsaneffectivedateoftodayplusandanexpirationdatefromtoday()": {
          "name": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of_today_plus____and_an_expiration_date____from_today",
          "key": "verifyforhasanactionofwithastatusofnocommentsaneffectivedateoftodayplusandanexpirationdatefromtoday()",
          "definition": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of_today_plus____and_an_expiration_date____from_today(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, int effDateInterval, string effDateTimeUnit, int expireInterval, string expireTimeUnit)"
        },
        "verifyforhasadeletedactionofwithastatusofacommentofaneffectivedateofandnoexpirationdate()": {
          "name": "Verify__for____has_a_deleted_action_of__with_a_status_of__a_comment_of__an_effective_date_of__and_no_expiration_date",
          "key": "verifyforhasadeletedactionofwithastatusofacommentofaneffectivedateofandnoexpirationdate()",
          "definition": "Verify__for____has_a_deleted_action_of__with_a_status_of__a_comment_of__an_effective_date_of__and_no_expiration_date(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment, DateTime actionEffectiveDate)"
        },
        "verifythereareversionsof()": {
          "name": "Verify_there_are__versions_of_",
          "key": "verifythereareversionsof()",
          "definition": "Verify_there_are__versions_of_(int expectedNumber, string masterName)"
        },
        "verifycurrentversionofhasnoprinttemplate()": {
          "name": "Verify_current_version_of__has_no_print_template",
          "key": "verifycurrentversionofhasnoprinttemplate()",
          "definition": "Verify_current_version_of__has_no_print_template(string certMasterName)"
        },
        "verifycurrentversionofexpiresevery()": {
          "name": "Verify_current_version_of__expires_every____",
          "key": "verifycurrentversionofexpiresevery()",
          "definition": "Verify_current_version_of__expires_every____(string masterName, int expireInterval, string expireType)"
        },
        "verifycurrentversionofhasownerof()": {
          "name": "Verify_current_version_of__has_owner_of__",
          "key": "verifycurrentversionofhasownerof()",
          "definition": "Verify_current_version_of__has_owner_of__(string certMasterName, string ownerName)"
        },
        "verifythathascertificationwithstatus()": {
          "name": "Verify_that____has_certification__with_status",
          "key": "verifythathascertificationwithstatus()",
          "definition": "Verify_that____has_certification__with_status(string recipientType, string recipientName, string certVersionName, string statusName)"
        },
        "verifyforhasanactionofwithastatusofnocommentsaneffectivedateoftodayplusandanexpirationdateoftoday()": {
          "name": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of_today_plus____and_an_expiration_date_of_today",
          "key": "verifyforhasanactionofwithastatusofnocommentsaneffectivedateoftodayplusandanexpirationdateoftoday()",
          "definition": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of_today_plus____and_an_expiration_date_of_today(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, int effDateInterval, string effDateTimeUnit)"
        },
        "verifyforhasanactionofwithastatusofacommentofaneffectivedateoftodayandanexpirationdateof()": {
          "name": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of_today_and_an_expiration_date_of__",
          "key": "verifyforhasanactionofwithastatusofacommentofaneffectivedateoftodayandanexpirationdateof()",
          "definition": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of_today_and_an_expiration_date_of__(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment, DateTime actionExpirationDate)"
        },
        "verifythathascertificationapplicationfor()": {
          "name": "Verify_that____has__certification_application_for__",
          "key": "verifythathascertificationapplicationfor()",
          "definition": "Verify_that____has__certification_application_for__(string recipientType, string recipientName, string statusName, string certVersionName)"
        },
        "verifyforhasanactionofwithastatusofacommentofaneffectivedateoftodayandnoexpirationdate()": {
          "name": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of_today_and_no_expiration_date",
          "key": "verifyforhasanactionofwithastatusofacommentofaneffectivedateoftodayandnoexpirationdate()",
          "definition": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of_today_and_no_expiration_date(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment)"
        },
        "verifyforhasissuedateoftoday()": {
          "name": "Verify__for____has_issue_date_of_today",
          "key": "verifyforhasissuedateoftoday()",
          "definition": "Verify__for____has_issue_date_of_today(string certVersionName, string recipientType, string recipientName)"
        },
        "verifyitemonhasnoguidelines()": {
          "name": "Verify__item__on__has_no_guidelines",
          "key": "verifyitemonhasnoguidelines()",
          "definition": "Verify__item__on__has_no_guidelines(CertRequirementContext requirementType, string requirementText, string certMasterName)"
        },
        "verifyforhasnoothercertificationid()": {
          "name": "Verify__for____has_no_other_certification_ID",
          "key": "verifyforhasnoothercertificationid()",
          "definition": "Verify__for____has_no_other_certification_ID(string certVersionName, string recipientType, string recipientName)"
        },
        "verifycurrentversionofhasconferralrequirements()": {
          "name": "Verify_current_version_of__has__conferral_requirements",
          "key": "verifycurrentversionofhasconferralrequirements()",
          "definition": "Verify_current_version_of__has__conferral_requirements(string certMasterName, int numReqs)"
        },
        "verifycurrentversionofactive()": {
          "name": "Verify_current_version_of____active",
          "key": "verifycurrentversionofactive()",
          "definition": "Verify_current_version_of____active(string masterName, string isIsNot)"
        },
        "verifyforhascontingentexpiration()": {
          "name": "Verify__for____has_contingent_expiration",
          "key": "verifyforhascontingentexpiration()",
          "definition": "Verify__for____has_contingent_expiration(string certVersionName, string recipientType, string recipientName)"
        },
        "verifyitemonhasguidelines()": {
          "name": "Verify__item__on__has_guidelines",
          "key": "verifyitemonhasguidelines()",
          "definition": "Verify__item__on__has_guidelines(CertRequirementContext requirementType, string requirementText, string certMasterName)"
        }
      },
      "key": "certificationverification",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "CertificationVerification",
      "instance-name": "CertificationVerification"
    },
    "emailaddressdata": {
      "namespace": "",
      "methods": {
        
      },
      "key": "emailaddressdata",
      "is-parent": false,
      "parent-name": null,
      "class-name": "EmailAddressData",
      "instance-name": "EmailAddressData"
    },
    "conflictmanagement": {
      "namespace": "",
      "methods": {
        "verifyclasshasconflictonrulewithashortfallofon()": {
          "name": "Verify_class___has_conflict_on_rule__with_a_shortfall_of__on__",
          "key": "verifyclasshasconflictonrulewithashortfallofon()",
          "definition": "Verify_class___has_conflict_on_rule__with_a_shortfall_of__on__( string className, string ruleName, int shortfallQuantity, string blockName )"
        },
        "verifyblockonclasshasconflicts()": {
          "name": "Verify_block__on_class__has__conflicts",
          "key": "verifyblockonclasshasconflicts()",
          "definition": "Verify_block__on_class__has__conflicts(string blockName, string className, int conflictNum)"
        },
        "verifyblockonclasshasconflict()": {
          "name": "Verify_block__on_class__has_conflict__",
          "key": "verifyblockonclasshasconflict()",
          "definition": "Verify_block__on_class__has_conflict__(string blockName, string className, string conflictText)"
        }
      },
      "key": "conflictmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "ConflictManagement",
      "instance-name": "ConflictManagement"
    },
    "csvmanagement": {
      "namespace": "",
      "methods": {
        "inremovecolumn()": {
          "name": "In__remove_column__",
          "key": "inremovecolumn()",
          "definition": "In__remove_column__(string csvFileName, string columnName)"
        },
        "incopyandappenddatarowtotheendofthefile()": {
          "name": "In__copy_and_append_data_row__to_the_end_of_the_file",
          "key": "incopyandappenddatarowtotheendofthefile()",
          "definition": "In__copy_and_append_data_row__to_the_end_of_the_file(string csvFileName, int dataRowNumber)"
        },
        "inremoverow()": {
          "name": "In__remove_row__",
          "key": "inremoverow()",
          "definition": "In__remove_row__(string csvFileName, int dataRowNumber)"
        }
      },
      "key": "csvmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "CsvManagement",
      "instance-name": "CsvManagement"
    },
    "onlineeventmanagement": {
      "namespace": "",
      "methods": {
        "setonlineeventavailabilitytobeavailablebeginningandhasnoenddate()": {
          "name": "Set_online_event_availability_to_be_available_beginning__and_has_no_end_date",
          "key": "setonlineeventavailabilitytobeavailablebeginningandhasnoenddate()",
          "definition": "Set_online_event_availability_to_be_available_beginning__and_has_no_end_date(DateTime beginDate)"
        },
        "verifyonlineeventnamedhascost()": {
          "name": "Verify_online_event_named_has_cost",
          "key": "verifyonlineeventnamedhascost()",
          "definition": "Verify_online_event_named_has_cost(string eventName, int cost)"
        },
        "setonlineeventreferenceto()": {
          "name": "Set_online_event_reference_to",
          "key": "setonlineeventreferenceto()",
          "definition": "Set_online_event_reference_to(string reference)"
        },
        "setonlineeventavailabilitytonotbeavailableintheportal()": {
          "name": "Set_online_event_availability_to_not_be_available_in_the_portal",
          "key": "setonlineeventavailabilitytonotbeavailableintheportal()",
          "definition": "Set_online_event_availability_to_not_be_available_in_the_portal()"
        },
        "addemailaddresstoperson()": {
          "name": "Add_email_address__to_person__",
          "key": "addemailaddresstoperson()",
          "definition": "Add_email_address__to_person__(string emailAddress, string personName)"
        },
        "verifyonlineeventnamedhasreference()": {
          "name": "Verify_online_event_named_has_reference",
          "key": "verifyonlineeventnamedhasreference()",
          "definition": "Verify_online_event_named_has_reference(string eventName, string reference)"
        },
        "addpersontoonlineeventwithduedateindaysandtrainingcategory()": {
          "name": "Add_person__to_online_event__with_due_date_in__days_and_training_category",
          "key": "addpersontoonlineeventwithduedateindaysandtrainingcategory()",
          "definition": "Add_person__to_online_event__with_due_date_in__days_and_training_category(string studentName, string onlineEventName, int daysInFuture, string trainingCategory)"
        },
        "verifyonlineeventnamedhasdescription()": {
          "name": "Verify_online_event_named_has_description",
          "key": "verifyonlineeventnamedhasdescription()",
          "definition": "Verify_online_event_named_has_description(string eventName, string description)"
        },
        "setonlineeventdescriptionto()": {
          "name": "Set_online_event_description_to",
          "key": "setonlineeventdescriptionto()",
          "definition": "Set_online_event_description_to(string description)"
        },
        "createonlineeventwithnamewithownerunderprogram()": {
          "name": "Create__online_event_with_name__with_owner__under_program__",
          "key": "createonlineeventwithnamewithownerunderprogram()",
          "definition": "Create__online_event_with_name__with_owner__under_program__(string eventStatus, string eventName, string eventOwner, string programName)"
        },
        "addpersontoonlineevent()": {
          "name": "Add_person_to_online_event",
          "key": "addpersontoonlineevent()",
          "definition": "Add_person_to_online_event(string studentName, string onlineEventName)"
        },
        "setonlineeventavailabilitytobeavailablebeginningtodayandhasnoenddate()": {
          "name": "Set_online_event_availability_to_be_available_beginning_today_and_has_no_end_date",
          "key": "setonlineeventavailabilitytobeavailablebeginningtodayandhasnoenddate()",
          "definition": "Set_online_event_availability_to_be_available_beginning_today_and_has_no_end_date()"
        },
        "verifyonlineeventhascertification()": {
          "name": "Verify_online_event_has_certification",
          "key": "verifyonlineeventhascertification()",
          "definition": "Verify_online_event_has_certification(string onlineEventName, string certMasterName)"
        },
        "settheaveragegrademinimumpassingscoreto()": {
          "name": "Set_the_average_grade_minimum_passing_score_to",
          "key": "settheaveragegrademinimumpassingscoreto()",
          "definition": "Set_the_average_grade_minimum_passing_score_to(int minimumPassingScore)"
        },
        "setonlineeventtraininghourstohoursandminutes()": {
          "name": "Set_online_event_training_hours_to_hours_and_minutes",
          "key": "setonlineeventtraininghourstohoursandminutes()",
          "definition": "Set_online_event_training_hours_to_hours_and_minutes(int hours, int minutes)"
        },
        "verifypersonhasnoduedatefor()": {
          "name": "Verify_person__has_no_due_date_for__",
          "key": "verifypersonhasnoduedatefor()",
          "definition": "Verify_person__has_no_due_date_for__(string studentName, string onlineEventName)"
        },
        "addpersontoonlineeventwithduedateindays()": {
          "name": "Add_person__to_online_event__with_due_date_in__days",
          "key": "addpersontoonlineeventwithduedateindays()",
          "definition": "Add_person__to_online_event__with_due_date_in__days(string studentName, string onlineEventName, int daysInFuture)"
        },
        "setonlineeventretakesto()": {
          "name": "Set_online_event_retakes_to__",
          "key": "setonlineeventretakesto()",
          "definition": "Set_online_event_retakes_to__(string allowedDescription)"
        },
        "verifypersonhasnotrainingcategoryfor()": {
          "name": "Verify_person__has_no_training_category_for__",
          "key": "verifypersonhasnotrainingcategoryfor()",
          "definition": "Verify_person__has_no_training_category_for__(string studentName, string onlineEventName)"
        },
        "setonlineeventcompletionrequirementto()": {
          "name": "Set_online_event_completion_requirement_to",
          "key": "setonlineeventcompletionrequirementto()",
          "definition": "Set_online_event_completion_requirement_to(string completionRequirement)"
        },
        "verifypersonexistsforonlineevent()": {
          "name": "Verify_person_exists_for_online_event",
          "key": "verifypersonexistsforonlineevent()",
          "definition": "Verify_person_exists_for_online_event(string personName, string eventName)"
        },
        "verifypersonhastrainingcategoryfor()": {
          "name": "Verify_person__has_training_category__for",
          "key": "verifypersonhastrainingcategoryfor()",
          "definition": "Verify_person__has_training_category__for(string studentName, string trainingCategory, string onlineEventName)"
        },
        "setonlineeventinstructionmethodto()": {
          "name": "Set_online_event_instruction_method_to__",
          "key": "setonlineeventinstructionmethodto()",
          "definition": "Set_online_event_instruction_method_to__(string methodName)"
        },
        "verifyonlineeventnamedisavailablebeginningtodayandhasnoenddate()": {
          "name": "Verify_online_event_named_is_available_beginning_today_and_has_no_end_date",
          "key": "verifyonlineeventnamedisavailablebeginningtodayandhasnoenddate()",
          "definition": "Verify_online_event_named_is_available_beginning_today_and_has_no_end_date(string eventName)"
        },
        "saveonlineevent()": {
          "name": "Save_online_event",
          "key": "saveonlineevent()",
          "definition": "Save_online_event(string eventName)"
        },
        "setonlineeventretakecoursegradeto()": {
          "name": "Set_online_event_retake_course_grade_to__",
          "key": "setonlineeventretakecoursegradeto()",
          "definition": "Set_online_event_retake_course_grade_to__(string courseGradeDescription)"
        },
        "addpersontoonlineeventwithduedateindaysandreminderdaysbeforedueandtrainingcategory()": {
          "name": "Add_person__to_online_event__with_due_date_in__days_and_reminder__days_before_due_and_training_category",
          "key": "addpersontoonlineeventwithduedateindaysandreminderdaysbeforedueandtrainingcategory()",
          "definition": "Add_person__to_online_event__with_due_date_in__days_and_reminder__days_before_due_and_training_category(string studentName, string onlineEventName, int daysInFuture, int daysBeforeDue, string trainingCategory)"
        },
        "verifyonlineeventnamedhascontent()": {
          "name": "Verify_online_event_named_has_content",
          "key": "verifyonlineeventnamedhascontent()",
          "definition": "Verify_online_event_named_has_content(string eventName, string contentName)"
        },
        "setonlineeventretaketimeincourseto()": {
          "name": "Set_online_event_retake_time_in_course_to__",
          "key": "setonlineeventretaketimeincourseto()",
          "definition": "Set_online_event_retake_time_in_course_to__(string timeInCourseDescription)"
        },
        "setonlineeventavailabilitytobeavailablebeginningandending()": {
          "name": "Set_online_event_availability_to_be_available_beginning__and_ending__",
          "key": "setonlineeventavailabilitytobeavailablebeginningandending()",
          "definition": "Set_online_event_availability_to_be_available_beginning__and_ending__(DateTime beginDate, DateTime endDate)"
        },
        "removepersonfromonlineevent()": {
          "name": "Remove_person_from_online_event",
          "key": "removepersonfromonlineevent()",
          "definition": "Remove_person_from_online_event(string personName, string eventName)"
        },
        "addcertificationtoonlineevent()": {
          "name": "Add_certification_to_online_event",
          "key": "addcertificationtoonlineevent()",
          "definition": "Add_certification_to_online_event(string certMasterName, string onlineEventName)"
        },
        "verifypersonshouldberemindedtotakeindays()": {
          "name": "Verify_person__should_be_reminded_to_take__in__days",
          "key": "verifypersonshouldberemindedtotakeindays()",
          "definition": "Verify_person__should_be_reminded_to_take__in__days(string studentName, string onlineEventName, int daysInFuture)"
        },
        "verifyonlineeventnamedexistsandis()": {
          "name": "Verify_online_event_named_exists_and_is_",
          "key": "verifyonlineeventnamedexistsandis()",
          "definition": "Verify_online_event_named_exists_and_is_(string eventName, string eventStatus)"
        },
        "verifyonlineeventnamedhasstatusof()": {
          "name": "Verify_online_event_named_has_status_of",
          "key": "verifyonlineeventnamedhasstatusof()",
          "definition": "Verify_online_event_named_has_status_of(string eventName, string statusName)"
        },
        "verifypersondoesnotexistforonlineevent()": {
          "name": "Verify_person_does_not_exist_for_online_event",
          "key": "verifypersondoesnotexistforonlineevent()",
          "definition": "Verify_person_does_not_exist_for_online_event(string personName, string eventName)"
        },
        "addpersontoonlineeventwithduedateindaysandreminderdaysbeforedue()": {
          "name": "Add_person__to_online_event__with_due_date_in__days_and_reminder__days_before_due",
          "key": "addpersontoonlineeventwithduedateindaysandreminderdaysbeforedue()",
          "definition": "Add_person__to_online_event__with_due_date_in__days_and_reminder__days_before_due(string studentName, string onlineEventName, int daysInFuture, int daysBeforeDue)"
        },
        "verifypersonshouldnotberemindedtotake()": {
          "name": "Verify_person__should_not_be_reminded_to_take__",
          "key": "verifypersonshouldnotberemindedtotake()",
          "definition": "Verify_person__should_not_be_reminded_to_take__(string studentName, string onlineEventName)"
        },
        "addpersontoonlineeventwithtrainingcategory()": {
          "name": "Add_person_to_online_event__with_training_category",
          "key": "addpersontoonlineeventwithtrainingcategory()",
          "definition": "Add_person_to_online_event__with_training_category(string studentName, string onlineEventName, string trainingCategory)"
        },
        "setonlineeventcontentto()": {
          "name": "Set_online_event_content_to",
          "key": "setonlineeventcontentto()",
          "definition": "Set_online_event_content_to(string contentName)"
        },
        "setonlineeventcostto()": {
          "name": "Set_online_event_cost_to",
          "key": "setonlineeventcostto()",
          "definition": "Set_online_event_cost_to(int cost)"
        },
        "setceucreditsequalto()": {
          "name": "Set_ceu_credits_equal_to__",
          "key": "setceucreditsequalto()",
          "definition": "Set_ceu_credits_equal_to__(string ceuCredits)"
        },
        "verifypersonhasdueindays()": {
          "name": "Verify_person__has__due_in__days",
          "key": "verifypersonhasdueindays()",
          "definition": "Verify_person__has__due_in__days(string studentName, string onlineEventName, int daysInFuture)"
        },
        "verifyonlineeventnamedisnotavailable()": {
          "name": "Verify_online_event_named__is_not_available",
          "key": "verifyonlineeventnamedisnotavailable()",
          "definition": "Verify_online_event_named__is_not_available(string eventName)"
        },
        "verifyonlineeventnamedhascompletionrequirement()": {
          "name": "Verify_online_event_named_has_completion_requirement",
          "key": "verifyonlineeventnamedhascompletionrequirement()",
          "definition": "Verify_online_event_named_has_completion_requirement(string eventName, string completionRequirementName)"
        },
        "verifyonlineeventnamedhastraininghoursofhoursandminutes()": {
          "name": "Verify_online_event_named_has_training_hours_of_hours_and_minutes",
          "key": "verifyonlineeventnamedhastraininghoursofhoursandminutes()",
          "definition": "Verify_online_event_named_has_training_hours_of_hours_and_minutes(string eventName, int numHours, int numMinutes)"
        }
      },
      "key": "onlineeventmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "OnlineEventManagement",
      "instance-name": "OnlineEventManagement"
    },
    "assessmenttestpersistence": {
      "namespace": "",
      "methods": {
        "canroundtripscoredassessmenttestproperties()": {
          "name": "Can_roundtrip_ScoredAssessmentTest_properties",
          "key": "canroundtripscoredassessmenttestproperties()",
          "definition": "Can_roundtrip_ScoredAssessmentTest_properties()"
        },
        "canroundtripassessmenttestproperties()": {
          "name": "Can_roundtrip_AssessmentTest_properties",
          "key": "canroundtripassessmenttestproperties()",
          "definition": "Can_roundtrip_AssessmentTest_properties()"
        },
        "canroundtripautomatedtestingtestproperties()": {
          "name": "Can_roundtrip_AutomatedTestingTest_properties",
          "key": "canroundtripautomatedtestingtestproperties()",
          "definition": "Can_roundtrip_AutomatedTestingTest_properties()"
        },
        "canroundtriptimedtestproperties()": {
          "name": "Can_roundtrip_TimedTest_properties",
          "key": "canroundtriptimedtestproperties()",
          "definition": "Can_roundtrip_TimedTest_properties()"
        },
        "canroundtripfirearmstestproperties()": {
          "name": "Can_roundtrip_FirearmsTest_properties",
          "key": "canroundtripfirearmstestproperties()",
          "definition": "Can_roundtrip_FirearmsTest_properties()"
        },
        "canroundtrippassfailtestproperties()": {
          "name": "Can_roundtrip_PassFailTest_properties",
          "key": "canroundtrippassfailtestproperties()",
          "definition": "Can_roundtrip_PassFailTest_properties()"
        },
        "canroundtripmultiparttestproperties()": {
          "name": "Can_roundtrip_MultiPartTest_properties",
          "key": "canroundtripmultiparttestproperties()",
          "definition": "Can_roundtrip_MultiPartTest_properties()"
        },
        "canroundtrippassfailchecklisttestproperties()": {
          "name": "Can_roundtrip_PassFailChecklistTest_properties",
          "key": "canroundtrippassfailchecklisttestproperties()",
          "definition": "Can_roundtrip_PassFailChecklistTest_properties()"
        }
      },
      "key": "assessmenttestpersistence",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "AssessmentTestPersistence",
      "instance-name": "AssessmentTestPersistence"
    },
    "questionperformancemanagement": {
      "namespace": "",
      "methods": {
        "verifytheperformancerowshowsanswerdetailrows()": {
          "name": "Verify_the__performance_row_shows__answer_detail_rows",
          "key": "verifytheperformancerowshowsanswerdetailrows()",
          "definition": "Verify_the__performance_row_shows__answer_detail_rows(string performanceRowOrdinal, int expectedRowCount)"
        },
        "verifytheperformancerowisforversionwhichis()": {
          "name": "Verify_the__performance_row_is_for_version__which_is__",
          "key": "verifytheperformancerowisforversionwhichis()",
          "definition": "Verify_the__performance_row_is_for_version__which_is__(string rowOrdinal, int versionNumber, string versionStatus)"
        },
        "verifyperformancedatawasfoundforquestionversions()": {
          "name": "Verify_performance_data_was_found_for__question_versions",
          "key": "verifyperformancedatawasfoundforquestionversions()",
          "definition": "Verify_performance_data_was_found_for__question_versions(int expectedRowCount)"
        },
        "lookupquestionperformancedetailsforquestion()": {
          "name": "Lookup_question_performance_details_for_question__",
          "key": "lookupquestionperformancedetailsforquestion()",
          "definition": "Lookup_question_performance_details_for_question__(string questionText)"
        }
      },
      "key": "questionperformancemanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "QuestionPerformanceManagement",
      "instance-name": "QuestionPerformanceManagement"
    },
    "enrollmentexport": {
      "namespace": "",
      "methods": {
        "exportallstudentsfor()": {
          "name": "Export_all_students_for__",
          "key": "exportallstudentsfor()",
          "definition": "Export_all_students_for__(string className)"
        },
        "thereshouldbenocolumnnamed()": {
          "name": "there_should_be_no_column_named__",
          "key": "thereshouldbenocolumnnamed()",
          "definition": "there_should_be_no_column_named__(string column)"
        },
        "findexportrowfor()": {
          "name": "Find_export_row_for__",
          "key": "findexportrowfor()",
          "definition": "Find_export_row_for__(string personName)"
        },
        "shouldbe()": {
          "name": "__should_be__",
          "key": "shouldbe()",
          "definition": "__should_be__(string field, string value)"
        },
        "exportallstudentsforwithsensitivedata()": {
          "name": "Export_all_students_for__with_sensitive_data",
          "key": "exportallstudentsforwithsensitivedata()",
          "definition": "Export_all_students_for__with_sensitive_data(string className)"
        }
      },
      "key": "enrollmentexport",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "EnrollmentExport",
      "instance-name": "EnrollmentExport"
    },
    "classsetup": {
      "namespace": "",
      "methods": {
        "settitleto()": {
          "name": "set_title_to__",
          "key": "settitleto()",
          "definition": "set_title_to__(string title)"
        },
        "verifyemergencycontactrelationshipis()": {
          "name": "Verify_emergency_contact_relationship_is",
          "key": "verifyemergencycontactrelationshipis()",
          "definition": "Verify_emergency_contact_relationship_is(string value)"
        },
        "addcontacttype()": {
          "name": "Add_contact_type__",
          "key": "addcontacttype()",
          "definition": "Add_contact_type__(string contactTypeName)"
        },
        "setdateofbirthto()": {
          "name": "set_date_of_birth_to__",
          "key": "setdateofbirthto()",
          "definition": "set_date_of_birth_to__(DateTime dob)"
        },
        "setceucreditsto()": {
          "name": "set_ceu_credits_to__",
          "key": "setceucreditsto()",
          "definition": "set_ceu_credits_to__(decimal credits)"
        },
        "createpersonwithacademyid()": {
          "name": "create_person__with_academy_id__",
          "key": "createpersonwithacademyid()",
          "definition": "create_person__with_academy_id__(string personName, string academyId)"
        },
        "addprimaryemploymentatusingtitle()": {
          "name": "add_primary_employment_at__using_title__",
          "key": "addprimaryemploymentatusingtitle()",
          "definition": "add_primary_employment_at__using_title__(string orgName, string titleName)"
        },
        "addactivitytoclassnamed()": {
          "name": "add_activity_to_class_named__",
          "key": "addactivitytoclassnamed()",
          "definition": "add_activity_to_class_named__(string activityName)"
        },
        "saveclass()": {
          "name": "Save_class",
          "key": "saveclass()",
          "definition": "Save_class()"
        },
        "addactivitytoclassnamedthatstudentsmustpasstograduate()": {
          "name": "add_activity_to_class_named__that_students_must_pass_to_graduate",
          "key": "addactivitytoclassnamedthatstudentsmustpasstograduate()",
          "definition": "add_activity_to_class_named__that_students_must_pass_to_graduate(string activityName)"
        },
        "saveperson()": {
          "name": "save_person",
          "key": "saveperson()",
          "definition": "save_person()"
        },
        "addnewprimaryemailaddress()": {
          "name": "add_new_primary_email_address__",
          "key": "addnewprimaryemailaddress()",
          "definition": "add_new_primary_email_address__(string email)"
        },
        "setemergencycontactphone2totypewithnumberext()": {
          "name": "Set_emergency_contact_Phone_2_to_type_with_number_ext",
          "key": "setemergencycontactphone2totypewithnumberext()",
          "definition": "Set_emergency_contact_Phone_2_to_type_with_number_ext(string phoneType, string phoneNumber, string phoneExt)"
        },
        "createprogramcategory()": {
          "name": "Create_program_category",
          "key": "createprogramcategory()",
          "definition": "Create_program_category(string categoryName)"
        },
        "createclasstemplatenamedinprogram()": {
          "name": "create_class_template_named__in_program__",
          "key": "createclasstemplatenamedinprogram()",
          "definition": "create_class_template_named__in_program__(string templateName, string programType)"
        },
        "seteeoccategoryto()": {
          "name": "set_eeoc_category_to__",
          "key": "seteeoccategoryto()",
          "definition": "set_eeoc_category_to__(string category)"
        },
        "setsendingorganizationto()": {
          "name": "set_sending_organization_to__",
          "key": "setsendingorganizationto()",
          "definition": "set_sending_organization_to__(string orgName)"
        },
        "enterscoreofforontest()": {
          "name": "enter_score_of__for__on_test__",
          "key": "enterscoreofforontest()",
          "definition": "enter_score_of__for__on_test__(string percent, string personName, string testName)"
        },
        "setsuffixto()": {
          "name": "set_suffix_to__",
          "key": "setsuffixto()",
          "definition": "set_suffix_to__(string suffix)"
        },
        "createorganizationnamedunderparentgroupoftype()": {
          "name": "Create_Organization_named__under_parent_group__of_type__",
          "key": "createorganizationnamedunderparentgroupoftype()",
          "definition": "Create_Organization_named__under_parent_group__of_type__(string orgName, string parentGroup, string type)"
        },
        "setemergencycontactto()": {
          "name": "Set_emergency_contact_to",
          "key": "setemergencycontactto()",
          "definition": "Set_emergency_contact_to(string emergencyContact)"
        },
        "setemergencycontactrelationshipto()": {
          "name": "Set_emergency_contact_relationship_to",
          "key": "setemergencycontactrelationshipto()",
          "definition": "Set_emergency_contact_relationship_to(string contactRelationship)"
        },
        "addasprimaryauthoritytoorganizationusingcontacttype()": {
          "name": "add__as_primary_authority_to_organization__using_contact_type__",
          "key": "addasprimaryauthoritytoorganizationusingcontacttype()",
          "definition": "add__as_primary_authority_to_organization__using_contact_type__(string person, string orgName, string contactType)"
        },
        "setcommentto()": {
          "name": "set_comment_to__",
          "key": "setcommentto()",
          "definition": "set_comment_to__(string comment)"
        },
        "createorganizationnamedoftypeunderbaseparentgroup()": {
          "name": "Create_organization_named__of_type__under_base_parent_group",
          "key": "createorganizationnamedoftypeunderbaseparentgroup()",
          "definition": "Create_organization_named__of_type__under_base_parent_group(string orgName, string type)"
        },
        "setenrollmentgenderto()": {
          "name": "set_enrollment_gender_to__",
          "key": "setenrollmentgenderto()",
          "definition": "set_enrollment_gender_to__(Gender gender)"
        },
        "addnewprimaryphonewithtypetoperson()": {
          "name": "add_new_primary_phone__with_type__to_person__",
          "key": "addnewprimaryphonewithtypetoperson()",
          "definition": "add_new_primary_phone__with_type__to_person__(string phoneNbr, string type, string personName)"
        },
        "setemergencycontactphone1totypewithnumberext()": {
          "name": "Set_emergency_contact_Phone_1_to_type_with_number_ext",
          "key": "setemergencycontactphone1totypewithnumberext()",
          "definition": "Set_emergency_contact_Phone_1_to_type_with_number_ext(string phoneType, string phoneNumber, string phoneExt)"
        },
        "enrollin()": {
          "name": "enroll__in__",
          "key": "enrollin()",
          "definition": "enroll__in__(string personName, string className)"
        },
        "setssnto()": {
          "name": "set_ssn_to__",
          "key": "setssnto()",
          "definition": "set_ssn_to__(string ssn)"
        },
        "saveenrollment()": {
          "name": "save_enrollment",
          "key": "saveenrollment()",
          "definition": "save_enrollment()"
        },
        "addnewtesttonamed()": {
          "name": "add_new__test_to__named__",
          "key": "addnewtesttonamed()",
          "definition": "add_new__test_to__named__(TestType testType, string activityName, string testName)"
        },
        "addnewtesttonamedthatstudentsmustpasstograduate()": {
          "name": "add_new_test_to__named__that_students_must_pass_to_graduate",
          "key": "addnewtesttonamedthatstudentsmustpasstograduate()",
          "definition": "add_new_test_to__named__that_students_must_pass_to_graduate(TestType testType, string activityName, string testName)"
        },
        "setmiddlenameto()": {
          "name": "set_middle_name_to__",
          "key": "setmiddlenameto()",
          "definition": "set_middle_name_to__(string middleName)"
        },
        "addnewprimaryphonewithtypetoorganization()": {
          "name": "add_new_primary_phone__with_type__to_organization__",
          "key": "addnewprimaryphonewithtypetoorganization()",
          "definition": "add_new_primary_phone__with_type__to_organization__(string phoneNbr, string type, string orgName)"
        },
        "verifyemergencycontactis()": {
          "name": "Verify_emergency_contact_is",
          "key": "verifyemergencycontactis()",
          "definition": "Verify_emergency_contact_is(string emergencyContact)"
        }
      },
      "key": "classsetup",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "ClassSetup",
      "instance-name": "ClassSetup"
    },
    "documentstorage": {
      "namespace": "",
      "methods": {
        "changedefaultdocumentstorageproviderto()": {
          "name": "Change_default_document_storage_provider_to__",
          "key": "changedefaultdocumentstorageproviderto()",
          "definition": "Change_default_document_storage_provider_to__(DocumentStorageProviderType providerType)"
        }
      },
      "key": "documentstorage",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "DocumentStorageWorkflow",
      "instance-name": "DocumentStorage"
    },
    "automatedemailedit": {
      "namespace": "",
      "methods": {
        "verifydeletenotificationtypeconfirmationshowing()": {
          "name": "Verify_delete_notification_type_confirmation__showing",
          "key": "verifydeletenotificationtypeconfirmationshowing()",
          "definition": "Verify_delete_notification_type_confirmation__showing(string isIsNot)"
        },
        "setreplytoaddressto()": {
          "name": "Set_Reply_To_Address_to__",
          "key": "setreplytoaddressto()",
          "definition": "Set_Reply_To_Address_to__(string addr)"
        },
        "verifyemailtitleis()": {
          "name": "Verify_Email_Title_is",
          "key": "verifyemailtitleis()",
          "definition": "Verify_Email_Title_is(string title)"
        },
        "verifyemailsetup()": {
          "name": "Verify_email__setup",
          "key": "verifyemailsetup()",
          "definition": "Verify_email__setup(string isOrNot)"
        },
        "verifyautomaticsendingisdisabled()": {
          "name": "Verify_automatic_sending_is_disabled",
          "key": "verifyautomaticsendingisdisabled()",
          "definition": "Verify_automatic_sending_is_disabled()"
        },
        "verifysubjectis()": {
          "name": "Verify_Subject_is__",
          "key": "verifysubjectis()",
          "definition": "Verify_Subject_is__(string subject)"
        },
        "verifyautomaticsendingbeturnedoff()": {
          "name": "Verify_automatic_sending__be_turned_off",
          "key": "verifyautomaticsendingbeturnedoff()",
          "definition": "Verify_automatic_sending__be_turned_off(string canCanNot)"
        },
        "disableautomaticsendingofthismessage()": {
          "name": "Disable_automatic_sending_of_this_message",
          "key": "disableautomaticsendingofthismessage()",
          "definition": "Disable_automatic_sending_of_this_message()"
        },
        "bindplaceholderhelptext()": {
          "name": "BindPlaceholderHelpText",
          "key": "bindplaceholderhelptext()",
          "definition": "BindPlaceholderHelpText(IList<KeyValuePair<string,string>> placeholders)"
        },
        "verifyccis()": {
          "name": "Verify_CC_is__",
          "key": "verifyccis()",
          "definition": "Verify_CC_is__(string name)"
        },
        "verifybccis()": {
          "name": "Verify_BCC_is__",
          "key": "verifybccis()",
          "definition": "Verify_BCC_is__(string name)"
        },
        "selectforrecipients()": {
          "name": "Select__for_Recipients",
          "key": "selectforrecipients()",
          "definition": "Select__for_Recipients(List<string> recipientSelection)"
        },
        "verifyoptionsforrecipientsare()": {
          "name": "Verify_options_for_Recipients_are__",
          "key": "verifyoptionsforrecipientsare()",
          "definition": "Verify_options_for_Recipients_are__(List<string> recipientOptions)"
        },
        "verifytherearenotificationtypes()": {
          "name": "Verify_there_are__notification_types",
          "key": "verifytherearenotificationtypes()",
          "definition": "Verify_there_are__notification_types(int numberOfNotificationTypes)"
        },
        "verifyreplytoaddressis()": {
          "name": "Verify_Reply_To_Address_is__",
          "key": "verifyreplytoaddressis()",
          "definition": "Verify_Reply_To_Address_is__(string address)"
        },
        "setccto()": {
          "name": "Set_CC_to__",
          "key": "setccto()",
          "definition": "Set_CC_to__(string addr)"
        },
        "setbccto()": {
          "name": "Set_BCC_to__",
          "key": "setbccto()",
          "definition": "Set_BCC_to__(string addr)"
        },
        "clickdeleteonthenotificationtype()": {
          "name": "Click_Delete_on_the__Notification_Type",
          "key": "clickdeleteonthenotificationtype()",
          "definition": "Click_Delete_on_the__Notification_Type(string notificationTypeOrdinal)"
        },
        "clickcancelonthedeletenotificationconfirmation()": {
          "name": "Click_Cancel_on_the_Delete_Notification_Confirmation",
          "key": "clickcancelonthedeletenotificationconfirmation()",
          "definition": "Click_Cancel_on_the_Delete_Notification_Confirmation()"
        },
        "bindcertificationexpirationnotifications()": {
          "name": "BindCertificationExpirationNotifications",
          "key": "bindcertificationexpirationnotifications()",
          "definition": "BindCertificationExpirationNotifications(IList<RowIdentifyingDTO<NotificationTypeListItemDTO>> notifications)"
        },
        "browsetopagefor()": {
          "name": "Browse_to_page_for__",
          "key": "browsetopagefor()",
          "definition": "Browse_to_page_for__(string displayName)"
        },
        "setsenderemailaddressto()": {
          "name": "Set_Sender_Email_Address_to__",
          "key": "setsenderemailaddressto()",
          "definition": "Set_Sender_Email_Address_to__(string addr)"
        },
        "verifythenotificationtypeis()": {
          "name": "Verify_the__notification_type_is__",
          "key": "verifythenotificationtypeis()",
          "definition": "Verify_the__notification_type_is__(string ordinal, List<string> expectedCells)"
        },
        "verifymessagebodyis()": {
          "name": "Verify_Message_Body_is__",
          "key": "verifymessagebodyis()",
          "definition": "Verify_Message_Body_is__(string body)"
        },
        "setmessageintroductionto()": {
          "name": "Set_Message_Introduction_to__",
          "key": "setmessageintroductionto()",
          "definition": "Set_Message_Introduction_to__(string intro)"
        },
        "saveemailsettings()": {
          "name": "Save_email_settings",
          "key": "saveemailsettings()",
          "definition": "Save_email_settings()"
        },
        "clickeditonthenotificationtype()": {
          "name": "Click_Edit_on_the__Notification_Type",
          "key": "clickeditonthenotificationtype()",
          "definition": "Click_Edit_on_the__Notification_Type(string notificationTypeOrdinal)"
        },
        "verifyautomaticsendingisenabled()": {
          "name": "Verify_automatic_sending_is_enabled",
          "key": "verifyautomaticsendingisenabled()",
          "definition": "Verify_automatic_sending_is_enabled()"
        },
        "showdeletenotificationtypewarning()": {
          "name": "ShowDeleteNotificationTypeWarning",
          "key": "showdeletenotificationtypewarning()",
          "definition": "ShowDeleteNotificationTypeWarning(Guid notificationTypeID)"
        },
        "verifyisaselectedrecipient()": {
          "name": "Verify__is_a_selected_recipient",
          "key": "verifyisaselectedrecipient()",
          "definition": "Verify__is_a_selected_recipient(string item)"
        },
        "redirectaftersave()": {
          "name": "RedirectAfterSave",
          "key": "redirectaftersave()",
          "definition": "RedirectAfterSave()"
        },
        "verifymessageintroductionis()": {
          "name": "Verify_Message_Introduction_is__",
          "key": "verifymessageintroductionis()",
          "definition": "Verify_Message_Introduction_is__(string intro)"
        },
        "clickcontinueonthedeletenotificationconfirmation()": {
          "name": "Click_Continue_on_the_Delete_Notification_Confirmation",
          "key": "clickcontinueonthedeletenotificationconfirmation()",
          "definition": "Click_Continue_on_the_Delete_Notification_Confirmation()"
        },
        "verifysendernameis()": {
          "name": "Verify_Sender_Name_is__",
          "key": "verifysendernameis()",
          "definition": "Verify_Sender_Name_is__(string name)"
        },
        "verifymessageconclusionis()": {
          "name": "Verify_Message_Conclusion_is__",
          "key": "verifymessageconclusionis()",
          "definition": "Verify_Message_Conclusion_is__(string concl)"
        },
        "setmessageconclusionto()": {
          "name": "Set_Message_Conclusion_to__",
          "key": "setmessageconclusionto()",
          "definition": "Set_Message_Conclusion_to__(string concl)"
        },
        "allowemailtobesentautomatically()": {
          "name": "Allow_email_to_be_sent_automatically",
          "key": "allowemailtobesentautomatically()",
          "definition": "Allow_email_to_be_sent_automatically()"
        },
        "showaddeditnotificationtypemodal()": {
          "name": "ShowAddEditNotificationTypeModal",
          "key": "showaddeditnotificationtypemodal()",
          "definition": "ShowAddEditNotificationTypeModal()"
        },
        "setsubjectto()": {
          "name": "Set_Subject_to__",
          "key": "setsubjectto()",
          "definition": "Set_Subject_to__(string subj)"
        },
        "setsendernameto()": {
          "name": "Set_Sender_Name_to__",
          "key": "setsendernameto()",
          "definition": "Set_Sender_Name_to__(string name)"
        },
        "verifysenderemailaddressis()": {
          "name": "Verify_Sender_Email_Address_is__",
          "key": "verifysenderemailaddressis()",
          "definition": "Verify_Sender_Email_Address_is__(string address)"
        }
      },
      "key": "automatedemailedit",
      "is-parent": false,
      "parent-name": "MVBaseWorkflow",
      "class-name": "AutomatedEmailEdit",
      "instance-name": "AutomatedEmailEdit"
    },
    "attributecontainer": {
      "namespace": "",
      "methods": {
        "add()": {
          "name": "Add",
          "key": "add()",
          "definition": "Add(string key, object value)"
        }
      },
      "key": "attributecontainer",
      "is-parent": false,
      "parent-name": null,
      "class-name": "AttributeContainer",
      "instance-name": "AttributeContainer"
    },
    "questionandansweranalysisreportmanagement": {
      "namespace": "",
      "methods": {
        "verifythatquestionhasanswerrows()": {
          "name": "Verify_that_question_has_answer_rows",
          "key": "verifythatquestionhasanswerrows()",
          "definition": "Verify_that_question_has_answer_rows( int questionIndex, int count )"
        },
        "verifythatquestionanswerhasquestionletter()": {
          "name": "verify_that_question_answer_has_question_letter",
          "key": "verifythatquestionanswerhasquestionletter()",
          "definition": "verify_that_question_answer_has_question_letter( int questionIndex, int answerIndex, string letter )"
        },
        "loadquestionandansweranalysisreportfortestinclass()": {
          "name": "Load_question_and_answer_analysis_report_for_test_in_class",
          "key": "loadquestionandansweranalysisreportfortestinclass()",
          "definition": "Load_question_and_answer_analysis_report_for_test_in_class( string examName, string className )"
        },
        "verifythatquestionhasmissedpercenttext()": {
          "name": "Verify_that_question_has_missed_percent_text",
          "key": "verifythatquestionhasmissedpercenttext()",
          "definition": "Verify_that_question_has_missed_percent_text( int questionIndex, string text )"
        },
        "verifythatquestionhasquestiontext()": {
          "name": "Verify_that_question_has_question_text",
          "key": "verifythatquestionhasquestiontext()",
          "definition": "Verify_that_question_has_question_text( int questionIndex, string text )"
        },
        "verifythatquestionanswerhaspercenttext()": {
          "name": "verify_that_question_answer_has_percent_text",
          "key": "verifythatquestionanswerhaspercenttext()",
          "definition": "verify_that_question_answer_has_percent_text( int questionIndex, int answerIndex, string text )"
        },
        "verifythatquestionanswerhasanswertext()": {
          "name": "verify_that_question_answer_has_answer_text",
          "key": "verifythatquestionanswerhasanswertext()",
          "definition": "verify_that_question_answer_has_answer_text( int questionIndex, int answerIndex, string text )"
        },
        "verifythatquestionanswerhasblankquestionletter()": {
          "name": "verify_that_question_answer_has_blank_question_letter",
          "key": "verifythatquestionanswerhasblankquestionletter()",
          "definition": "verify_that_question_answer_has_blank_question_letter( int questionIndex, int answerIndex )"
        },
        "verifythatquestionhasmissednumbertext()": {
          "name": "verify_that_question_has_missed_number_text",
          "key": "verifythatquestionhasmissednumbertext()",
          "definition": "verify_that_question_has_missed_number_text( int questionIndex, string text )"
        },
        "verifythatreporthasquestionrows()": {
          "name": "Verify_that_report_has_question_rows",
          "key": "verifythatreporthasquestionrows()",
          "definition": "Verify_that_report_has_question_rows( int count )"
        }
      },
      "key": "questionandansweranalysisreportmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "QuestionAndAnswerAnalysisReportManagement",
      "instance-name": "QuestionAndAnswerAnalysisReportManagement"
    },
    "gradingscalepersistence": {
      "namespace": "",
      "methods": {
        "canloadallscales()": {
          "name": "can_load_all_scales",
          "key": "canloadallscales()",
          "definition": "can_load_all_scales()"
        },
        "canroundtripgradingscale()": {
          "name": "Can_roundtrip_GradingScale",
          "key": "canroundtripgradingscale()",
          "definition": "Can_roundtrip_GradingScale()"
        },
        "canroundtriptimedgradingscaleproperties()": {
          "name": "Can_roundtrip_TimedGradingScaleProperties",
          "key": "canroundtriptimedgradingscaleproperties()",
          "definition": "Can_roundtrip_TimedGradingScaleProperties()"
        },
        "canloadscalefromdsmart()": {
          "name": "can_load_scale__from_dsmart",
          "key": "canloadscalefromdsmart()",
          "definition": "can_load_scale__from_dsmart( int id )"
        }
      },
      "key": "gradingscalepersistence",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "GradingScalePersistence",
      "instance-name": "GradingScalePersistence"
    },
    "portalmanagementfnh": {
      "namespace": "",
      "methods": {
        "verifyportalaccountforhaspermission()": {
          "name": "Verify_portal_account_for__has_permission__",
          "key": "verifyportalaccountforhaspermission()",
          "definition": "Verify_portal_account_for__has_permission__(string emailAddress, PortalPermissionType permission)"
        },
        "grantaccountwithregistrationorganizationalportalpermissionandagencyand()": {
          "name": "Grant_account_with_Registration_organizational_portal_permission_and_agency_and_",
          "key": "grantaccountwithregistrationorganizationalportalpermissionandagencyand()",
          "definition": "Grant_account_with_Registration_organizational_portal_permission_and_agency_and_(string email, string orgName, string registrationPermissionType)"
        },
        "verifyresendportalwelcomeemailfailedwithresult()": {
          "name": "Verify_resend_portal_welcome_email_failed_with_result",
          "key": "verifyresendportalwelcomeemailfailedwithresult()",
          "definition": "Verify_resend_portal_welcome_email_failed_with_result(PortalAccountManager.SendAccountInformationResult result)"
        },
        "getportalaccountforpersonid()": {
          "name": "Get_portal_account_for_personid__",
          "key": "getportalaccountforpersonid()",
          "definition": "Get_portal_account_for_personid__(int personID)"
        },
        "resendportalwelcomeemailto()": {
          "name": "Resend_portal_welcome_email_to__",
          "key": "resendportalwelcomeemailto()",
          "definition": "Resend_portal_welcome_email_to__(string emailAddress)"
        },
        "verifymustchangetheirpasswordonnextlogin()": {
          "name": "Verify__must_change_their_password_on_next_login",
          "key": "verifymustchangetheirpasswordonnextlogin()",
          "definition": "Verify__must_change_their_password_on_next_login(string email)"
        },
        "grantaccountpermission()": {
          "name": "Grant_account__permission__",
          "key": "grantaccountpermission()",
          "definition": "Grant_account__permission__(string email, string permissionDesc)"
        },
        "grantaccountwithindividualportalpermission()": {
          "name": "Grant_account_with_individual_portal_permission",
          "key": "grantaccountwithindividualportalpermission()",
          "definition": "Grant_account_with_individual_portal_permission(string email, PortalPermissionType permission)"
        },
        "verifycanlogintoportalwithusernameandpassword()": {
          "name": "Verify_can_log_into_Portal_with_username_and_password",
          "key": "verifycanlogintoportalwithusernameandpassword()",
          "definition": "Verify_can_log_into_Portal_with_username_and_password(string emailAddress, string password)"
        },
        "createportalaccessforwithemailandpasswordandportalpermission()": {
          "name": "Create_portal_access_for_with_email_and_password_and_portal_permission",
          "key": "createportalaccessforwithemailandpasswordandportalpermission()",
          "definition": "Create_portal_access_for_with_email_and_password_and_portal_permission(PortalStatus status, string personName, string email, string password, PortalPermissionType permission)"
        },
        "verifyisnotrequiredtochangetheirpasswordonnextlogin()": {
          "name": "Verify__is_not_required_to_change_their_password_on_next_login",
          "key": "verifyisnotrequiredtochangetheirpasswordonnextlogin()",
          "definition": "Verify__is_not_required_to_change_their_password_on_next_login(string email)"
        },
        "logintoportalwithusernameandpasswordfromwelcomeemail()": {
          "name": "Login_to_portal_with_username__and_password_from_welcome_email",
          "key": "logintoportalwithusernameandpasswordfromwelcomeemail()",
          "definition": "Login_to_portal_with_username__and_password_from_welcome_email(string email)"
        },
        "setaccountstatusforto()": {
          "name": "Set_account_status_for__to__",
          "key": "setaccountstatusforto()",
          "definition": "Set_account_status_for__to__(string email, PortalStatus status)"
        },
        "revokeaccountpermission()": {
          "name": "Revoke_account_permission",
          "key": "revokeaccountpermission()",
          "definition": "Revoke_account_permission(string emailAddress, PortalPermissionType permission)"
        },
        "verifyresendportalwelcomeemailsucceededwithresult()": {
          "name": "Verify_resend_portal_welcome_email_succeeded_with_result",
          "key": "verifyresendportalwelcomeemailsucceededwithresult()",
          "definition": "Verify_resend_portal_welcome_email_succeeded_with_result(PortalAccountManager.SendAccountInformationResult result)"
        },
        "verifyportalaccountforis()": {
          "name": "Verify_Portal_Account_for_is_",
          "key": "verifyportalaccountforis()",
          "definition": "Verify_Portal_Account_for_is_(string emailAddress, PortalStatus status)"
        },
        "getportalaccounts()": {
          "name": "Get_portal_accounts",
          "key": "getportalaccounts()",
          "definition": "Get_portal_accounts()"
        },
        "verifycannotlogintoportalwithusernameandpassword()": {
          "name": "Verify_cannot_log_into_Portal_with_username_and_password",
          "key": "verifycannotlogintoportalwithusernameandpassword()",
          "definition": "Verify_cannot_log_into_Portal_with_username_and_password(string emailAddress, string password)"
        },
        "setaccountpasswordforto()": {
          "name": "Set_account_password_for__to__",
          "key": "setaccountpasswordforto()",
          "definition": "Set_account_password_for__to__(string email, string password)"
        },
        "grantaccountwithorganizationalportalpermissionandagency()": {
          "name": "Grant_account_with_organizational_portal_permission_and_agency_",
          "key": "grantaccountwithorganizationalportalpermissionandagency()",
          "definition": "Grant_account_with_organizational_portal_permission_and_agency_(string email, PortalPermissionType permission, string orgName)"
        },
        "verifynoportalaccountfor()": {
          "name": "Verify_No_Portal_Account_for_",
          "key": "verifynoportalaccountfor()",
          "definition": "Verify_No_Portal_Account_for_(string emailAddress)"
        },
        "logintoportalwithusernameandpassword()": {
          "name": "Log_into_portal_with_Username__and_Password",
          "key": "logintoportalwithusernameandpassword()",
          "definition": "Log_into_portal_with_Username__and_Password(string emailAddress, string password)"
        }
      },
      "key": "portalmanagementfnh",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "PortalManagementFNH",
      "instance-name": "PortalManagementFNH"
    },
    "taskmanagement": {
      "namespace": "",
      "methods": {
        "endclassstatusupdate()": {
          "name": "end_class_status_update",
          "key": "endclassstatusupdate()",
          "definition": "end_class_status_update()"
        },
        "enditemanalysisdirtycheck()": {
          "name": "End_item_analysis_dirty_check",
          "key": "enditemanalysisdirtycheck()",
          "definition": "End_item_analysis_dirty_check()"
        },
        "startlmsduedatenotification()": {
          "name": "Start_LMS_due_date_notification",
          "key": "startlmsduedatenotification()",
          "definition": "Start_LMS_due_date_notification()"
        },
        "failtaskwithreason()": {
          "name": "Fail_task__with_reason__",
          "key": "failtaskwithreason()",
          "definition": "Fail_task__with_reason__(AcadisTaskType taskType, string failureReason)"
        },
        "endautoexpirecerts()": {
          "name": "End_auto_expire_certs",
          "key": "endautoexpirecerts()",
          "definition": "End_auto_expire_certs()"
        },
        "startclassstatusupdate()": {
          "name": "Start_class_status_update",
          "key": "startclassstatusupdate()",
          "definition": "Start_class_status_update()"
        },
        "starttask()": {
          "name": "Start_task__",
          "key": "starttask()",
          "definition": "Start_task__(AcadisTaskType taskType)"
        },
        "startitemanalysisdirtycheck()": {
          "name": "Start_item_analysis_dirty_check",
          "key": "startitemanalysisdirtycheck()",
          "definition": "Start_item_analysis_dirty_check()"
        },
        "endlmsduedatenotification()": {
          "name": "End_LMS_due_date_notification",
          "key": "endlmsduedatenotification()",
          "definition": "End_LMS_due_date_notification()"
        },
        "startautoexpirecerts()": {
          "name": "Start_auto_expire_certs",
          "key": "startautoexpirecerts()",
          "definition": "Start_auto_expire_certs()"
        },
        "endtask()": {
          "name": "End_task__",
          "key": "endtask()",
          "definition": "End_task__(AcadisTaskType taskType)"
        }
      },
      "key": "taskmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "TaskManagement",
      "instance-name": "TaskManagement"
    },
    "curriculumfnhmanagement": {
      "namespace": "",
      "methods": {
        "createtrainingclassnamedfromstartingonendingon()": {
          "name": "Create_training_class_named__from__starting_on__ending_on_",
          "key": "createtrainingclassnamedfromstartingonendingon()",
          "definition": "Create_training_class_named__from__starting_on__ending_on_( string className, string templateName, DateTime start, DateTime end )"
        },
        "setcost()": {
          "name": "Set_cost",
          "key": "setcost()",
          "definition": "Set_cost(int value)"
        },
        "setactivityweightto()": {
          "name": "Set_Activity_Weight_to__",
          "key": "setactivityweightto()",
          "definition": "Set_Activity_Weight_to__( int activityWeight )"
        },
        "changeactivityonclasslengthtohours()": {
          "name": "Change_Activity__on_Class__Length_to_hours",
          "key": "changeactivityonclasslengthtohours()",
          "definition": "Change_Activity__on_Class__Length_to_hours(string activityName, string className, int hours)"
        },
        "verifytrainingclasshasnocertifications()": {
          "name": "Verify_training_class__has_no_certifications",
          "key": "verifytrainingclasshasnocertifications()",
          "definition": "Verify_training_class__has_no_certifications(string trainingClassName)"
        },
        "addtrainingcategorytoclass()": {
          "name": "Add_training_category__to_class__",
          "key": "addtrainingcategorytoclass()",
          "definition": "Add_training_category__to_class__(string trainingCategoryName, string className)"
        },
        "verifythatstudentgroupinclasshassubgroup()": {
          "name": "Verify_that_student_group_in_class_has_subgroup",
          "key": "verifythatstudentgroupinclasshassubgroup()",
          "definition": "Verify_that_student_group_in_class_has_subgroup( string groupName, string className, string subGroupName )"
        },
        "verifylistcontainstestnamedwithstudenttestsrecordedforinitialtake()": {
          "name": "verify_list_contains_test_named__with__student_tests_recorded_for_initial_take",
          "key": "verifylistcontainstestnamedwithstudenttestsrecordedforinitialtake()",
          "definition": "verify_list_contains_test_named__with__student_tests_recorded_for_initial_take(string testName, int studentTestCount)"
        },
        "setfees()": {
          "name": "Set_fees",
          "key": "setfees()",
          "definition": "Set_fees(decimal value)"
        },
        "verifyweightsare()": {
          "name": "Verify_weights_are",
          "key": "verifyweightsare()",
          "definition": "Verify_weights_are(string strValid)"
        },
        "createclasstemplate()": {
          "name": "Create_class_template",
          "key": "createclasstemplate()",
          "definition": "Create_class_template( string templateName )"
        },
        "exchangetestwithtemplatewithreasoninclass()": {
          "name": "Exchange_test__with__template__with_reason__in_class__",
          "key": "exchangetestwithtemplatewithreasoninclass()",
          "definition": "Exchange_test__with__template__with_reason__in_class__(string testName, string templateName, string reason, string className)"
        },
        "verifythattestonactivityinclasshascertification()": {
          "name": "Verify_that_test__on_activity__in_class__has_certification__",
          "key": "verifythattestonactivityinclasshascertification()",
          "definition": "Verify_that_test__on_activity__in_class__has_certification__( string testName, string activityName, string className, string certName )"
        },
        "addactivitywithlengthofhours()": {
          "name": "Add_activity__with_length_of__hours",
          "key": "addactivitywithlengthofhours()",
          "definition": "Add_activity__with_length_of__hours( string activityName, int numHours )"
        },
        "saveactivity()": {
          "name": "Save_Activity_",
          "key": "saveactivity()",
          "definition": "Save_Activity_( string activityName )"
        },
        "verifyhousingreservationfortrainingclassisdeleted()": {
          "name": "Verify_housing_reservation_for_training_class__is_deleted",
          "key": "verifyhousingreservationfortrainingclassisdeleted()",
          "definition": "Verify_housing_reservation_for_training_class__is_deleted(string trainingClassName)"
        },
        "setenrollmenttypeforclasstodeferredmanagedbyorganization()": {
          "name": "Set_enrollment_type_for_class__to_deferred_managed_by_organization_",
          "key": "setenrollmenttypeforclasstodeferredmanagedbyorganization()",
          "definition": "Set_enrollment_type_for_class__to_deferred_managed_by_organization_(string className, string organizationName)"
        },
        "verifythatclassnameinprograminuse()": {
          "name": "Verify_that_class_name__in_program___in_use",
          "key": "verifythatclassnameinprograminuse()",
          "definition": "Verify_that_class_name__in_program___in_use( string className, string programName, string conditionString )"
        },
        "verifythatclasshasstatus()": {
          "name": "Verify_that_class__has_status_",
          "key": "verifythatclasshasstatus()",
          "definition": "Verify_that_class__has_status_(string className, string status)"
        },
        "addsubactivityunderactivityonclass()": {
          "name": "Add_subactivity__under_activity__on_class__",
          "key": "addsubactivityunderactivityonclass()",
          "definition": "Add_subactivity__under_activity__on_class__(string subActivityName, string activityName, string trainingClassName)"
        },
        "deleteactivityfromclass()": {
          "name": "Delete_Activity__from_Class__",
          "key": "deleteactivityfromclass()",
          "definition": "Delete_Activity__from_Class__(string activityName, string className)"
        },
        "verifyactivityontemplatehastestwithminpassinggrade()": {
          "name": "Verify_activity__on_template__has_test__with_min_passing_grade__",
          "key": "verifyactivityontemplatehastestwithminpassinggrade()",
          "definition": "Verify_activity__on_template__has_test__with_min_passing_grade__(string actName, string templateName, string testName, decimal minPassingGrade)"
        },
        "setclasstemplateinstructiontypeto()": {
          "name": "Set_Class_Template_Instruction_Type_to__",
          "key": "setclasstemplateinstructiontypeto()",
          "definition": "Set_Class_Template_Instruction_Type_to__( string instructionTypeName )"
        },
        "setenddateforclassto()": {
          "name": "Set_end_date_for_class_to",
          "key": "setenddateforclassto()",
          "definition": "Set_end_date_for_class_to(DateTime date)"
        },
        "addretestgroupnamedwithmaxoftotrainingclass()": {
          "name": "Add_retest_group_named__with_max_of__to_training_class__",
          "key": "addretestgroupnamedwithmaxoftotrainingclass()",
          "definition": "Add_retest_group_named__with_max_of__to_training_class__(string groupName, int max, string trainingClassName)"
        },
        "setclasstemplatetypeto()": {
          "name": "Set_Class_Template_Type_to__",
          "key": "setclasstemplatetypeto()",
          "definition": "Set_Class_Template_Type_to__( string templateTypeName )"
        },
        "verifyclasstemplatehasactivity()": {
          "name": "verify_class_template__has_activity",
          "key": "verifyclasstemplatehasactivity()",
          "definition": "verify_class_template__has_activity( string templateName, string activityName )"
        },
        "addtrainingcategorytoclasstemplate()": {
          "name": "Add_training_category__to_class_template__",
          "key": "addtrainingcategorytoclasstemplate()",
          "definition": "Add_training_category__to_class_template__(string trainingCategoryName, string classTemplateName)"
        },
        "verifyactivityreferenceis()": {
          "name": "Verify_Activity_Reference_is",
          "key": "verifyactivityreferenceis()",
          "definition": "Verify_Activity_Reference_is( string activityName, string reference )"
        },
        "addcertificationtoclasstemplate()": {
          "name": "Add_certification__to_class_template__",
          "key": "addcertificationtoclasstemplate()",
          "definition": "Add_certification__to_class_template__(string certMasterName, string templateName)"
        },
        "setactivitytonotmandatory()": {
          "name": "Set_Activity_to_not_mandatory",
          "key": "setactivitytonotmandatory()",
          "definition": "Set_Activity_to_not_mandatory()"
        },
        "usingactivity()": {
          "name": "Using_activity_",
          "key": "usingactivity()",
          "definition": "Using_activity_( string activityName )"
        },
        "addcertificationtoclass()": {
          "name": "Add_certification__to_class__",
          "key": "addcertificationtoclass()",
          "definition": "Add_certification__to_class__(string certMasterName, string className)"
        },
        "usingacademy()": {
          "name": "Using_Academy_",
          "key": "usingacademy()",
          "definition": "Using_Academy_( string academyName )"
        },
        "verifyactivitytrainingdivisionis()": {
          "name": "Verify_Activity_Training_Division_is",
          "key": "verifyactivitytrainingdivisionis()",
          "definition": "Verify_Activity_Training_Division_is( string activityName, string divisionName )"
        },
        "selectendofclasssendingorganizationfor()": {
          "name": "Select_end_of_class_sending_organization_for",
          "key": "selectendofclasssendingorganizationfor()",
          "definition": "Select_end_of_class_sending_organization_for(string surveyName, string className)"
        },
        "setactivitydoesnotcountastraining()": {
          "name": "Set_Activity_does_not_count_as_training",
          "key": "setactivitydoesnotcountastraining()",
          "definition": "Set_Activity_does_not_count_as_training()"
        },
        "verifythatactivityinclasshascertification()": {
          "name": "Verify_that_activity__in_class__has_certification__",
          "key": "verifythatactivityinclasshascertification()",
          "definition": "Verify_that_activity__in_class__has_certification__( string activityName, string className, string certName )"
        },
        "verifythathasstudentsenrolled()": {
          "name": "Verify_that__has__students_enrolled",
          "key": "verifythathasstudentsenrolled()",
          "definition": "Verify_that__has__students_enrolled(string className, int numStudents)"
        },
        "setstartdateforclassto()": {
          "name": "Set_start_date_for_class_to",
          "key": "setstartdateforclassto()",
          "definition": "Set_start_date_for_class_to(DateTime date)"
        },
        "addschedulableactivitywithlengthofhours()": {
          "name": "Add_schedulable_activity_with_length_of_hours",
          "key": "addschedulableactivitywithlengthofhours()",
          "definition": "Add_schedulable_activity_with_length_of_hours( string activityName, int numHours )"
        },
        "setbriefdescription()": {
          "name": "Set_brief_description",
          "key": "setbriefdescription()",
          "definition": "Set_brief_description(string value)"
        },
        "verifythathasactivityorsubactivity()": {
          "name": "Verify_that_has_activity_or_subactivity",
          "key": "verifythathasactivityorsubactivity()",
          "definition": "Verify_that_has_activity_or_subactivity(string className, string activityName)"
        },
        "considertrainingclass()": {
          "name": "Consider_training_class__",
          "key": "considertrainingclass()",
          "definition": "Consider_training_class__(string className)"
        },
        "setendofclasstoautoconfercertificationsfortemplate()": {
          "name": "Set_End_of_Class_to_auto_confer_certifications_for_template__",
          "key": "setendofclasstoautoconfercertificationsfortemplate()",
          "definition": "Set_End_of_Class_to_auto_confer_certifications_for_template__(string templateName)"
        },
        "verifythathasactivity()": {
          "name": "Verify_that_has_activity",
          "key": "verifythathasactivity()",
          "definition": "Verify_that_has_activity(string className, string activityName)"
        },
        "addsubactivitywithlengthofhours()": {
          "name": "Add_subactivity__with_length_of__hours",
          "key": "addsubactivitywithlengthofhours()",
          "definition": "Add_subactivity__with_length_of__hours( string activityName, int numHours )"
        },
        "addstudentgrouptoclasstemplate()": {
          "name": "Add_student_group_to_class_template",
          "key": "addstudentgrouptoclasstemplate()",
          "definition": "Add_student_group_to_class_template( string groupName, string templateName )"
        },
        "selectendofclasssurveyfor()": {
          "name": "Select_end_of_class_survey__for__",
          "key": "selectendofclasssurveyfor()",
          "definition": "Select_end_of_class_survey__for__(string surveyName, string className)"
        },
        "verifyactivityontrainingclasshasnocertifications()": {
          "name": "Verify_activity__on_training_class__has_no_certifications",
          "key": "verifyactivityontrainingclasshasnocertifications()",
          "definition": "Verify_activity__on_training_class__has_no_certifications(string actName, string trainingClassName)"
        },
        "makeactivitymandatoryonclasstemplate()": {
          "name": "Make_activity__mandatory_on_class_template__",
          "key": "makeactivitymandatoryonclasstemplate()",
          "definition": "Make_activity__mandatory_on_class_template__(string activityName, string templateName)"
        },
        "saveclasstemplate()": {
          "name": "Save_Class_Template_",
          "key": "saveclasstemplate()",
          "definition": "Save_Class_Template_(string classTemplateName)"
        },
        "setactivitycostto()": {
          "name": "Set_Activity_Cost_to",
          "key": "setactivitycostto()",
          "definition": "Set_Activity_Cost_to( int activityCost )"
        },
        "verifyactivityinstructionmethodis()": {
          "name": "Verify_Activity_Instruction_Method_is",
          "key": "verifyactivityinstructionmethodis()",
          "definition": "Verify_Activity_Instruction_Method_is( string activityName, string instructionMethodName )"
        },
        "graduatefromclasson()": {
          "name": "Graduate__from_class__on__",
          "key": "graduatefromclasson()",
          "definition": "Graduate__from_class__on__(string personName, string className, DateTime graduationDate)"
        },
        "setclasstemplatecostto()": {
          "name": "Set_Class_Template_Cost_to__",
          "key": "setclasstemplatecostto()",
          "definition": "Set_Class_Template_Cost_to__( string cost )"
        },
        "verifyclasstemplatehasactivitywithsubactivity()": {
          "name": "verify_class_template_has_activity_with_subactivity",
          "key": "verifyclasstemplatehasactivitywithsubactivity()",
          "definition": "verify_class_template_has_activity_with_subactivity( string templateName, string activityName, string subActivityName )"
        },
        "verifydoesnotcontainconductandperformancereport()": {
          "name": "Verify_does_not_contain_Conduct_and_Performance_Report",
          "key": "verifydoesnotcontainconductandperformancereport()",
          "definition": "Verify_does_not_contain_Conduct_and_Performance_Report(string classDefinitionName, string reportName)"
        },
        "makeactivityinclasstemplateschedulable()": {
          "name": "Make_activity_in_class_template_schedulable",
          "key": "makeactivityinclasstemplateschedulable()",
          "definition": "Make_activity_in_class_template_schedulable(string activityName, string classTemplateName)"
        },
        "addtesttoactivityinclass()": {
          "name": "Add_test__to_activity__in_class__",
          "key": "addtesttoactivityinclass()",
          "definition": "Add_test__to_activity__in_class__(string testName, string activityName, string className)"
        },
        "verifylistcontainstestnamedwithstudenttestsrecordedfortakenumber()": {
          "name": "verify_list_contains_test_named__with__student_tests_recorded_for_take_number_",
          "key": "verifylistcontainstestnamedwithstudenttestsrecordedfortakenumber()",
          "definition": "verify_list_contains_test_named__with__student_tests_recorded_for_take_number_( string testName, int studentTestCount, int takeNumber )"
        },
        "addsubactivitywithlengthofminutes()": {
          "name": "Add_subactivity__with_length_of__minutes",
          "key": "addsubactivitywithlengthofminutes()",
          "definition": "Add_subactivity__with_length_of__minutes( string activityName, int numMinutes )"
        },
        "validateclasstemplatenamed()": {
          "name": "Validate_Class_Template_named__",
          "key": "validateclasstemplatenamed()",
          "definition": "Validate_Class_Template_named__(string templateName)"
        },
        "verifythathasenrollmentudfinclassofwithvalue()": {
          "name": "Verify_that__has_enrollment_udf_in_class__of__with_value__",
          "key": "verifythathasenrollmentudfinclassofwithvalue()",
          "definition": "Verify_that__has_enrollment_udf_in_class__of__with_value__(string personName, string className, string udfLabel, string udfValue)"
        },
        "verifyendofclassautograduationwillsetgraduationdatetoforclass()": {
          "name": "Verify_End_of_Class_auto_graduation_will_set_graduation_date_to__for_class__",
          "key": "verifyendofclassautograduationwillsetgraduationdatetoforclass()",
          "definition": "Verify_End_of_Class_auto_graduation_will_set_graduation_date_to__for_class__(string gradDateOption, string className)"
        },
        "verifyactivitydoesnotexist()": {
          "name": "Verify_Activity_does_not_exist",
          "key": "verifyactivitydoesnotexist()",
          "definition": "Verify_Activity_does_not_exist( string activityName )"
        },
        "verifyendofclassautograduationwillsetgraduationdatetofortemplate()": {
          "name": "Verify_End_of_Class_auto_graduation_will_set_graduation_date_to__for_template__",
          "key": "verifyendofclassautograduationwillsetgraduationdatetofortemplate()",
          "definition": "Verify_End_of_Class_auto_graduation_will_set_graduation_date_to__for_template__(string gradDateOption, string templateName)"
        },
        "changeactivityonclassnameto()": {
          "name": "Change_Activity__on_Class__Name_to",
          "key": "changeactivityonclassnameto()",
          "definition": "Change_Activity__on_Class__Name_to(string activityName, string className, string newName)"
        },
        "createclasstemplatenamedinprogram()": {
          "name": "Create_Class_Template_named__in_Program",
          "key": "createclasstemplatenamedinprogram()",
          "definition": "Create_Class_Template_named__in_Program(string templateName, string programName)"
        },
        "addtesttoactivityinclasstemplate()": {
          "name": "Add_test__to_activity__in_class_template__",
          "key": "addtesttoactivityinclasstemplate()",
          "definition": "Add_test__to_activity__in_class_template__(string testName, string activityName, string templateName)"
        },
        "verifythattrainingclasshasretestgroupwithmaxof()": {
          "name": "Verify_that_training_class_has_retest_group_with_max_of",
          "key": "verifythattrainingclasshasretestgroupwithmaxof()",
          "definition": "Verify_that_training_class_has_retest_group_with_max_of( string className, string groupName, int max )"
        },
        "verifythatclasshascomments()": {
          "name": "Verify_that_class__has_comments",
          "key": "verifythatclasshascomments()",
          "definition": "Verify_that_class__has_comments(string className, string comments)"
        },
        "markactivityonclasstocountastraining()": {
          "name": "Mark_activity__on_class__to_count_as_training",
          "key": "markactivityonclasstocountastraining()",
          "definition": "Mark_activity__on_class__to_count_as_training(string activityName, string className)"
        },
        "setactivitypassfailbasetoonclasstemplate()": {
          "name": "Set_activity__pass_fail_base_to__on_class_template__",
          "key": "setactivitypassfailbasetoonclasstemplate()",
          "definition": "Set_activity__pass_fail_base_to__on_class_template__(string activityName, int passFailBase, string templateName)"
        },
        "verifyactivityminimumpassingscoreispercent()": {
          "name": "Verify_Activity_minimum_passing_score_is_percent",
          "key": "verifyactivityminimumpassingscoreispercent()",
          "definition": "Verify_Activity_minimum_passing_score_is_percent( string activityName, int minPassing )"
        },
        "setendofclasstoautograduatestudentsfortemplate()": {
          "name": "Set_End_of_Class_to_auto_graduate_students__for_template__",
          "key": "setendofclasstoautograduatestudentsfortemplate()",
          "definition": "Set_End_of_Class_to_auto_graduate_students__for_template__(string gradDateOption, string templateName)"
        },
        "setactivitytrainingdivisionto()": {
          "name": "Set_Activity_Training_Division_to",
          "key": "setactivitytrainingdivisionto()",
          "definition": "Set_Activity_Training_Division_to(string trainingDivisionName)"
        },
        "setceucredits()": {
          "name": "Set_CEU_credits",
          "key": "setceucredits()",
          "definition": "Set_CEU_credits(decimal value)"
        },
        "addcertificationtoassessmenttestonactivityontemplate()": {
          "name": "Add_certification__to_assessment_test__on_activity__on_template__",
          "key": "addcertificationtoassessmenttestonactivityontemplate()",
          "definition": "Add_certification__to_assessment_test__on_activity__on_template__(string certMasterName, string testName, string activityName, string templateName)"
        },
        "addpercentagetesttoactivityinclass()": {
          "name": "Add_percentage_test__to_activity__in_class__",
          "key": "addpercentagetesttoactivityinclass()",
          "definition": "Add_percentage_test__to_activity__in_class__(string testName, string activityName, string className)"
        },
        "addretestgroupnamedwithmaxoftoclasstemplate()": {
          "name": "Add_retest_group_named_with_max_of_to_class_template",
          "key": "addretestgroupnamedwithmaxoftoclasstemplate()",
          "definition": "Add_retest_group_named_with_max_of_to_class_template( string groupName, int max, string templateName )"
        },
        "setactivityminimumpassingscoretopercent()": {
          "name": "Set_Activity_minimum_passing_score_to_percent",
          "key": "setactivityminimumpassingscoretopercent()",
          "definition": "Set_Activity_minimum_passing_score_to_percent( int minPassScore )"
        },
        "makeactivityinclasstemplatecountastraining()": {
          "name": "Make_activity_in_class_template_count_as_training",
          "key": "makeactivityinclasstemplatecountastraining()",
          "definition": "Make_activity_in_class_template_count_as_training(string activityName, string classTemplateName)"
        },
        "verifythathasenrollmentinclasswithhealthissuesof()": {
          "name": "Verify_that__has_enrollment_in_class__with_health_issues_of__",
          "key": "verifythathasenrollmentinclasswithhealthissuesof()",
          "definition": "Verify_that__has_enrollment_in_class__with_health_issues_of__(string personName, string className, string healthIssues)"
        },
        "editretestgroupnamedwithmaxofretestsfor()": {
          "name": "Edit_retest_group_named__with_max_of__retests_for__",
          "key": "editretestgroupnamedwithmaxofretestsfor()",
          "definition": "Edit_retest_group_named__with_max_of__retests_for__(string groupName, int max, string trainingClassName)"
        },
        "addanactivitynamedtoclasstemplate()": {
          "name": "Add_an_activity_named_to_class_template",
          "key": "addanactivitynamedtoclasstemplate()",
          "definition": "Add_an_activity_named_to_class_template( string activityName, string templateName )"
        },
        "verifythatdoesnothaveactivityorsubactivity()": {
          "name": "Verify_that_does_not_have_activity_or_subactivity",
          "key": "verifythatdoesnothaveactivityorsubactivity()",
          "definition": "Verify_that_does_not_have_activity_or_subactivity(string className, string activityName)"
        },
        "createclasstemplatenamedinprogramfororganization()": {
          "name": "Create_Class_Template_named__in_Program_for_organization_",
          "key": "createclasstemplatenamedinprogramfororganization()",
          "definition": "Create_Class_Template_named__in_Program_for_organization_(string templateName, string programName, string orgName)"
        },
        "deleteclass()": {
          "name": "Delete_class__",
          "key": "deleteclass()",
          "definition": "Delete_class__(string className)"
        },
        "verifythatactivityinhaschildactivity()": {
          "name": "Verify_that_activity_in_has_child_activity",
          "key": "verifythatactivityinhaschildactivity()",
          "definition": "Verify_that_activity_in_has_child_activity(string parentActivityName, string className, string childActivityName)"
        },
        "createaclasstemplatenamed()": {
          "name": "Create_a_class_template_named",
          "key": "createaclasstemplatenamed()",
          "definition": "Create_a_class_template_named( string name )"
        },
        "verifycontainsconductandperformancereport()": {
          "name": "Verify_contains_Conduct_and_Performance_Report",
          "key": "verifycontainsconductandperformancereport()",
          "definition": "Verify_contains_Conduct_and_Performance_Report(string classDefinitionName, string reportName)"
        },
        "addschedulablesubactivitywithlengthofhours()": {
          "name": "Add_schedulable_subactivity__with_length_of__hours",
          "key": "addschedulablesubactivitywithlengthofhours()",
          "definition": "Add_schedulable_subactivity__with_length_of__hours( string activityName, int numHours )"
        },
        "usingclasstemplatefromacademy()": {
          "name": "Using_class_template__from_academy__",
          "key": "usingclasstemplatefromacademy()",
          "definition": "Using_class_template__from_academy__( string classTemplateName, string academyName )"
        },
        "addcertificationtoactivity()": {
          "name": "Add_certification__to_activity__",
          "key": "addcertificationtoactivity()",
          "definition": "Add_certification__to_activity__(string certMasterName, string activityName)"
        },
        "verifythatendson()": {
          "name": "Verify_that_ends_on",
          "key": "verifythatendson()",
          "definition": "Verify_that_ends_on( string className, DateTime date )"
        },
        "validateclasstemplatenamedinprogram()": {
          "name": "Validate_Class_Template_named__in_Program__",
          "key": "validateclasstemplatenamedinprogram()",
          "definition": "Validate_Class_Template_named__in_Program__(string templateName, string programName)"
        },
        "sethousingoptiontofortrainingclass()": {
          "name": "Set_housing_option_to__for_training_class__",
          "key": "sethousingoptiontofortrainingclass()",
          "definition": "Set_housing_option_to__for_training_class__(string option, string trainingClassName)"
        },
        "verifytestonactivityontrainingclasshascertification()": {
          "name": "Verify_test__on_activity__on_training_class__has_certification__",
          "key": "verifytestonactivityontrainingclasshascertification()",
          "definition": "Verify_test__on_activity__on_training_class__has_certification__(string testName, string actName, string trainingClassName, string certMaster)"
        },
        "usingclassnamed()": {
          "name": "using_class_named__",
          "key": "usingclassnamed()",
          "definition": "using_class_named__(string className)"
        },
        "addactivitytoclasstemplatewithlengthofhours()": {
          "name": "Add_activity__to_class_template__with_length_of__hours",
          "key": "addactivitytoclasstemplatewithlengthofhours()",
          "definition": "Add_activity__to_class_template__with_length_of__hours( string activityName, string templateName, int lengthInHours )"
        },
        "verifyactivityontrainingclasshascertification()": {
          "name": "Verify_activity__on_training_class__has_certification__",
          "key": "verifyactivityontrainingclasshascertification()",
          "definition": "Verify_activity__on_training_class__has_certification__(string actName, string trainingClassName, string certMaster)"
        },
        "saveactivityinclass()": {
          "name": "Save_Activity__in_class__",
          "key": "saveactivityinclass()",
          "definition": "Save_Activity__in_class__( string activityName, string className )"
        },
        "setactivitylengthtohoursandminutes()": {
          "name": "Set_Activity_length_to__hours_and__minutes",
          "key": "setactivitylengthtohoursandminutes()",
          "definition": "Set_Activity_length_to__hours_and__minutes( int numHours, int numMinutes )"
        },
        "verifyactivitycostis()": {
          "name": "Verify_Activity_Cost_is",
          "key": "verifyactivitycostis()",
          "definition": "Verify_Activity_Cost_is( string activityName, int cost )"
        },
        "setactivityreferenceto()": {
          "name": "Set_Activity_Reference_to__",
          "key": "setactivityreferenceto()",
          "definition": "Set_Activity_Reference_to__( string activityReference )"
        },
        "deletetestfromactivity()": {
          "name": "Delete_test__from_activity__",
          "key": "deletetestfromactivity()",
          "definition": "Delete_test__from_activity__(string testName, string activityName)"
        },
        "verifythatexists()": {
          "name": "Verify_that_exists",
          "key": "verifythatexists()",
          "definition": "Verify_that_exists( string className )"
        },
        "setsignupdetails()": {
          "name": "Set_signup_details",
          "key": "setsignupdetails()",
          "definition": "Set_signup_details(string value)"
        },
        "removeendofclasssurveyfor()": {
          "name": "Remove_end_of_class_survey_for__",
          "key": "removeendofclasssurveyfor()",
          "definition": "Remove_end_of_class_survey_for__(string className)"
        },
        "addactivitytoclasstemplate()": {
          "name": "Add_activity_to_class_template",
          "key": "addactivitytoclasstemplate()",
          "definition": "Add_activity_to_class_template( string activityName, string templateName )"
        },
        "setcomments()": {
          "name": "Set_comments",
          "key": "setcomments()",
          "definition": "Set_comments(string value)"
        },
        "verifyclasstemplatewaspersisted()": {
          "name": "verify_class_template__was_persisted",
          "key": "verifyclasstemplatewaspersisted()",
          "definition": "verify_class_template__was_persisted( string templateName )"
        },
        "verifyendofclassautoconfercertificationsforclass()": {
          "name": "Verify_End_of_Class__auto_confer_certifications_for_class__",
          "key": "verifyendofclassautoconfercertificationsforclass()",
          "definition": "Verify_End_of_Class__auto_confer_certifications_for_class__(string willWillNot, string trainingClassName)"
        },
        "verifyactivityrequirementsare()": {
          "name": "Verify_Activity_Requirements_are",
          "key": "verifyactivityrequirementsare()",
          "definition": "Verify_Activity_Requirements_are( string activityName, string requirements )"
        },
        "addstudentsubgrouptoinclasstemplate()": {
          "name": "Add_student_subgroup_to_in_class_template",
          "key": "addstudentsubgrouptoinclasstemplate()",
          "definition": "Add_student_subgroup_to_in_class_template( string subGroupName, string groupName, string templateName )"
        },
        "createactivityonclasstemplate()": {
          "name": "Create_Activity__on_Class_Template__",
          "key": "createactivityonclasstemplate()",
          "definition": "Create_Activity__on_Class_Template__( string activityName, string classTemplateName )"
        },
        "verifylistcontainstests()": {
          "name": "verify_list_contains__tests",
          "key": "verifylistcontainstests()",
          "definition": "verify_list_contains__tests(int testCount)"
        },
        "verifyclasstemplatehasactivityorsubactivitywithlengthhoursandminutes()": {
          "name": "verify_class_template__has_activity_or_subactivity_with_length__hours_and__minutes",
          "key": "verifyclasstemplatehasactivityorsubactivitywithlengthhoursandminutes()",
          "definition": "verify_class_template__has_activity_or_subactivity_with_length__hours_and__minutes(string templateName, string activityName, int hours, int minutes)"
        },
        "verifyclasstemplatehascertification()": {
          "name": "Verify_class_template__has_certification__",
          "key": "verifyclasstemplatehascertification()",
          "definition": "Verify_class_template__has_certification__(string classTemplate, string certMaster)"
        },
        "authorizeforschedulableactivityinclasstemplateexpiringon()": {
          "name": "Authorize_for_schedulable_activity_in_class_template_expiring_on",
          "key": "authorizeforschedulableactivityinclasstemplateexpiringon()",
          "definition": "Authorize_for_schedulable_activity_in_class_template_expiring_on( string instructorName, string activityName, string templateName, DateTime expirationDate )"
        },
        "verifythatisenrolledinclass()": {
          "name": "Verify_that__is_enrolled_in_class__",
          "key": "verifythatisenrolledinclass()",
          "definition": "Verify_that__is_enrolled_in_class__(string personName, string className)"
        },
        "verifythatschedulableactivityinclasshasauthorizationforexpiringon()": {
          "name": "Verify_that_schedulable_activity_in_class_has_authorization_for_expiring_on",
          "key": "verifythatschedulableactivityinclasshasauthorizationforexpiringon()",
          "definition": "Verify_that_schedulable_activity_in_class_has_authorization_for_expiring_on( string activityName, string className, string instructorName, DateTime expirationDate )"
        },
        "gettestlistforclass()": {
          "name": "get_test_list_for_class__",
          "key": "gettestlistforclass()",
          "definition": "get_test_list_for_class__(string className)"
        },
        "selectendofclassstaffsurveyfor()": {
          "name": "Select_end_of_class_staff_survey__for__",
          "key": "selectendofclassstaffsurveyfor()",
          "definition": "Select_end_of_class_staff_survey__for__(string surveyName, string className)"
        },
        "setactivityrequirementsto()": {
          "name": "Set_Activity_Requirements_to",
          "key": "setactivityrequirementsto()",
          "definition": "Set_Activity_Requirements_to( string activityRequirements )"
        },
        "addcertificationtoactivityontemplate()": {
          "name": "Add_certification__to_activity__on_template__",
          "key": "addcertificationtoactivityontemplate()",
          "definition": "Add_certification__to_activity__on_template__(string certMasterName, string activityName, string templateName)"
        },
        "verifyactivitylengthishoursandminutes()": {
          "name": "Verify_Activity_length_is_hours_and_minutes",
          "key": "verifyactivitylengthishoursandminutes()",
          "definition": "Verify_Activity_length_is_hours_and_minutes( string activityName, int numHours, int numMinutes )"
        },
        "setactivitytomandatory()": {
          "name": "Set_Activity_to_mandatory",
          "key": "setactivitytomandatory()",
          "definition": "Set_Activity_to_mandatory()"
        },
        "createtrainingclassnamedfromstartingonendingonwithstudents()": {
          "name": "Create_training_class_named__from__starting_on__ending_on__with__students",
          "key": "createtrainingclassnamedfromstartingonendingonwithstudents()",
          "definition": "Create_training_class_named__from__starting_on__ending_on__with__students(string className, string templateName, DateTime start, DateTime end, int numberOfProjectedStudents)"
        },
        "cancelclass()": {
          "name": "Cancel_class__",
          "key": "cancelclass()",
          "definition": "Cancel_class__( string className )"
        },
        "verifyactivityexists()": {
          "name": "Verify_Activity_exists",
          "key": "verifyactivityexists()",
          "definition": "Verify_Activity_exists( string activityName )"
        },
        "verifythathoursforclassis()": {
          "name": "Verify_that_hours_for_class__is__",
          "key": "verifythathoursforclassis()",
          "definition": "Verify_that_hours_for_class__is__(string className, string length)"
        },
        "verifythatclasshasstudentgroup()": {
          "name": "Verify_that_class_has_student_group",
          "key": "verifythatclasshasstudentgroup()",
          "definition": "Verify_that_class_has_student_group( string className, string groupName )"
        },
        "sethousingdatesfortrainingclasstosameasclassdatesandreservefor()": {
          "name": "Set_housing_dates_for_training_class__to_same_as_class_dates_and_reserve_for__",
          "key": "sethousingdatesfortrainingclasstosameasclassdatesandreservefor()",
          "definition": "Set_housing_dates_for_training_class__to_same_as_class_dates_and_reserve_for__(string trainingClassName, int numReservations)"
        },
        "createalldefaultedclasstemplate()": {
          "name": "Create_All_Defaulted_Class_Template",
          "key": "createalldefaultedclasstemplate()",
          "definition": "Create_All_Defaulted_Class_Template()"
        },
        "usingclasstemplate()": {
          "name": "Using_class_template_",
          "key": "usingclasstemplate()",
          "definition": "Using_class_template_( string classTemplateName )"
        },
        "verifythatclasshasprojectedstudents()": {
          "name": "Verify_that_class_has_projected_students",
          "key": "verifythatclasshasprojectedstudents()",
          "definition": "Verify_that_class_has_projected_students(string className, int count)"
        },
        "setlocationnameforclassto()": {
          "name": "Set_location_name_for_class__to__",
          "key": "setlocationnameforclassto()",
          "definition": "Set_location_name_for_class__to__(string className, string locationName)"
        },
        "setendofclasstoautoconfercertificationsforclass()": {
          "name": "Set_End_of_Class_to_auto_confer_certifications_for_class__",
          "key": "setendofclasstoautoconfercertificationsforclass()",
          "definition": "Set_End_of_Class_to_auto_confer_certifications_for_class__(string trainingClassName)"
        },
        "addschedulablesubactivitywithlengthofminutes()": {
          "name": "Add_schedulable_subactivity__with_length_of__minutes",
          "key": "addschedulablesubactivitywithlengthofminutes()",
          "definition": "Add_schedulable_subactivity__with_length_of__minutes( string activityName, int numMinutes )"
        },
        "setendofclasstoautograduatestudentsforclass()": {
          "name": "Set_End_of_Class_to_auto_graduate_students__for_class__",
          "key": "setendofclasstoautograduatestudentsforclass()",
          "definition": "Set_End_of_Class_to_auto_graduate_students__for_class__(string gradDateOption, string trainingClassName)"
        },
        "verifyactivityontemplatehastestwithallowproctoraccess()": {
          "name": "Verify_activity__on_template__has_test__with_allow_proctor_access__",
          "key": "verifyactivityontemplatehastestwithallowproctoraccess()",
          "definition": "Verify_activity__on_template__has_test__with_allow_proctor_access__(string actName, string templateName, string testName, bool allowProctorAccess)"
        },
        "createtimestampwithcurrentsystemtime()": {
          "name": "Create_time_stamp_with_current_system_time",
          "key": "createtimestampwithcurrentsystemtime()",
          "definition": "Create_time_stamp_with_current_system_time(string timeStampName)"
        },
        "verifythatisnotenrolledinclass()": {
          "name": "Verify_that__is_not_enrolled_in_class__",
          "key": "verifythatisnotenrolledinclass()",
          "definition": "Verify_that__is_not_enrolled_in_class__(string personName, string className)"
        },
        "removecertificationfromactivity()": {
          "name": "Remove_certification__from_activity__",
          "key": "removecertificationfromactivity()",
          "definition": "Remove_certification__from_activity__(string certMasterName, string activityName)"
        },
        "setactivitycountsastraining()": {
          "name": "Set_Activity_counts_as_training",
          "key": "setactivitycountsastraining()",
          "definition": "Set_Activity_counts_as_training()"
        },
        "createtrainingclassnamedfromstartingonendingonwithstatus()": {
          "name": "Create_training_class_named__from__starting_on__ending_on__with_status_",
          "key": "createtrainingclassnamedfromstartingonendingonwithstatus()",
          "definition": "Create_training_class_named__from__starting_on__ending_on__with_status_( string className, string templateName, DateTime start, DateTime end, ClassStatus status )"
        },
        "verifyendofclassautoconfercertificationsfortemplate()": {
          "name": "Verify_End_of_Class__auto_confer_certifications_for_template__",
          "key": "verifyendofclassautoconfercertificationsfortemplate()",
          "definition": "Verify_End_of_Class__auto_confer_certifications_for_template__(string willWillNot, string templateName)"
        },
        "verifyclasstemplatehasactivitywithlengthhoursandminutes()": {
          "name": "verify_class_template__has_activity_with_length__hours_and__minutes",
          "key": "verifyclasstemplatehasactivitywithlengthhoursandminutes()",
          "definition": "verify_class_template__has_activity_with_length__hours_and__minutes(string templateName, string activityName, int hours, int minutes)"
        },
        "verifyactivityontemplatehascertification()": {
          "name": "Verify_activity__on_template__has_certification__",
          "key": "verifyactivityontemplatehascertification()",
          "definition": "Verify_activity__on_template__has_certification__(string actName, string templateName, string certMaster)"
        },
        "verifyendofclassisgraduatestudentsfortemplate()": {
          "name": "Verify_End_of_Class_is__graduate_students_for_template__",
          "key": "verifyendofclassisgraduatestudentsfortemplate()",
          "definition": "Verify_End_of_Class_is__graduate_students_for_template__(string endOfClassAction, string templateName)"
        },
        "verifyactivityismandatory()": {
          "name": "Verify_Activity_is_mandatory",
          "key": "verifyactivityismandatory()",
          "definition": "Verify_Activity_is_mandatory( string activityName )"
        },
        "selectconductandperformancereportfor()": {
          "name": "Select_Conduct_and_Performance_Report_for_",
          "key": "selectconductandperformancereportfor()",
          "definition": "Select_Conduct_and_Performance_Report_for_(string reportName, string classDefinitionName)"
        },
        "saveclass()": {
          "name": "Save_class",
          "key": "saveclass()",
          "definition": "Save_class()"
        },
        "verifyclasstemplatehasactivitywithsubactivitywithsubactivity()": {
          "name": "verify_class_template_has_activity_with_subactivity_with_subactivity",
          "key": "verifyclasstemplatehasactivitywithsubactivitywithsubactivity()",
          "definition": "verify_class_template_has_activity_with_subactivity_with_subactivity(string templateName, string activityName, string subActivityName1, string subActivityName2)"
        },
        "getclasstemplate()": {
          "name": "Get_class_template",
          "key": "getclasstemplate()",
          "definition": "Get_class_template( string templateName )"
        },
        "verifyactivityisnotmandatory()": {
          "name": "Verify_Activity_is_not_mandatory",
          "key": "verifyactivityisnotmandatory()",
          "definition": "Verify_Activity_is_not_mandatory( string activityName )"
        },
        "addactivitytoclass()": {
          "name": "Add_activity__to_class__",
          "key": "addactivitytoclass()",
          "definition": "Add_activity__to_class__( string activityName, string className )"
        },
        "verifytestonactivityontemplatehascertification()": {
          "name": "Verify_test__on_activity__on_template__has_certification__",
          "key": "verifytestonactivityontemplatehascertification()",
          "definition": "Verify_test__on_activity__on_template__has_certification__(string testName, string actName, string templateName, string certMaster)"
        },
        "createprogramcategory()": {
          "name": "Create_program_category__",
          "key": "createprogramcategory()",
          "definition": "Create_program_category__(string categoryName)"
        },
        "verifyactivityontemplatehastest()": {
          "name": "Verify_activity__on_template__has_test__",
          "key": "verifyactivityontemplatehastest()",
          "definition": "Verify_activity__on_template__has_test__(string actName, string templateName, string testName)"
        },
        "verifyclassactivitywaspersisted()": {
          "name": "verify_class_activity__was_persisted",
          "key": "verifyclassactivitywaspersisted()",
          "definition": "verify_class_activity__was_persisted( string activityName )"
        },
        "setactivityinstructionmethodto()": {
          "name": "Set_Activity_Instruction_Method_to",
          "key": "setactivityinstructionmethodto()",
          "definition": "Set_Activity_Instruction_Method_to( string instructionTypeName )"
        },
        "weightforactivityis()": {
          "name": "Weight_for_activity__is__",
          "key": "weightforactivityis()",
          "definition": "Weight_for_activity__is__(string activityName, decimal weight)"
        },
        "setenrollmenttypeforclasstodirect()": {
          "name": "Set_enrollment_type_for_class__to_direct",
          "key": "setenrollmenttypeforclasstodirect()",
          "definition": "Set_enrollment_type_for_class__to_direct(string className)"
        },
        "verifyendofclassisgraduatestudentsforclass()": {
          "name": "Verify_End_of_Class_is__graduate_students_for_class__",
          "key": "verifyendofclassisgraduatestudentsforclass()",
          "definition": "Verify_End_of_Class_is__graduate_students_for_class__(string endOfClassAction, string trainingClassName)"
        },
        "verifytestonactivityontrainingclasshasnocertifications()": {
          "name": "Verify_test__on_activity__on_training_class__has_no_certifications",
          "key": "verifytestonactivityontrainingclasshasnocertifications()",
          "definition": "Verify_test__on_activity__on_training_class__has_no_certifications(string testName, string actName, string trainingClassName)"
        },
        "setactivitypassfailbaseto()": {
          "name": "Set_activity_pass_fail_base_to__",
          "key": "setactivitypassfailbaseto()",
          "definition": "Set_activity_pass_fail_base_to__(int passFailBase)"
        },
        "deleteactivityfromclasstemplate()": {
          "name": "Delete_Activity__from_Class_template__",
          "key": "deleteactivityfromclasstemplate()",
          "definition": "Delete_Activity__from_Class_template__( string activityName, string classTemplateName )"
        },
        "verifytrainingclasshascertifications()": {
          "name": "Verify_training_class__has_certifications__",
          "key": "verifytrainingclasshascertifications()",
          "definition": "Verify_training_class__has_certifications__(string trainingClassName, List<string> certifications)"
        },
        "createactivityonclass()": {
          "name": "Create_Activity__on_Class__",
          "key": "createactivityonclass()",
          "definition": "Create_Activity__on_Class__( string activityName, string className )"
        },
        "verifythatstartson()": {
          "name": "Verify_that_starts_on",
          "key": "verifythatstartson()",
          "definition": "Verify_that_starts_on( string className, DateTime date )"
        },
        "graduatefromclass()": {
          "name": "Graduate__from_class__",
          "key": "graduatefromclass()",
          "definition": "Graduate__from_class__(string personName, string className)"
        },
        "verifytrainingclasshascertification()": {
          "name": "Verify_training_class__has_certification__",
          "key": "verifytrainingclasshascertification()",
          "definition": "Verify_training_class__has_certification__(string trainingClassName, string certMaster)"
        },
        "usingclass()": {
          "name": "Using_class__",
          "key": "usingclass()",
          "definition": "Using_class__(string className)"
        },
        "verifyactivitycountsastraining()": {
          "name": "Verify_Activity_counts_as_training",
          "key": "verifyactivitycountsastraining()",
          "definition": "Verify_Activity_counts_as_training( string activityName )"
        },
        "addanactivitynamedtoactivityinclasstemplate()": {
          "name": "Add_an_activity_named_to_activity_in_class_template",
          "key": "addanactivitynamedtoactivityinclasstemplate()",
          "definition": "Add_an_activity_named_to_activity_in_class_template( string childActivityName, string parentActivityName, string templateName )"
        },
        "verifyactivitydoesnotcountastraining()": {
          "name": "Verify_Activity_does_not_count_as_training",
          "key": "verifyactivitydoesnotcountastraining()",
          "definition": "Verify_Activity_does_not_count_as_training( string activityName )"
        },
        "weightfortestis()": {
          "name": "Weight_for_test__is__",
          "key": "weightfortestis()",
          "definition": "Weight_for_test__is__(string testName, decimal weight)"
        },
        "setfulldescription()": {
          "name": "Set_full_description",
          "key": "setfulldescription()",
          "definition": "Set_full_description(string value)"
        },
        "addcertificationtoassessmenttest()": {
          "name": "Add_certification__to_assessment_test__",
          "key": "addcertificationtoassessmenttest()",
          "definition": "Add_certification__to_assessment_test__(string certMasterName, string testName)"
        }
      },
      "key": "curriculumfnhmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "CurriculumFNHManagement",
      "instance-name": "CurriculumFNHManagement"
    },
    "testopiausercontext": {
      "namespace": "",
      "methods": {
        
      },
      "key": "testopiausercontext",
      "is-parent": false,
      "parent-name": null,
      "class-name": "TestopiaUserContext",
      "instance-name": "TestopiaUserContext"
    },
    "personfnhmanagement": {
      "namespace": "",
      "methods": {
        "verifyproctoraccountforhasstatus()": {
          "name": "Verify_proctor_account_for__has_status__",
          "key": "verifyproctoraccountforhasstatus()",
          "definition": "Verify_proctor_account_for__has_status__(string personName, string proctorStatus)"
        },
        "setaddresstoprimary()": {
          "name": "set_address__to_primary",
          "key": "setaddresstoprimary()",
          "definition": "set_address__to_primary(string description)"
        },
        "verifypersonhaseducationwithlevelanddegreetypeandmajorandminoranddegreeyear()": {
          "name": "Verify_person_has_education_with_level__and_degree_type__and_major__and_minor__and_degree_year__",
          "key": "verifypersonhaseducationwithlevelanddegreetypeandmajorandminoranddegreeyear()",
          "definition": "Verify_person_has_education_with_level__and_degree_type__and_major__and_minor__and_degree_year__(string educationLevel, string degreeType, string major, string minor, int? degreeYear)"
        },
        "verifyaddressismailing()": {
          "name": "Verify_address_is_mailing",
          "key": "verifyaddressismailing()",
          "definition": "Verify_address_is_mailing()"
        },
        "verifypersonhasnophonenumberrecord()": {
          "name": "Verify_person_has_no_phone_number_record",
          "key": "verifypersonhasnophonenumberrecord()",
          "definition": "Verify_person_has_no_phone_number_record()"
        },
        "setdateofbirthto()": {
          "name": "set_date_of_birth_to",
          "key": "setdateofbirthto()",
          "definition": "set_date_of_birth_to(DateTime dob)"
        },
        "createperson()": {
          "name": "Create_person",
          "key": "createperson()",
          "definition": "Create_person(string name, int? acadisID)"
        },
        "verifyzipforaddressis()": {
          "name": "Verify_zip_for_address__is__",
          "key": "verifyzipforaddressis()",
          "definition": "Verify_zip_for_address__is__(string addressDescription, string zip)"
        },
        "verifyproctoraccountforhasnousername()": {
          "name": "Verify_proctor_account_for__has_no_username",
          "key": "verifyproctoraccountforhasnousername()",
          "definition": "Verify_proctor_account_for__has_no_username(string personName)"
        },
        "setstatusto()": {
          "name": "Set_Status_to__",
          "key": "setstatusto()",
          "definition": "Set_Status_to__(PersonStatus status)"
        },
        "addnewprimaryaddresstoperson()": {
          "name": "add_new_primary_address__to_person",
          "key": "addnewprimaryaddresstoperson()",
          "definition": "add_new_primary_address__to_person(string addressLine1, string addressLine2, string city, string state, string zip, string personName)"
        },
        "addnewmailingaddresswithtypetopersonwithdescription()": {
          "name": "add_new_mailing_address__with_type__to_person__with_description__",
          "key": "addnewmailingaddresswithtypetopersonwithdescription()",
          "definition": "add_new_mailing_address__with_type__to_person__with_description__(string addressLine1, string addressLine2, string city, string state, string zip, string addressType, string personName, string description)"
        },
        "verifypersonhasdobof()": {
          "name": "Verify_person_has_DOB_of__",
          "key": "verifypersonhasdobof()",
          "definition": "Verify_person_has_DOB_of__(DateTime DOB)"
        },
        "verifypersonhasbloodtypeof()": {
          "name": "Verify_person_has_blood_type_of__",
          "key": "verifypersonhasbloodtypeof()",
          "definition": "Verify_person_has_blood_type_of__(string bloodType)"
        },
        "createpersonwithacademyid()": {
          "name": "Create_person_with_academy_id__",
          "key": "createpersonwithacademyid()",
          "definition": "Create_person_with_academy_id__(string name, string academyID)"
        },
        "considerperson()": {
          "name": "Consider_person__",
          "key": "considerperson()",
          "definition": "Consider_person__(string fullName)"
        },
        "verifypersonhasacademyidof()": {
          "name": "Verify_person_has_AcademyID_of__",
          "key": "verifypersonhasacademyidof()",
          "definition": "Verify_person_has_AcademyID_of__(string academyID)"
        },
        "usingperson()": {
          "name": "Using_Person",
          "key": "usingperson()",
          "definition": "Using_Person(string nameFirstLast)"
        },
        "verifyorganizationhasoptiongroups()": {
          "name": "Verify__organization_has__option_groups",
          "key": "verifyorganizationhasoptiongroups()",
          "definition": "Verify__organization_has__option_groups(string ordinal, int number)"
        },
        "verifyaddressisprimary()": {
          "name": "Verify_address_is_primary",
          "key": "verifyaddressisprimary()",
          "definition": "Verify_address_is_primary()"
        },
        "verifyaddresscountyis()": {
          "name": "Verify_address_county_is__",
          "key": "verifyaddresscountyis()",
          "definition": "Verify_address_county_is__(string county)"
        },
        "verifypersonhasnoeyecolor()": {
          "name": "Verify_person_has_no_eye_color",
          "key": "verifypersonhasnoeyecolor()",
          "definition": "Verify_person_has_no_eye_color()"
        },
        "setbloodtypeto()": {
          "name": "Set_blood_type_to",
          "key": "setbloodtypeto()",
          "definition": "Set_blood_type_to( string bloodTypeString )"
        },
        "verifyportalaccountforhasstatus()": {
          "name": "Verify_portal_account_for__has_status__",
          "key": "verifyportalaccountforhasstatus()",
          "definition": "Verify_portal_account_for__has_status__(string personName, string portalStatus)"
        },
        "setsuffixto()": {
          "name": "Set_suffix_to_",
          "key": "setsuffixto()",
          "definition": "Set_suffix_to_( string suffix )"
        },
        "verifypersonhasnobloodtype()": {
          "name": "Verify_person_has_no_blood_type",
          "key": "verifypersonhasnobloodtype()",
          "definition": "Verify_person_has_no_blood_type()"
        },
        "addphonenumberwithtypetoperson()": {
          "name": "add_phone_number__with_type__to_person__",
          "key": "addphonenumberwithtypetoperson()",
          "definition": "add_phone_number__with_type__to_person__(string phoneNumber, string type, string personName)"
        },
        "verifynumberofemailsforis()": {
          "name": "Verify_Number_of_Emails_for__is__",
          "key": "verifynumberofemailsforis()",
          "definition": "Verify_Number_of_Emails_for__is__(string personName, int numEmails)"
        },
        "verifypersonhasfullnameof()": {
          "name": "Verify_person_has_full_name_of__",
          "key": "verifypersonhasfullnameof()",
          "definition": "Verify_person_has_full_name_of__(string fullname)"
        },
        "createpersonwithgender()": {
          "name": "Create_person__with_gender__",
          "key": "createpersonwithgender()",
          "definition": "Create_person__with_gender__(string personName, string genderDesc)"
        },
        "verifyuserstatusequals()": {
          "name": "Verify_User__status_equals__",
          "key": "verifyuserstatusequals()",
          "definition": "Verify_User__status_equals__(string userName, LoginStatus status)"
        },
        "verifypersonhasmilitaryexperienceforbranchwithrankandspecialtyofanddischargetypeisandyearsofserviceis()": {
          "name": "Verify_person_has_military_experience_for_branch__with_rank__and_specialty_of__and_discharge_type_is__and_years_of_service_is__",
          "key": "verifypersonhasmilitaryexperienceforbranchwithrankandspecialtyofanddischargetypeisandyearsofserviceis()",
          "definition": "Verify_person_has_military_experience_for_branch__with_rank__and_specialty_of__and_discharge_type_is__and_years_of_service_is__(string branch, string rank, string specialty, string dischargeType, int yearsOfService)"
        },
        "verifypersonhasdriverslicenseof()": {
          "name": "Verify_person_has_drivers_license_of__",
          "key": "verifypersonhasdriverslicenseof()",
          "definition": "Verify_person_has_drivers_license_of__(string driversLicense)"
        },
        "verifypersonhasnodob()": {
          "name": "Verify_person_has_no_DOB",
          "key": "verifypersonhasnodob()",
          "definition": "Verify_person_has_no_DOB()"
        },
        "verifypersonhasheightof()": {
          "name": "Verify_person_has_height_of__",
          "key": "verifypersonhasheightof()",
          "definition": "Verify_person_has_height_of__(int heightInInches)"
        },
        "verifypersonhasinstructorudfof()": {
          "name": "Verify_person_has_instructor_udf__of__",
          "key": "verifypersonhasinstructorudfof()",
          "definition": "Verify_person_has_instructor_udf__of__(string udfName, string value)"
        },
        "verifypersondoesnotexist()": {
          "name": "Verify_Person__does_not_exist",
          "key": "verifypersondoesnotexist()",
          "definition": "Verify_Person__does_not_exist(string fullName)"
        },
        "verifyacadisaccountforhasusername()": {
          "name": "Verify_acadis_account_for__has_username__",
          "key": "verifyacadisaccountforhasusername()",
          "definition": "Verify_acadis_account_for__has_username__(string personName, string username)"
        },
        "verifypersonhasbirthdateof()": {
          "name": "Verify_person_has_birthdate_of__",
          "key": "verifypersonhasbirthdateof()",
          "definition": "Verify_person_has_birthdate_of__(DateTime dob)"
        },
        "verifyportalaccountforhasnousername()": {
          "name": "Verify_portal_account_for__has_no_username",
          "key": "verifyportalaccountforhasnousername()",
          "definition": "Verify_portal_account_for__has_no_username(string personName)"
        },
        "addemailaddressoftoperson()": {
          "name": "Add_email_address_of__to_person__",
          "key": "addemailaddressoftoperson()",
          "definition": "Add_email_address_of__to_person__(string emailAddress, string personName)"
        },
        "inactivatepersonandcheckreassignmentoptions()": {
          "name": "Inactivate_person_and_check_reassignment_options",
          "key": "inactivatepersonandcheckreassignmentoptions()",
          "definition": "Inactivate_person_and_check_reassignment_options()"
        },
        "addnewaddresstoperson()": {
          "name": "add_new_address__to_person",
          "key": "addnewaddresstoperson()",
          "definition": "add_new_address__to_person(string addressLine1, string addressLine2, string city, string state, string zip, string personName)"
        },
        "addnewaddresswithtypetopersonwithdescription()": {
          "name": "add_new_address__with_type__to_person_with_description__",
          "key": "addnewaddresswithtypetopersonwithdescription()",
          "definition": "add_new_address__with_type__to_person_with_description__(string addressLine1, string addressLine2, string city, string state, string zip, string addressType, string personName, string description)"
        },
        "verifypersonexists()": {
          "name": "Verify_Person__exists",
          "key": "verifypersonexists()",
          "definition": "Verify_Person__exists(string fullName)"
        },
        "setwebsitetoforperson()": {
          "name": "Set_website_to__for_person__",
          "key": "setwebsitetoforperson()",
          "definition": "Set_website_to__for_person__(string website, string personName)"
        },
        "verifyorganizationgroupoptionis()": {
          "name": "Verify__organization__group__option_is_",
          "key": "verifyorganizationgroupoptionis()",
          "definition": "Verify__organization__group__option_is_(string ordinal, string group, string option, string optionName)"
        },
        "verifypersonhasprimaryphonenumberof()": {
          "name": "Verify_person__has_primary_phone_number_of__",
          "key": "verifypersonhasprimaryphonenumberof()",
          "definition": "Verify_person__has_primary_phone_number_of__(string personName, string phoneNum)"
        },
        "verifypersonhaswebsites()": {
          "name": "Verify_person_has__websites",
          "key": "verifypersonhaswebsites()",
          "definition": "Verify_person_has__websites(int count)"
        },
        "verifypersonsupervisesemployeesinorganizations()": {
          "name": "Verify_person_supervises_employees_in__organizations",
          "key": "verifypersonsupervisesemployeesinorganizations()",
          "definition": "Verify_person_supervises_employees_in__organizations(int number)"
        },
        "changephonenumbertoforperson()": {
          "name": "change_phone_number__to__for_person__",
          "key": "changephonenumbertoforperson()",
          "definition": "change_phone_number__to__for_person__(string oldPhoneNum, string newPhoneNum, string personName)"
        },
        "verifypersonhaswebsite()": {
          "name": "Verify_person_has_website__",
          "key": "verifypersonhaswebsite()",
          "definition": "Verify_person_has_website__(string url)"
        },
        "addnewmailingaddresstoperson()": {
          "name": "add_new_mailing_address__to_person",
          "key": "addnewmailingaddresstoperson()",
          "definition": "add_new_mailing_address__to_person(string addressLine1, string addressLine2, string city, string state, string zip, string personName)"
        },
        "verifypersonwithacademyidandfirstnameandlastnameexists()": {
          "name": "Verify_person_with_academy_id__and_first_name__and_last_name__exists",
          "key": "verifypersonwithacademyidandfirstnameandlastnameexists()",
          "definition": "Verify_person_with_academy_id__and_first_name__and_last_name__exists(string academyID, string firstName, string lastName)"
        },
        "verifypersonisactive()": {
          "name": "Verify_Person_is_active",
          "key": "verifypersonisactive()",
          "definition": "Verify_Person_is_active(string personName)"
        },
        "addprimaryemailaddressoftoperson()": {
          "name": "Add_primary_email_address_of__to_person__",
          "key": "addprimaryemailaddressoftoperson()",
          "definition": "Add_primary_email_address_of__to_person__(string emailAddress, string personName)"
        },
        "selectforemployment()": {
          "name": "Select__for__employment",
          "key": "selectforemployment()",
          "definition": "Select__for__employment(string personName, string ordinal)"
        },
        "verifypersonhaseeocof()": {
          "name": "Verify_person_has_eeoc_of__",
          "key": "verifypersonhaseeocof()",
          "definition": "Verify_person_has_eeoc_of__(string eeoc)"
        },
        "createagroupofpeoplecalledwithbirthdate()": {
          "name": "Create_a_group_of_people_called_with_birthdate_",
          "key": "createagroupofpeoplecalledwithbirthdate()",
          "definition": "Create_a_group_of_people_called_with_birthdate_(int num, string groupName, DateTime date)"
        },
        "verifyportalaccountforhasusername()": {
          "name": "Verify_portal_account_for__has_username__",
          "key": "verifyportalaccountforhasusername()",
          "definition": "Verify_portal_account_for__has_username__(string personName, string email)"
        },
        "setimportkeyforaddressto()": {
          "name": "Set_Import_Key_for_address__to__",
          "key": "setimportkeyforaddressto()",
          "definition": "Set_Import_Key_for_address__to__(string addressDescription, string importKey)"
        },
        "verifyaddressstreet1is()": {
          "name": "Verify_address_street1_is__",
          "key": "verifyaddressstreet1is()",
          "definition": "Verify_address_street1_is__(string street1)"
        },
        "saveperson()": {
          "name": "save_person",
          "key": "saveperson()",
          "definition": "save_person()"
        },
        "verifypersonhaslanguagenamedandreadandwriteandlectureandtranslatethelanguage()": {
          "name": "Verify_person_has_language_named__and__read_and__write_and__lecture_and__translate_the_language",
          "key": "verifypersonhaslanguagenamedandreadandwriteandlectureandtranslatethelanguage()",
          "definition": "Verify_person_has_language_named__and__read_and__write_and__lecture_and__translate_the_language(string languageName, string canRead, string canWrite, string canLecture, string canTranslate)"
        },
        "verifyaddresszipis()": {
          "name": "Verify_address_zip_is__",
          "key": "verifyaddresszipis()",
          "definition": "Verify_address_zip_is__(string zip)"
        },
        "verifypersonhasemailaddress()": {
          "name": "Verify_person_has_email_address__",
          "key": "verifypersonhasemailaddress()",
          "definition": "Verify_person_has_email_address__(string emailAddr)"
        },
        "seteyecolorto()": {
          "name": "Set_eye_color_to",
          "key": "seteyecolorto()",
          "definition": "Set_eye_color_to( string eyeColorString )"
        },
        "createuserforwithusernameandactivedirectoryname()": {
          "name": "Create_User_For__With_Username__and_Active_Directory_name__",
          "key": "createuserforwithusernameandactivedirectoryname()",
          "definition": "Create_User_For__With_Username__and_Active_Directory_name__(string personAlias, string userName, string adUserName)"
        },
        "verifyline1foraddressis()": {
          "name": "Verify_line_1_for_address__is__",
          "key": "verifyline1foraddressis()",
          "definition": "Verify_line_1_for_address__is__(string addressDescription, string line1)"
        },
        "createpersonwithfirstnamelastnamemiddle()": {
          "name": "Create_person_with_first_name__last_name__middle__",
          "key": "createpersonwithfirstnamelastnamemiddle()",
          "definition": "Create_person_with_first_name__last_name__middle__(string first, string last, string middle)"
        },
        "verifyaddresstypeis()": {
          "name": "Verify_address_type_is__",
          "key": "verifyaddresstypeis()",
          "definition": "Verify_address_type_is__(string type)"
        },
        "addprimaryphonenumberwithtypetoperson()": {
          "name": "add_primary_phone_number__with_type__to_person__",
          "key": "addprimaryphonenumberwithtypetoperson()",
          "definition": "add_primary_phone_number__with_type__to_person__(string phoneNumber, string type, string personName)"
        },
        "verifyaddressstateisblank()": {
          "name": "Verify_address_state_is_blank",
          "key": "verifyaddressstateisblank()",
          "definition": "Verify_address_state_is_blank()"
        },
        "verifypersonhasnogender()": {
          "name": "Verify_person_has_no_gender",
          "key": "verifypersonhasnogender()",
          "definition": "Verify_person_has_no_gender()"
        },
        "verifypersonhashaircolorof()": {
          "name": "Verify_person_has_hair_color_of__",
          "key": "verifypersonhashaircolorof()",
          "definition": "Verify_person_has_hair_color_of__(string hairColor)"
        },
        "verifypersonhaseducationrecords()": {
          "name": "Verify_person_has__education_records",
          "key": "verifypersonhaseducationrecords()",
          "definition": "Verify_person_has__education_records(int count)"
        },
        "setssnto()": {
          "name": "Set_SSN_to_",
          "key": "setssnto()",
          "definition": "Set_SSN_to_( string ssn )"
        },
        "verifyprimaryaddressforis()": {
          "name": "Verify_primary_address_for__is__",
          "key": "verifyprimaryaddressforis()",
          "definition": "Verify_primary_address_for__is__(string personName, string addressDescription)"
        },
        "setweightto()": {
          "name": "Set_weight_to",
          "key": "setweightto()",
          "definition": "Set_weight_to( int weight )"
        },
        "setimportkeyforwebsiteto()": {
          "name": "Set_Import_Key_for__website__to__",
          "key": "setimportkeyforwebsiteto()",
          "definition": "Set_Import_Key_for__website__to__(string url, string importKey)"
        },
        "deleteperson()": {
          "name": "Delete_person__",
          "key": "deleteperson()",
          "definition": "Delete_person__(string fullName)"
        },
        "addnewprimaryaddresswithtypetopersonwithdescription()": {
          "name": "add_new_primary_address__with__type__to_person_with_description__",
          "key": "addnewprimaryaddresswithtypetopersonwithdescription()",
          "definition": "add_new_primary_address__with__type__to_person_with_description__(string addressLine1, string addressLine2, string city, string state, string zip, string addressType, string personName, string description)"
        },
        "verifyaddresscountyisblank()": {
          "name": "Verify_address_county_is_blank",
          "key": "verifyaddresscountyisblank()",
          "definition": "Verify_address_county_is_blank()"
        },
        "verifyuseraccountstatusis()": {
          "name": "Verify_user_account__status_is__",
          "key": "verifyuseraccountstatusis()",
          "definition": "Verify_user_account__status_is__(string username, string status)"
        },
        "makeaninstructor()": {
          "name": "Make__an_instructor",
          "key": "makeaninstructor()",
          "definition": "Make__an_instructor(string personName)"
        },
        "verifypersonhasdriverslicensestateof()": {
          "name": "Verify_person_has_drivers_license_state_of__",
          "key": "verifypersonhasdriverslicensestateof()",
          "definition": "Verify_person_has_drivers_license_state_of__(string driversLicenseState)"
        },
        "getbaselinepersonwithid()": {
          "name": "Get_baseline_person_with_id_",
          "key": "getbaselinepersonwithid()",
          "definition": "Get_baseline_person_with_id_(int ID)"
        },
        "addcommentto()": {
          "name": "Add_comment__to_",
          "key": "addcommentto()",
          "definition": "Add_comment__to_(string commentText, string personName)"
        },
        "verifypersonhasnohaircolor()": {
          "name": "Verify_person_has_no_hair_color",
          "key": "verifypersonhasnohaircolor()",
          "definition": "Verify_person_has_no_hair_color()"
        },
        "verifypersonhasnoheight()": {
          "name": "Verify_person_has_no_height",
          "key": "verifypersonhasnoheight()",
          "definition": "Verify_person_has_no_height()"
        },
        "verifypersonhasnoweight()": {
          "name": "Verify_person_has_no_weight",
          "key": "verifypersonhasnoweight()",
          "definition": "Verify_person_has_no_weight()"
        },
        "verifyline2foraddressis()": {
          "name": "Verify_line_2_for_address__is__",
          "key": "verifyline2foraddressis()",
          "definition": "Verify_line_2_for_address__is__(string addressDescription, string line2)"
        },
        "verifyaddressisnotprimary()": {
          "name": "Verify_address__is_not_primary",
          "key": "verifyaddressisnotprimary()",
          "definition": "Verify_address__is_not_primary(string addressDescription)"
        },
        "verifypersonhasphones()": {
          "name": "Verify_person_has__phones",
          "key": "verifypersonhasphones()",
          "definition": "Verify_person_has__phones(int count)"
        },
        "verifypersonhaseyecolorof()": {
          "name": "Verify_person_has_eye_color_of__",
          "key": "verifypersonhaseyecolorof()",
          "definition": "Verify_person_has_eye_color_of__(string eyeColor)"
        },
        "verifypersonhasnogenderset()": {
          "name": "Verify_person__has_no_gender_set",
          "key": "verifypersonhasnogenderset()",
          "definition": "Verify_person__has_no_gender_set(string personName)"
        },
        "setcountyonaddressto()": {
          "name": "set_county_on_address__to__",
          "key": "setcountyonaddressto()",
          "definition": "set_county_on_address__to__(string description, string county)"
        },
        "verifypersondoesnothaveudf()": {
          "name": "Verify_person_does_not_have_udf__",
          "key": "verifypersondoesnothaveudf()",
          "definition": "Verify_person_does_not_have_udf__(string udfName)"
        },
        "createuserforwithusername()": {
          "name": "Create_User_For__With_Username__",
          "key": "createuserforwithusername()",
          "definition": "Create_User_For__With_Username__(string personAlias, string userName)"
        },
        "verifyorganizationoptionis()": {
          "name": "Verify__organization__option_is_",
          "key": "verifyorganizationoptionis()",
          "definition": "Verify__organization__option_is_(string ordinal, string group, string optionText)"
        },
        "verifypersonisinactive()": {
          "name": "Verify_Person_is_inactive",
          "key": "verifypersonisinactive()",
          "definition": "Verify_Person_is_inactive(string personName)"
        },
        "consideraddresswithdescription()": {
          "name": "Consider_address_with_description__",
          "key": "consideraddresswithdescription()",
          "definition": "Consider_address_with_description__(string description)"
        },
        "createpersonwithfirstnamelastnamemiddlenamesuffix()": {
          "name": "Create_person_with_first_name__last_name__middle__name_suffix__",
          "key": "createpersonwithfirstnamelastnamemiddlenamesuffix()",
          "definition": "Create_person_with_first_name__last_name__middle__name_suffix__(string first, string last, string middle, string suffix)"
        },
        "verifypersonhasnonprimaryemailaddress()": {
          "name": "Verify_person__has_non_primary_email_address__",
          "key": "verifypersonhasnonprimaryemailaddress()",
          "definition": "Verify_person__has_non_primary_email_address__(string personName, string address)"
        },
        "verifypersonhasweightof()": {
          "name": "Verify_person_has_weight_of__",
          "key": "verifypersonhasweightof()",
          "definition": "Verify_person_has_weight_of__(int weightInPounds)"
        },
        "verifypersonhasssnof()": {
          "name": "Verify_person_has_SSN_of__",
          "key": "verifypersonhasssnof()",
          "definition": "Verify_person_has_SSN_of__(string SSN)"
        },
        "verifypersonhasgender()": {
          "name": "Verify_person__has_gender__",
          "key": "verifypersonhasgender()",
          "definition": "Verify_person__has_gender__(string personName, Gender gender)"
        },
        "verifypersonhasmilitaryservicerecords()": {
          "name": "Verify_person_has__military_service_records",
          "key": "verifypersonhasmilitaryservicerecords()",
          "definition": "Verify_person_has__military_service_records(int count)"
        },
        "verifyorganizationgroupis()": {
          "name": "Verify__organization__group_is_",
          "key": "verifyorganizationgroupis()",
          "definition": "Verify__organization__group_is_(string ordinal, string group, string groupName)"
        },
        "driverslicenseforstateis()": {
          "name": "Drivers_license_for_state__is__",
          "key": "driverslicenseforstateis()",
          "definition": "Drivers_license_for_state__is__( string state, string number )"
        },
        "verifystateforaddressis()": {
          "name": "Verify_state_for_address__is__",
          "key": "verifystateforaddressis()",
          "definition": "Verify_state_for_address__is__(string addressDescription, string state)"
        },
        "verifyproctoraccountforhasusername()": {
          "name": "Verify_proctor_account_for__has_username__",
          "key": "verifyproctoraccountforhasusername()",
          "definition": "Verify_proctor_account_for__has_username__(string personName, string email)"
        },
        "verifypersonhasaddresses()": {
          "name": "Verify_person_has__addresses",
          "key": "verifypersonhasaddresses()",
          "definition": "Verify_person_has__addresses(int count)"
        },
        "verifypersonhasphonenumberoftypewithareacodeandnumberofandextension()": {
          "name": "Verify_person_has_phone_number_of_type__with_area_code__and_number_of__and_extension__",
          "key": "verifypersonhasphonenumberoftypewithareacodeandnumberofandextension()",
          "definition": "Verify_person_has_phone_number_of_type__with_area_code__and_number_of__and_extension__(string phoneType, string areaCode, string phoneNumber, string extension)"
        },
        "verifypersonacademyidis()": {
          "name": "Verify_person_academyid_is_",
          "key": "verifypersonacademyidis()",
          "definition": "Verify_person_academyid_is_(string academyID)"
        },
        "verifypersonhasudfof()": {
          "name": "Verify_person_has_udf__of__",
          "key": "verifypersonhasudfof()",
          "definition": "Verify_person_has_udf__of__(string udfName, string value)"
        },
        "sethaircolorto()": {
          "name": "Set_hair_color_to",
          "key": "sethaircolorto()",
          "definition": "Set_hair_color_to( string hairColorString )"
        },
        "verifywebsiteforpersonis()": {
          "name": "Verify_website_for_person__is__",
          "key": "verifywebsiteforpersonis()",
          "definition": "Verify_website_for_person__is__(string personName, string website)"
        },
        "verifycommentsoncontain()": {
          "name": "Verify_comments_on__contain_",
          "key": "verifycommentsoncontain()",
          "definition": "Verify_comments_on__contain_(string personName, string commentText)"
        },
        "verifypersonhasnoprimaryemailaddress()": {
          "name": "Verify_person__has_no_primary_email_address",
          "key": "verifypersonhasnoprimaryemailaddress()",
          "definition": "Verify_person__has_no_primary_email_address(string personName)"
        },
        "setmiddlenameto()": {
          "name": "Set_middle_name_to__",
          "key": "setmiddlenameto()",
          "definition": "Set_middle_name_to__(string middleName)"
        },
        "inactivateuser()": {
          "name": "Inactivate_User__",
          "key": "inactivateuser()",
          "definition": "Inactivate_User__(string userName)"
        },
        "verifypersonhasprimaryemailaddress()": {
          "name": "Verify_person_has_primary_email_address__",
          "key": "verifypersonhasprimaryemailaddress()",
          "definition": "Verify_person_has_primary_email_address__(string emailAddr)"
        },
        "verifypersondoesnothaveinstructorudf()": {
          "name": "Verify_person_does_not_have_instructor_udf__",
          "key": "verifypersondoesnothaveinstructorudf()",
          "definition": "Verify_person_does_not_have_instructor_udf__(string udfName)"
        },
        "verifyhascomments()": {
          "name": "Verify__has__comments",
          "key": "verifyhascomments()",
          "definition": "Verify__has__comments(string personName, int commentCount)"
        },
        "createuserforwithusernameandpassword()": {
          "name": "Create_User_For__With_Username__and_password__",
          "key": "createuserforwithusernameandpassword()",
          "definition": "Create_User_For__With_Username__and_password__(string personAlias, string userName, string password)"
        },
        "verifyaddressstreet2is()": {
          "name": "Verify_address_street2_is__",
          "key": "verifyaddressstreet2is()",
          "definition": "Verify_address_street2_is__(string street2)"
        },
        "verifypersonhaslanguagerecords()": {
          "name": "Verify_person_has__language_records",
          "key": "verifypersonhaslanguagerecords()",
          "definition": "Verify_person_has__language_records(int count)"
        },
        "verifymailingaddressforis()": {
          "name": "Verify_mailing_address_for__is__",
          "key": "verifymailingaddressforis()",
          "definition": "Verify_mailing_address_for__is__(string personName, string addressDescription)"
        },
        "addphonenumberwithtypeandextensiontoperson()": {
          "name": "add_phone_number__with_type__and_extension__to_person__",
          "key": "addphonenumberwithtypeandextensiontoperson()",
          "definition": "add_phone_number__with_type__and_extension__to_person__(string phoneNumber, string type, string extension, string personName)"
        },
        "setimportkeyforemailaddressto()": {
          "name": "Set_Import_Key_for__email_address__to__",
          "key": "setimportkeyforemailaddressto()",
          "definition": "Set_Import_Key_for__email_address__to__(string address, string importKey)"
        },
        "setheightto()": {
          "name": "Set_height_to",
          "key": "setheightto()",
          "definition": "Set_height_to( int height )"
        },
        "verifypersonhasprimaryphone()": {
          "name": "Verify_person_has_primary_phone__",
          "key": "verifypersonhasprimaryphone()",
          "definition": "Verify_person_has_primary_phone__(string phoneNumber)"
        },
        "addemailaddressof()": {
          "name": "Add_email_address_of__",
          "key": "addemailaddressof()",
          "definition": "Add_email_address_of__(string emailAddress)"
        },
        "verifypersonhascomments()": {
          "name": "Verify_person_has__comments",
          "key": "verifypersonhascomments()",
          "definition": "Verify_person_has__comments(int commentCount)"
        },
        "seteeoccategoryto()": {
          "name": "set_eeoc_category_to__",
          "key": "seteeoccategoryto()",
          "definition": "set_eeoc_category_to__(string category)"
        },
        "setgenderto()": {
          "name": "Set_gender_to_",
          "key": "setgenderto()",
          "definition": "Set_gender_to_(string genderString)"
        },
        "setacademyidto()": {
          "name": "Set_academy_id_to_",
          "key": "setacademyidto()",
          "definition": "Set_academy_id_to_(string academyId)"
        },
        "verifyaddressisnotmailing()": {
          "name": "Verify_address__is_not_mailing",
          "key": "verifyaddressisnotmailing()",
          "definition": "Verify_address__is_not_mailing(string addressDescription)"
        },
        "verifypersonprimaryemailaddressis()": {
          "name": "Verify_person__primary_email_address_is_",
          "key": "verifypersonprimaryemailaddressis()",
          "definition": "Verify_person__primary_email_address_is_(string personName, string address)"
        },
        "setaddresstomailing()": {
          "name": "set_address__to_mailing",
          "key": "setaddresstomailing()",
          "definition": "set_address__to_mailing(string description)"
        },
        "createpersonwithacademyidandacadisid()": {
          "name": "create_person__with_academy_id__and_acadis_id__",
          "key": "createpersonwithacademyidandacadisid()",
          "definition": "create_person__with_academy_id__and_acadis_id__(string name, string academyID, int? acadisID)"
        },
        "verifypersonhasgenderof()": {
          "name": "Verify_person_has_gender_of__",
          "key": "verifypersonhasgenderof()",
          "definition": "Verify_person_has_gender_of__(Gender gender)"
        },
        "verifypersonhasemailaddresses()": {
          "name": "Verify_person_has__email_addresses",
          "key": "verifypersonhasemailaddresses()",
          "definition": "Verify_person_has__email_addresses(int count)"
        },
        "setpersonudfto()": {
          "name": "set_person_udf__to__",
          "key": "setpersonudfto()",
          "definition": "set_person_udf__to__(string udfName, string value)"
        },
        "verifycityforaddressis()": {
          "name": "Verify_city_for_address__is__",
          "key": "verifycityforaddressis()",
          "definition": "Verify_city_for_address__is__(string addressDescription, string city)"
        },
        "setasthepersonid()": {
          "name": "Set__as_the_person_id",
          "key": "setasthepersonid()",
          "definition": "Set__as_the_person_id(int ID)"
        },
        "verifyaddresscityis()": {
          "name": "Verify_address_city_is__",
          "key": "verifyaddresscityis()",
          "definition": "Verify_address_city_is__(string city)"
        },
        "verifypersonhasphone()": {
          "name": "Verify_person_has___phone__",
          "key": "verifypersonhasphone()",
          "definition": "Verify_person_has___phone__(string type, string phoneNumber)"
        },
        "addprimaryemailaddressof()": {
          "name": "Add_primary_email_address_of__",
          "key": "addprimaryemailaddressof()",
          "definition": "Add_primary_email_address_of__(string emailAddress)"
        },
        "setimportkeyforphoneto()": {
          "name": "Set_Import_Key_for__phone__to__",
          "key": "setimportkeyforphoneto()",
          "definition": "Set_Import_Key_for__phone__to__(string phoneType, string phoneNumber, string importKey)"
        },
        "addmilitaryservice()": {
          "name": "Add_military_service",
          "key": "addmilitaryservice()",
          "definition": "Add_military_service()"
        },
        "verifyorganizationiswithassignees()": {
          "name": "Verify__organization_is__with__assignees",
          "key": "verifyorganizationiswithassignees()",
          "definition": "Verify__organization_is__with__assignees(string ordinal, string orgName, int assignees)"
        },
        "createpersonnamedwithemailaddressof()": {
          "name": "Create_person_named__with_email_address_of__",
          "key": "createpersonnamedwithemailaddressof()",
          "definition": "Create_person_named__with_email_address_of__(string personName, string emailAddress)"
        },
        "verifypersonhasnoeeoc()": {
          "name": "Verify_person_has_no_eeoc",
          "key": "verifypersonhasnoeeoc()",
          "definition": "Verify_person_has_no_eeoc()"
        },
        "verifypersonhasnonprimaryphonenumberof()": {
          "name": "Verify_person__has_non_primary_phone_number_of__",
          "key": "verifypersonhasnonprimaryphonenumberof()",
          "definition": "Verify_person__has_non_primary_phone_number_of__(string personName, string phoneNum)"
        },
        "verifyaddressstateis()": {
          "name": "Verify_address_state_is__",
          "key": "verifyaddressstateis()",
          "definition": "Verify_address_state_is__(string state)"
        },
        "verifypersonhascomment()": {
          "name": "Verify_person_has_comment_",
          "key": "verifypersonhascomment()",
          "definition": "Verify_person_has_comment_(string commentText)"
        },
        "verifypersonhasstatusof()": {
          "name": "Verify_person_has_status_of__",
          "key": "verifypersonhasstatusof()",
          "definition": "Verify_person_has_status_of__(PersonStatus status)"
        }
      },
      "key": "personfnhmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "PersonFNHManagement",
      "instance-name": "PersonFNHManagement"
    },
    "usercreation": {
      "namespace": "",
      "methods": {
        "editusersetpersonid()": {
          "name": "Edit_user__set_personid__",
          "key": "editusersetpersonid()",
          "definition": "Edit_user__set_personid__(string username, string newPersonId)"
        },
        "updatepasswordmanagementdefaultssetpassworddurationtomonths()": {
          "name": "Update_Password_Management_Defaults_set_password_duration_to_months",
          "key": "updatepasswordmanagementdefaultssetpassworddurationtomonths()",
          "definition": "Update_Password_Management_Defaults_set_password_duration_to_months(int numMonths)"
        },
        "verifysavestatuscontains()": {
          "name": "Verify_save_status_contains",
          "key": "verifysavestatuscontains()",
          "definition": "Verify_save_status_contains(SaveResponse status)"
        },
        "verifynameis()": {
          "name": "Verify_name_is__",
          "key": "verifynameis()",
          "definition": "Verify_name_is__(string name)"
        },
        "getlistofusers()": {
          "name": "Get_List_Of_Users",
          "key": "getlistofusers()",
          "definition": "Get_List_Of_Users()"
        },
        "verifyuserhasacademyidnamewithstatusandroles()": {
          "name": "Verify_user_has_academy_id_name_with_status_and_roles",
          "key": "verifyuserhasacademyidnamewithstatusandroles()",
          "definition": "Verify_user_has_academy_id_name_with_status_and_roles(string username, string academyId, string fullName, string status, string roles)"
        },
        "createpersonnamed()": {
          "name": "Create_Person_named",
          "key": "createpersonnamed()",
          "definition": "Create_Person_named(string fullName)"
        },
        "updateusersetactivedirectoryusernameto()": {
          "name": "Update_User_set_active_directory_username_to",
          "key": "updateusersetactivedirectoryusernameto()",
          "definition": "Update_User_set_active_directory_username_to(string username, string adUsername)"
        },
        "reuseusernamefails()": {
          "name": "ReuseUsernameFails",
          "key": "reuseusernamefails()",
          "definition": "ReuseUsernameFails(string username)"
        },
        "createuserfromwithactivedirectoryusername()": {
          "name": "Create_user_from_with_active_directory_username",
          "key": "createuserfromwithactivedirectoryusername()",
          "definition": "Create_user_from_with_active_directory_username(string username, string personLastname, string adUsername)"
        },
        "createuserforwithusername()": {
          "name": "Create_User_for__with_username__",
          "key": "createuserforwithusername()",
          "definition": "Create_User_for__with_username__(string personName, string userName)"
        },
        "deleteuser()": {
          "name": "Delete_User",
          "key": "deleteuser()",
          "definition": "Delete_User(string username)"
        },
        "editusersetusername()": {
          "name": "Edit_user__set_username__",
          "key": "editusersetusername()",
          "definition": "Edit_user__set_username__(string username, string newUsername)"
        },
        "usingperson()": {
          "name": "Using_Person__",
          "key": "usingperson()",
          "definition": "Using_Person__(string fullName)"
        },
        "verifyuserdoesnotexist()": {
          "name": "Verify_User_does_not_exist",
          "key": "verifyuserdoesnotexist()",
          "definition": "Verify_User_does_not_exist(string username)"
        },
        "adduserwithpersonidandstatus()": {
          "name": "Add_user__with_personid__and__status",
          "key": "adduserwithpersonidandstatus()",
          "definition": "Add_user__with_personid__and__status(string username, int personId, LoginStatus status)"
        },
        "createseconduserfails()": {
          "name": "CreateSecondUserFails",
          "key": "createseconduserfails()",
          "definition": "CreateSecondUserFails(string userName)"
        },
        "updateusersetusernameto()": {
          "name": "Update_User_set_username_to",
          "key": "updateusersetusernameto()",
          "definition": "Update_User_set_username_to(string oldUsername, string newUsername)"
        },
        "delete()": {
          "name": "Delete__",
          "key": "delete()",
          "definition": "Delete__(string username)"
        },
        "verifyfirstnameequals()": {
          "name": "VerifyFirstNameEquals",
          "key": "verifyfirstnameequals()",
          "definition": "VerifyFirstNameEquals(string firstName)"
        },
        "adduserwithpersonidstatusandallfieldspopulated()": {
          "name": "Add_user__with_personid__status_and_all_fields_populated",
          "key": "adduserwithpersonidstatusandallfieldspopulated()",
          "definition": "Add_user__with_personid__status_and_all_fields_populated(string username, int personId, LoginStatus status)"
        },
        "createuserwithusername()": {
          "name": "CreateUserWithUserName",
          "key": "createuserwithusername()",
          "definition": "CreateUserWithUserName(string userName)"
        },
        "grantauthorization()": {
          "name": "Grant_authorization",
          "key": "grantauthorization()",
          "definition": "Grant_authorization(string auth)"
        },
        "createpersonlastnamefirstname()": {
          "name": "CreatePersonLastnameFirstname",
          "key": "createpersonlastnamefirstname()",
          "definition": "CreatePersonLastnameFirstname(string lastName, string firstName)"
        },
        "adduserwithpersonidstatusandonlyrequiredfieldspopulated()": {
          "name": "Add_user__with_personid____status_and_only_required_fields_populated",
          "key": "adduserwithpersonidstatusandonlyrequiredfieldspopulated()",
          "definition": "Add_user__with_personid____status_and_only_required_fields_populated(string username, string personId, LoginStatus status)"
        },
        "verifyuserstatusequals()": {
          "name": "VerifyUserStatusEquals",
          "key": "verifyuserstatusequals()",
          "definition": "VerifyUserStatusEquals(LoginStatus status)"
        },
        "verifyrolescontains()": {
          "name": "Verify_roles_contains__",
          "key": "verifyrolescontains()",
          "definition": "Verify_roles_contains__(string role)"
        },
        "changeusernameto()": {
          "name": "ChangeUsernameTo",
          "key": "changeusernameto()",
          "definition": "ChangeUsernameTo(string username)"
        },
        "updateusersetusernametoandactivedirectoryusernameto()": {
          "name": "Update_User_set_username_to_and_active_directory_username_to",
          "key": "updateusersetusernametoandactivedirectoryusernameto()",
          "definition": "Update_User_set_username_to_and_active_directory_username_to(string oldUsername, string newUsername, string adUsername)"
        },
        "verifyexpirationis2monthsfromnow()": {
          "name": "Verify_Expiration_is_2_months_from_now",
          "key": "verifyexpirationis2monthsfromnow()",
          "definition": "Verify_Expiration_is_2_months_from_now()"
        },
        "getuser()": {
          "name": "Get_user__",
          "key": "getuser()",
          "definition": "Get_user__(string username)"
        },
        "verifyonlyhaspermissionto()": {
          "name": "Verify_only_has_permission_to",
          "key": "verifyonlyhaspermissionto()",
          "definition": "Verify_only_has_permission_to(string username, List<string> orgs)"
        },
        "inactivateuser()": {
          "name": "Inactivate_User",
          "key": "inactivateuser()",
          "definition": "Inactivate_User()"
        },
        "verifylastloginis()": {
          "name": "Verify_last_login_is__",
          "key": "verifylastloginis()",
          "definition": "Verify_last_login_is__(DateTime lastLogin)"
        },
        "makecurrentpersonuserwithname()": {
          "name": "Make_current_person_user_with_name",
          "key": "makecurrentpersonuserwithname()",
          "definition": "Make_current_person_user_with_name( string userName )"
        },
        "verifyprimaryorganizationis()": {
          "name": "Verify_Primary_Organization_is__",
          "key": "verifyprimaryorganizationis()",
          "definition": "Verify_Primary_Organization_is__(string orgName)"
        },
        "useridnotequals()": {
          "name": "UserIDNotEquals",
          "key": "useridnotequals()",
          "definition": "UserIDNotEquals(string userID)"
        }
      },
      "key": "usercreation",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "UserCreation",
      "instance-name": "UserCreation"
    },
    "customerviewbase": {
      "namespace": "",
      "methods": {
        "dispose()": {
          "name": "Dispose",
          "key": "dispose()",
          "definition": "Dispose()"
        },
        "verifyrowvalueforblank()": {
          "name": "Verify_row__value_for__blank",
          "key": "verifyrowvalueforblank()",
          "definition": "Verify_row__value_for__blank(int row, string columnName, string isOrNot)"
        },
        "verifyis()": {
          "name": "Verify__is__",
          "key": "verifyis()",
          "definition": "Verify__is__(string columnName, string expectedValue)"
        },
        "verifyviewcontainsrecords()": {
          "name": "Verify_view_contains__records",
          "key": "verifyviewcontainsrecords()",
          "definition": "Verify_view_contains__records(int count)"
        },
        "verifyrowvalueforis()": {
          "name": "Verify_row__value_for__is__",
          "key": "verifyrowvalueforis()",
          "definition": "Verify_row__value_for__is__(int row, string columnName, string expectedValue)"
        },
        "verifyblank()": {
          "name": "Verify__blank",
          "key": "verifyblank()",
          "definition": "Verify__blank(string columnName, string isOrNot)"
        },
        "verifyrow()": {
          "name": "Verify_row__",
          "key": "verifyrow()",
          "definition": "Verify_row__(int rowNum)"
        },
        "verifyrowvalueforisblank()": {
          "name": "Verify_row__value_for__is_blank",
          "key": "verifyrowvalueforisblank()",
          "definition": "Verify_row__value_for__is_blank(int row, string columnName)"
        },
        "verifyisblank()": {
          "name": "Verify__is_blank",
          "key": "verifyisblank()",
          "definition": "Verify__is_blank(string columnName)"
        }
      },
      "key": "customerviewbase",
      "is-parent": true,
      "parent-name": null,
      "class-name": "CustomerViewWorkflowBase",
      "instance-name": "CustomerViewBase"
    },
    "emailmanagement": {
      "namespace": "",
      "methods": {
        "getnewportalaccountpasswordfromautoemail()": {
          "name": "Get_new_portal_account_password_from__auto_email",
          "key": "getnewportalaccountpasswordfromautoemail()",
          "definition": "Get_new_portal_account_password_from__auto_email(string ordinal)"
        },
        "verifythatthesentemailcontainsattachments()": {
          "name": "Verify_that_the__sent_email_contains__attachments",
          "key": "verifythatthesentemailcontainsattachments()",
          "definition": "Verify_that_the__sent_email_contains__attachments(string ordinal, int numberOfAttachments)"
        },
        "verifythatanemailwassentfromwithsubject()": {
          "name": "Verify_that_an_email_was_sent_from__with_subject__",
          "key": "verifythatanemailwassentfromwithsubject()",
          "definition": "Verify_that_an_email_was_sent_from__with_subject__(string fromAddress, string emailSubject)"
        },
        "verifythatemailhadasubject()": {
          "name": "Verify_that_email_had_a_subject_",
          "key": "verifythatemailhadasubject()",
          "definition": "Verify_that_email_had_a_subject_(string subject)"
        },
        "verifythatemailhadamessagebodyof()": {
          "name": "Verify_that_email_had_a_message_body_of_",
          "key": "verifythatemailhadamessagebodyof()",
          "definition": "Verify_that_email_had_a_message_body_of_(string messageBody)"
        },
        "verifythatemailhadamessagebodystartingwith()": {
          "name": "Verify_that_email_had_a_message_body_starting_with_",
          "key": "verifythatemailhadamessagebodystartingwith()",
          "definition": "Verify_that_email_had_a_message_body_starting_with_(string messageBody)"
        },
        "verifythatemailwasblindcarboncopiedto()": {
          "name": "Verify_that_email_was_blind_carbon_copied_to_",
          "key": "verifythatemailwasblindcarboncopiedto()",
          "definition": "Verify_that_email_was_blind_carbon_copied_to_(string bccAddress)"
        },
        "verifythatemailcontentdoesnotcontain()": {
          "name": "Verify_that_email_content_does_not_contain__",
          "key": "verifythatemailcontentdoesnotcontain()",
          "definition": "Verify_that_email_content_does_not_contain__(string partialContent)"
        },
        "verifythatemailcontentcontains()": {
          "name": "Verify_that_email_content_contains__",
          "key": "verifythatemailcontentcontains()",
          "definition": "Verify_that_email_content_contains__(string partialContent)"
        },
        "verifythatemailhadrecipient()": {
          "name": "Verify_that_email_had_recipient",
          "key": "verifythatemailhadrecipient()",
          "definition": "Verify_that_email_had_recipient(string address)"
        },
        "verifythatthesentautoemailisaportalwelcomemessageandcontainsanewpassword()": {
          "name": "Verify_that_the__sent_auto_email_is_a_portal_welcome_message_and_contains_a_new_password",
          "key": "verifythatthesentautoemailisaportalwelcomemessageandcontainsanewpassword()",
          "definition": "Verify_that_the__sent_auto_email_is_a_portal_welcome_message_and_contains_a_new_password(string ordinal)"
        },
        "verifyemailshavebeensent()": {
          "name": "Verify__emails_have_been_sent",
          "key": "verifyemailshavebeensent()",
          "definition": "Verify__emails_have_been_sent(int numberOfEmails)"
        },
        "verifythatthesentemailhassubjectof()": {
          "name": "Verify_that_the__sent_email_has_subject_of__",
          "key": "verifythatthesentemailhassubjectof()",
          "definition": "Verify_that_the__sent_email_has_subject_of__(string ordinal, string emailSubject)"
        },
        "verifythatthesentemailwassenttorecipients()": {
          "name": "Verify_that_the__sent_email_was_sent_to__recipients",
          "key": "verifythatthesentemailwassenttorecipients()",
          "definition": "Verify_that_the__sent_email_was_sent_to__recipients(string ordinal, int numRecipients)"
        },
        "verifythatthesentemailcontentcontains()": {
          "name": "Verify_that_the__sent_email_content_contains__",
          "key": "verifythatthesentemailcontentcontains()",
          "definition": "Verify_that_the__sent_email_content_contains__(string ordinal, string contentSnippet)"
        },
        "verifythatanemailwassentto()": {
          "name": "Verify_that_an_email_was_sent_to__",
          "key": "verifythatanemailwassentto()",
          "definition": "Verify_that_an_email_was_sent_to__(string recipient)"
        },
        "verifythatemailhadnoblindcarboncopiedrecipients()": {
          "name": "Verify_that_email_had_no_blind_carbon_copied_recipients",
          "key": "verifythatemailhadnoblindcarboncopiedrecipients()",
          "definition": "Verify_that_email_had_no_blind_carbon_copied_recipients()"
        },
        "emptyinbox()": {
          "name": "Empty_inbox",
          "key": "emptyinbox()",
          "definition": "Empty_inbox()"
        },
        "verifythatthesentautoemailisaportalwelcomeemailanddoesnotcontainapassword()": {
          "name": "Verify_that_the__sent_auto_email_is_a_portal_welcome_email_and_does_not_contain_a_password",
          "key": "verifythatthesentautoemailisaportalwelcomeemailanddoesnotcontainapassword()",
          "definition": "Verify_that_the__sent_auto_email_is_a_portal_welcome_email_and_does_not_contain_a_password(string ordinal)"
        },
        "verifythatemailwascarboncopiedto()": {
          "name": "Verify_that_email_was_carbon_copied_to_",
          "key": "verifythatemailwascarboncopiedto()",
          "definition": "Verify_that_email_was_carbon_copied_to_(string ccAddress)"
        },
        "verifythatemailhadareplytoaddress()": {
          "name": "Verify_that_email_had_a_reply_to_address",
          "key": "verifythatemailhadareplytoaddress()",
          "definition": "Verify_that_email_had_a_reply_to_address(string replyToAddress)"
        },
        "verifythatemailhadnorecipients()": {
          "name": "Verify_that_email_had_no_recipients",
          "key": "verifythatemailhadnorecipients()",
          "definition": "Verify_that_email_had_no_recipients()"
        },
        "verifyemailhasbeensenttofromat()": {
          "name": "Verify_email_has_been_sent_to__from__at_",
          "key": "verifyemailhasbeensenttofromat()",
          "definition": "Verify_email_has_been_sent_to__from__at_(string recipientAddress, string senderName, string senderAddress)"
        },
        "verifythatemailhadnocarboncopiedrecipients()": {
          "name": "Verify_that_email_had_no_carbon_copied_recipients",
          "key": "verifythatemailhadnocarboncopiedrecipients()",
          "definition": "Verify_that_email_had_no_carbon_copied_recipients()"
        },
        "verifythatthesentemailwassentby()": {
          "name": "Verify_that_the__sent_email_was_sent_by__",
          "key": "verifythatthesentemailwassentby()",
          "definition": "Verify_that_the__sent_email_was_sent_by__(string ordinal, string from)"
        },
        "verifythatthesentemailwassentto()": {
          "name": "Verify_that_the__sent_email_was_sent_to__",
          "key": "verifythatthesentemailwassentto()",
          "definition": "Verify_that_the__sent_email_was_sent_to__(string ordinal, string to)"
        },
        "verifythatnoemailwassentto()": {
          "name": "Verify_that_no_email_was_sent_to__",
          "key": "verifythatnoemailwassentto()",
          "definition": "Verify_that_no_email_was_sent_to__(string recipient)"
        }
      },
      "key": "emailmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "EmailManagement",
      "instance-name": "EmailManagement"
    },
    "testopiasmtpclientfactory": {
      "namespace": "",
      "methods": {
        
      },
      "key": "testopiasmtpclientfactory",
      "is-parent": false,
      "parent-name": null,
      "class-name": "TestopiaSmtpClientFactory",
      "instance-name": "TestopiaSmtpClientFactory"
    },
    "personnelreadinessrecord": {
      "namespace": "",
      "methods": {
        
      },
      "key": "personnelreadinessrecord",
      "is-parent": false,
      "parent-name": null,
      "class-name": "PersonnelReadinessRecord",
      "instance-name": "PersonnelReadinessRecord"
    },
    "listmanagement": {
      "namespace": "",
      "methods": {
        "selectasusage()": {
          "name": "Select__as_usage",
          "key": "selectasusage()",
          "definition": "Select__as_usage( string usage )"
        },
        "selectentry()": {
          "name": "Select_entry",
          "key": "selectentry()",
          "definition": "Select_entry( string entryName )"
        },
        "verifycerttypenotsavedindatabase()": {
          "name": "Verify_cert_type_not_saved_in_database",
          "key": "verifycerttypenotsavedindatabase()",
          "definition": "Verify_cert_type_not_saved_in_database(string entryName)"
        },
        "enterasname()": {
          "name": "Enter__as_name",
          "key": "enterasname()",
          "definition": "Enter__as_name( string entryName )"
        },
        "chooseasthebusinesscarddisplay()": {
          "name": "Choose_as_the_business_card_display",
          "key": "chooseasthebusinesscarddisplay()",
          "definition": "Choose_as_the_business_card_display( string displayString )"
        },
        "createlistitemwithdescriptionwithusage()": {
          "name": "Create_List_Item_with_Description_with_usage",
          "key": "createlistitemwithdescriptionwithusage()",
          "definition": "Create_List_Item_with_Description_with_usage(string list, string item, string description, string usage)"
        },
        "enterasdescription()": {
          "name": "Enter__as_description",
          "key": "enterasdescription()",
          "definition": "Enter__as_description( string entryDescription )"
        },
        "deletelistitem()": {
          "name": "Delete_List_Item__",
          "key": "deletelistitem()",
          "definition": "Delete_List_Item__(string lookupName, string entryName)"
        },
        "removeentry()": {
          "name": "Remove_entry",
          "key": "removeentry()",
          "definition": "Remove_entry(string itemName)"
        },
        "cancellistentry()": {
          "name": "Cancel_list_Entry",
          "key": "cancellistentry()",
          "definition": "Cancel_list_Entry()"
        },
        "savelistentry()": {
          "name": "Save_List_Entry",
          "key": "savelistentry()",
          "definition": "Save_List_Entry()"
        },
        "verifysearchresultsare()": {
          "name": "Verify_search_results_are__",
          "key": "verifysearchresultsare()",
          "definition": "Verify_search_results_are__(List<string> expectedNames)"
        },
        "searchforliststhestring()": {
          "name": "Search_for_lists__the_string__",
          "key": "searchforliststhestring()",
          "definition": "Search_for_lists__the_string__(string searchType, string searchString)"
        },
        "listcontainssystemdefineditem()": {
          "name": "List_contains_system_defined_item__",
          "key": "listcontainssystemdefineditem()",
          "definition": "List_contains_system_defined_item__(string itemName)"
        },
        "fetchentriesfor()": {
          "name": "Fetch_entries_for",
          "key": "fetchentriesfor()",
          "definition": "Fetch_entries_for( string lookupName )"
        },
        "listdoesnotcontain()": {
          "name": "List_does_not_contain",
          "key": "listdoesnotcontain()",
          "definition": "List_does_not_contain(string itemName)"
        },
        "listcontainsitems()": {
          "name": "List_contains__items",
          "key": "listcontainsitems()",
          "definition": "List_contains__items( int itemCount )"
        },
        "listcontains()": {
          "name": "List_contains__",
          "key": "listcontains()",
          "definition": "List_contains__( string itemName )"
        },
        "entrydescriptionis()": {
          "name": "Entry_Description_is",
          "key": "entrydescriptionis()",
          "definition": "Entry_Description_is(string entryDescription)"
        },
        "editlistitemwithusage()": {
          "name": "Edit__List_Item__with_usage__",
          "key": "editlistitemwithusage()",
          "definition": "Edit__List_Item__with_usage__(string list, string name, string usage)"
        },
        "verifyentrydisplayinbusinesscardissetto()": {
          "name": "Verify_entry__Display_in_Business_card_is_set_to__",
          "key": "verifyentrydisplayinbusinesscardissetto()",
          "definition": "Verify_entry__Display_in_Business_card_is_set_to__( string listEntryName, string displayString )"
        },
        "createlistitemunderwithnamewithdescriptionthatis()": {
          "name": "Create_List_Item_under_with_Name_with_Description_that_is",
          "key": "createlistitemunderwithnamewithdescriptionthatis()",
          "definition": "Create_List_Item_under_with_Name_with_Description_that_is(string list, string item, string description, string isAvailableOrNot)"
        },
        "listcontainswithusage()": {
          "name": "List_contains__with_usage__",
          "key": "listcontainswithusage()",
          "definition": "List_contains__with_usage__(string itemName, string usage)"
        },
        "managelist()": {
          "name": "Manage_List",
          "key": "managelist()",
          "definition": "Manage_List( string listName )"
        },
        "createinstructorabsencereasonwithnoname()": {
          "name": "Create_instructor_absence_reason_with_no_name",
          "key": "createinstructorabsencereasonwithnoname()",
          "definition": "Create_instructor_absence_reason_with_no_name()"
        },
        "createinstructorabsencereasonof()": {
          "name": "Create_instructor_absence_reason_of",
          "key": "createinstructorabsencereasonof()",
          "definition": "Create_instructor_absence_reason_of(string absenceReason)"
        },
        "enterasreferencingstatus()": {
          "name": "Enter__as_referencing_status",
          "key": "enterasreferencingstatus()",
          "definition": "Enter__as_referencing_status(string activeInactive)"
        },
        "verifylistmanagementsearchreturnedresults()": {
          "name": "Verify_list_management_search_returned__results",
          "key": "verifylistmanagementsearchreturnedresults()",
          "definition": "Verify_list_management_search_returned__results(int count)"
        },
        "createlistitemunderwithnameareferencingstatusofanddescriptionthatis()": {
          "name": "Create_list_item_under_with_name__a_referencing_status_of__and_description__that_is__",
          "key": "createlistitemunderwithnameareferencingstatusofanddescriptionthatis()",
          "definition": "Create_list_item_under_with_name__a_referencing_status_of__and_description__that_is__(string list, string item, string refStatus, string description, string isAvailableOrNot)"
        },
        "verifysavedisnotcasedindatabase()": {
          "name": "Verify_saved__is_not_cased__in_database",
          "key": "verifysavedisnotcasedindatabase()",
          "definition": "Verify_saved__is_not_cased__in_database(string entryName, string badCaseName)"
        },
        "entryhasusage()": {
          "name": "Entry_has_usage",
          "key": "entryhasusage()",
          "definition": "Entry_has_usage(string expectedUsage)"
        },
        "chooseasthereferencingrecordstatus()": {
          "name": "Choose__as_the_referencing_record_status",
          "key": "chooseasthereferencingrecordstatus()",
          "definition": "Choose__as_the_referencing_record_status( string refStatus )"
        },
        "editlistitemwithnewnamewithnewdescriptionwithusage()": {
          "name": "Edit__List_Item__with_new_name__with_new_description__with_usage__",
          "key": "editlistitemwithnewnamewithnewdescriptionwithusage()",
          "definition": "Edit__List_Item__with_new_name__with_new_description__with_usage__(string list, string oldName, string newName, string description, string usage)"
        }
      },
      "key": "listmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "ListManagement",
      "instance-name": "ListManagement"
    },
    "schedulingsetup": {
      "namespace": "",
      "methods": {
        "placeblockinatonday()": {
          "name": "Place_block__in__at__on_day__",
          "key": "placeblockinatonday()",
          "definition": "Place_block__in__at__on_day__(string blockName, string scheduleName, string time, int dayNumber)"
        },
        "createneverprofilenamed()": {
          "name": "Create_never_profile_named_",
          "key": "createneverprofilenamed()",
          "definition": "Create_never_profile_named_(string profileName)"
        },
        "createresourcecategory()": {
          "name": "Create_resource_category__",
          "key": "createresourcecategory()",
          "definition": "Create_resource_category__(string categoryName)"
        },
        "assigntodivision()": {
          "name": "Assign__to_division",
          "key": "assigntodivision()",
          "definition": "Assign__to_division(string activityName, string divisionName)"
        },
        "createstandardworkweekprofilenamed()": {
          "name": "Create_standard_workweek_profile_named_",
          "key": "createstandardworkweekprofilenamed()",
          "definition": "Create_standard_workweek_profile_named_(string profileName)"
        },
        "subdivideintosubdivisions()": {
          "name": "Subdivide__into__subdivisions",
          "key": "subdivideintosubdivisions()",
          "definition": "Subdivide__into__subdivisions(string activityName, int numSubdivisions)"
        },
        "makeequipmentactive()": {
          "name": "Make_equipment__active",
          "key": "makeequipmentactive()",
          "definition": "Make_equipment__active(string equipmentName)"
        },
        "createscheduletemplateforusing()": {
          "name": "Create_schedule_template__for__using__",
          "key": "createscheduletemplateforusing()",
          "definition": "Create_schedule_template__for__using__(string scheduleName, string templateName, string profileName)"
        },
        "placeanchoredsplittingblockinatonday()": {
          "name": "Place_anchored_splitting_block__in__at__on_day__",
          "key": "placeanchoredsplittingblockinatonday()",
          "definition": "Place_anchored_splitting_block__in__at__on_day__(string blockName, string scheduleName, string time, int dayNumber)"
        },
        "createclasstemplateunderwithactivitieseachhourslong()": {
          "name": "Create_class_template__under__with_activities__each__hours_long",
          "key": "createclasstemplateunderwithactivitieseachhourslong()",
          "definition": "Create_class_template__under__with_activities__each__hours_long(string templateName, string programName, string activities, int hours)"
        },
        "createuserwithusername()": {
          "name": "Create_user__with_username__",
          "key": "createuserwithusername()",
          "definition": "Create_user__with_username__(string personName, string userName)"
        },
        "changeequipmenttouseprofile()": {
          "name": "Change_equipment__to_use_profile__",
          "key": "changeequipmenttouseprofile()",
          "definition": "Change_equipment__to_use_profile__(string equipmentName, string profileName)"
        },
        "createalwaysprofilenamed()": {
          "name": "Create_always_profile_named_",
          "key": "createalwaysprofilenamed()",
          "definition": "Create_always_profile_named_(string profileName)"
        },
        "createequipmentnamedincategoryusingprofile()": {
          "name": "Create_equipment_named__in_category__using_profile__",
          "key": "createequipmentnamedincategoryusingprofile()",
          "definition": "Create_equipment_named__in_category__using_profile__(string equipmentName, string categoryName, string profileName)"
        },
        "makeequipmentinactive()": {
          "name": "Make_equipment__inactive",
          "key": "makeequipmentinactive()",
          "definition": "Make_equipment__inactive(string equipmentName)"
        }
      },
      "key": "schedulingsetup",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "SchedulingSetup",
      "instance-name": "SchedulingSetup"
    },
    "portaluser": {
      "namespace": "",
      "methods": {
        "verifypagelinkedinemailshowspersonasunknown()": {
          "name": "Verify_page_linked_in_email_shows_person_as_unknown",
          "key": "verifypagelinkedinemailshowspersonasunknown()",
          "definition": "Verify_page_linked_in_email_shows_person_as_unknown()"
        },
        "verifyportalaccessfordoesnothavetype()": {
          "name": "Verify_portal_access_for_does_not_have_type",
          "key": "verifyportalaccessfordoesnothavetype()",
          "definition": "Verify_portal_access_for_does_not_have_type(string fullName, string typeName)"
        },
        "verifythatportalsignupentryexistsforperson()": {
          "name": "Verify_that_portal_signup_entry_exists_for_person",
          "key": "verifythatportalsignupentryexistsforperson()",
          "definition": "Verify_that_portal_signup_entry_exists_for_person()"
        },
        "portaladministrativecontactis()": {
          "name": "Portal_administrative_contact_is",
          "key": "portaladministrativecontactis()",
          "definition": "Portal_administrative_contact_is(string param1)"
        },
        "allowpubliccertificationrequests()": {
          "name": "Allow_public_certification_requests",
          "key": "allowpubliccertificationrequests()",
          "definition": "Allow_public_certification_requests()"
        },
        "portalaffirmationtextis()": {
          "name": "Portal_affirmation_text_is",
          "key": "portalaffirmationtextis()",
          "definition": "Portal_affirmation_text_is(string param1)"
        },
        "verifypagelinkedinemaildisplaysdataforforperson()": {
          "name": "Verify_page_linked_in_email_displays_data_for__for_person__",
          "key": "verifypagelinkedinemaildisplaysdataforforperson()",
          "definition": "Verify_page_linked_in_email_displays_data_for__for_person__(string certName, string personName)"
        },
        "identificationquestionunderanswerisnot()": {
          "name": "identification_question_under_answer_is_NOT",
          "key": "identificationquestionunderanswerisnot()",
          "definition": "identification_question_under_answer_is_NOT(string strQuestionType, string strAnswer)"
        },
        "found()": {
          "name": "found",
          "key": "found()",
          "definition": "found(string personName)"
        },
        "allowportallessonplanrequests()": {
          "name": "Allow_portal_lesson_plan_requests",
          "key": "allowportallessonplanrequests()",
          "definition": "Allow_portal_lesson_plan_requests()"
        },
        "getagencyroster()": {
          "name": "get_agency_roster",
          "key": "getagencyroster()",
          "definition": "get_agency_roster()"
        },
        "verifypagelinkedinemailshowsnocertdata()": {
          "name": "Verify_page_linked_in_email_shows_no_cert_data",
          "key": "verifypagelinkedinemailshowsnocertdata()",
          "definition": "Verify_page_linked_in_email_shows_no_cert_data()"
        },
        "identificationquestionunderansweris()": {
          "name": "identification_question_under_answer_is",
          "key": "identificationquestionunderansweris()",
          "definition": "identification_question_under_answer_is(string strQuestionType, string strAnswer)"
        },
        "portalbodytext()": {
          "name": "Portal_Body_Text",
          "key": "portalbodytext()",
          "definition": "Portal_Body_Text(string param1)"
        },
        "verifythatanswersarecorrect()": {
          "name": "Verify_that_answers_are_correct",
          "key": "verifythatanswersarecorrect()",
          "definition": "Verify_that_answers_are_correct()"
        },
        "allowportalselfsignup()": {
          "name": "Allow_portal_self_signup",
          "key": "allowportalselfsignup()",
          "definition": "Allow_portal_self_signup()"
        },
        "createportalaccountforwithacademyidandemailisandpassword()": {
          "name": "Create_Portal_Account_For_With_Academyid_And_Email_Is_And_Password_",
          "key": "createportalaccountforwithacademyidandemailisandpassword()",
          "definition": "Create_Portal_Account_For_With_Academyid_And_Email_Is_And_Password_(string fullName, string academyId, string email, string strPassword)"
        },
        "verifypagelinkedinemailshowsnameassociatedwith()": {
          "name": "Verify_page_linked_in_email_shows_name_associated_with",
          "key": "verifypagelinkedinemailshowsnameassociatedwith()",
          "definition": "Verify_page_linked_in_email_shows_name_associated_with(string personName)"
        },
        "addportalaccessforwithtype()": {
          "name": "Add_portal_access_for_with_type",
          "key": "addportalaccessforwithtype()",
          "definition": "Add_portal_access_for_with_type(string fullName, PortalPermissionType type)"
        },
        "portalorganizationnicknameis()": {
          "name": "Portal_Organization_Nickname_is",
          "key": "portalorganizationnicknameis()",
          "definition": "Portal_Organization_Nickname_is(string param1)"
        },
        "sendcopyofcertificationsforlastnameacademyidtowithmyemailas()": {
          "name": "Send_copy_of_certifications_for_last_name__academy_id__to__with_my_email_as__",
          "key": "sendcopyofcertificationsforlastnameacademyidtowithmyemailas()",
          "definition": "Send_copy_of_certifications_for_last_name__academy_id__to__with_my_email_as__(string lastName, string academyID, string recipientEmail, string requestorEmail)"
        },
        "verifytheidandlastnamematchaperson()": {
          "name": "Verify_The_Id_And_Last_Name_Match_A_Person",
          "key": "verifytheidandlastnamematchaperson()",
          "definition": "Verify_The_Id_And_Last_Name_Match_A_Person()"
        },
        "getansweroptions()": {
          "name": "Get_answer_options",
          "key": "getansweroptions()",
          "definition": "Get_answer_options()"
        },
        "saveportalsettings()": {
          "name": "Save_portal_settings",
          "key": "saveportalsettings()",
          "definition": "Save_portal_settings()"
        },
        "generateguidwebaddress()": {
          "name": "generate_GUID_web_address",
          "key": "generateguidwebaddress()",
          "definition": "generate_GUID_web_address()"
        },
        "verifyportalaccessforisandhastype()": {
          "name": "Verify_portal_access_for__is__and_has_type",
          "key": "verifyportalaccessforisandhastype()",
          "definition": "Verify_portal_access_for__is__and_has_type(string fullName, PortalStatus accountStatus, string typeName)"
        },
        "portaltechsupporttextis()": {
          "name": "Portal_Tech_Support_Text_is",
          "key": "portaltechsupporttextis()",
          "definition": "Portal_Tech_Support_Text_is(string param1)"
        },
        "verifytherecipientswereandmyemail()": {
          "name": "Verify_the_recipients_were__and_my_email__",
          "key": "verifytherecipientswereandmyemail()",
          "definition": "Verify_the_recipients_were__and_my_email__(string recipientEmail, string requestorEmail)"
        },
        "createportalaccountforwithpassword()": {
          "name": "Create_Portal_Account_For_With_Password_",
          "key": "createportalaccountforwithpassword()",
          "definition": "Create_Portal_Account_For_With_Password_(string fullName, string strPassword)"
        },
        "allowproxysignup()": {
          "name": "Allow_proxy_signup",
          "key": "allowproxysignup()",
          "definition": "Allow_proxy_signup()"
        },
        "registrantacademyidisandlastnameisandemailis()": {
          "name": "Registrant_Academy_Id_Is_And_Last_Name_Is_And_Email_Is",
          "key": "registrantacademyidisandlastnameisandemailis()",
          "definition": "Registrant_Academy_Id_Is_And_Last_Name_Is_And_Email_Is(string acadId, string lastName, string emailAddress)"
        },
        "portalnameis()": {
          "name": "Portal_Name_is",
          "key": "portalnameis()",
          "definition": "Portal_Name_is(string param1)"
        },
        "verifyportalaccessforis()": {
          "name": "Verify_portal_access_for_is",
          "key": "verifyportalaccessforis()",
          "definition": "Verify_portal_access_for_is(string fullName, PortalStatus accountStatus)"
        }
      },
      "key": "portaluser",
      "is-parent": false,
      "parent-name": null,
      "class-name": "PortalUser",
      "instance-name": "PortalUser"
    },
    "trainingdata": {
      "namespace": "",
      "methods": {
        
      },
      "key": "trainingdata",
      "is-parent": false,
      "parent-name": null,
      "class-name": "TrainingData",
      "instance-name": "TrainingData"
    },
    "debugassertfailedexception": {
      "namespace": "",
      "methods": {
        
      },
      "key": "debugassertfailedexception",
      "is-parent": false,
      "parent-name": null,
      "class-name": "DebugAssertFailedException",
      "instance-name": "DebugAssertFailedException"
    },
    "exportinstructorassignments": {
      "namespace": "",
      "methods": {
        "verifytherearerows()": {
          "name": "Verify_there_are__rows",
          "key": "verifytherearerows()",
          "definition": "Verify_there_are__rows(int n)"
        },
        "export()": {
          "name": "Export",
          "key": "export()",
          "definition": "Export()"
        },
        "verifyis()": {
          "name": "Verify__is__",
          "key": "verifyis()",
          "definition": "Verify__is__(string column, string value)"
        },
        "beginverifyingrowfor()": {
          "name": "Begin_verifying_row_for__",
          "key": "beginverifyingrowfor()",
          "definition": "Begin_verifying_row_for__(string instructorName)"
        },
        "filterforprogram()": {
          "name": "Filter_for_program__",
          "key": "filterforprogram()",
          "definition": "Filter_for_program__(string programName)"
        }
      },
      "key": "exportinstructorassignments",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "ExportInstructorAssignmentsWorkflow",
      "instance-name": "ExportInstructorAssignments"
    },
    "weightdata": {
      "namespace": "",
      "methods": {
        
      },
      "key": "weightdata",
      "is-parent": false,
      "parent-name": null,
      "class-name": "WeightData",
      "instance-name": "WeightData"
    },
    "dynamiclabeling": {
      "namespace": "",
      "methods": {
        "setdynamiclabelforto()": {
          "name": "Set_dynamic_label_for__to__",
          "key": "setdynamiclabelforto()",
          "definition": "Set_dynamic_label_for__to__(DynamicLabelType dynamicLabelType, string dynamicLabelValue)"
        }
      },
      "key": "dynamiclabeling",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "DynamicLabeling",
      "instance-name": "DynamicLabeling"
    },
    "contingentcerthistory": {
      "namespace": "",
      "methods": {
        "verifyrecipienthaswarningflags()": {
          "name": "Verify_recipient_has_warning_flags__",
          "key": "verifyrecipienthaswarningflags()",
          "definition": "Verify_recipient_has_warning_flags__(List<string> expectedFlags)"
        },
        "ongeneratecertificationhistoryfor()": {
          "name": "On__generate_certification_history_for__",
          "key": "ongeneratecertificationhistoryfor()",
          "definition": "On__generate_certification_history_for__(DateTime today, string certName)"
        },
        "verifycertification()": {
          "name": "Verify_certification__",
          "key": "verifycertification()",
          "definition": "Verify_certification__(string certName)"
        },
        "verifythereareactions()": {
          "name": "Verify_there_are__actions",
          "key": "verifythereareactions()",
          "definition": "Verify_there_are__actions(int actionCount)"
        },
        "verifycertificationwasissuedon()": {
          "name": "Verify_certification_was_issued_on__",
          "key": "verifycertificationwasissuedon()",
          "definition": "Verify_certification_was_issued_on__(DateTime expectedIssue)"
        },
        "verifyrecipienthasnowarningflags()": {
          "name": "Verify_recipient_has_no_warning_flags",
          "key": "verifyrecipienthasnowarningflags()",
          "definition": "Verify_recipient_has_no_warning_flags()"
        },
        "ongraduatefromrefreshercourse()": {
          "name": "On__graduate_from_refresher_course__",
          "key": "ongraduatefromrefreshercourse()",
          "definition": "On__graduate_from_refresher_course__(DateTime graduationDate, string classTemplateName)"
        },
        "verifystatusis()": {
          "name": "Verify_status_is__",
          "key": "verifystatusis()",
          "definition": "Verify_status_is__(string statusName)"
        },
        "onseparatefrom()": {
          "name": "On__separate_from__",
          "key": "onseparatefrom()",
          "definition": "On__separate_from__(DateTime separationDate, string orgName)"
        },
        "createnewperson()": {
          "name": "Create_new_person",
          "key": "createnewperson()",
          "definition": "Create_new_person()"
        },
        "ongraduatefrom()": {
          "name": "On__graduate_from__",
          "key": "ongraduatefrom()",
          "definition": "On__graduate_from__(DateTime graduationDate, string classTemplateName)"
        }
      },
      "key": "contingentcerthistory",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "ContingentCertHistoryWorkflow",
      "instance-name": "ContingentCertHistory"
    },
    "testopiaemailsender": {
      "namespace": "",
      "methods": {
        "sendbulksame()": {
          "name": "SendBulkSame",
          "key": "sendbulksame()",
          "definition": "SendBulkSame(IEnumerable<string> recipients, IAutoEmail email)"
        },
        "sendautoemail()": {
          "name": "SendAutoEmail",
          "key": "sendautoemail()",
          "definition": "SendAutoEmail(string recipient, IAutoEmail email)"
        },
        "send()": {
          "name": "Send",
          "key": "send()",
          "definition": "Send(SendParams sendParams)"
        }
      },
      "key": "testopiaemailsender",
      "is-parent": false,
      "parent-name": null,
      "class-name": "TestopiaEmailSender",
      "instance-name": "TestopiaEmailSender"
    },
    "wisconsincustomviews": {
      "namespace": "",
      "methods": {
        "setexternalidofcountyto()": {
          "name": "Set_external_id_of_county_to",
          "key": "setexternalidofcountyto()",
          "definition": "Set_external_id_of_county_to(string stateName, string countyName, int externalId)"
        },
        "getdatafromagencyview()": {
          "name": "Get_data_from_agency_view",
          "key": "getdatafromagencyview()",
          "definition": "Get_data_from_agency_view()"
        },
        "getdatafromemployeeview()": {
          "name": "Get_data_from_employee_view",
          "key": "getdatafromemployeeview()",
          "definition": "Get_data_from_employee_view()"
        },
        "changesystemitemnamedsetdescriptionto()": {
          "name": "Change_system_item_named_set_description_to",
          "key": "changesystemitemnamedsetdescriptionto()",
          "definition": "Change_system_item_named_set_description_to(LookupType lookupType, string name, string description)"
        },
        "recordcurrentdataasbaseline()": {
          "name": "Record_current_data_as_baseline",
          "key": "recordcurrentdataasbaseline()",
          "definition": "Record_current_data_as_baseline()"
        },
        "getdatafromemploymentsummaryview()": {
          "name": "Get_data_from_employment_summary_view",
          "key": "getdatafromemploymentsummaryview()",
          "definition": "Get_data_from_employment_summary_view()"
        },
        "getdatafromcodetableview()": {
          "name": "Get_data_from_code_table_view",
          "key": "getdatafromcodetableview()",
          "definition": "Get_data_from_code_table_view()"
        },
        "verifyviewhasarowcountequaltorowcountminus()": {
          "name": "Verify_view__has_a_row_count_equal_to__row_count_minus__",
          "key": "verifyviewhasarowcountequaltorowcountminus()",
          "definition": "Verify_view__has_a_row_count_equal_to__row_count_minus__(string view, string table, int difference)"
        },
        "getdatafromcertificationhistoryview()": {
          "name": "Get_data_from_certification_history_view",
          "key": "getdatafromcertificationhistoryview()",
          "definition": "Get_data_from_certification_history_view()"
        }
      },
      "key": "wisconsincustomviews",
      "is-parent": false,
      "parent-name": "CustomerViewWorkflowBase",
      "class-name": "WisconsinCustomViews",
      "instance-name": "WisconsinCustomViews"
    },
    "reviewportaltestresults": {
      "namespace": "",
      "methods": {
        "verifystudenthasnoresult()": {
          "name": "Verify_student__has_no_result",
          "key": "verifystudenthasnoresult()",
          "definition": "Verify_student__has_no_result(string studentName, string academyId)"
        },
        "verifystudentisnotdisplayedinstudentswithnoresults()": {
          "name": "Verify_student__is_not_displayed_in_students_with_no_results",
          "key": "verifystudentisnotdisplayedinstudentswithnoresults()",
          "definition": "Verify_student__is_not_displayed_in_students_with_no_results(string studentName, string academyId)"
        },
        "verifyofstudentssubmittedby()": {
          "name": "Verify__of__students_submitted__by__",
          "key": "verifyofstudentssubmittedby()",
          "definition": "Verify__of__students_submitted__by__(int resultsEntered, int students, DateTime submissionDate, string submittedBy)"
        },
        "bindsubmittedresults()": {
          "name": "BindSubmittedResults",
          "key": "bindsubmittedresults()",
          "definition": "BindSubmittedResults(IEnumerable<PortalClassTestEntryListItemDto> dtos)"
        },
        "verifyrecordedpassfailresultis()": {
          "name": "Verify_recorded_pass_fail_result_is__",
          "key": "verifyrecordedpassfailresultis()",
          "definition": "Verify_recorded_pass_fail_result_is__(string passFail)"
        },
        "considersubmittedresultfor()": {
          "name": "Consider_submitted_result_for__",
          "key": "considersubmittedresultfor()",
          "definition": "Consider_submitted_result_for__(string studentName, string academyId)"
        },
        "verifystudentisnotdisplayedinsubmittedresults()": {
          "name": "Verify_student__is_not_displayed_in_submitted_results",
          "key": "verifystudentisnotdisplayedinsubmittedresults()",
          "definition": "Verify_student__is_not_displayed_in_submitted_results(string studentName, string academyId)"
        },
        "verifypercentageresultis()": {
          "name": "Verify_percentage_result_is__",
          "key": "verifypercentageresultis()",
          "definition": "Verify_percentage_result_is__(decimal score)"
        },
        "verifytestdateis()": {
          "name": "Verify_test_date_is__",
          "key": "verifytestdateis()",
          "definition": "Verify_test_date_is__(DateTime testDate)"
        },
        "verifyrecordedgradeis()": {
          "name": "Verify_recorded_grade_is__",
          "key": "verifyrecordedgradeis()",
          "definition": "Verify_recorded_grade_is__(decimal grade)"
        },
        "verifypassfailresultis()": {
          "name": "Verify_pass_fail_result_is__",
          "key": "verifypassfailresultis()",
          "definition": "Verify_pass_fail_result_is__(string passFail)"
        },
        "bindstudentswithnoresults()": {
          "name": "BindStudentsWithNoResults",
          "key": "bindstudentswithnoresults()",
          "definition": "BindStudentsWithNoResults(IEnumerable<PortalClassTestEntryListItemDto> dtos)"
        },
        "verifytestdateisnotset()": {
          "name": "Verify_test_date_is_not_set",
          "key": "verifytestdateisnotset()",
          "definition": "Verify_test_date_is_not_set()"
        },
        "waitforclicktolandusonreviewpage()": {
          "name": "Wait_for_click_to_land_us_on_review_page",
          "key": "waitforclicktolandusonreviewpage()",
          "definition": "Wait_for_click_to_land_us_on_review_page()"
        },
        "verifyresultisnotset()": {
          "name": "Verify_result_is_not_set",
          "key": "verifyresultisnotset()",
          "definition": "Verify_result_is_not_set()"
        },
        "verifycommentsare()": {
          "name": "Verify_comments_are__",
          "key": "verifycommentsare()",
          "definition": "Verify_comments_are__(string comments)"
        }
      },
      "key": "reviewportaltestresults",
      "is-parent": false,
      "parent-name": "MVBaseWorkflow",
      "class-name": "ReviewPortalTestResultsWorkflow",
      "instance-name": "ReviewPortalTestResults"
    },
    "accountingapi": {
      "namespace": "",
      "methods": {
        "verifyinvoiceableitemperiodendisnull()": {
          "name": "Verify_invoiceable_item_PeriodEnd_is_null",
          "key": "verifyinvoiceableitemperiodendisnull()",
          "definition": "Verify_invoiceable_item_PeriodEnd_is_null()"
        },
        "getinvoiceableitems()": {
          "name": "Get_Invoiceable_Items",
          "key": "getinvoiceableitems()",
          "definition": "Get_Invoiceable_Items()"
        },
        "verifyinvoiceableitemeventis()": {
          "name": "Verify_invoiceable_item_Event_is__",
          "key": "verifyinvoiceableitemeventis()",
          "definition": "Verify_invoiceable_item_Event_is__(string expected)"
        },
        "verifycancellationitemis()": {
          "name": "Verify_cancellation_item_is",
          "key": "verifycancellationitemis()",
          "definition": "Verify_cancellation_item_is(string expected)"
        },
        "dispose()": {
          "name": "Dispose",
          "key": "dispose()",
          "definition": "Dispose()"
        },
        "verifythereareinvoiceableitems()": {
          "name": "Verify_there_are__Invoiceable_Items",
          "key": "verifythereareinvoiceableitems()",
          "definition": "Verify_there_are__Invoiceable_Items(int count)"
        },
        "getcancellations()": {
          "name": "Get_Cancellations",
          "key": "getcancellations()",
          "definition": "Get_Cancellations()"
        },
        "verifycancellationdateis()": {
          "name": "Verify_cancellation_date_is__",
          "key": "verifycancellationdateis()",
          "definition": "Verify_cancellation_date_is__(DateTime expected)"
        },
        "verifycancellationdescriptionis()": {
          "name": "Verify_cancellation_description_is__",
          "key": "verifycancellationdescriptionis()",
          "definition": "Verify_cancellation_description_is__(string expected)"
        },
        "verifyinvoiceableitemusageisblank()": {
          "name": "Verify_invoiceable_item_Usage_is_blank",
          "key": "verifyinvoiceableitemusageisblank()",
          "definition": "Verify_invoiceable_item_Usage_is_blank()"
        },
        "verifycancellationperiodstartisblank()": {
          "name": "Verify_cancellation_period_start_is_blank",
          "key": "verifycancellationperiodstartisblank()",
          "definition": "Verify_cancellation_period_start_is_blank()"
        },
        "verifycancellationbilldateis()": {
          "name": "Verify_cancellation_bill_date_is__",
          "key": "verifycancellationbilldateis()",
          "definition": "Verify_cancellation_bill_date_is__(DateTime expected)"
        },
        "beginverifyinginvoiceableitem()": {
          "name": "Begin_verifying_invoiceable_item__",
          "key": "beginverifyinginvoiceableitem()",
          "definition": "Begin_verifying_invoiceable_item__(int position)"
        },
        "verifycancellationeventis()": {
          "name": "Verify_cancellation_event_is__",
          "key": "verifycancellationeventis()",
          "definition": "Verify_cancellation_event_is__(string expected)"
        },
        "verifyinvoiceableitembilltois()": {
          "name": "Verify_invoiceable_item_BillTo_is__",
          "key": "verifyinvoiceableitembilltois()",
          "definition": "Verify_invoiceable_item_BillTo_is__(string expected)"
        },
        "verifyinvoiceableitemperiodstartisnull()": {
          "name": "Verify_invoiceable_item_PeriodStart_is_null",
          "key": "verifyinvoiceableitemperiodstartisnull()",
          "definition": "Verify_invoiceable_item_PeriodStart_is_null()"
        },
        "verifycancellationcategoryis()": {
          "name": "Verify_cancellation_category_is__",
          "key": "verifycancellationcategoryis()",
          "definition": "Verify_cancellation_category_is__(BillingCategory expected)"
        },
        "verifycancellationamountis()": {
          "name": "Verify_cancellation_amount_is__",
          "key": "verifycancellationamountis()",
          "definition": "Verify_cancellation_amount_is__(decimal expected)"
        },
        "verifyinvoiceableitembilltoidisgreaterthanzero()": {
          "name": "Verify_invoiceable_item_BillToID_is_greater_than_zero",
          "key": "verifyinvoiceableitembilltoidisgreaterthanzero()",
          "definition": "Verify_invoiceable_item_BillToID_is_greater_than_zero()"
        },
        "verifyinvoiceableitemperiodstartisdaysfromtoday()": {
          "name": "Verify_invoiceable_item_PeriodStart_is__days_from_today",
          "key": "verifyinvoiceableitemperiodstartisdaysfromtoday()",
          "definition": "Verify_invoiceable_item_PeriodStart_is__days_from_today(int offset)"
        },
        "verifycancellationbillforis()": {
          "name": "Verify_cancellation_bill_for_is__",
          "key": "verifycancellationbillforis()",
          "definition": "Verify_cancellation_bill_for_is__(string expected)"
        },
        "verifycancellationbilltois()": {
          "name": "Verify_cancellation_bill_to_is__",
          "key": "verifycancellationbilltois()",
          "definition": "Verify_cancellation_bill_to_is__(string expected)"
        },
        "verifycancellationquantityis()": {
          "name": "Verify_cancellation_quantity_is__",
          "key": "verifycancellationquantityis()",
          "definition": "Verify_cancellation_quantity_is__(int expected)"
        },
        "verifycancellationunitpriceis()": {
          "name": "Verify_cancellation_unit_price_is",
          "key": "verifycancellationunitpriceis()",
          "definition": "Verify_cancellation_unit_price_is(decimal expected)"
        },
        "verifyinvoiceableitemitemis()": {
          "name": "Verify_invoiceable_item_Item_is__",
          "key": "verifyinvoiceableitemitemis()",
          "definition": "Verify_invoiceable_item_Item_is__(string expected)"
        },
        "verifytherearecancellations()": {
          "name": "Verify_there_are__cancellations",
          "key": "verifytherearecancellations()",
          "definition": "Verify_there_are__cancellations(int count)"
        },
        "verifyinvoiceableitemamountis()": {
          "name": "Verify_invoiceable_item_Amount_is__",
          "key": "verifyinvoiceableitemamountis()",
          "definition": "Verify_invoiceable_item_Amount_is__(decimal expected)"
        },
        "verifycancellationreasonis()": {
          "name": "Verify_cancellation_reason_is__",
          "key": "verifycancellationreasonis()",
          "definition": "Verify_cancellation_reason_is__(string expected)"
        },
        "verifyinvoiceableitembillforis()": {
          "name": "Verify_invoiceable_item_BillFor_is__",
          "key": "verifyinvoiceableitembillforis()",
          "definition": "Verify_invoiceable_item_BillFor_is__(string expected)"
        },
        "beginverifyingcancellationitem()": {
          "name": "Begin_verifying_cancellation_item__",
          "key": "beginverifyingcancellationitem()",
          "definition": "Begin_verifying_cancellation_item__(int position)"
        },
        "verifycancellationusageisblank()": {
          "name": "Verify_cancellation_usage_is_blank",
          "key": "verifycancellationusageisblank()",
          "definition": "Verify_cancellation_usage_is_blank()"
        },
        "verifyinvoiceableitemcreationdateis()": {
          "name": "Verify_invoiceable_item_CreationDate_is__",
          "key": "verifyinvoiceableitemcreationdateis()",
          "definition": "Verify_invoiceable_item_CreationDate_is__(DateTime creationDate)"
        },
        "verifyinvoiceableitemusageis()": {
          "name": "Verify_invoiceable_item_Usage_is__",
          "key": "verifyinvoiceableitemusageis()",
          "definition": "Verify_invoiceable_item_Usage_is__(string expected)"
        },
        "verifyinvoiceableitemperiodendisdaysfromtoday()": {
          "name": "Verify_invoiceable_item_PeriodEnd_is__days_from_today",
          "key": "verifyinvoiceableitemperiodendisdaysfromtoday()",
          "definition": "Verify_invoiceable_item_PeriodEnd_is__days_from_today(int offset)"
        },
        "verifyinvoiceableitemcreationdateistoday()": {
          "name": "Verify_invoiceable_item_CreationDate_is_today",
          "key": "verifyinvoiceableitemcreationdateistoday()",
          "definition": "Verify_invoiceable_item_CreationDate_is_today()"
        },
        "verifycancellationperiodendisblank()": {
          "name": "Verify_cancellation_period_end_is_blank",
          "key": "verifycancellationperiodendisblank()",
          "definition": "Verify_cancellation_period_end_is_blank()"
        }
      },
      "key": "accountingapi",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "AccountingApiWorkflow",
      "instance-name": "AccountingApi"
    },
    "onlinetestsimulator": {
      "namespace": "",
      "methods": {
        "prepareposttestsurvey()": {
          "name": "Prepare_post_test_survey",
          "key": "prepareposttestsurvey()",
          "definition": "Prepare_post_test_survey()"
        },
        "begintakingtestfor()": {
          "name": "Begin_taking_test__for__",
          "key": "begintakingtestfor()",
          "definition": "Begin_taking_test__for__(string testName, string studentName)"
        },
        "toggleflagfor()": {
          "name": "Toggle_flag_for__",
          "key": "toggleflagfor()",
          "definition": "Toggle_flag_for__(string questionText)"
        },
        "begintakingtestinclassfor()": {
          "name": "Begin_taking_test__in_class__for__",
          "key": "begintakingtestinclassfor()",
          "definition": "Begin_taking_test__in_class__for__(string testName, string className,string studentName)"
        },
        "submittest()": {
          "name": "Submit_test",
          "key": "submittest()",
          "definition": "Submit_test()"
        },
        "testtimerheartbeat()": {
          "name": "Test_timer_heartbeat",
          "key": "testtimerheartbeat()",
          "definition": "Test_timer_heartbeat()"
        },
        "answertoquestion()": {
          "name": "Answer__to_question__",
          "key": "answertoquestion()",
          "definition": "Answer__to_question__(string selectedAnswerLetter, string questionText)"
        }
      },
      "key": "onlinetestsimulator",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "OnlineTestSimulator",
      "instance-name": "OnlineTestSimulator"
    },
    "portalchangepassword": {
      "namespace": "",
      "methods": {
        "verifynewuserpasswordchangetokenwasaccepted()": {
          "name": "Verify_new_user_password_change_token_was_accepted",
          "key": "verifynewuserpasswordchangetokenwasaccepted()",
          "definition": "Verify_new_user_password_change_token_was_accepted()"
        },
        "bindpasswordrules()": {
          "name": "BindPasswordRules",
          "key": "bindpasswordrules()",
          "definition": "BindPasswordRules(List<PasswordRuleDTO> dtos)"
        },
        "redirecttonextpage()": {
          "name": "RedirectToNextPage",
          "key": "redirecttonextpage()",
          "definition": "RedirectToNextPage(string nextPage)"
        },
        "logintheproctoruser()": {
          "name": "LogInTheProctorUser",
          "key": "logintheproctoruser()",
          "definition": "LogInTheProctorUser(PortalAccountAccessDTO access)"
        },
        "browsetopagefornewuser()": {
          "name": "Browse_to_page_for_new_user__",
          "key": "browsetopagefornewuser()",
          "definition": "Browse_to_page_for_new_user__(string emailAddress)"
        },
        "rejecttoken()": {
          "name": "RejectToken",
          "key": "rejecttoken()",
          "definition": "RejectToken()"
        },
        "logintheportaluser()": {
          "name": "LogInThePortalUser",
          "key": "logintheportaluser()",
          "definition": "LogInThePortalUser(PortalAccountAccessDTO access)"
        }
      },
      "key": "portalchangepassword",
      "is-parent": false,
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalChangePasswordWorkflow",
      "instance-name": "PortalChangePassword"
    },
    "portalmanagement": {
      "namespace": "",
      "methods": {
        
      },
      "key": "portalmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "PortalManagement",
      "instance-name": "PortalManagement"
    },
    "automatedemaillist": {
      "namespace": "",
      "methods": {
        "listcontainsmodule()": {
          "name": "List_contains__module__",
          "key": "listcontainsmodule()",
          "definition": "List_contains__module__(string name, string module)"
        },
        "listdoesnotcontainmodule()": {
          "name": "List_does_not_contain__module__",
          "key": "listdoesnotcontainmodule()",
          "definition": "List_does_not_contain__module__(string name, string module)"
        }
      },
      "key": "automatedemaillist",
      "is-parent": false,
      "parent-name": "MVBaseWorkflow",
      "class-name": "AutomatedEmailList",
      "instance-name": "AutomatedEmailList"
    },
    "statisticsdto": {
      "namespace": "",
      "methods": {
        
      },
      "key": "statisticsdto",
      "is-parent": false,
      "parent-name": null,
      "class-name": "StatisticsDto",
      "instance-name": "StatisticsDto"
    },
    "xadrtestertests": {
      "namespace": "",
      "methods": {
        "nullclientinstancereportserror()": {
          "name": "NullClientInstanceReportsError",
          "key": "nullclientinstancereportserror()",
          "definition": "NullClientInstanceReportsError()"
        },
        "nullreturnfromclientreportserror()": {
          "name": "NullReturnFromClientReportsError",
          "key": "nullreturnfromclientreportserror()",
          "definition": "NullReturnFromClientReportsError()"
        },
        "cleanxadrconfigcanconnect()": {
          "name": "CleanXadrConfigCanConnect",
          "key": "cleanxadrconfigcanconnect()",
          "definition": "CleanXadrConfigCanConnect()"
        },
        "basexadrhasnoerrors()": {
          "name": "BaseXadrHasNoErrors",
          "key": "basexadrhasnoerrors()",
          "definition": "BaseXadrHasNoErrors()"
        }
      },
      "key": "xadrtestertests",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "XadrTesterTests",
      "instance-name": "XadrTesterTests"
    },
    "questionandanswerimportmanagement": {
      "namespace": "",
      "methods": {
        "verifythereareanswersforthequestion()": {
          "name": "Verify_there_are__answers_for_the_question",
          "key": "verifythereareanswersforthequestion()",
          "definition": "Verify_there_are__answers_for_the_question(int numberOfAnswers)"
        },
        "verifyquestioncontainstloforelo()": {
          "name": "Verify_question_contains_TLO_for_ELO",
          "key": "verifyquestioncontainstloforelo()",
          "definition": "Verify_question_contains_TLO_for_ELO(string tloName, string eloName)"
        },
        "usingquestionwithimportkey()": {
          "name": "Using_question_with_import_key__",
          "key": "usingquestionwithimportkey()",
          "definition": "Using_question_with_import_key__(string importKey)"
        },
        "verifyquestionversionnumberis()": {
          "name": "Verify_question_version_number_is__",
          "key": "verifyquestionversionnumberis()",
          "definition": "Verify_question_version_number_is__(int versionNumber)"
        },
        "verifyowneris()": {
          "name": "Verify_Owner_is__",
          "key": "verifyowneris()",
          "definition": "Verify_Owner_is__(string ownerName)"
        },
        "verifyquestioncommentsare()": {
          "name": "Verify_question_comments_are__",
          "key": "verifyquestioncommentsare()",
          "definition": "Verify_question_comments_are__(string comments)"
        },
        "verifyquestionstatusis()": {
          "name": "Verify_Question_Status_is",
          "key": "verifyquestionstatusis()",
          "definition": "Verify_Question_Status_is(string questionStatus)"
        },
        "verifyquestiontypeis()": {
          "name": "Verify_Question_Type_is__",
          "key": "verifyquestiontypeis()",
          "definition": "Verify_Question_Type_is__(string questionType)"
        },
        "verifyprogramis()": {
          "name": "Verify_Program_is__",
          "key": "verifyprogramis()",
          "definition": "Verify_Program_is__(string programName)"
        },
        "verifyquestionpriorityis()": {
          "name": "Verify_Question_Priority_is__",
          "key": "verifyquestionpriorityis()",
          "definition": "Verify_Question_Priority_is__(string questionPriority)"
        },
        "verifycategoryis()": {
          "name": "Verify_Category_is__",
          "key": "verifycategoryis()",
          "definition": "Verify_Category_is__(string categoryName)"
        },
        "verifyquestiontextis()": {
          "name": "Verify_Question_Text_is__",
          "key": "verifyquestiontextis()",
          "definition": "Verify_Question_Text_is__(string questionText)"
        },
        "verifysubcategoryis()": {
          "name": "Verify_Subcategory_is__",
          "key": "verifysubcategoryis()",
          "definition": "Verify_Subcategory_is__(string subcategoryName)"
        },
        "verifyanswertextisandfeedbackisandcorrect()": {
          "name": "Verify_answer__text_is__and_feedback_is__and__correct",
          "key": "verifyanswertextisandfeedbackisandcorrect()",
          "definition": "Verify_answer__text_is__and_feedback_is__and__correct(string answerLetter, string answerText, string answerFeedback, string isCorrect)"
        },
        "usingquestionwhichstartswithowner()": {
          "name": "Using_question_which_starts__with_owner__",
          "key": "usingquestionwhichstartswithowner()",
          "definition": "Using_question_which_starts__with_owner__(string textContainedByQuestionText, string ownerName)"
        },
        "verifyquestioncontainstlosandelos()": {
          "name": "Verify_question_contains__TLOs_and_ELOs",
          "key": "verifyquestioncontainstlosandelos()",
          "definition": "Verify_question_contains__TLOs_and_ELOs(int loCount)"
        },
        "usingquestionwhichstarts()": {
          "name": "Using_question_which_starts_",
          "key": "usingquestionwhichstarts()",
          "definition": "Using_question_which_starts_(string textContainedByQuestionText)"
        }
      },
      "key": "questionandanswerimportmanagement",
      "is-parent": false,
      "parent-name": "Workflow",
      "class-name": "QuestionAndAnswerImportManagement",
      "instance-name": "QuestionAndAnswerImportManagement"
    }
  },
  "debug": true
}