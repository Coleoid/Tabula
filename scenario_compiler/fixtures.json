{
  "classes": {
    "attemplatedetails": {
      "namespace": "",
      "methods": {
        "nextview()": {
          "definition": "NextView(int testTemplateId)"
        },
        "verifycontinuesucceeded()": {
          "definition": "Verify_continue_succeeded()"
        },
        "verifyduplicatenamevalidationoccurred()": {
          "definition": "Verify_duplicate_name_validation_occurred()"
        },
        "selecteditions()": {
          "definition": "Select_editions(int count)"
        },
        "verifynamemissingvalidationoccurred()": {
          "definition": "Verify_name_missing_validation_occurred()"
        },
        "verifyownermissingvalidationoccurred()": {
          "definition": "Verify_owner_missing_validation_occurred()"
        },
        "verifycontinuefailed()": {
          "definition": "Verify_continue_failed()"
        },
        "selectownernamed()": {
          "definition": "Select_owner_named(string ownerName)"
        },
        "browsetocreatenewtesttemplate()": {
          "definition": "Browse_to_create_new_test_template()"
        },
        "verifyprogrammissingvalidationoccurred()": {
          "definition": "Verify_program_missing_validation_occurred()"
        },
        "selectprogramnamed()": {
          "definition": "Select_program_named(string programName)"
        },
        "selectcontinue()": {
          "definition": "Select_Continue()"
        },
        "settestnameto()": {
          "definition": "Set_test_name_to(string name)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ATTemplateDetailsWorkflow"
    },
    "testopiamvcview": {
      "namespace": "",
      "methods": {
        "accessdenied()": {
          "definition": "AccessDenied()"
        }
      },
      "parent-name": null,
      "class-name": "TestopiaMvcView"
    },
    "studentexamfeedbacksettings": {
      "namespace": "",
      "methods": {
        "studenttake()": {
          "definition": "__student_take__(string state, string option)"
        },
        "bindstudenttakes()": {
          "definition": "BindStudentTakes(IEnumerable<TestGenerationDto> dto)"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for__(string testName)"
        },
        "verifystudenttakessectionisnotvisible()": {
          "definition": "Verify_Student_Takes_Section_Is_Not_Visible()"
        },
        "verifystudenttakeis()": {
          "definition": "Verify_student_take__is__(string option, string state)"
        },
        "verifystudenttakessectionisvisible()": {
          "definition": "Verify_Student_Takes_Section_Is_Visible()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "StudentExamFeedbackSettingsWorkflow"
    },
    "advanceddataexportlist": {
      "namespace": "",
      "methods": {
        "verifythatdeleteconfirmationauditmessageis()": {
          "definition": "Verify_that_delete_confirmation_audit_message_is__(string auditMessage)"
        },
        "consideractiveexport()": {
          "definition": "Consider_active_export()"
        },
        "writeexport()": {
          "definition": "WriteExport(string exportName, IList<string> exportChunks)"
        },
        "clickcontinuewithdeletion()": {
          "definition": "Click_continue_with_deletion()"
        },
        "verifytherearecolumns()": {
          "definition": "Verify_there_are__columns(int count)"
        },
        "verifythereexportlistednamedcreatedby()": {
          "definition": "Verify_there__export_listed_named__created_by__(string isIsNot, string exportName, string createdBy)"
        },
        "bindexports()": {
          "definition": "BindExports(IEnumerable<AdvancedDataExportDTO> exports)"
        },
        "verifyexportwascreatedby()": {
          "definition": "Verify_export_was_created_by__(string createdBy)"
        },
        "verifyis()": {
          "definition": "Verify__is__(string fieldName, string value)"
        },
        "verifythatexportrequiredpermissionis()": {
          "definition": "Verify_that_export_required_permission_is__(string permission)"
        },
        "enterfordeletereason()": {
          "definition": "Enter__for_delete_reason(string deleteReason)"
        },
        "clicktorunexport()": {
          "definition": "Click_to_run_export()"
        },
        "verifyactiveexportis()": {
          "definition": "Verify_active_export_is__(string exportName)"
        },
        "showerroralert()": {
          "definition": "ShowErrorAlert(int advancedDataExportID, bool userCanEditQuery, IEnumerable<AdvancedDataQueryError> errors)"
        },
        "considerrowwhereisandis()": {
          "definition": "Consider_row_where__is__and__is__(string field1, string field1Value, string field2, string field2Value)"
        },
        "verifydownloadedexportnameis()": {
          "definition": "Verify_downloaded_export_name_is(string exportName)"
        },
        "verifyexportdescriptionis()": {
          "definition": "Verify_export_description_is__(string description)"
        },
        "verifydeleteconfirmationwindowisvisible()": {
          "definition": "Verify_delete_confirmation_window_is_visible()"
        },
        "verifythatdeleteconfirmationtitleis()": {
          "definition": "Verify_that_delete_confirmation_title_is__(string title)"
        },
        "considerexportcreatedby()": {
          "definition": "Consider_export__created_by__(string exportName, string createdByFullName)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifythatexportcontainspii()": {
          "definition": "Verify_that_export__contains_pii(string doesDoesNot)"
        },
        "verifyexportverified()": {
          "definition": "Verify_export__verified(string isIsNot)"
        },
        "verifythatexportlastusedon()": {
          "definition": "Verify_that_export_last_used_on__(DateTime lastUsedOn)"
        },
        "redirecttoeditexport()": {
          "definition": "RedirectToEditExport(int id)"
        },
        "clicktocopyexport()": {
          "definition": "Click_to_copy_export()"
        },
        "verifyexportshared()": {
          "definition": "Verify_export__shared(string isIsNot)"
        },
        "clicktodeleteexport()": {
          "definition": "Click_to_delete_export()"
        },
        "verifythatdeleteconfirmationdetailsare()": {
          "definition": "Verify_that_delete_confirmation_details_are__(string deleteDetails)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AdvancedDataExportListWorkflow"
    },
    "savedadhoc": {
      "namespace": "",
      "methods": {
        "verifyredirectedtodashboard()": {
          "definition": "Verify_redirected_to_dashboard()"
        },
        "verifyeditexportsavailable()": {
          "definition": "Verify_edit_exports__available(string isIsNot)"
        },
        "redirecttodashboard()": {
          "definition": "RedirectToDashboard()"
        },
        "verifyredirectedtoeditnewadhocpage()": {
          "definition": "Verify_redirected_to_edit_new_adhoc_page()"
        },
        "verifyowneris()": {
          "definition": "Verify_owner_is__(string ownerFullName)"
        },
        "verifydeleteexport()": {
          "definition": "Verify__delete_export(string canCanNot)"
        },
        "verifysharingmodeis()": {
          "definition": "Verify_sharing_mode_is__(AdHocSharingMode sharingMode)"
        },
        "verifylastmodifiedtimeis()": {
          "definition": "Verify_last_modified_time_is__(DateTime dateTime)"
        },
        "redirecttoeditadhoc()": {
          "definition": "RedirectToEditAdHoc(int adHocExportID)"
        },
        "verifydescriptionis()": {
          "definition": "Verify_description_is__(string description)"
        },
        "verifyredirectedtoaddnewadhocpage()": {
          "definition": "Verify_redirected_to_add_new_adhoc_page()"
        },
        "verifydefaultbuttontextis()": {
          "definition": "Verify_default_button_text_is__(string buttonText)"
        },
        "verifyexporttypeis()": {
          "definition": "Verify_export_type_is__(AdHocExportType exportType)"
        },
        "binddata()": {
          "definition": "BindData(IEnumerable<SavedAdHocExportDTO> savedQueries)"
        },
        "redirecttoaddnewadhoc()": {
          "definition": "RedirectToAddNewAdHoc()"
        },
        "considersavedexportnamed()": {
          "definition": "Consider_saved_export_named__(string exportName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "SavedAdHocWorkflow"
    },
    "webformresponseemail": {
      "namespace": "",
      "methods": {
        "verifythatthetofieldlisthasitems()": {
          "definition": "Verify_that_the_To_field_list_has__items(int toFieldCount)"
        },
        "verifythattheccfieldlisthasitems()": {
          "definition": "Verify_that_the_CC_field_list_has__items(int ccFieldCount)"
        },
        "verifythattheselectedtoaddressis()": {
          "definition": "Verify_that_the_Selected_To_Address_is__(string selectedToAddress)"
        },
        "verifythatthesenderemailaddressis()": {
          "definition": "Verify_that_the_Sender_Email_Address_is__(string senderEmailAddress)"
        },
        "verifythatthespecificbccaddressis()": {
          "definition": "Verify_that_the_Specific_BCC_Address_is__(string specificBccAddresses)"
        },
        "verifythatthesubjectis()": {
          "definition": "Verify_that_the_Subject_is__(string subject)"
        },
        "hideresponseemaildialog()": {
          "definition": "HideResponseEmailDialog()"
        },
        "selectfromtheccfieldlist()": {
          "definition": "Select__from_the_CC_field_list(string ccField)"
        },
        "setspecificbccaddressesto()": {
          "definition": "Set_Specific_BCC_Addresses_to__(string specificBccAddresses)"
        },
        "verifythatthereplytoemailaddressis()": {
          "definition": "Verify_that_the_Reply_To_Email_Address_is__(string replyToEmailAddress)"
        },
        "clickcancelonresponseemaildialog()": {
          "definition": "Click_Cancel_on_response_email_dialog()"
        },
        "clickdoneonresponseemaildialog()": {
          "definition": "Click_Done_on_response_email_dialog()"
        },
        "setspecificccaddressesto()": {
          "definition": "Set_Specific_CC_Addresses_to__(string specificCcAddresses)"
        },
        "setreplytoemailaddressto()": {
          "definition": "Set_Reply_To_Email_Address_to__(string replyToEmailAddress)"
        },
        "setsenderemailaddressto()": {
          "definition": "Set_Sender_Email_Address_to__(string senderEmailAddress)"
        },
        "verifythatthemessagebodyis()": {
          "definition": "Verify_that_the_Message_Body_is__(string messageBody)"
        },
        "verifythattheitemintheccfieldlistis()": {
          "definition": "Verify_that_the__item_in_the_CC_field_list_is__(string ordinal, string value)"
        },
        "verifythatthespecificccaddressis()": {
          "definition": "Verify_that_the_Specific_CC_Address_is__(string specificCcAddresses)"
        },
        "verifythatthebccfieldlisthasitems()": {
          "definition": "Verify_that_the_BCC_field_list_has__items(int bccFieldCount)"
        },
        "verifythattheemaildialogwasclosed()": {
          "definition": "Verify_that_the_Email_dialog_was_closed()"
        },
        "verifythattheselectedccaddressis()": {
          "definition": "Verify_that_the_Selected_CC_Address_is__(string selectedCcAddress)"
        },
        "setmessagebodyto()": {
          "definition": "Set_Message_Body_to__(string messageBody)"
        },
        "selectfromthetofieldlist()": {
          "definition": "Select__from_the_To_field_list(string toField)"
        },
        "verifythatthesendernameis()": {
          "definition": "Verify_that_the_Sender_Name_is__(string senderName)"
        },
        "setsubjectto()": {
          "definition": "Set_Subject_to__(string subject)"
        },
        "verifythattheiteminthebccfieldlistis()": {
          "definition": "Verify_that_the__item_in_the_BCC_field_list_is__(string ordinal, string value)"
        },
        "browsetopageforwebformversion()": {
          "definition": "Browse_to_page_for_webform__version__(string webFormName, int versionNumber)"
        },
        "verifythattheselectedbccaddressis()": {
          "definition": "Verify_that_the_Selected_BCC_Address_is__(string selectedBccAddress)"
        },
        "setsendernameto()": {
          "definition": "Set_Sender_Name_to__(string senderName)"
        },
        "selectfromthebccfieldlist()": {
          "definition": "Select__from_the_BCC_field_list(string bccField)"
        },
        "verifythattheiteminthetofieldlistis()": {
          "definition": "Verify_that_the__item_in_the_To_field_list_is__(string ordinal, string value)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "WebFormResponseEmailWorkflow"
    },
    "inventoryavailabilities": {
      "namespace": "",
      "methods": {
        "verifypricetableheaders()": {
          "definition": "Verify_price_table_headers_(List<string> headers)"
        },
        "browsetopageforfacility()": {
          "definition": "Browse_to_page_for_facility(string itemName)"
        },
        "browsetopageforaccountableproperty()": {
          "definition": "Browse_to_page_for_accountable_property(string itemName)"
        },
        "selectmanuallyentername()": {
          "definition": "Select_manually_enter_name()"
        },
        "verifynameisunique()": {
          "definition": "Verify_name_is_unique()"
        },
        "bindperiodsofuse()": {
          "definition": "BindPeriodsOfUse(List<UsageSelectionDTO> periodsOfUse)"
        },
        "verifydefaultperiodofuselistcontains()": {
          "definition": "Verify_default_period_of_use_list_contains__(string text)"
        },
        "saveavailabilities()": {
          "definition": "Save_availabilities()"
        },
        "verifyperiodisnotselected()": {
          "definition": "Verify_period__is_not_selected(string pou)"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for(string itemName)"
        },
        "unselectperiod()": {
          "definition": "Unselect_period__(string pou)"
        },
        "allperiodsofuseallowed()": {
          "definition": "All_periods_of_use__allowed(string tf)"
        },
        "selectfordefaultperiodofuse()": {
          "definition": "Select__for_default_period_of_use(string periodOfUse)"
        },
        "verifynameisnotunique()": {
          "definition": "Verify_name_is_not_unique()"
        },
        "verifypricetablerowisperiodofusewithprices()": {
          "definition": "Verify_price_table_row__is__period_of_use__with_prices__(int row, string periodOfUse, List<string> content)"
        },
        "selectperiod()": {
          "definition": "Select_period__(string pou)"
        },
        "verifycannotmakerentable()": {
          "definition": "Verify_cannot_make_rentable()"
        },
        "verifycanmakerentable()": {
          "definition": "Verify_can_make_rentable()"
        },
        "verifytextforschedulingnamematches()": {
          "definition": "Verify_text_for_scheduling_name_matches(string pattern)"
        },
        "bindpricingtable()": {
          "definition": "BindPricingTable(List<string> priceHeaders, List<UsagePricesDTO> prices)"
        },
        "verifyautomaticallygeneratenameisselected()": {
          "definition": "Verify_automatically_generate_name_is_selected()"
        },
        "verifytherearenoprices()": {
          "definition": "Verify_there_are_no_prices()"
        },
        "verifymanuallyenternameisselected()": {
          "definition": "Verify_manually_enter_name_is_selected()"
        },
        "selectdefaultperiodofuse()": {
          "definition": "Select_default_period_of_use__(string text)"
        },
        "verifyperiodisselected()": {
          "definition": "Verify_period__is_selected(string pou)"
        },
        "verifybillinginformationshown()": {
          "definition": "Verify_billing_information__shown(string tf)"
        },
        "selectcategories()": {
          "definition": "Select_categories(string categories)"
        },
        "binddefaultperiodsofuse()": {
          "definition": "BindDefaultPeriodsOfUse(List<KeyValuePair<string,string>> periodsOfUse)"
        },
        "selectautomaticallygeneratename()": {
          "definition": "Select_automatically_generate_name()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "InventoryAvailabilitiesWorkflow"
    },
    "portalregistrationmanagement": {
      "namespace": "",
      "methods": {
        "assigntotrainingevent()": {
          "definition": "Assign__to_training_event_(string personName, string eventName)"
        },
        "assigntotrainingeventexpectingduplicateregistrationerror()": {
          "definition": "Assign__to_training_event__expecting_duplicate_registration_error(string personName, string eventName)"
        },
        "assignselftoonlineevent()": {
          "definition": "Assign_self_to_online_event(string eventName)"
        },
        "waitlistfortrainingevent()": {
          "definition": "Waitlist__for_training_event_(string personName, string eventName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "PortalRegistrationManagement"
    },
    "onlinecontentmanagement": {
      "namespace": "",
      "methods": {
        "verifyonlinecontentreportsagradeforeachstudent()": {
          "definition": "Verify_online_content_reports_a_grade_for_each_student(string contentName)"
        },
        "verifyonlinecontentdoesnotreportagradeforeachstudent()": {
          "definition": "Verify_online_content_does_not_report_a_grade_for_each_student(string contentName)"
        },
        "settoreportagradeforeachstudent()": {
          "definition": "Set_to_report_a_grade_for_each_student(string contentName)"
        },
        "verifyonlinecontentreportspassorfailforeachstudent()": {
          "definition": "Verify_online_content_reports_pass_or_fail_for_each_student(string contentName)"
        },
        "deleteonlinecontentforacademy()": {
          "definition": "Delete_online_content_for_academy( string contentName, string academyName )"
        },
        "settoreportpassorfailforeachstudent()": {
          "definition": "Set_to_report_pass_or_fail_for_each_student(string contentName)"
        },
        "verifyonlinecontentexistsforacademywithuploadnamedandstatus()": {
          "definition": "Verify_online_content_exists_for_academy_with_upload_named__and_status( string contentName, string academyName, string uploadName, OnlineContentStatus status )"
        },
        "verifyonlinecontentdoesnotexistforacademy()": {
          "definition": "Verify_online_content_does_not_exist_for_academy( string contentName, string academyName )"
        },
        "verifyonlinecontentdoesnotreportpassorfailforeachstudent()": {
          "definition": "Verify_online_content_does_not_report_pass_or_fail_for_each_student(string contentName)"
        },
        "addonlinecontentforacademynameduploadnamedwithstatus()": {
          "definition": "Add_online_content_for_academy__named_upload_named__with_status_( string academyName, string contentName, string uploadName, OnlineContentStatus status )"
        }
      },
      "parent-name": "Workflow",
      "class-name": "OnlineContentManagement"
    },
    "customerviews": {
      "namespace": "",
      "methods": {
        "ensurerowhasof()": {
          "definition": "Ensure_row__has__of__(int rowNum, string columnName, string columnValue)"
        },
        "givepersonadutyassignmentat()": {
          "definition": "Give_person_a_duty_assignment_at__(string orgName)"
        },
        "getdatafromviewwhereorderby()": {
          "definition": "Get_data_from_view__where__order_by__(string viewName, string where, string order)"
        },
        "issueancertnamedtopersonwithsocialsecuritynumberofwithaneffectivedateofandanexpirationdateof()": {
          "definition": "Issue_an__cert_named__to_person_with_social_security_number__of__with_an_effective_date_of__and_an_expiration_date_of__(string status, string certName, string ssn, string effectiveDate, string expirationDate)"
        },
        "setlocationaddressincityandstateandzip()": {
          "definition": "Set_location_address___in_city__and_state__and_zip__(string address1, string address2, string city, string state, string zip)"
        },
        "updateemploymentsetto()": {
          "definition": "Update_employment_set__to__(string columnName, string value)"
        },
        "createaprogramnamed()": {
          "definition": "Create_a_program_named(string programName)"
        },
        "createapersonthatreadwritelecturetranslate()": {
          "definition": "Create_a_person_that__read__write__lecture__translate__(string canRead, string canWrite, string canLecture, string canTranslate, string language)"
        },
        "addlanguagetopersonreadwritelecturetranslate()": {
          "definition": "Add_language_to_person__read__write__lecture__translate__(string canRead, string canWrite, string canLecture, string canTranslate, string language)"
        },
        "createaninserviceeventnamedandadescriptionofstartingandendingwithhoursofprovidedby()": {
          "definition": "Create_an_inservice_event_named__and_a_description_of__starting__and_ending__with_hours_of__provided_by__(string name, string description, string startDate, string endDate, int hours, string providerName)"
        },
        "createaninserviceeventnamedandadescriptionofstartingandendingwithhoursofatprovidedby()": {
          "definition": "Create_an_inservice_event_named__and_a_description_of__starting__and_ending__with_hours_of__at__provided_by__(string name, string description, string startDate, string endDate, int hours, string academyName, string providerName)"
        },
        "assignpersontoevent()": {
          "definition": "Assign_person_to_event()"
        },
        "ensureclasshasresultinorderby()": {
          "definition": "Ensure_class_has_result_in__order_by__(int numberOfResults, string viewName, string orderBy)"
        },
        "enrollpersoninclasson()": {
          "definition": "Enroll_person_in_class__on__(string className, string statusDate)"
        },
        "departstudentwithssnwithactionandreasonanddetailon()": {
          "definition": "Depart_student_with_ssn__with_action__and_reason__and_detail__on__(string ssn, string action, string reason, string detail, string date)"
        },
        "createpersonwithsocialsecuritynumberfirstnamelastnamemiddlenameborngender()": {
          "definition": "Create_person_with_social_security_number__first_name__last_name__middle_name__born__gender__(string ssn, string firstName, string lastName, string middleName, string dateOfBirth, string gender)"
        },
        "createanorganizationnamedwithcityofstateofandcountyof()": {
          "definition": "Create_an_organization_named__with_city_of__state_of__and_county_of__(string orgName, string cityName, string stateName, string countyName)"
        },
        "createanexternalsystemidnamedwithavalueof()": {
          "definition": "Create_an_external_system_id_named__with_a_value_of__(string externalSystem, string externalId)"
        },
        "awardstudentwithssnwiththeaward()": {
          "definition": "Award_student_with_ssn__with_the__award(string ssn, string awardName)"
        },
        "createpersonwithsocialsecuritynumberfirstnamelastnamemiddlenamesuffixborngender()": {
          "definition": "Create_person_with_social_security_number__first_name__last_name__middle_name__suffix__born__gender__(string ssn, string firstName, string lastName, string middleName, string suffix, string dateOfBirth, string gender)"
        },
        "setclasslocation()": {
          "definition": "Set_class_location__(string locationName)"
        },
        "hirepersonwiththelastnameatonwithatitleof()": {
          "definition": "Hire_person_with_the_last_name__at__on__with_a_title_of__(string lastName, string orgName, string startingDate, string title)"
        },
        "addceucreditsoftoclass()": {
          "definition": "Add_CEU_Credits_of__to_class(string credits)"
        },
        "getdatafromviewwhereislastpersonorderby()": {
          "definition": "Get_data_from_view__where__is_last_person_order_by__(string viewName, string personIdColumnName, string orderBy)"
        },
        "updateeventstatusto()": {
          "definition": "Update_event_status_to(string statusName)"
        },
        "createprogramcoordinatorwithlastnameofandfirstnameof()": {
          "definition": "Create_program_coordinator_with_last_name_of__and_first_name_of(string lastName, string firstName)"
        },
        "ensurepersonhasresultin()": {
          "definition": "Ensure_person_has__result_in__(int numberOfResults, string viewName)"
        },
        "createanactivitynamedwithlengthwherecountsastrainingisandcanbescheduledis()": {
          "definition": "Create_an_activity_named__with_length__where_counts_as_training_is__and_can_be_scheduled_is__(string activityName, int length, string countsAsTraining, string canBeScheduled)"
        },
        "createaward()": {
          "definition": "Create__award(string awardName)"
        },
        "createanorganizationnamedwithcityofandstateof()": {
          "definition": "Create_an_organization_named__with_city_of__and_state_of__(string orgName, string cityName, string stateName)"
        },
        "graduatestudenton()": {
          "definition": "Graduate_student_on__(string graduateDate)"
        },
        "createaprogramwithabbreviationanddescriptionunderorganization()": {
          "definition": "Create_a_program__with_abbreviation__and_description__under_organization__(string programName, string abbreviation, string description, string orgName)"
        },
        "addpointofcontacttowithafirstnameandlastname()": {
          "definition": "Add_point_of_contact_to__with_a_first_name__and_last_name__(string className, string firstName, string lastName)"
        },
        "createatrainingclassnamedstartingonandendingonwithstatusof()": {
          "definition": "Create_a_training_class_named__starting_on__and_ending_on__with_status_of__(string className, DateTime startDate, DateTime endDate, string status)"
        },
        "createstudentsocialsecuritynumberandenrollinwithastatusof()": {
          "definition": "Create_student_social_security_number__and_enroll_in__with_a_status_of__(string ssn, string className, string enrollmentStatus)"
        },
        "createaclasstemplatenamedwithreference()": {
          "definition": "Create_a_class_template_named__with_reference__(string templateName, string reference)"
        },
        "ensureresultcontainsrows()": {
          "definition": "Ensure_result_contains__rows(int numRows)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "CustomerViews"
    },
    "organizationsearching": {
      "namespace": "",
      "methods": {
        "selectcertification()": {
          "definition": "Select_certification__(string certName)"
        },
        "criteriaexternalsystemid()": {
          "definition": "Criteria_External_System_ID( string criteria )"
        },
        "entercertificationactionbetweenand()": {
          "definition": "Enter_certification_action_between__and__(DateTime start, DateTime end)"
        },
        "selectcertificationstatus()": {
          "definition": "Select_certification_status__(string certStatus)"
        },
        "enterexpirationbetweenand()": {
          "definition": "Enter_expiration_between__and__(DateTime start, DateTime end)"
        },
        "resultscontain()": {
          "definition": "Results_contain( string orgName )"
        },
        "name()": {
          "definition": "Name(string name)"
        },
        "selectcertificationaction()": {
          "definition": "Select_certification_action__(CertRecordAction actionType)"
        },
        "reference()": {
          "definition": "Reference(string r)"
        },
        "criteriaexternalsystem()": {
          "definition": "Criteria_External_System( string criteria )"
        },
        "resultcountequals()": {
          "definition": "Result_count_equals( int count )"
        },
        "newcriteria()": {
          "definition": "New_Criteria()"
        },
        "enterissuedbetweenand()": {
          "definition": "Enter_issued_between__and__(DateTime start, DateTime end)"
        },
        "selectsearchforcertifications()": {
          "definition": "Select_search_for__certifications(CertSearchInclusionOptions option)"
        },
        "clearexternalsystemcriteria()": {
          "definition": "Clear_External_System_Criteria()"
        },
        "groupsonly()": {
          "definition": "Groups_Only()"
        },
        "search()": {
          "definition": "Search()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "OrganizationSearching"
    },
    "personneloverage": {
      "namespace": "",
      "methods": {
        "bindoverages()": {
          "definition": "BindOverages(IEnumerable<PersonnelOverageDto> overageData)"
        },
        "verifyhasrows()": {
          "definition": "Verify_has_rows(int count)"
        },
        "setfiltertoonlyshowoveragesonorafter()": {
          "definition": "Set_filter_to_only_show_overages_on_or_after(DateTime date)"
        },
        "ignoreblock()": {
          "definition": "Ignore_block__(string blockName, bool isCancel)"
        },
        "setfiltertoonlyshowoveragesonorbefore()": {
          "definition": "Set_filter_to_only_show_overages_on_or_before(DateTime date)"
        },
        "clearfilters()": {
          "definition": "Clear_filters()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "setfiltertoonlyshowoveragesforsegmentsfromtheseprograms()": {
          "definition": "Set_filter_to_only_show_overages_for_segments_from_these_programs__(List<string> programNames)"
        },
        "setfiltertoonlyshowoveragesbetweenand()": {
          "definition": "Set_filter_to_only_show_overages_between_and(DateTime start, DateTime end)"
        },
        "setfiltertoonlyshowoveragesforsegmentsfromthesedivisions()": {
          "definition": "Set_filter_to_only_show_overages_for_segments_from_these_divisions__(List<string> divisionNames)"
        },
        "verifyhasrow()": {
          "definition": "Verify_has_row(string row)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PersonnelOverageWorkflow"
    },
    "inventorydelete": {
      "namespace": "",
      "methods": {
        "verifythatmakeinactivelinksaredisplayed()": {
          "definition": "Verify_that_Make_Inactive_links_are_displayed()"
        },
        "showinactivationoptions()": {
          "definition": "ShowInactivationOptions(bool showOptions)"
        },
        "showdialogfor()": {
          "definition": "Show_dialog_for(string itemName)"
        },
        "showinuse()": {
          "definition": "ShowInUse(bool inUse)"
        },
        "verifythatitemisinuse()": {
          "definition": "Verify_that_item_is_in_use()"
        },
        "verifythatmakeinactivelinksarenotdisplayed()": {
          "definition": "Verify_that_Make_Inactive_links_are_not_displayed()"
        },
        "verifythatitemisnotinuse()": {
          "definition": "Verify_that_item_is_not_in_use()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "InventoryDeleteWorkflow"
    },
    "documentlist": {
      "namespace": "",
      "methods": {
        "verifydocumentlistnotavailable()": {
          "definition": "Verify_document_list_not_available()"
        },
        "verifyexistsinlistwithdescription()": {
          "definition": "Verify__exists_in_list_with_description__(string filename, string fileDescription)"
        },
        "verifycandeletedocuments()": {
          "definition": "Verify_can_delete_documents()"
        },
        "verifydeleteconfirmationwindowhastext()": {
          "definition": "Verify_delete_confirmation_window_has_text(string message)"
        },
        "verifydocumentcanbeviewedbyprospectivestudentsinportal()": {
          "definition": "Verify__document_Can_Be_Viewed_By_Prospective_Students_In_Portal(string filename)"
        },
        "verifycannotdeletedocuments()": {
          "definition": "Verify_cannot_delete_documents()"
        },
        "showreplacedocument()": {
          "definition": "ShowReplaceDocument()"
        },
        "verifycannotbeopenedforviewing()": {
          "definition": "Verify__cannot_be_opened_for_viewing(string filename)"
        },
        "verifyuserhasrestrictedaccesswithmessage()": {
          "definition": "Verify_user_has_restricted_access_with_message__(string message)"
        },
        "verifyisnotprotected()": {
          "definition": "Verify__is_not_protected(string filename)"
        },
        "verifycannotadddocument()": {
          "definition": "Verify_cannot_add_document()"
        },
        "verifycanbeedited()": {
          "definition": "Verify__can_be_edited(string filename)"
        },
        "verifyusernavigatedtoaddadocument()": {
          "definition": "Verify_user_navigated_to_add_a_document()"
        },
        "verifycannotbeedited()": {
          "definition": "Verify__cannot_be_edited(string filename)"
        },
        "binddocuments()": {
          "definition": "BindDocuments( List<DocumentListItemDTO> documents )"
        },
        "verifyisprotected()": {
          "definition": "Verify__is_protected(string filename)"
        },
        "verifycanbeopenedforviewing()": {
          "definition": "Verify__can_be_opened_for_viewing(string filename)"
        },
        "enterdeletereasonandclickdelete()": {
          "definition": "Enter_delete_reason__and_click_delete(string reason)"
        },
        "clickadddocument()": {
          "definition": "Click_Add_Document()"
        },
        "verifydeleteconfirmationwindowisvisible()": {
          "definition": "Verify_delete_confirmation_window_is_visible()"
        },
        "verifycannotbeopenedforviewingbyprospectivestudentsintheportal()": {
          "definition": "Verify_cannot_be_opened_for_viewing_by_prospective_students_in_the_portal(string filename)"
        },
        "verifydocumentwithdescriptionbeviewedbyrostersubmitters()": {
          "definition": "Verify_document_with_description__be_viewed_by_roster_submitters(string description, string canOrNot)"
        },
        "verifycanbeopenedforviewingbystudentsintheportal()": {
          "definition": "Verify_can_be_opened_for_viewing_by_students_in_the_portal(string filename)"
        },
        "verifycanbeopenedforviewingbyprospectivestudentsintheportal()": {
          "definition": "Verify_can_be_opened_for_viewing_by_prospective_students_in_the_portal(string filename)"
        },
        "clicktoview()": {
          "definition": "Click_to_view__(string filename)"
        },
        "verifycanadddocument()": {
          "definition": "Verify_can_add_document()"
        },
        "verifycannotbeopenedforviewingbystudentsintheportal()": {
          "definition": "Verify_cannot_be_opened_for_viewing_by_students_in_the_portal(string filename)"
        },
        "verifydocumentcanbeviewedbycurrentstudentsinportal()": {
          "definition": "Verify__document_Can_Be_Viewed_By_Current_Students_In_Portal(string filename)"
        },
        "verifydocumentcannotbeviewedbycurrentstudentsinportal()": {
          "definition": "Verify__document_Can_Not_Be_Viewed_By_Current_Students_In_Portal(string filename)"
        },
        "verifyaccessrestricted()": {
          "definition": "Verify_access_restricted()"
        },
        "verifytherearedocumentsinthelist()": {
          "definition": "Verify_there_are__documents_in_the_list(int numDocs)"
        },
        "browsetodocumentlistfor()": {
          "definition": "Browse_to_document_list_for__(string ownerType, string ownerName)"
        },
        "verifydocumentcannotbeviewedbyprospectivestudentsinportal()": {
          "definition": "Verify__document_Can_Not_Be_Viewed_By_Prospective_Students_In_Portal(string filename)"
        },
        "clickdelete()": {
          "definition": "Click_delete__(string filename)"
        },
        "verifydeleteconfirmationwindowisfordeletingwithdescriptionfromowner()": {
          "definition": "Verify_delete_confirmation_window_is_for_deleting__with_description__from_owner__(string filename, string description, string ownerName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "DocumentListWorkflow"
    },
    "holidayaddedit": {
      "namespace": "",
      "methods": {
        "verifydoesnotexiston()": {
          "definition": "Verify__does_not_exist_on__(string name, DateTime date)"
        },
        "browsetoeditpageforon()": {
          "definition": "Browse_to_edit_page_for__on__(string name, DateTime date)"
        },
        "selectspecificprograms()": {
          "definition": "Select_specific_programs__(string programNames)"
        },
        "verifyprogramsselectedare()": {
          "definition": "Verify_programs_selected_are__(string programNames)"
        },
        "verifyonhasdisplayname()": {
          "definition": "Verify__on__has_display_name__(string name, DateTime date, string displayName)"
        },
        "verifyonhasprograms()": {
          "definition": "Verify__on__has_programs__(string name, DateTime date, string programNames)"
        },
        "verifyallprogramsselected()": {
          "definition": "Verify_all_programs_selected()"
        },
        "bindprograms()": {
          "definition": "BindPrograms(IList<NonTrainingDayProgramDTO> programs)"
        },
        "verifyonhasallprograms()": {
          "definition": "Verify__on__has_all_programs(string name, DateTime date)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifyexistson()": {
          "definition": "Verify__exists_on__(string name, DateTime date)"
        },
        "selectallprograms()": {
          "definition": "Select_all_programs()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "HolidayAddEditWorkflow"
    },
    "productmakeandmodelmaintenance": {
      "namespace": "",
      "methods": {
        "enterformake()": {
          "definition": "Enter_for_make(string make)"
        },
        "selecteditmodel()": {
          "definition": "Select_edit_model_(string make, string model)"
        },
        "verifymodeleditwasshown()": {
          "definition": "Verify_model_edit_was_shown()"
        },
        "verifymakeeditwasshown()": {
          "definition": "Verify_make_edit_was_shown()"
        },
        "verifymakeis()": {
          "definition": "Verify_make_is_(string make)"
        },
        "verifythereisnotaoftype()": {
          "definition": "Verify_there_is_not_a__of_type(string make, string model, string type)"
        },
        "verifymakeeditis()": {
          "definition": "Verify_make_edit_is(string make)"
        },
        "selectfortype()": {
          "definition": "Select_for_type(string type)"
        },
        "verifythereisaoftypethatis()": {
          "definition": "Verify_there_is_a__of_type__that_is__(string make, string model, string type, string usage)"
        },
        "verifynewmakeconfirmationwasshownfor()": {
          "definition": "Verify_new_make_confirmation_was_shown_for(string make)"
        },
        "selectdeletemodel()": {
          "definition": "Select_delete_model__(string make, string model)"
        },
        "savemake()": {
          "definition": "Save_make()"
        },
        "enterformakeedit()": {
          "definition": "Enter_for_make_edit(string make)"
        },
        "selectforusage()": {
          "definition": "Select_for_usage(string usage)"
        },
        "verifythereisamake()": {
          "definition": "Verify_there_is_a_make(string make)"
        },
        "confirmsavenewmakeandmodel()": {
          "definition": "Confirm_save_new_make_and_model()"
        },
        "verifymodelis()": {
          "definition": "Verify_model_is_(string model)"
        },
        "verifymodeledittitleis()": {
          "definition": "Verify_model_edit_title_is(string title)"
        },
        "bindweaponinformation()": {
          "definition": "BindWeaponInformation(IEnumerable<ProductMakeDTO> makes)"
        },
        "verifytypeis()": {
          "definition": "Verify_type_is(string type)"
        },
        "showmodeledit()": {
          "definition": "ShowModelEdit()"
        },
        "browsetofirearmmakeandmodelmaintenance()": {
          "definition": "Browse_to_firearm_make_and_model_maintenance()"
        },
        "shownewmakeconfirmation()": {
          "definition": "ShowNewMakeConfirmation()"
        },
        "savemodel()": {
          "definition": "Save_model()"
        },
        "enterformodel()": {
          "definition": "Enter_for_model(string model)"
        },
        "selecteditmake()": {
          "definition": "Select_edit_make_(string make)"
        },
        "verifyusageis()": {
          "definition": "Verify_usage_is(string usage)"
        },
        "showmakeedit()": {
          "definition": "ShowMakeEdit()"
        },
        "selectaddnewmodel()": {
          "definition": "Select_add_new_model()"
        },
        "browsetoaccountablepropertymakeandmodelmaintenance()": {
          "definition": "Browse_to_accountable_property_make_and_model_maintenance()"
        },
        "verifythereisnotamake()": {
          "definition": "Verify_there_is_not_a_make(string make)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ProductMakeAndModelMaintenance"
    },
    "personnelrequests": {
      "namespace": "",
      "methods": {
        "verifythattherequestdidnotincludeachangeofemploymenttype()": {
          "definition": "Verify_that_the_request_did_not_include_a_change_of_employment_type()"
        },
        "verifythattherequestincludedachangeoftitlerankfromto()": {
          "definition": "Verify_that_the_request_included_a_change_of_title_rank_from__to__(string originalTitleRank, string proposedTitleRank)"
        },
        "verifythatthependingchangeslistisvisible()": {
          "definition": "Verify_that_the_pending_changes_list_is_visible()"
        },
        "considerthechangerequestfor()": {
          "definition": "Consider_the_change_request_for__(string personName)"
        },
        "verifythattherequestdidnotincludeachangeforemploymentudfwithlabel()": {
          "definition": "Verify_that_the_request_did_not_include_a_change_for_employment_UDF_with_label__(string label)"
        },
        "verifythattherequestincludedanemploymentudfchangeforlabelfromto()": {
          "definition": "Verify_that_the_request_included_an_employment_UDF_change_for_label__from__to__(string label, string originalValue, string proposedValue)"
        },
        "verifythattherequestdidnotincludeachangeofsupervisor()": {
          "definition": "Verify_that_the_request_did_not_include_a_change_of_supervisor()"
        },
        "approveproposedchangefor()": {
          "definition": "Approve_proposed_change_for__(string personName)"
        },
        "verifythattherequestincludedachangeofemploymentstatusfromto()": {
          "definition": "Verify_that_the_request_included_a_change_of_employment_status_from__to__(string originalEmploymentStatus, string proposedEmploymentStatus)"
        },
        "setviewabledocumentids()": {
          "definition": "SetViewableDocumentIds(List<int> ids)"
        },
        "verifythattherequestdidnotincludeachangeofemploymentstatus()": {
          "definition": "Verify_that_the_request_did_not_include_a_change_of_employment_status()"
        },
        "verifythatthependingchangeslistisnotvisible()": {
          "definition": "Verify_that_the_pending_changes_list_is_not_visible()"
        },
        "rejectproposedchangeforwithreason()": {
          "definition": "Reject_proposed_change_for__with_reason(string personName, string reason)"
        },
        "verifytherequestinthechangelistisfor()": {
          "definition": "Verify_the__request_in_the_change_list_is_for__(string ordinal, string personName)"
        },
        "verifythattheeffectivedateis()": {
          "definition": "Verify_that_the_effective_date_is__(DateTime effectiveDate)"
        },
        "verifytherearedocumentsforthischange()": {
          "definition": "Verify_there_are__documents_for_this_change(int count)"
        },
        "verifythatthechangetypeis()": {
          "definition": "Verify_that_the_change_type_is__(EmploymentChangeRequestType changeRequested)"
        },
        "verifythattherequestincludedachangeofemploymenttypefromto()": {
          "definition": "Verify_that_the_request_included_a_change_of_employment_type_from__to__(string originalEmploymentType, string proposedEmploymentType)"
        },
        "verifythattheacademyidis()": {
          "definition": "Verify_that_the_academy_id_is__(string academyId)"
        },
        "verifythattherequestincludedachangeofsupervisorfromto()": {
          "definition": "Verify_that_the_request_included_a_change_of_supervisor_from__to__(string originalSupervisor, string proposedSupervisor)"
        },
        "verifythattheproposedactionis()": {
          "definition": "Verify_that_the_proposed_action_is__(string action)"
        },
        "verifythatthecommentsare()": {
          "definition": "Verify_that_the_comments_are__(string comments)"
        },
        "verifythattherequestdidnotincludeachangeoftitlerank()": {
          "definition": "Verify_that_the_request_did_not_include_a_change_of_title_rank()"
        },
        "bindpendingpersonnelchanges()": {
          "definition": "BindPendingPersonnelChanges(IList<PendingPersonnelChangeAcadisDTO> pendingPersonnelChanges)"
        },
        "verifythattherequestincludedachangeofappointmenttypefromto()": {
          "definition": "Verify_that_the_request_included_a_change_of_appointment_type_from__to__(string originalAppointmentType, string proposedAppointmentType)"
        },
        "verifythattherequestdidnotincludeachangeofappointmenttype()": {
          "definition": "Verify_that_the_request_did_not_include_a_change_of_appointment_type()"
        },
        "verifythattherearerequestsinthechangelist()": {
          "definition": "Verify_that_there_are__requests_in_the_change_list(int changeCount)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PersonnelRequestsWorkflow"
    },
    "portalclasstestresultsreadonly": {
      "namespace": "",
      "methods": {
        "bindclassenrollmentlist()": {
          "definition": "BindClassEnrollmentList(IEnumerable<PortalClassTestEntryListItemDto> dtos)"
        },
        "verifyalreadyhasgrade()": {
          "definition": "Verify_already_has_grade()"
        },
        "verifyofstudentssubmittedby()": {
          "definition": "Verify__of__students_submitted__by__(int resultsEntered, int students, DateTime submissionDate, string submittedBy)"
        },
        "verifypercentageresultis()": {
          "definition": "Verify_percentage_result_is__(decimal score)"
        },
        "waitforclicktolandusonviewpage()": {
          "definition": "Wait_for_click_to_land_us_on_view_page()"
        },
        "verifytestdateis()": {
          "definition": "Verify_test_date_is__(DateTime testDate)"
        },
        "considerstudent()": {
          "definition": "Consider_student__(string studentName, string academyId)"
        },
        "verifypassfailresultis()": {
          "definition": "Verify_pass_fail_result_is__(string passFail)"
        },
        "verifytestdateisnotset()": {
          "definition": "Verify_test_date_is_not_set()"
        },
        "verifyresultisnotset()": {
          "definition": "Verify_result_is_not_set()"
        },
        "verifycommentsare()": {
          "definition": "Verify_comments_are__(string comments)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalClassTestResultsReadonlyWorkflow"
    },
    "departurereasonandreasondetailmaintenance": {
      "namespace": "",
      "methods": {
        "verifydeletedetaillinkwasshown()": {
          "definition": "Verify_delete_detail_link_was_shown()"
        },
        "selectforreason()": {
          "definition": "Select__for_reason(string reasonName)"
        },
        "verifyeditexistingreasonorreasondetail()": {
          "definition": "Verify__edit_existing_reason_or_reason_detail(string status)"
        },
        "verifyreasondetailedittitleis()": {
          "definition": "Verify_reason_detail_edit_title_is__(string title)"
        },
        "selecteditreasondetail()": {
          "definition": "Select_edit_Reason_Detail__(string reasonName, string detail)"
        },
        "binddeparturereasonslist()": {
          "definition": "BindDepartureReasonsList(IList<ReasonListDto> reasons)"
        },
        "enterforreasondetail()": {
          "definition": "Enter__for_Reason_Detail(string detail)"
        },
        "savereason()": {
          "definition": "Save_Reason()"
        },
        "verifythereisareason()": {
          "definition": "Verify_there_is_a_Reason_(string reasonName)"
        },
        "savedeparturereasondetail()": {
          "definition": "Save_Departure_Reason_Detail()"
        },
        "verifyreasoneditwasshown()": {
          "definition": "Verify_reason_edit_was_shown()"
        },
        "selecteditreason()": {
          "definition": "Select_edit_reason__(string reasonName)"
        },
        "verifyreasondetailis()": {
          "definition": "Verify_Reason_Detail_is_(string reasonDetail)"
        },
        "createdeparturereasonwithdetail()": {
          "definition": "Create_departure_reason__with_detail__(string reasonName, string detailName)"
        },
        "enterforreason()": {
          "definition": "Enter__for_reason(string reason)"
        },
        "verifyreasonis()": {
          "definition": "Verify_Reason_is_(string reasonName)"
        },
        "selectaddadeparturereasonreasondetail()": {
          "definition": "Select_Add_a_Departure_Reason_Reason_Detail()"
        },
        "selectforusagefor()": {
          "definition": "Select__for_usage_for_(AcadisListEntryUsage usage, string academyName)"
        },
        "verifyusageforis()": {
          "definition": "Verify_Usage_for__is__(string academyAbbr, AcadisListEntryUsage usage)"
        },
        "bindeditdetailusages()": {
          "definition": "BindEditDetailUsages(IList<ReasonDetailAcademyEditDto> usages)"
        },
        "verifyreasoneditis()": {
          "definition": "Verify_Reason_edit_is__(string reasonName)"
        },
        "selectdeletedetail()": {
          "definition": "Select_delete_detail__(string reasonName, string detailName)"
        },
        "showeditdetaildialog()": {
          "definition": "ShowEditDetailDialog(bool inUse)"
        },
        "verifythatisavailablefor()": {
          "definition": "Verify_that___is_Available_for_(string reasonName, string detailName, string academyName)"
        },
        "verifyacademiesarelistedforusage()": {
          "definition": "Verify__academies_are_listed_for_Usage(int count)"
        },
        "setdetailedittitle()": {
          "definition": "SetDetailEditTitle(string title)"
        },
        "verifyreasondetaileditwasshown()": {
          "definition": "Verify_reason_detail_edit_was_shown()"
        },
        "showeditreasondialog()": {
          "definition": "ShowEditReasonDialog()"
        },
        "verifythereisnotareason()": {
          "definition": "Verify_there_is_not_a_Reason_(string reasonName)"
        },
        "verifythereisnota()": {
          "definition": "Verify_there_is_not_a__(string reasonName, string detailName)"
        },
        "showcannotdeletealert()": {
          "definition": "ShowCannotDeleteAlert(bool multiAcademy)"
        },
        "setcanedit()": {
          "definition": "SetCanEdit(bool canEdit)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "DepartureReasonAndReasonDetailMaintenance"
    },
    "replacedocument": {
      "namespace": "",
      "methods": {
        "showlistofattachments()": {
          "definition": "ShowListOfAttachments(List<InquiryResponseAttachmentDTO> dtos)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ReplaceDocumentWorkflow"
    },
    "deleteconfirmationaudit": {
      "namespace": "",
      "methods": {
        "rundelete()": {
          "definition": "RunDelete(int? itemId)"
        },
        "binditemsincludedlist()": {
          "definition": "BindItemsIncludedList(List<string> items)"
        },
        "verifydeleteconfirmationwindowisvisible()": {
          "definition": "Verify_delete_confirmation_window_is_visible()"
        },
        "runpredelete()": {
          "definition": "RunPreDelete()"
        },
        "show()": {
          "definition": "Show()"
        },
        "clickdelete()": {
          "definition": "Click_Delete()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "DeleteConfirmationAuditWorkflow"
    },
    "duplicatetrainingsearch": {
      "namespace": "",
      "methods": {
        "includetrainingwithmorethanhoursinasingleday()": {
          "definition": "Include_training_with_more_than__hours_in_a_single_day(int hours)"
        },
        "fordaterangeto()": {
          "definition": "For_date_range_to(DateTime beginDate, DateTime endDate)"
        },
        "includeonlytrainingwithequalhours()": {
          "definition": "Include_only_training_with_equal_hours()"
        },
        "includetrainingonthesameday()": {
          "definition": "Include_training_on_the_same_day()"
        },
        "includetrainingthathasthesamenamewithinthesameyear()": {
          "definition": "Include_training_that_has_the_same_name_within_the_same_year()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "DuplicateTrainingSearchWorkflow"
    },
    "gradelistreportpreferences": {
      "namespace": "",
      "methods": {
        "verifypageisnotvalid()": {
          "definition": "Verify_Page_is_Not_Valid()"
        },
        "verifypageisvalid()": {
          "definition": "Verify_Page_is_Valid()"
        },
        "browsetopagefortestnamed()": {
          "definition": "Browse_to_Page_for_test_Named(string testName)"
        },
        "showreport()": {
          "definition": "ShowReport(List<string> prefs)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "GradeListReportPreferencesWorkflow"
    },
    "bannernav": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "BannerNavWorkflow"
    },
    "configurationmanagement": {
      "namespace": "",
      "methods": {
        "setappsettingto()": {
          "definition": "Set_app_setting__to__(string key, string value)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "ConfigurationManagement"
    },
    "automatedemailexpiringcertificationnotification": {
      "namespace": "",
      "methods": {
        "verifythatanemailmessagewassenttoforonatforexpiringon()": {
          "definition": "Verify_that_an_email_message_was_sent_to__for__on__at__for__expiring_on__(string personEmailed, string personWithExpiringCert, DateTime notifyDate, string emailAddress, string certName, DateTime expectedExpirationDate)"
        },
        "verifythattheemailsenttoforcontains()": {
          "definition": "Verify_that_the_email_sent_to__for__contains__(string emailAddress, string certName, string compareStr)"
        },
        "verifyemailmessagesweresent()": {
          "definition": "Verify__email_messages_were_sent(int num)"
        },
        "runexpiringcertsemailer()": {
          "definition": "Run_Expiring_Certs_Emailer()"
        },
        "verifythatanemailmessagewassenttoonatforexpiringon()": {
          "definition": "Verify_that_an_email_message_was_sent_to__on__at__for__expiring_on__(string personName, DateTime notifyDate, string emailAddress, string certName, DateTime expectedExpirationDate)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "AutomatedEmailExpiringCertificationNotification"
    },
    "itemanalysisworstquestions": {
      "namespace": "",
      "methods": {
        "verifyquestionsappearinresultsexcludingbaseline()": {
          "definition": "Verify__questions_appear_in_results_excluding_baseline(int numResults)"
        },
        "addacademyfilterfor()": {
          "definition": "Add_academy_filter_for__(string academyName)"
        },
        "verifylastupdateddescriptionreads()": {
          "definition": "Verify_last_updated_description_reads__(string lastUpdated)"
        },
        "verifyquestionwithtextisnotshown()": {
          "definition": "Verify_question_with_text__is_not_shown(string questionText)"
        },
        "verifyprogramforacademyappearsinfilters()": {
          "definition": "Verify__program_for__academy_appears_in_filters(string programName, string academyName)"
        },
        "browsetopageusingameancorrelationupperboundof()": {
          "definition": "Browse_to_Page_using_a_mean_correlation_upper_bound_of__(decimal meanCorrelationUpperBound)"
        },
        "recordcurrentdataasbaseline()": {
          "definition": "Record_current_data_as_baseline()"
        },
        "clearfilters()": {
          "definition": "Clear_Filters()"
        },
        "verifyprogramforacademydoesnotappearinfilters()": {
          "definition": "Verify__program_for__academy_does_not_appear_in_filters(string programName, string academyName)"
        },
        "bindprogramfilters()": {
          "definition": "BindProgramFilters(IList<ItemAnalysisProgramFilterDTO> filterDtos)"
        },
        "addprogramfilterforunder()": {
          "definition": "Add_program_filter_for__under__(string programName, string academyName)"
        },
        "applyfilters()": {
          "definition": "Apply_Filters()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifyacademydoesnotappearinfilters()": {
          "definition": "Verify__academy_does_not_appear_in_filters(string academyName)"
        },
        "clickupdatestatistics()": {
          "definition": "Click_Update_Statistics()"
        },
        "verifyacademyappearsinfilters()": {
          "definition": "Verify__academy_appears_in_filters(string academyName)"
        },
        "verifyquestionwithtextisshown()": {
          "definition": "Verify_question_with_text__is_shown(string questionText)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ItemAnalysisWorstQuestionsWorkflow"
    },
    "changeenrollmentprocessing": {
      "namespace": "",
      "methods": {
        "browsetopageforclasstemplate()": {
          "definition": "Browse_to_page_for_class_template__(string classTemplateName)"
        },
        "redirecttoregistrationrecord()": {
          "definition": "RedirectToRegistrationRecord(int registrationID)"
        },
        "setenrollmentprocessingtodirectenrollment()": {
          "definition": "Set_enrollment_processing_to_Direct_Enrollment()"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "showpopover()": {
          "definition": "ShowPopover()"
        },
        "redirecttoedit()": {
          "definition": "RedirectToEdit(int programID)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ChangeEnrollmentProcessingWorkflow"
    },
    "addeditinquiryitemcontrol": {
      "namespace": "",
      "methods": {
        "cleartypefilter()": {
          "definition": "Clear_type_filter()"
        },
        "verifycommentoptiononresponseis()": {
          "definition": "Verify_comment_option_on_response_is(int position, string commentOption)"
        },
        "deleteresponse()": {
          "definition": "Delete_response(int position)"
        },
        "verifycanedititem()": {
          "definition": "Verify_can_edit_item()"
        },
        "verifyitemwithtextischeckedbydefault()": {
          "definition": "Verify_item_with_text__is_checked_by_default(string itemText)"
        },
        "selectcertificationforcertificationautofulfillment()": {
          "definition": "Select_certification__for_certification_auto_fulfillment(string certName)"
        },
        "verifycannotedititem()": {
          "definition": "Verify_cannot_edit_item()"
        },
        "addnewprerequisitetoclassregistrationforclasstemplate()": {
          "definition": "Add_new_prerequisite_to_class_registration_for_class_template__(string classTemplName)"
        },
        "settypeto()": {
          "definition": "Set_type_to__(string resultTypeName)"
        },
        "addnewprerequisitetoclassregistrationforclass()": {
          "definition": "Add_new_prerequisite_to_class_registration_for_class_(string className)"
        },
        "verifyitemwithtexthasnoguideline()": {
          "definition": "Verify_item_with_text__has_no_guideline(string itemText)"
        },
        "setitemcommentsto()": {
          "definition": "Set_item_comments_to__(string commentsOption)"
        },
        "verifyitemwithtextexists()": {
          "definition": "Verify_item_with_text__exists(string itemText)"
        },
        "verifyitemcommentsoptionishidden()": {
          "definition": "Verify_item_comments_option_is_hidden()"
        },
        "setgroupto()": {
          "definition": "Set_group_to__(string groupName)"
        },
        "verifyitemwithtexthastype()": {
          "definition": "Verify_item_with_text__has_type__(string itemText, InquiryItemType itemType)"
        },
        "verifyitemwithtexthasguidelines()": {
          "definition": "Verify_item_with_text__has_guidelines__(string itemText, string guidelineText)"
        },
        "verifyexistingresponsesetisavailable()": {
          "definition": "Verify_existing_response_set__is_available(string responseSetName)"
        },
        "clickeditresponseset()": {
          "definition": "Click_Edit_Response_Set()"
        },
        "clickcontinue()": {
          "definition": "Click_continue()"
        },
        "verifythatthelistofcertificationsdoesnotinclude()": {
          "definition": "Verify_that_the_list_of_certifications_does_not_include(string certName)"
        },
        "setcheckboxcommentsoptionto()": {
          "definition": "Set_checkbox_comments_option_to__(string commentsOption)"
        },
        "settrainingtospecificinterval()": {
          "definition": "Set_training_to_specific_interval()"
        },
        "verifytypeisnotavailable()": {
          "definition": "Verify_type__is_not_available(string typeName)"
        },
        "verifynumericvalueisonresponse()": {
          "definition": "Verify_numeric_value_is__on_response(int numericValue, int position)"
        },
        "setitemtypefiltervalue()": {
          "definition": "SetItemTypeFilterValue(InquiryItemType? itemType)"
        },
        "clickcancel()": {
          "definition": "Click_Cancel()"
        },
        "verifyexistingresponsesetslisthasitems()": {
          "definition": "Verify_existing_response_sets_list_has__items(int itemCount)"
        },
        "verifyitemwithtextdoesnotexist()": {
          "definition": "Verify_item_with_text__does_not_exist(string itemText)"
        },
        "showresponseoptionseteditor()": {
          "definition": "ShowResponseOptionSetEditor(int? responseOptionSetId)"
        },
        "setrequirementto()": {
          "definition": "Set_requirement_to__(string text)"
        },
        "verifyeditorcontainsrows()": {
          "definition": "Verify_editor_contains__rows(int numRows)"
        },
        "verifydefaultcheckboxselectionishidden()": {
          "definition": "Verify_default_checkbox_selection_is_hidden()"
        },
        "browsetoedititemforperformancereport()": {
          "definition": "Browse_to_edit_item__for_performance_report__(string itemText, string reportName)"
        },
        "verifyisnotanavailableitem()": {
          "definition": "Verify__is_not_an_available_item(string itemName)"
        },
        "settypefilterto()": {
          "definition": "Set_type_filter_to__(string typeName)"
        },
        "browsetoeditrequirementforcertificationtemplate()": {
          "definition": "Browse_to_edit__requirement__for_certification_template__(CertRequirementContext context, string itemText, string masterName)"
        },
        "verifyexistingresponsesetisnotavailable()": {
          "definition": "Verify_existing_response_set__is_not_available(string responseSetName)"
        },
        "setfulfillmenttypeto()": {
          "definition": "Set_fulfillment_type_to__(string fulfillmentType)"
        },
        "verifygroupis()": {
          "definition": "Verify_Group_is__(string groupName)"
        },
        "setcheckboxdefaulttoselected()": {
          "definition": "Set_checkbox_default_to_selected()"
        },
        "setcheckboxtextto()": {
          "definition": "Set_checkbox_text_to__(string text)"
        },
        "settrainingunitto()": {
          "definition": "Set_training_unit_to__(CalendarTimeUnit unit)"
        },
        "setfreeformtextto()": {
          "definition": "Set_freeform_text_to__(string text)"
        },
        "setcheckboxdefaulttonotselected()": {
          "definition": "Set_checkbox_default_to_not_selected()"
        },
        "settrainingtoanytime()": {
          "definition": "Set_training_to_any_time()"
        },
        "settextfieldrequirederrormessage()": {
          "definition": "SetTextFieldRequiredErrorMessage(string msg)"
        },
        "verifycannotselectfulfillmenttype()": {
          "definition": "Verify_cannot_select_fulfillment_type()"
        },
        "clicksave()": {
          "definition": "Click_Save()"
        },
        "selectstatusforcertificationautofulfillment()": {
          "definition": "Select_status__for_certification_auto_fulfillment(string statusName)"
        },
        "browsetoeditprerequisiteontheclassregistrationfor()": {
          "definition": "Browse_to_edit_prerequisite__on_the_class_registration_for__(string itemText, string className)"
        },
        "setminimumageto()": {
          "definition": "Set_minimum_age_to(int minAge)"
        },
        "verifyisanavailableitem()": {
          "definition": "Verify__is_an_available_item(string itemName)"
        },
        "setcommentstoonresponse()": {
          "definition": "Set_comments_to__on_response__(string optionName, int position)"
        },
        "clearnumericvalueonresponse()": {
          "definition": "Clear_numeric_value_on_response__(int position)"
        },
        "verifyguidelinesare()": {
          "definition": "Verify_Guidelines_are__(string guidelineText)"
        },
        "addnewprerequisitetoclassregistrationfor()": {
          "definition": "Add_new_prerequisite_to_class_registration_for__(string className)"
        },
        "setquestiontextto()": {
          "definition": "Set_question_text_to__(string text)"
        },
        "verifyinusealertisvisibleonresponseset()": {
          "definition": "Verify_in_use_alert_is_visible_on_response_set()"
        },
        "useexistingresponsesfrom()": {
          "definition": "Use_existing_responses_from__(string responseSetName)"
        },
        "selectforreuse()": {
          "definition": "Select__for_reuse(string itemName)"
        },
        "settexttoonresponse()": {
          "definition": "Set_text_to__on_response__(string text, int position)"
        },
        "verifyguidelinesareblank()": {
          "definition": "Verify_Guidelines_are_blank()"
        },
        "checkallowcomparabletraining()": {
          "definition": "Check_allow_comparable_training()"
        },
        "browsetocreatenewitemforperformancereport()": {
          "definition": "Browse_to_create_new_item_for_performance_report__(string reportName)"
        },
        "verifyitemusesexistingresponseset()": {
          "definition": "Verify_item_uses_existing_response_set__(string responseSetName)"
        },
        "setrequirementvisibleinportal()": {
          "definition": "Set_requirement_visible_in_portal()"
        },
        "donotallowreuse()": {
          "definition": "Do_not_allow_reuse()"
        },
        "verifytextonresponseisblank()": {
          "definition": "Verify_text_on_response_is_blank(int position)"
        },
        "addanotherresponse()": {
          "definition": "Add_another_response()"
        },
        "verifyitemwithtexthasitemcommentsoption()": {
          "definition": "Verify_item_with_text__has_item_comments_option__(string itemText, CommentOptions commentOption)"
        },
        "addtrainingcategory()": {
          "definition": "Add_training_category__(string trainingCategoryName)"
        },
        "responseisrequired()": {
          "definition": "Response_is_required()"
        },
        "verifyitemcommentsoptionisvisible()": {
          "definition": "Verify_item_comments_option_is_visible()"
        },
        "selectclasstemplateinprogramfortrainingautofulfillment()": {
          "definition": "Select_class_template__in_program__for_training_auto_fulfillment(string classTemplateName, string programName)"
        },
        "verifytypeisavailable()": {
          "definition": "Verify_type__is_available(string typeName)"
        },
        "verifyresponsesbandishidden()": {
          "definition": "Verify_responses_band_is_hidden()"
        },
        "choosetouseanexistingitem()": {
          "definition": "Choose_to_use_an_existing_item()"
        },
        "verifyitemgroupisavailable()": {
          "definition": "Verify_item_group__is_available(string groupName)"
        },
        "verifyemptyresponselistvalidationmessageisvisible()": {
          "definition": "Verify_empty_response_list_validation_message_is_visible()"
        },
        "setnumberofhoursto()": {
          "definition": "Set_number_of_hours_to(int numHrs)"
        },
        "verifydefaultcheckboxselectionisvisible()": {
          "definition": "Verify_default_checkbox_selection_is_visible()"
        },
        "verifyitemtextfieldenforcesnumericentry()": {
          "definition": "Verify_item_text_field_enforces_numeric_entry()"
        },
        "setguidelinesto()": {
          "definition": "Set_guidelines_to__(string guidelineText)"
        },
        "verifytypeis()": {
          "definition": "Verify_Type_is__(string typeName)"
        },
        "uncheckallowcomparabletraining()": {
          "definition": "Uncheck_allow_comparable_training()"
        },
        "selectautofulfill()": {
          "definition": "Select_auto_fulfill()"
        },
        "verifyitemallowsasingleresponse()": {
          "definition": "Verify_item_allows_a_single_response()"
        },
        "allowreuse()": {
          "definition": "Allow_reuse()"
        },
        "accessdenied()": {
          "definition": "AccessDenied()"
        },
        "choosetocreateanewitem()": {
          "definition": "Choose_to_create_a_new_item()"
        },
        "setselectedbydefaulttoonresponse()": {
          "definition": "Set_selected_by_default_to__on_response__(bool selectedByDefault, int position)"
        },
        "verifyitemtextisblank()": {
          "definition": "Verify_item_text_is_blank()"
        },
        "setnumericvaluetoonresponse()": {
          "definition": "Set_numeric_value_to__on_response__(int numericValue, int position)"
        },
        "verifyitemtextfielddoesnotenforcenumericentry()": {
          "definition": "Verify_item_text_field_does_not_enforce_numeric_entry()"
        },
        "verifythatthelistofcertificationsincludes()": {
          "definition": "Verify_that_the_list_of_certifications_includes(string certName)"
        },
        "setrequirementnotvisibleinportal()": {
          "definition": "Set_requirement_not_visible_in_portal()"
        },
        "verifyfulfillmenttypeis()": {
          "definition": "Verify_fulfillment_type_is__(string fulfillmentType)"
        },
        "verifyselectedbydefaultonresponseis()": {
          "definition": "Verify_selected_by_default_on_response_is(int position, bool selectedByDefault)"
        },
        "verifyresponsesbandisvisible()": {
          "definition": "Verify_responses_band_is_visible()"
        },
        "setdescriptionto()": {
          "definition": "Set_description_to__(string text)"
        },
        "enterforsetname()": {
          "definition": "Enter__for_set_name(string setName)"
        },
        "settrainingintervalto()": {
          "definition": "Set_training_interval_to__(int interval)"
        },
        "verifyemptyresponselistvalidationmessageishidden()": {
          "definition": "Verify_empty_response_list_validation_message_is_hidden()"
        },
        "addnewrequirementtocertificationtemplate()": {
          "definition": "Add_new__requirement_to_certification_template__(CertRequirementContext context, string masterName)"
        },
        "browsetoadd()": {
          "definition": "BrowseToAdd(int inquiryId)"
        },
        "verifyitemwithtextisinthegroupnamed()": {
          "definition": "Verify_item_with_text__is_in_the_group_named__(string itemText, string groupName)"
        },
        "selectaddresponseset()": {
          "definition": "Select_Add_Response_Set()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AddEditInquiryItemControlWorkflow"
    },
    "surveyaddeditwizardfieldselector": {
      "namespace": "",
      "methods": {
        "setblockfieldlabelto()": {
          "definition": "Set_block__field__label_to__(int blockIndex, int fieldIndex, string newLabel)"
        },
        "clickback()": {
          "definition": "Click_Back()"
        },
        "moveblocktobeforeblock()": {
          "definition": "Move_block__to_before_block__(int sourceIndex, int targetIndex)"
        },
        "navigateback()": {
          "definition": "NavigateBack()"
        },
        "verifyusernavigatedtothepreviouspage()": {
          "definition": "Verify_user_navigated_to_the_previous_page()"
        },
        "clickdoneondeletewarning()": {
          "definition": "Click_Done_on_Delete_warning()"
        },
        "clickcancelondeletewarning()": {
          "definition": "Click_Cancel_on_Delete_warning()"
        },
        "bindfieldpicker()": {
          "definition": "BindFieldPicker(FormBuilderFieldPickerDTO fieldPickerDto)"
        },
        "setfieldlabelto()": {
          "definition": "Set_field__label_to__(int fieldIndex, string newLabel)"
        },
        "setfielddescriptionto()": {
          "definition": "Set_field__description_to__(int fieldIndex, string newDescription)"
        },
        "clickcontinue()": {
          "definition": "Click_Continue()"
        },
        "browsetopagetosurvey()": {
          "definition": "Browse_to_page_to__survey__(AddEditMode addEditMode, string formName)"
        },
        "navigatecontinue()": {
          "definition": "NavigateContinue()"
        },
        "verifyblockfieldhasdescription()": {
          "definition": "Verify_block__field__has_description__(int blockIndex, int fieldIndex, string description)"
        },
        "setfielddropdownlistto()": {
          "definition": "Set_field__dropdown_list_to__(int fieldIndex, string newOptions)"
        },
        "addfieldfromtab()": {
          "definition": "Add_field__from_tab__(string fieldName, string tabName)"
        },
        "setfieldlistoptionsto()": {
          "definition": "Set_field__list_options_to__(int fieldIndex, string newOptions)"
        },
        "verifyblockfieldhasdropdownlistoptions()": {
          "definition": "Verify_block__field__has_dropdown_list_options__(int blockIndex, int fieldIndex, string options)"
        },
        "verifyblockfieldisnotrequired()": {
          "definition": "Verify_block__field__is_not_required(int blockIndex, int fieldIndex)"
        },
        "verifyblockhasfields()": {
          "definition": "Verify_block__has__fields(int blockIndex, int numberOfFields)"
        },
        "verifydeletewarningmessageisshowingwithmessage()": {
          "definition": "Verify_delete_warning_message_is_showing_with_message__(string message)"
        },
        "verifytryingtosavecausesserversidevalidationtoreturnanerrormessage()": {
          "definition": "Verify_trying_to_save_causes_server_side_validation_to_return_an_error_message__(string message)"
        },
        "makefieldnotrequired()": {
          "definition": "Make_field__not_required(int fieldIndex)"
        },
        "setfieldhelptextto()": {
          "definition": "Set_field__help_text_to__(int fieldIndex, string newHelpText)"
        },
        "verifydeletewarningmessageisnotshowing()": {
          "definition": "Verify_delete_warning_message_is_not_showing()"
        },
        "verifyblockfieldisrequired()": {
          "definition": "Verify_block__field__is_required(int blockIndex, int fieldIndex)"
        },
        "verifyusernavigatedtothenextpage()": {
          "definition": "Verify_user_navigated_to_the_next_page()"
        },
        "makefieldrequired()": {
          "definition": "Make_field__required(int fieldIndex)"
        },
        "deletefieldofblock()": {
          "definition": "Delete_field___of_block__(int fieldIndex, int blockIndex)"
        },
        "verifyblockfieldhaslabel()": {
          "definition": "Verify_block__field__has_label__(int blockIndex, int fieldIndex, string label)"
        },
        "setfieldbulletedlistto()": {
          "definition": "Set_field__bulleted_list_to__(int fieldIndex, string newOptions)"
        },
        "browsetopageforsurvey()": {
          "definition": "Browse_to_page_for_survey__(string formName)"
        },
        "bindsurvey()": {
          "definition": "BindSurvey(FormBuilderFormDTO formDto)"
        },
        "verifyformhasblocks()": {
          "definition": "Verify_form_has__blocks(int numberOfBlocks)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "SurveyAddEditWizardFieldSelectorWorkflow"
    },
    "mostcreditedquestion": {
      "namespace": "",
      "methods": {
        "verifytotalaskedis()": {
          "definition": "Verify_total_asked_is__(int totalAsked)"
        },
        "beginverifying()": {
          "definition": "Begin_verifying__(string question)"
        },
        "verifypercentagecreditedis()": {
          "definition": "Verify_percentage_credited_is__(string percentageCredited)"
        },
        "verifyisnotinthelist()": {
          "definition": "Verify__is_not_in_the_list(string question)"
        },
        "bindquestions()": {
          "definition": "BindQuestions(IEnumerable<MostCreditedQuestionDto> data)"
        },
        "verifytotalcreditedis()": {
          "definition": "Verify_total_credited_is__(int totalCredited)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "MostCreditedQuestion"
    },
    "advanceddataexporthandler": {
      "namespace": "",
      "methods": {
        "executeexportnamed()": {
          "definition": "Execute_export_named__(string exportName)"
        }
      },
      "parent-name": "MVBaseExportHandlerWorkflow",
      "class-name": "AdvancedDataExportHandlerWorkflow"
    },
    "employmentactionedit": {
      "namespace": "",
      "methods": {
        "browsetoaddemploymentactionforat()": {
          "definition": "Browse_to_add_employment_action_for__at__(string personName, string orgName)"
        },
        "verifytherearesupervisoroptions()": {
          "definition": "Verify_there_are__Supervisor_Options(int number)"
        },
        "browsetoeditemploymentactionforat()": {
          "definition": "Browse_to_edit__employment_action_for__at_(string ordinal, string personName, string orgName)"
        },
        "verifyprimaryemployerforisnot()": {
          "definition": "Verify_primary_employer_for__is_not__(string personName, string orgName)"
        },
        "verifythatudfwithlabelhasvalue()": {
          "definition": "Verify_that_UDF_with_label__has_value__(string label, string value)"
        },
        "verifyreplacementsupervisoroptioningroupis()": {
          "definition": "Verify__replacement_supervisor_option_in_group__is_(string ordinal, string orgname, string personName)"
        },
        "setstatusto()": {
          "definition": "Set_status_to__(string statusName)"
        },
        "setorganizationto()": {
          "definition": "Set_Organization_to_(string orgName)"
        },
        "selectnewprimaryemployer()": {
          "definition": "Select_new_primary_employer(string orgName)"
        },
        "redirecttoviewonlypage()": {
          "definition": "RedirectToViewOnlyPage(int employmentID, int personID)"
        },
        "addprimaryemploymentatwithtitleemploymenttypeandappointmenttypestartingon()": {
          "definition": "Add_primary_employment_at__with_title__employment_type__and_appointment_type__starting_on__(string orgName, string title, string employmentType, string appointmentType, DateTime effectiveDate)"
        },
        "verifysupervisoroptioningroupis()": {
          "definition": "Verify__supervisor_option_in_group__is_(string ordinal, string orgname, string personName)"
        },
        "verifytherearesupervisedemployees()": {
          "definition": "Verify_there_are__supervised_employees(int number)"
        },
        "bindemploymentstatuses()": {
          "definition": "BindEmploymentStatuses(IList<NamedItem> employmentStatuses)"
        },
        "verifycommentis()": {
          "definition": "Verify_comment_is_(string comment)"
        },
        "verifyactionis()": {
          "definition": "Verify_action_is__(string actionName)"
        },
        "bindappointmenttypes()": {
          "definition": "BindAppointmentTypes(IList<NamedItem> appointmentTypes)"
        },
        "searchforreplacementsupervisors()": {
          "definition": "Search_for_replacement_supervisors()"
        },
        "verifyeffectivedateis()": {
          "definition": "Verify_Effective_Date_is_(DateTime effectiveDate)"
        },
        "verifyhasinactiveemploymentat()": {
          "definition": "Verify__has_inactive_employment_at__(string personName, string orgName)"
        },
        "verifysupervisorisempty()": {
          "definition": "Verify_Supervisor_is_empty()"
        },
        "verifytherepossiblereplacementsupervisorsforreassignment()": {
          "definition": "Verify_there__possible_replacement_supervisors_for_reassignment(string condition)"
        },
        "clickupdateassignments()": {
          "definition": "Click_Update_Assignments()"
        },
        "searchforsupervisors()": {
          "definition": "Search_for_supervisors()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifytitleis()": {
          "definition": "Verify_Title_is_(string title)"
        },
        "populatereplacementsupervisor()": {
          "definition": "PopulateReplacementSupervisor(int id, string name)"
        },
        "verifysupervisoris()": {
          "definition": "Verify_Supervisor_is_(string personName)"
        },
        "setemploymenttypeto()": {
          "definition": "Set_employment_type_to__(string employmentTypeName)"
        },
        "verifydeactivatingemploymentwillrequireanewprimaryemployment()": {
          "definition": "Verify_deactivating_employment_will_require_a_new_primary_employment()"
        },
        "setsupervisorto()": {
          "definition": "Set_Supervisor_to_(string personName)"
        },
        "addemploymentatwithtitle()": {
          "definition": "Add_employment_at__with_title__(string orgName, string title)"
        },
        "clicksave()": {
          "definition": "Click_Save()"
        },
        "setvalueofudfwithlabelto()": {
          "definition": "Set_value_of_UDF_with_label__to__(string label, string value)"
        },
        "addprimaryemploymentatwithtitlestartingon()": {
          "definition": "Add_primary_employment_at__with_title__starting_on__(string orgName, string title, DateTime effectiveDate)"
        },
        "verifyprimaryemployerforis()": {
          "definition": "Verify_primary_employer_for__is__(string personName, string orgName)"
        },
        "createemploymentforatorganizationwithtitleandhiredateandsupervisor()": {
          "definition": "Create_employment_for__at_organization__with_Title__and_hire_date__and_supervisor__(string personLabel, string orgLabel, string titleName, DateTime hireDate, string supervisorName)"
        },
        "bindemploymenttypes()": {
          "definition": "BindEmploymentTypes(IList<NamedItem> employmentTypes)"
        },
        "setactionto()": {
          "definition": "Set_action_to__(string actionName)"
        },
        "clearsupervisor()": {
          "definition": "Clear_Supervisor()"
        },
        "settitleto()": {
          "definition": "Set_Title_to__(string titleName)"
        },
        "setappointmenttypeto()": {
          "definition": "Set_appointment_type_to__(string appointmentTypeName)"
        },
        "setcommentsto()": {
          "definition": "Set_comments_to__(string comments)"
        },
        "clicksavecauseserror()": {
          "definition": "Click_Save_causes_error(string errorText)"
        },
        "verifyorganizationis()": {
          "definition": "Verify_Organization_is_(string orgName)"
        },
        "verifyhasotheractiveemployments()": {
          "definition": "Verify_has_other_active_employments()"
        },
        "populateactiveemployments()": {
          "definition": "PopulateActiveEmployments(IEnumerable<ActiveEmploymentDTO> employments)"
        },
        "verifytherearereplacementsupervisoroptions()": {
          "definition": "Verify_there_are__replacement_supervisor_options(int number)"
        },
        "verifysupervisorgroupis()": {
          "definition": "Verify__supervisor_group_is_(string ordinal, string orgName)"
        },
        "addprimaryemploymentatwithtitle()": {
          "definition": "Add_primary_employment_at__with_title__(string orgName, string title)"
        },
        "verifyreplacementsupervisorgroupis()": {
          "definition": "Verify_replacement_supervisor_group_is(string ordinal, string orgName)"
        },
        "addemploymentatwithtitlestartingon()": {
          "definition": "Add_employment_at__with_title__starting_on__(string orgName, string title, DateTime effectiveDate)"
        },
        "verifyreplacementsupervisorispopulatedwith()": {
          "definition": "Verify_replacement_supervisor_is_populated_with_(string personName)"
        },
        "verifyisemployedat()": {
          "definition": "Verify__is_employed_at__(string personName, string orgName)"
        },
        "setreplacementsupervisorto()": {
          "definition": "Set_replacement_supervisor_to(string personName)"
        },
        "addemploymentatwithtitleemploymenttypeandappointmenttypestartingon()": {
          "definition": "Add_employment_at__with_title__employment_type__and_appointment_type__starting_on__(string orgName, string title, string employmentType, string appointmentType, DateTime effectiveDate)"
        },
        "verifyreplacementsupervisorisnotpopulated()": {
          "definition": "Verify_replacement_supervisor_is_not_populated()"
        },
        "verifythatudfwithlabelexist()": {
          "definition": "Verify_that_UDF_with_label____exist(string label, string doesDoesNot)"
        },
        "verifyhasemploymentactionofonwithstatusoffor()": {
          "definition": "Verify__has_employment_action_of__on__with_status_of__for__(string personName, string actionName, DateTime effDate, string statusName, string orgName)"
        },
        "seteffectivedateto()": {
          "definition": "Set_Effective_Date_to__(DateTime effDate)"
        },
        "bindemploymentchangereasons()": {
          "definition": "BindEmploymentChangeReasons(IList<NamedItem> employmentChangeReasons)"
        },
        "setwillneednewprimaryifdeactivated()": {
          "definition": "SetWillNeedNewPrimaryIfDeactivated(bool need)"
        },
        "savedutyassignments()": {
          "definition": "SaveDutyAssignments(int employmentID)"
        },
        "createemploymentforatorganizationwithtitleandhiredate()": {
          "definition": "Create_employment_for__at_organization__with_Title__and_hire_date__(string personLabel, string orgLabel, string titleName, DateTime hireDate)"
        },
        "clickremoveassignments()": {
          "definition": "Click_Remove_Assignments()"
        },
        "verifythatthereareemploymentudfs()": {
          "definition": "Verify_that_there_are__employment_UDFs(int count)"
        },
        "bindtitleranks()": {
          "definition": "BindTitleRanks(IList<NamedItem> titles)"
        },
        "browsetoaddpersonemploymentfor()": {
          "definition": "Browse_to_add_person_employment_for__(string personName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EmploymentActionEdit"
    },
    "personnelshortfalluserfilters": {
      "namespace": "",
      "methods": {
        "alerteligibleinstructorsofshortfalls()": {
          "definition": "AlertEligibleInstructorsOfShortfalls()"
        },
        "bindfilterlists()": {
          "definition": "BindFilterLists(List<UserFilterBaseDTO> filters)"
        },
        "bindfilterlinks()": {
          "definition": "BindFilterLinks(List<UserFilterBaseDTO> filters)"
        },
        "savedata()": {
          "definition": "SaveData()"
        },
        "bindfilterdata()": {
          "definition": "BindFilterData()"
        },
        "shutupwarningaboutunusedeventremovefilter()": {
          "definition": "Shut_up_warning_about_unused_event_RemoveFilter()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PersonnelShortfallUserFiltersWorkflow"
    },
    "observedtestmanagement": {
      "namespace": "",
      "methods": {
        "eachattemptcanrangefromtowithbeingtheminpassingscore()": {
          "definition": "Each_attempt_can_range_from_to_with_being_the_min_passing_score( decimal min, decimal max, decimal passing )"
        },
        "timedtestallowsattemptlabeled()": {
          "definition": "Timed_Test_allows_attempt_labeled( int numAttempts, string attemptLabel )"
        },
        "theoverallpassingscoreis()": {
          "definition": "The_overall_passing_score_is( decimal passing )"
        },
        "setscoringmethodto()": {
          "definition": "Set_Scoring_Method_To(string scoringMethod)"
        },
        "createscale()": {
          "definition": "Create_Scale()"
        },
        "settestscoretothebetheoftheparts()": {
          "definition": "Set_Test_Score_To_The_Be_The__Of_The_Parts(string Average)"
        },
        "assignscaletotest()": {
          "definition": "assign_scale_to_test(string scaleName)"
        },
        "setmininumnumberofattemptsrequiredtopassto()": {
          "definition": "Set_mininum_number_of_attempts_required_to_pass_to(int passingAttempts)"
        },
        "allowretestsforfailedtestsonly()": {
          "definition": "Allow__retests_for_failed_tests_only(int numberOfRetests)"
        },
        "useexistingscale()": {
          "definition": "use_existing_scale()"
        },
        "allowattemptslabeled()": {
          "definition": "Allow_attempts_labeled( int numAttempts, string attemptLabel )"
        },
        "timedtestscoredby()": {
          "definition": "Timed_Test_scored_by( string scaleName )"
        },
        "attemptsminscoreispassscoreismaxscoreis()": {
          "definition": "attempts_min_score_is_pass_score_is_max_score_is(int minimumScore, int passingScore, int maximumScore)"
        },
        "passedscoredas()": {
          "definition": "Passed_scored_as(string scoreType)"
        },
        "thescaleisbasedontheofattempts()": {
          "definition": "The_scale_is_based_on_the_of__attempts(string scoringMethod, string topOrBottom, int numAttempts)"
        },
        "highscoreisthanalowscore()": {
          "definition": "high_score_is_than_a_low_score(string highOrLow)"
        },
        "assigntestnamedweight()": {
          "definition": "Assign_test_named__weight__(string testName, decimal weight)"
        },
        "retestsarenotallowed()": {
          "definition": "Retests_are_not_allowed()"
        },
        "createobservedtestoftypewithnamewithapositiveresultofwithanegativeresultof()": {
          "definition": "create_observed_test_of_type_with_name_with_a_positive_result_of_with_a_negative_result_of(string testType, string testName, string positiveLabel, string negativeLabel)"
        },
        "setminimumoverallpassingscoretopercent()": {
          "definition": "Set_Minimum_Overall_Passing_Score_To__Percent(decimal minPassing)"
        },
        "verifyobservedtestexists()": {
          "definition": "Verify_observed_test__exists(string testName)"
        },
        "waivedscoreis()": {
          "definition": "waived_score_is(decimal score)"
        },
        "assigntestnamedtoactivitynamed()": {
          "definition": "Assign_test_named__to_activity_named__(string testName, string activityName)"
        },
        "usingtestnamed()": {
          "definition": "Using_test_named__(string testName)"
        },
        "multiparttesthastests()": {
          "definition": "Multipart_test_has_tests(string testName, List<string> testParts)"
        },
        "duplicatenamed()": {
          "definition": "Duplicate_named( string testToCopy, string newTestName )"
        },
        "defineastest()": {
          "definition": "Define_as_Test(string name, TestType type)"
        },
        "addexistingtest()": {
          "definition": "Add_Existing_Test( string testName )"
        },
        "waiversarenotallowed()": {
          "definition": "Waivers_are_not_allowed()"
        },
        "failedscoredas()": {
          "definition": "Failed_scored_as(string scoreType)"
        },
        "scoretestasofattempts()": {
          "definition": "Score_test_as_of__attempts( string scoringMethod, string topOrBottom, int numAttempts )"
        },
        "headerfortestwillbe()": {
          "definition": "Header_for_test_will_be( string headerText )"
        },
        "iwanttoratethescoredvalue()": {
          "definition": "I_want_to_rate_the_scored_value()"
        },
        "failedretestisdefinedwithascoreof()": {
          "definition": "failed_retest_is_defined_with_a_score_of_(decimal score)"
        },
        "setpassfailsimplescoringmethodto()": {
          "definition": "Set_pass_fail_simple_scoring_method_to(string scoringMethod)"
        },
        "allowwaivers()": {
          "definition": "Allow_waivers()"
        },
        "timedtestismeasuredas()": {
          "definition": "Timed_Test_is_measured_as( string timePattern )"
        },
        "decimalsallowedis()": {
          "definition": "decimals_allowed_is(int numberofDecimals)"
        },
        "retestsandwaiversarenotallowed()": {
          "definition": "retests_and_waivers_are_not_allowed()"
        },
        "addinstructions()": {
          "definition": "Add_instructions( string instructions )"
        },
        "allowretests()": {
          "definition": "Allow_retests(int numberOfRetests)"
        },
        "saveobservedtest()": {
          "definition": "Save_Observed_Test( string testName )"
        },
        "passedretestisdefinedwithascoreof()": {
          "definition": "passed_retest_is_defined_with_a_score_of_(decimal score)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "ObservedTestManagement"
    },
    "quicksearch": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "QuickSearchWorkflow"
    },
    "instructorpersistence": {
      "namespace": "",
      "methods": {
        "getinstructorsindivisions()": {
          "definition": "Get_instructors_in_divisions(List<string> divisionNames)"
        },
        "verifythatresultscontain()": {
          "definition": "Verify_that_results_contain__(List<string> instructorNames)"
        },
        "getinstructorswithcertifications()": {
          "definition": "Get_instructors_with_certifications(List<string> certificationNames)"
        },
        "verifythatthereareresults()": {
          "definition": "Verify_that_there_are__results(int numResults)"
        },
        "getinstructorsindivisionandcertificationor()": {
          "definition": "Get_instructors_in_division_and_certification_or(string divisionName, string certificationName1, string certificationName2)"
        },
        "verifythatresultsdonotcontain()": {
          "definition": "Verify_that_results_do_not_contain__(List<string> instructorNames)"
        },
        "getinstructorsindivisionandcertification()": {
          "definition": "Get_instructors_in_division_and_certification(string divisionName, string certificationName)"
        },
        "getinstructorsindivision()": {
          "definition": "Get_instructors_in_division__(string divisionName)"
        },
        "getinstructorswithnodivisions()": {
          "definition": "Get_instructors_with_no_divisions()"
        },
        "getinstructorsindivisionorandcertificationor()": {
          "definition": "Get_instructors_in_division_or_and_certification_or(string divisionName1, string divisionName2, string certificationName1, string certificationName2)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "InstructorPersistence"
    },
    "studentprerequisiteslist": {
      "namespace": "",
      "methods": {
        "verifyselectedfulfillmentonprerequisiteisindicatedasdeletedwithtext()": {
          "definition": "Verify_selected_fulfillment_on__prerequisite__is_indicated_as_deleted_with_text__(string category, string reqText, string alertText)"
        },
        "verifyredirectedtoeditprerequisite()": {
          "definition": "Verify_redirected_to_edit_prerequisite()"
        },
        "browsetopageforstudentregistrationforclass()": {
          "definition": "Browse_to_page_for_student__registration_for_class__(string studentName, string className)"
        },
        "continuewithfulfillment()": {
          "definition": "ContinueWithFulfillment()"
        },
        "verifyemploymentprerequisiteisfulfilledby()": {
          "definition": "Verify_employment_prerequisite__is_fulfilled_by__(string reqText, string employmentOrgName)"
        },
        "clicktoeditprerequisite()": {
          "definition": "Click_to_edit_prerequisite(string prereqType, string prereqDescr)"
        },
        "verifyprerequisiteisavailableforupdate()": {
          "definition": "Verify__prerequisite__is_available_for_update(string category, string reqText)"
        },
        "verifyprerequisiteisfulfilledbywithfulfillmentofanddateof()": {
          "definition": "Verify__prerequisite__is_Fulfilled_by__with_fulfillment_of__and_date_of__(string category, string reqText, string fulfiller, string fulfillmentText, DateTime fulfillmentDate)"
        },
        "verifyselectedfulfillmentontrainingprerequisiteisindicatedasinactivewithtext()": {
          "definition": "Verify_selected_fulfillment_on_training_prerequisite__is_indicated_as_inactive_with_text__(string reqText, string alertText)"
        },
        "showfulfillmentchangealert()": {
          "definition": "ShowFulfillmentChangeAlert(List<AutoFulfillmentChangeDTO> changes)"
        },
        "verifyselectedfulfillmentoncertificationprerequisiteisindicatedasinactivewithtext()": {
          "definition": "Verify_selected_fulfillment_on_certification_prerequisite__is_indicated_as_inactive_with_text__(string reqText, string alertText)"
        },
        "clickignorechanges()": {
          "definition": "Click_Ignore_Changes()"
        },
        "bindprerequisites()": {
          "definition": "BindPrerequisites(List<InquiryItemResponseDTO> prereqs)"
        },
        "redirecttoupdate()": {
          "definition": "RedirectToUpdate(int inquiryGroupItemId)"
        },
        "verifyalertappearstellinguserthatsomeitemscanbeautofulfilledandarenot()": {
          "definition": "Verify_alert_appears_telling_user_that_some_items_can_be_autofulfilled_and_are_not()"
        },
        "verifythereareprerequisites()": {
          "definition": "Verify_there_are__prerequisites(int count)"
        },
        "verifyprerequisiteisunfulfilled()": {
          "definition": "Verify__prerequisite__is_Unfulfilled(string category, string reqText)"
        },
        "clickupdatedocumentation()": {
          "definition": "Click_Update_Documentation()"
        },
        "verifyprerequisiteisautofulfilledbyacadissystemwithfulfillmentofanddateof()": {
          "definition": "Verify__prerequisite__is_AutoFulfilled_by_Acadis_System_with_fulfillment_of__and_date_of__(string category, string reqText, string fulfillmentText, DateTime fulfillmentDate)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "StudentPrerequisitesListWorkflow"
    },
    "resourcefnhmanagement": {
      "namespace": "",
      "methods": {
        "createresourcecategory()": {
          "definition": "Create_resource_category( string categoryName )"
        },
        "verifythathasconflict()": {
          "definition": "Verify_that_has_conflict( string facilityName, int expectedConflictCount )"
        },
        "setquantityoffacilityto()": {
          "definition": "Set_quantity_of_facility_to( string facilityName, int quantity )"
        },
        "setstatusoffacilityto()": {
          "definition": "Set_status_of_facility_to(string facilityName, string status )"
        },
        "assignfacilitynamedtoruleinclass()": {
          "definition": "Assign_facility_named_to_rule_in_class( string facilityName, string ruleName, string className )"
        },
        "categorizeas()": {
          "definition": "Categorize_as( string facilityName, string categoryName )"
        },
        "createfacilitynamed()": {
          "definition": "Create_facility_named__(string facilityName)"
        },
        "createfacilitynamedusingprofile()": {
          "definition": "Create_facility_named__using_profile__(string facilityName, string profileName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "ResourceFNHManagement"
    },
    "viewverification": {
      "namespace": "",
      "methods": {
        "usingcurrentrowverifyisnull()": {
          "definition": "Using_current_row_verify__is_null(string columnName)"
        },
        "runviewexpectingresults()": {
          "definition": "Run_view__expecting_results(string viewName)"
        },
        "verifyresultscontainsrowswhere()": {
          "definition": "Verify_results_contains__rows_where__(int numRows, string whereClause)"
        },
        "usingcurrentrowverifyis()": {
          "definition": "Using_current_row_verify__is__(string columnName, string columnValue)"
        },
        "setrowwhereascurrent()": {
          "definition": "Set_row_where__as_current(string whereClause)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "ViewVerification"
    },
    "featuretoggleattribute": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "FeatureToggleAttribute"
    },
    "trainingeventeditor": {
      "namespace": "",
      "methods": {
        "verifytrainingstartdatefieldisdisabled()": {
          "definition": "Verify_training_start_date_field_is_disabled()"
        },
        "clickselectacoursefromtheapprovedcoursetitles()": {
          "definition": "Click_select_a_course_from_the_approved_course_titles()"
        },
        "enterforinstructorareacode()": {
          "definition": "Enter__for_instructor_area_code(string areaCode)"
        },
        "verifyinstructorareacodeis()": {
          "definition": "Verify_instructor_area_code_is__(string areaCode)"
        },
        "verifystartdaterequirementmet()": {
          "definition": "Verify_start_date_requirement__met(string validationResult)"
        },
        "verifycoursenumberis()": {
          "definition": "Verify_course_number_is__(string courseNumber)"
        },
        "verifycoursedescriptionis()": {
          "definition": "Verify_course_description_is__(string courseDescription)"
        },
        "enterforthecoursetitle()": {
          "definition": "Enter__for_the_course_title(string courseTitle)"
        },
        "browsetoaddtrainingeventforresultsofpersonsearch()": {
          "definition": "Browse_to_add_training_event_for_results_of_person_search()"
        },
        "verifystartandenddaterangevalid()": {
          "definition": "Verify_start_and_end_date_range__valid(string validationResult)"
        },
        "verifyotherprovidernamerequirementmet()": {
          "definition": "Verify_other_provider_name_requirement__met(string validationResult)"
        },
        "enterforthedescription()": {
          "definition": "Enter__for_the_description(string description)"
        },
        "selectallattendeeswillhavethesametrainingcategory()": {
          "definition": "Select_all_attendees_will_have_the_same_training_category()"
        },
        "verifystartpagefieldsarehiddeninportal()": {
          "definition": "Verify_start_page_fields_are_hidden_in_portal()"
        },
        "verifyenddaterequirementmet()": {
          "definition": "Verify_end_date_requirement__met(string validationResult)"
        },
        "verifytrainingstartdateis()": {
          "definition": "Verify_training_start_date_is__(string startDate)"
        },
        "verifyprovidertypeis()": {
          "definition": "Verify_provider_type_is__(string providerTypeLabel)"
        },
        "selectforreporttrainingto()": {
          "definition": "Select__for_Report_training_to(string academyName)"
        },
        "verifytherearenovalidationerrors()": {
          "definition": "verify_there_are_no_validation_errors()"
        },
        "verifytrainingcategoryis()": {
          "definition": "Verify_training_category_is__(string category)"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for_(string approvedCourseTitle)"
        },
        "verifyofficialprovidernamerequirementmet()": {
          "definition": "Verify_official_provider_name_requirement__met(string validationResult)"
        },
        "enterforthecoursenumber()": {
          "definition": "Enter__for_the_course_number(string courseNumber)"
        },
        "verifytraininghoursisempty()": {
          "definition": "Verify_training_hours_is_empty()"
        },
        "verifytrainingcategoryrequirementmet()": {
          "definition": "Verify_training_category_requirement__met(string validationResult)"
        },
        "setpageforportaloracadis()": {
          "definition": "SetPageForPortalOrAcadis(bool isPortal)"
        },
        "selectforinstructorphonetype()": {
          "definition": "Select__for_instructor_phone_type(string selectedPhoneType)"
        },
        "verifyapprovedcoursetrainingdescriptionfieldisnotvisible()": {
          "definition": "Verify_approved_course_training_description_field_is_not_visible()"
        },
        "verifyinstructorphoneexchangeis()": {
          "definition": "Verify_instructor_phone_exchange_is__(string phoneExchange)"
        },
        "enterforotherprovidername()": {
          "definition": "Enter__for_other_provider_name(string providerName)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "enterforthehours()": {
          "definition": "Enter__for_the_hours(decimal trainingHours)"
        },
        "verifytrainingisreportedto()": {
          "definition": "Verify_training_is_reported_to__(string academyName)"
        },
        "browsetoaddtrainingeventfor()": {
          "definition": "Browse_to_add_training_event_for_(string personName)"
        },
        "verifyofficialprovidernameis()": {
          "definition": "Verify_official_provider_name_is__(string providerName)"
        },
        "verifyapprovedcoursetrainingdescriptionfieldisvisible()": {
          "definition": "Verify_approved_course_training_description_field_is_visible()"
        },
        "clicksavebutton()": {
          "definition": "Click_Save_button()"
        },
        "selectfortrainingcategory()": {
          "definition": "Select__for_training_category(string trainingCategory)"
        },
        "enterfortheenddate()": {
          "definition": "Enter__for_the_end_date(DateTime endDate)"
        },
        "verifytrainingstartdatefieldisenabled()": {
          "definition": "Verify_training_start_date_field_is_enabled()"
        },
        "verifytraininghoursis()": {
          "definition": "Verify_training_hours_is__(decimal trainingHours)"
        },
        "verifycourseenddateis()": {
          "definition": "Verify_course_end_date_is__(DateTime endDate)"
        },
        "verifyinstructorphonetyperequirementmet()": {
          "definition": "Verify_instructor_phone_type_requirement__met(string validationResult)"
        },
        "enterforinstructorphoneextension()": {
          "definition": "Enter__for_instructor_phone_extension(string phoneExtension)"
        },
        "deactivateallapprovedcoursetitles()": {
          "definition": "Deactivate_all_approved_course_titles()"
        },
        "browsetoedittrainingevent()": {
          "definition": "Browse_to_edit_training_event__(string trainingEventName)"
        },
        "verifycoursestartdateis()": {
          "definition": "Verify_course_start_date_is__(DateTime startDate)"
        },
        "verifyapprovedcoursetrainingdescriptionisempty()": {
          "definition": "Verify_approved_course_training_description_is_empty()"
        },
        "selecttrainingeventnamed()": {
          "definition": "Select_training_event_named__(string trainingEventName)"
        },
        "selectusevariabletrainingcategories()": {
          "definition": "Select_use_variable_training_categories()"
        },
        "enterforofficialprovidername()": {
          "definition": "Enter__for_official_provider_name(string providerName)"
        },
        "verifytraininghoursenteredvalid()": {
          "definition": "Verify_training_hours_entered__valid(string validationResult)"
        },
        "verifyinstructornameis()": {
          "definition": "Verify_instructor_name_is__(string instructorName)"
        },
        "verifytrainingenddateisempty()": {
          "definition": "Verify_training_end_date_is_empty()"
        },
        "bindphonenumbertypelist()": {
          "definition": "BindPhoneNumberTypeList(IList<KeyValuePair<int?,string>> phoneNumberTypes)"
        },
        "verifytrainingcategoryisinthelist()": {
          "definition": "Verify_training_category__is_in_the_list(string category)"
        },
        "verifytraininghoursfieldisenabled()": {
          "definition": "Verify_training_hours_field_is_enabled()"
        },
        "selectforprovidertype()": {
          "definition": "Select__for_Provider_type(string providerTypeLabel)"
        },
        "selectforselectedcoursetitle()": {
          "definition": "Select__for_selected_course_title(string selectedCourseTitle)"
        },
        "verifycoursetitlerequirementmet()": {
          "definition": "Verify_course_title_requirement__met(string validationResult)"
        },
        "clickentermyowncourseinformation()": {
          "definition": "Click_enter_my_own_course_information()"
        },
        "verifytrainingenddateis()": {
          "definition": "Verify_training_end_date_is__(string endDate)"
        },
        "enterforinstructoremail()": {
          "definition": "Enter__for_instructor_email(string instructorEmail)"
        },
        "verifyreportedtotrainingacademyrequirementmet()": {
          "definition": "Verify_reported_to_training_academy_requirement__met(string validationResult)"
        },
        "verifyselectacoursefromtheapprovedcoursetitlesisselected()": {
          "definition": "Verify_select_a_course_from_the_approved_course_titles_is_selected()"
        },
        "enterforcoursetitletypeahead()": {
          "definition": "Enter__for_course_title_typeahead(string searchText)"
        },
        "verifyinstructoremailis()": {
          "definition": "Verify_instructor_email_is__(string instructorEmail)"
        },
        "verifymultipleacademiesareavailabletoselect()": {
          "definition": "Verify_multiple_academies_are_available_to_select()"
        },
        "verifyisautomaticallyselectedastheacademytoreporttrainingto()": {
          "definition": "Verify_is_automatically_selected_as_the_academy_to_report_training_to(string academyName)"
        },
        "verifyinstructorphonenumberrequirementmet()": {
          "definition": "Verify_instructor_phone_number_requirement_met(string validationResult)"
        },
        "enterforthestartdate()": {
          "definition": "Enter__for_the_start_date(DateTime startDate)"
        },
        "selectusevariabletraininghours()": {
          "definition": "Select_use_variable_training_hours()"
        },
        "verifypagetitleis()": {
          "definition": "Verify_page_title_is(string pageTitle)"
        },
        "verifytrainingenddatefieldisdisabled()": {
          "definition": "Verify_training_end_date_field_is_disabled()"
        },
        "verifytrainingstartdateisempty()": {
          "definition": "Verify_training_start_date_is_empty()"
        },
        "enterforinstructorname()": {
          "definition": "Enter__for_instructor_name(string instructorName)"
        },
        "clicksavebuttonexpectingfailure()": {
          "definition": "Click_Save_button_expecting_failure()"
        },
        "bindtrainingcategoryoptionsforapprovedcourses()": {
          "definition": "BindTrainingCategoryOptionsForApprovedCourses(IList<ApprovedCourseForEventDTO> courses)"
        },
        "verifyinstructorphonenumbertypeis()": {
          "definition": "Verify_instructor_phone_number_type_is__(string phoneType)"
        },
        "verifyinstructorphonedigitsare()": {
          "definition": "Verify_instructor_phone_digits_are__(string phoneDigits)"
        },
        "verifyotherprovidernameis()": {
          "definition": "Verify_other_provider_name_is__(string providerName)"
        },
        "verifytrainingenddatefieldisenabled()": {
          "definition": "Verify_training_end_date_field_is_enabled()"
        },
        "verifytraininghoursrequirementmet()": {
          "definition": "Verify_training_hours_requirement__met(string validationResult)"
        },
        "verifyeventvariabletrainingcategories()": {
          "definition": "Verify_event__variable_training_categories(string hasDoesNotHaveString)"
        },
        "verifyapprovedcoursetitlescontains()": {
          "definition": "Verify_approved_course_titles_contains__(string courseTitle)"
        },
        "verifytrainingcategoryisnotinthelist()": {
          "definition": "Verify_training_category__is_not_in_the_list(string category)"
        },
        "verifyapprovedcoursetrainingdescriptionis()": {
          "definition": "Verify_approved_course_training_description_is__(string description)"
        },
        "verifyinstructorextensionis()": {
          "definition": "Verify_instructor_extension_is__(string phoneExtension)"
        },
        "enterforinstructorphonedigits()": {
          "definition": "Enter__for_instructor_phone_digits(string phoneDigits)"
        },
        "enterforinstructorphoneexchange()": {
          "definition": "Enter__for_instructor_phone_exchange(string phoneExchange)"
        },
        "verifyvariabletraininghourscannotbesetwithtraininghoursspecified()": {
          "definition": "Verify_variable_training_hours_can_not_be_set_with_training_hours_specified()"
        },
        "verifycoursetitleis()": {
          "definition": "Verify_course_title_is__(string courseTitle)"
        },
        "verifytraininghoursfieldisdisabled()": {
          "definition": "Verify_training_hours_field_is_disabled()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "TrainingEventEditorWorkflow"
    },
    "studenteditenrollmentregistration": {
      "namespace": "",
      "methods": {
        "settitleforregistration()": {
          "definition": "SetTitleForRegistration(Acadis.Constants.Registration.StudentRegistrationStatus status, string personName, string className)"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_Page_for__(string personName)"
        },
        "clicksave()": {
          "definition": "Click_Save()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "StudentEditEnrollmentRegistrationWorkflow"
    },
    "viewcertificationapplication": {
      "namespace": "",
      "methods": {
        "verifyadjudicatorcommentsare()": {
          "definition": "Verify_adjudicator_comments_are_(string comments)"
        },
        "verifycertificationisdisplayed()": {
          "definition": "Verify_certification__is_displayed(string certName)"
        },
        "verifyemploymentisindicatedasdeleted()": {
          "definition": "Verify_employment__is_indicated_as_deleted(string employmentOrgName)"
        },
        "verifycertificationhasstatusof()": {
          "definition": "Verify_certification__has_status_of__(string certName, string statusName)"
        },
        "showcommenteditdlg()": {
          "definition": "ShowCommentEditDlg(bool bShow)"
        },
        "verifytrainingclassalerticonhastextof()": {
          "definition": "Verify_training_class__alert_icon_has_text_of__(string className, string alertText)"
        },
        "verifyemploymentisprimary()": {
          "definition": "Verify_employment__is_primary(string employmentOrgName)"
        },
        "verifytrainingclasshastrainingcategoryof()": {
          "definition": "Verify_training_class__has_training_category_of__(string className, string categoryName)"
        },
        "verifyrequirementhasalerticondisplayed()": {
          "definition": "Verify__requirement__has_alert_icon_displayed(string category, string reqText)"
        },
        "verifytherearenoadjudicatorcomments()": {
          "definition": "Verify_there_are_no_adjudicator_comments()"
        },
        "verifytrainingclassisdisplayed()": {
          "definition": "Verify_training_class__is_displayed(string className)"
        },
        "verifytrainingclasshasenddateof()": {
          "definition": "Verify_training_class__has_end_date_of__(string className, DateTime endDate)"
        },
        "verifyrequirementisfulfilledbytraining()": {
          "definition": "Verify___requirement_is_fulfilled_by_training__(string category, string reqText, string training)"
        },
        "verifyemploymentisdisplayed()": {
          "definition": "Verify_employment__is_displayed(string employmentOrgName)"
        },
        "verifyrequirementisautofulfilledbywithfulfillmentofanddateof()": {
          "definition": "Verify__requirement__is_AutoFulfilled_by__with_fulfillment_of__and_date_of__(string category, string reqText, string fulfiller, string fulfillmentText, DateTime fulfillmentDate)"
        },
        "verifyemploymentrecordsareloadedandtherearerecords()": {
          "definition": "Verify_employment_records_are_loaded_and_there_are__records(int numRecords)"
        },
        "showguidelines()": {
          "definition": "ShowGuidelines(bool shouldShow)"
        },
        "verifytrainingclasshasgradeof()": {
          "definition": "Verify_training_class__has_grade_of__(string className, string gradeStr)"
        },
        "verifycertificationis()": {
          "definition": "Verify_certification_is__(string certName)"
        },
        "verifyrequirementisnotfulfilledbytraining()": {
          "definition": "Verify___requirement_is_not_fulfilled_by_training__(string category, string reqText, string training)"
        },
        "browsetoviewcertificationapplicationforfromperson()": {
          "definition": "Browse_to_view____certification_application_for___from_person__(string status, string appType, string certName, string personName)"
        },
        "verifycertificationhasissueof()": {
          "definition": "Verify_certification__has_issue_of__(string certName, string issueDate)"
        },
        "verifyemploymenthastitleof()": {
          "definition": "Verify_employment__has_title_of__(string employmentOrgName, string titleName)"
        },
        "verifytrainingrecordsareloadedandtherearerecords()": {
          "definition": "Verify_training_records_are_loaded_and_there_are__records(int numRecords)"
        },
        "verifyrequirementisfulfilledbywithfulfillmentofanddateof()": {
          "definition": "Verify__requirement__is_Fulfilled_by__with_fulfillment_of__and_date_of__(string category, string reqText, string fulfiller, string fulfillmentText, DateTime fulfillmentDate)"
        },
        "verifyemploymenthashiredateof()": {
          "definition": "Verify_employment__has_hire_date_of__(string employmentOrgName, string hireDate)"
        },
        "verifyrecipientnameis()": {
          "definition": "Verify_recipient_name_is__(string recipientName)"
        },
        "clickdoneonrequirementview()": {
          "definition": "Click_Done_on_requirement_view()"
        },
        "verifycertificationalerticonhastextof()": {
          "definition": "Verify_certification__alert_icon_has_text_of__(string certName, string alertText)"
        },
        "verifyemploymentisnotindicatedasdeleted()": {
          "definition": "Verify_employment__is_not_indicated_as_deleted(string employmentOrgName)"
        },
        "verifytrainingclasshashoursofhm()": {
          "definition": "Verify_training_class__has_hours_of__h__m(string className, int hours, int mins)"
        },
        "verifytrainingclassisindicatedasinactiveordeleted()": {
          "definition": "Verify_training_class__is_indicated_as_inactive_or_deleted(string className)"
        },
        "clicktoviewrequirement()": {
          "definition": "Click_to_view__requirement__(string category, string reqText)"
        },
        "verifytherearenorequirementsandheaderis()": {
          "definition": "Verify_there_are_no_requirements_and_header_is__(string title)"
        },
        "showrequirement()": {
          "definition": "ShowRequirement(bool shouldShow)"
        },
        "verifyrequirementisnotavailableforupdate()": {
          "definition": "Verify__requirement__is_not_available_for_update(string category, string reqText)"
        },
        "verifyrequirementsarevisibleandheaderis()": {
          "definition": "Verify_requirements_are_visible_and_header_is__(string title)"
        },
        "verifytrainingclasshasstartdateof()": {
          "definition": "Verify_training_class__has_start_date_of__(string className, DateTime startDate)"
        },
        "verifythereisnocomment()": {
          "definition": "Verify_there_is_no_comment()"
        },
        "verifyapplicationdateis()": {
          "definition": "Verify_application_date_is__(DateTime appDate)"
        },
        "verifyrequirementalerticonhastextof()": {
          "definition": "Verify__requirement__alert_icon_has_text_of__(string category, string reqText, string alertText)"
        },
        "verifytrainingclasshasstudentstatusof()": {
          "definition": "Verify_training_class__has_student_status_of__(string className, string statusName)"
        },
        "verifytrainingclassisnotindicatedasinactiveordeleted()": {
          "definition": "Verify_training_class__is_not_indicated_as_inactive_or_deleted(string className)"
        },
        "verifyemploymenthasstatusof()": {
          "definition": "Verify_employment__has_status_of__(string employmentOrgName, string statusName)"
        },
        "browsetoviewcertificationapplicationmadeonforfromperson()": {
          "definition": "Browse_to_view____certification_application_made_on__for___from_person__(string status, string appType, DateTime date, string certName, string personName)"
        },
        "verifycertificationisindicatedasinactiveordeleted()": {
          "definition": "Verify_certification__is_indicated_as_inactive_or_deleted(string certName)"
        },
        "verifyapplicationstatusis()": {
          "definition": "Verify_application_status_is__(string appStatus)"
        },
        "verifycertificationisnotindicatedasinactiveordeleted()": {
          "definition": "Verify_certification__is_not_indicated_as_inactive_or_deleted(string certName)"
        },
        "verifytrainingclasshasnotrainingcategory()": {
          "definition": "Verify_training_class__has_no_training_category(string className)"
        },
        "verifyapplicantis()": {
          "definition": "Verify_applicant_is__(string applicantName)"
        },
        "verifycertificationrecordsareloadedandtherearerecords()": {
          "definition": "Verify_certification_records_are_loaded_and_there_are__records(int numRecords)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ViewCertificationApplication"
    },
    "performancereportwizardsummary": {
      "namespace": "",
      "methods": {
        "bindfailednotificationemails()": {
          "definition": "BindFailedNotificationEmails(IList<string> failedEmailAddresses)"
        },
        "clickback()": {
          "definition": "Click_Back()"
        },
        "verifytherearerecipientsshowinginthenotificationslist()": {
          "definition": "Verify_there_are__recipients_showing_in_the_notifications_list(int recipientCount)"
        },
        "verifythatthereportwithresponsesforallrequiredfieldsisforwithacademyid()": {
          "definition": "Verify_that_the__report_with_responses_for_all_required_fields_is_for__with_academy_id__(string reportOrdinalString, string personName, string academyID)"
        },
        "removefromtheemailnotificationlist()": {
          "definition": "Remove__from_the_email_notification_list(string personNameAcademyIdOrEmail)"
        },
        "verifythatisinthelistofaddresseswecouldnotsendanotificationemailto()": {
          "definition": "Verify_that__is_in_the_list_of_addresses_we_could_not_send_a_notification_email_to(string failedEmailAddress)"
        },
        "verifywewereredirectedtothewizardafterprinting()": {
          "definition": "Verify_we_were_redirected_to_the_wizard_after_printing()"
        },
        "verifythenotificationemailconfirmationwasshown()": {
          "definition": "Verify_the_notification_email_confirmation_was_shown()"
        },
        "addtotheemailnotificationlist()": {
          "definition": "Add__to_the_email_notification_list(string personNameAcademyIdOrEmail)"
        },
        "bindevaluationssatisfyingallrequirements()": {
          "definition": "BindEvaluationsSatisfyingAllRequirements(IList<StudentEvaluationDescriptionDTO> studentEvaluations)"
        },
        "verifyreportswereprinted()": {
          "definition": "Verify__reports_were_printed(int printedReportCount)"
        },
        "bindincompleteevaluations()": {
          "definition": "BindIncompleteEvaluations(IList<StudentEvaluationDescriptionDTO> studentEvaluations)"
        },
        "printbatchreportandredirecttoaddedit()": {
          "definition": "PrintBatchReportAndRedirectToAddEdit()"
        },
        "verifyemailsnotsentwarningwasshown()": {
          "definition": "Verify_emails_not_sent_warning_was_shown()"
        },
        "clickcontinue()": {
          "definition": "Click_Continue()"
        },
        "verifytherewereemailssent()": {
          "definition": "Verify_there_were__emails_sent(int numberOfEmailsSent)"
        },
        "verifywewereredirectedtothestartinglocationafterprinting()": {
          "definition": "Verify_we_were_redirected_to_the_starting_location_after_printing()"
        },
        "redirecttostartinglocation()": {
          "definition": "RedirectToStartingLocation()"
        },
        "redirecttoaddedit()": {
          "definition": "RedirectToAddEdit()"
        },
        "clickdoneontheemailconfirmation()": {
          "definition": "Click_Done_on_the_Email_confirmation()"
        },
        "verifywewereredirectedtothestartinglocationwithoutprinting()": {
          "definition": "Verify_we_were_redirected_to_the_starting_location_without_printing()"
        },
        "verifythattheincompletereportisforwithacademyid()": {
          "definition": "Verify_that_the__incomplete_report_is_for__with_academy_id__(string reportOrdinalString, string personName, string academyID)"
        },
        "verifythatisinthelistofnotificationrecipients()": {
          "definition": "Verify_that__is_in_the_list_of_notification_recipients(string recipient)"
        },
        "showemailconfirmation()": {
          "definition": "ShowEmailConfirmation()"
        },
        "verifytherearereportswithresponsesforallrequiredfieldsinthelist()": {
          "definition": "Verify_there_are__reports_with_responses_for_all_required_fields_in_the_list(int satisfiedReportCount)"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "browsetoforwizard()": {
          "definition": "Browse_to_for_wizard()"
        },
        "verifywewereredirectedtothewizardwithoutprinting()": {
          "definition": "Verify_we_were_redirected_to_the_wizard_without_printing()"
        },
        "verifythereareaddresseswecouldnotsendanotificationemailto()": {
          "definition": "Verify_there_are__addresses_we_could_not_send_a_notification_email_to(int failedEmailAddressCount)"
        },
        "verifythatthenoincompletereportsmessageshowing()": {
          "definition": "Verify_that_the_no_incomplete_reports_message__showing(string isIsNotString)"
        },
        "verifythereareincompletereportsinthelist()": {
          "definition": "Verify_there_are__incomplete_reports_in_the_list(int incompleteReportCount)"
        },
        "verifyareportforwasprinted()": {
          "definition": "Verify_a_report_for__was_printed(string personName)"
        },
        "printbatchreportandredirecttostartinglocation()": {
          "definition": "PrintBatchReportAndRedirectToStartingLocation()"
        },
        "verifythatthenoreportssatisfyingallrequirementsmessageshowing()": {
          "definition": "Verify_that_the_no_reports_satisfying_all_requirements_message__showing(string isIsNotString)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PerformanceReportWizardSummaryWorkflow"
    },
    "onlineeventrosterexport": {
      "namespace": "",
      "methods": {
        "ensurecolumnisnotincluded()": {
          "definition": "Ensure_column__is_not_included(string field)"
        },
        "ensurecolumnisdaysfromtoday()": {
          "definition": "Ensure_column__is__days_from_today(string field, int days)"
        },
        "exportallstudentsfor()": {
          "definition": "Export_all_students_for__(string className)"
        },
        "findexportrowfor()": {
          "definition": "Find_export_row__for__(int rowNumber, string personName)"
        },
        "ensurecolumnisempty()": {
          "definition": "Ensure_column__is_empty(string field)"
        },
        "ensurecolumnhasvalue()": {
          "definition": "Ensure_column__has_value__(string field, string value)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "OnlineEventRosterExport"
    },
    "rejectedinserviceautoemail": {
      "namespace": "",
      "methods": {
        "verifythattheemailsenttoforcontains()": {
          "definition": "Verify_that_the_email_sent_to__for__contains__(string emailAddress, string certName, string compareStr)"
        },
        "verifyemailmessagesweresent()": {
          "definition": "Verify__email_messages_were_sent(int num)"
        },
        "verifythattheemailsenttofordoesnotcontain()": {
          "definition": "Verify_that_the_email_sent_to__for__does_not_contain__(string emailAddress, string certName, string compareStr)"
        },
        "runexpiringcertsemailer()": {
          "definition": "Run_Expiring_Certs_Emailer()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "RejectedInServiceAutoEmailWorkflow"
    },
    "importercleanuptaskrunner": {
      "namespace": "",
      "methods": {
        "verifyimportfileexists()": {
          "definition": "Verify_import_file__exists(string fileName)"
        },
        "verifyimportfiledoesnotexist()": {
          "definition": "Verify_import_file__does_not_exist(string fileName)"
        },
        "runimportercleanuptask()": {
          "definition": "Run_importer_cleanup_task()"
        },
        "verifyimportjobdoesnotexist()": {
          "definition": "Verify_import_job_does_not_exist()"
        },
        "verifyimportjobexists()": {
          "definition": "Verify_import_job_exists()"
        }
      },
      "parent-name": "TaskRunnerWorkflow",
      "class-name": "ImporterCleanupTaskRunnerWorkflow"
    },
    "labelattribute": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "LabelAttribute"
    },
    "onlinestudentroster": {
      "namespace": "",
      "methods": {
        "verifyrosterofstudentshasrows()": {
          "definition": "Verify_roster_of_students_has__rows(int numberOfRows)"
        },
        "verifyrowforshowsnoportalaccountwarning()": {
          "definition": "Verify_row_for__shows_no_portal_account_warning(string studentName)"
        },
        "verifyrowforshowsforscore()": {
          "definition": "Verify_row_for__shows__for_Score(string studentName, string columnText)"
        },
        "verifyrowforshowsfordatecompleted()": {
          "definition": "Verify_row_for__shows__for_Date_Completed(string studentName, string columnText)"
        },
        "verifyrowforshowsforcomplete()": {
          "definition": "Verify_row_for__shows__for_Complete(string studentName, string columnText)"
        },
        "verifycannotviewpersonlinks()": {
          "definition": "Verify_cannot_view_person_links()"
        },
        "setshowpassfailcolumn()": {
          "definition": "SetShowPassFailColumn(bool showPassFail)"
        },
        "browsetoforevent()": {
          "definition": "Browse_to_for_event__(string eventName)"
        },
        "verifyrowforshowsnoacademyid()": {
          "definition": "Verify_row_for__shows_no_AcademyID(string studentName)"
        },
        "verifyrowforshowsnoscore()": {
          "definition": "Verify_row_for__shows_no_Score(string studentName)"
        },
        "setallids()": {
          "definition": "SetAllIDs(IEnumerable<int> ids)"
        },
        "verifyrowforshowsforname()": {
          "definition": "Verify_row_for__shows__for_Name(string studentName, string columnText)"
        },
        "selectstudent()": {
          "definition": "Select_student__(string studentName)"
        },
        "sortby()": {
          "definition": "Sort_by__(string column)"
        },
        "bindstudentrostertopage()": {
          "definition": "BindStudentRosterToPage(PagedResult<StudentRosterViewDTO> studentRoster)"
        },
        "verifyrowforshowsportalaccountwarning()": {
          "definition": "Verify_row_for__shows_portal_account_warning(string studentName)"
        },
        "verifyrowforshowsforpassorfail()": {
          "definition": "Verify_row_for__shows__for_Pass_or_Fail(string studentName, string columnText)"
        },
        "verifyrowforshowsforduedate()": {
          "definition": "Verify_row_for__shows__for_Due_Date(string studentName, string columnText)"
        },
        "verifyrowforshowsnotime()": {
          "definition": "Verify_row_for__shows_no_Time(string studentName)"
        },
        "verifyrowforshowsfortime()": {
          "definition": "Verify_row_for__shows__for_Time(string studentName, string columnText)"
        },
        "verifyrowforshowsnoduedate()": {
          "definition": "Verify_row_for__shows_no_Due_Date(string studentName)"
        },
        "verifyrowforshowsforacademyid()": {
          "definition": "Verify_row_for__shows__for_AcademyID(string studentName, string columnText)"
        },
        "verifyrowforshowsfordateassigned()": {
          "definition": "Verify_row_for__shows__for_Date_Assigned(string studentName, string columnText)"
        },
        "verifyrowforshowsnopassorfail()": {
          "definition": "Verify_row_for__shows_no_Pass_or_Fail(string studentName)"
        },
        "verifyrowforshowsnodatecompleted()": {
          "definition": "Verify_row_for__shows_no_Date_Completed(string studentName)"
        },
        "verifyrosterrowis()": {
          "definition": "Verify_roster_row__is__(int rowNumber, string studentName)"
        },
        "verifycanviewpersonlinks()": {
          "definition": "Verify_can_view_person_links()"
        },
        "removeselectedstudentswithreason()": {
          "definition": "Remove_selected_students_with_reason__(string reasonForRemoval)"
        },
        "browsetopagefromcompletedtrainingmonitorforevent()": {
          "definition": "Browse_to_page_from_completed_training_monitor_for_event__(string eventName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "OnlineStudentRosterWorkflow"
    },
    "editadhocstart": {
      "namespace": "",
      "methods": {
        "unselectexportfield()": {
          "definition": "Unselect_export_field__(string fieldPathString)"
        },
        "selectexportfield()": {
          "definition": "Select_export_field__(string fieldPathString)"
        },
        "navigatetoreturnurl()": {
          "definition": "NavigateToReturnUrl()"
        },
        "bindadhocfields()": {
          "definition": "BindAdHocFields(IEnumerable<AdHocFieldDTO> fields)"
        },
        "browsetopageforadhocexport()": {
          "definition": "Browse_to_page_for_adhoc_export__(string exportName)"
        },
        "verifyselectedexporttypeis()": {
          "definition": "Verify_selected_export_type_is__(AdHocExportType exportType)"
        },
        "setadhocexportid()": {
          "definition": "SetAdHocExportID(int adHocExportID)"
        },
        "verifyfieldselected()": {
          "definition": "Verify_field____selected(string fieldPathString, string isIsNot)"
        },
        "navigatetopage()": {
          "definition": "NavigateToPage(AdHocWizardPage page)"
        },
        "selecttoexport()": {
          "definition": "Select_to_export__(AdHocExportType exportType)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EditAdHocStartWorkflow"
    },
    "personemploymentmanagement": {
      "namespace": "",
      "methods": {
        "deleteemploymentforeffectivefor()": {
          "definition": "Delete_employment_for__effective__for_(string companyName, string effectiveDate, string employeeName)"
        },
        "addemploymentforatorganizationas()": {
          "definition": "Add_employment_for__at_organization__as__(string personName, string orgName, string empName)"
        },
        "organizationis()": {
          "definition": "OrganizationIs(string name)"
        },
        "verifyemploymentwithaswithstartingdate()": {
          "definition": "Verify_employment_with_as_with_starting_date(string companyName, string title, DateTime effectiveDate)"
        },
        "saveemploymentfails()": {
          "definition": "SaveEmploymentFails()"
        },
        "verifyhasasaprimaryemploymenteffective()": {
          "definition": "Verify__has__as_a_primary_employment_effective_(string employeeName, string companyName, string effectiveDate)"
        },
        "verifyprimaryemploymentis()": {
          "definition": "Verify_Primary_Employment_Is( string param1 )"
        },
        "verifyhasemploymenteffective()": {
          "definition": "Verify__has__employment_effective_(string employeeName, string companyName, string effectiveDate)"
        },
        "verifyhasanactiveemploymentat()": {
          "definition": "Verify_has_an_active_employment_at(string personName, string employer)"
        },
        "verifyactioneffectivedateis()": {
          "definition": "VerifyActionEffectiveDateIs(string actionName, string effectiveDate)"
        },
        "actionis()": {
          "definition": "ActionIs(string action)"
        },
        "verifyhastitleat()": {
          "definition": "Verify__has_title__at__(string personName, string title, string orgName)"
        },
        "employmentdutylocationiswithstatus()": {
          "definition": "Employment_duty_location_is_with_status(string divisionOrOrganization, string status)"
        },
        "addemploymentforatorganizationaswithtitleandhiredate()": {
          "definition": "Add_employment_for_at_organization_as_with_Title_and_hire_date( string personName, string orgName, string empName, string title, DateTime hireDate )"
        },
        "usingperson()": {
          "definition": "Using_Person(string nameFirstLast)"
        },
        "effectivedateis()": {
          "definition": "EffectiveDateIs(DateTime date)"
        },
        "defineemploymentinformationforsetemploymenttofororganizationwithaneffectivedateofandtitleof()": {
          "definition": "Define_employment_information_for__set_employment_to__for_organization__with_an_effective_date_of__and_title_of_(string employeeName, string employmentStatus, string organizationName, string effectiveDate, string title)"
        },
        "setemploymentasnotprimary()": {
          "definition": "SetEmploymentAsNotPrimary(string employmentName)"
        },
        "verifyhasaninactiveemploymentat()": {
          "definition": "Verify_has_an_inactive_employment_at(string personName, string employer)"
        },
        "verifyhasemploymenttypeat()": {
          "definition": "Verify__has_employment_type__at__(string personName, string employmentType, string orgName)"
        },
        "setcomments()": {
          "definition": "SetComments(string comments)"
        },
        "setemploymentstatusto()": {
          "definition": "SetEmploymentStatusTo(string status, string subStatus)"
        },
        "defineemploymentinformationforsetorganizationtowithaneffectivedateofandtitleof()": {
          "definition": "Define_employment_information_for__set_organization_to__with_an_effective_date_of__and_title_of_(string employeeName, string organizationName, string effectiveDate, string title)"
        },
        "setasprimary()": {
          "definition": "SetAsPrimary()"
        },
        "setemploymentorganization()": {
          "definition": "SetEmploymentOrganization(string employmentName, string organization)"
        },
        "verifyactionstatusis()": {
          "definition": "VerifyActionStatusIs(string actionName, string statusName)"
        },
        "appointmenttypeis()": {
          "definition": "AppointmentTypeIs(string appointmentType)"
        },
        "defineemploymentactionforsetactionto()": {
          "definition": "Define_employment_action_for__set_action_to_(string employeeName, string action)"
        },
        "hireallatstatus()": {
          "definition": "Hire_All_At_Status_(string organizationName, string status)"
        },
        "setemploymenteffectivedate()": {
          "definition": "SetEmploymentEffectiveDate(string employmentName, string startDate)"
        },
        "hireatstatus()": {
          "definition": "Hire_At_Status(string person, string organizationName, string status)"
        },
        "deleteaction()": {
          "definition": "DeleteAction(string actionName)"
        },
        "verifyhasahiredateofat()": {
          "definition": "Verify_has_a_hire_date_of_at(string personName, DateTime hireDate, string employer)"
        },
        "verifyactiontypeis()": {
          "definition": "VerifyActionTypeIs(string actionName, string typeName)"
        },
        "verifyemploymentisprimary()": {
          "definition": "VerifyEmploymentIsPrimary()"
        },
        "setemploymentasprimary()": {
          "definition": "SetEmploymentAsPrimary(string employmentName)"
        },
        "statusis()": {
          "definition": "StatusIs(string str)"
        },
        "addemploymentwithnameascopyof()": {
          "definition": "AddEmploymentWithNameAsCopyOf(string newName, string copyName)"
        },
        "verifyactionisbefore()": {
          "definition": "VerifyActionIsBefore(string action_1, string action_2)"
        },
        "deleteemployment()": {
          "definition": "DeleteEmployment(string employmentName)"
        },
        "hireallat()": {
          "definition": "Hire_All_At(string organizationName)"
        },
        "setemploymentemploymenttype()": {
          "definition": "Set_Employment_Employment_Type( string param1, string param2 )"
        },
        "assignmentstartiswithassignmentend()": {
          "definition": "Assignment_start_is_with_assignment_end(DateTime start, DateTime end)"
        },
        "setemploymenttitle()": {
          "definition": "SetEmploymentTitle(string employmentName, string employmentTitle)"
        },
        "addemployment()": {
          "definition": "AddEmployment()"
        },
        "setappointmenttype()": {
          "definition": "SetAppointmentType(string appointmentType)"
        },
        "setemploymentcomments()": {
          "definition": "SetEmploymentComments(string employmentName, string comments)"
        },
        "saveemployment()": {
          "definition": "SaveEmployment()"
        },
        "verifyhasappointmenttypeat()": {
          "definition": "Verify__has_appointment_type__at__(string personName, string appointmentType, string orgName)"
        },
        "primaryemploymentequals()": {
          "definition": "PrimaryEmploymentEquals(string organizationName)"
        },
        "saveaction()": {
          "definition": "SaveAction()"
        },
        "verifyemploymentgapsexist()": {
          "definition": "VerifyEmploymentGapsExist()"
        },
        "setemploymentappointmenttype()": {
          "definition": "Set_Employment_Appointment_Type(string param1, string param2)"
        },
        "setemploymenttype()": {
          "definition": "SetEmploymentType(string employmentType)"
        },
        "addemploymentascopyof()": {
          "definition": "AddEmploymentAsCopyOf(string employmentName)"
        },
        "addemploymentwithname()": {
          "definition": "AddEmploymentWithName(string employmentName)"
        },
        "employmenttypeis()": {
          "definition": "EmploymentTypeIs(string employmentType)"
        },
        "titleis()": {
          "definition": "TitleIs(string title)"
        },
        "verifyemploymentgapsdonotexist()": {
          "definition": "VerifyEmploymentGapsDoNotExist()"
        },
        "addemploymenttousingorganizationwithtitleandemploymenttypeandstatus()": {
          "definition": "AddEmploymentToUsingOrganizationWithTitleAndEmploymentTypeAndStatus(string personName, string orgaName, string title, string type, string status)"
        },
        "verifyemploymentwithhasdutyassignmentwiththatis()": {
          "definition": "Verify_employment_with_has_duty_assignment_with_that_is(string companyName, string divisionName, string status)"
        },
        "verifyemploymentisnotprimary()": {
          "definition": "VerifyEmploymentIsNotPrimary(string employmentName)"
        },
        "verifyisemployedby()": {
          "definition": "Verify_is_employed_by(string name, string employer)"
        },
        "addemploymenttousingorganization()": {
          "definition": "AddEmploymentToUsingOrganization(string personName, string orgaName)"
        },
        "deleteactionfails()": {
          "definition": "DeleteActionFails(string actionName)"
        },
        "addemploymentstatus()": {
          "definition": "AddEmploymentStatus(string status)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "PersonEmploymentManagement"
    },
    "persontraininglistacadisdisplay": {
      "namespace": "",
      "methods": {
        "verifyeventisintraininglistwithstatusstartdateenddateandcategory()": {
          "definition": "Verify_event__is_in_training_list_with_status__start_date__end_date__and_category__(string eventName, string status, DateTime startDate, DateTime endDate, string categoryName)"
        },
        "browsetotraininglistforperson()": {
          "definition": "Browse_to_training_list_for_person__(string personName)"
        },
        "bindtrainingsections()": {
          "definition": "BindTrainingSections(List<PersonTrainingGroupDTO> groupedPersonTraining)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PersonTrainingListAcadisDisplayWorkflow"
    },
    "attemplatequestionsets": {
      "namespace": "",
      "methods": {
        "nextview()": {
          "definition": "NextView()"
        },
        "verifyselectedquestioncontainstext()": {
          "definition": "Verify_selected_question_contains_text__(string text)"
        },
        "verifyduplicatewarningshown()": {
          "definition": "Verify_duplicate_warning__shown(string status)"
        },
        "verifyselectedquestionhascategory()": {
          "definition": "Verify_selected_question_has_category__(string text)"
        },
        "verifyselectedquestionhasanswers()": {
          "definition": "Verify_selected_question_has__answers(int number)"
        },
        "showeditioncopied()": {
          "definition": "ShowEditionCopied(string editionCopiedName)"
        },
        "verifyselectededitioncopiesfromedition()": {
          "definition": "Verify_selected_edition_copies_from_edition__(string editionCopied)"
        },
        "verifyquestionsdisplayed()": {
          "definition": "Verify__questions_displayed(int number)"
        },
        "verifyduplicatewarningisshown()": {
          "definition": "Verify_duplicate_warning_is_shown()"
        },
        "browsetotemplatequestionsetpagefortemplate()": {
          "definition": "Browse_to_Template_question_set_page_for_template__(string templateName)"
        },
        "showduplicatewarning()": {
          "definition": "ShowDuplicateWarning()"
        },
        "verifyselectedquestionhaslearningobjective()": {
          "definition": "Verify_selected_question_has_Learning_Objective__(string text)"
        },
        "bindquestiondetail()": {
          "definition": "BindQuestionDetail(QuestionDetailDto detail)"
        },
        "selectswapquestion()": {
          "definition": "Select_swap_question__(int index)"
        },
        "verifyquestionisoftype()": {
          "definition": "Verify_question__is_of_type__(int index, QuestionRuleType type)"
        },
        "verifyselectedquestionhassubcategory()": {
          "definition": "Verify_selected_question_has_subcategory__(string text)"
        },
        "verifyselectededitionnameis()": {
          "definition": "Verify_selected_edition_name_is__(string name)"
        },
        "verifyselectedquestionhascorrectanswerindex()": {
          "definition": "Verify_selected_question_has_correct_answer_index__(int index)"
        },
        "showeditionunitialized()": {
          "definition": "ShowEditionUnitialized()"
        },
        "verifyswapquestionsdisplayed()": {
          "definition": "Verify__swap_questions_displayed(int quantity)"
        },
        "selectquestion()": {
          "definition": "Select_question__(int index)"
        },
        "selectswap()": {
          "definition": "Select_swap()"
        },
        "selectedition()": {
          "definition": "Select_edition__(string name)"
        },
        "verifyinsufficientquestions()": {
          "definition": "Verify_Insufficient_Questions()"
        },
        "verifyuninitializededitionshown()": {
          "definition": "Verify_uninitialized_edition_shown()"
        },
        "bindquestions()": {
          "definition": "BindQuestions(IList<QuestionSetQuestionDto> questions)"
        },
        "verifyselectedquestionhasanswer()": {
          "definition": "Verify_selected_question_has_answer__(string answer)"
        },
        "verifywenttonextview()": {
          "definition": "Verify_went_to_next_view()"
        },
        "selectcontinue()": {
          "definition": "Select_Continue()"
        },
        "verifyquestioncontainstext()": {
          "definition": "Verify_question__contains_text__(int index, string text)"
        },
        "bindswapresults()": {
          "definition": "BindSwapResults(IList<AddRuleQuestionSearchResult> questions)"
        },
        "verifyswapquestionhastext()": {
          "definition": "Verify_swap_question__has_text__(int index, string text)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ATTemplateQuestionSetsWorkflow"
    },
    "academyrecords": {
      "namespace": "",
      "methods": {
        "getpersonasync()": {
          "definition": "GetPersonAsync(string requestingUsername, string requestingPassword, string academyID, object userState)"
        }
      },
      "parent-name": null,
      "class-name": "AcademyRecords"
    },
    "certmasteraddedit": {
      "namespace": "",
      "methods": {
        "displaycomplexruleintervalrequiredmessage()": {
          "definition": "DisplayComplexRuleIntervalRequiredMessage(List<int> indicies)"
        },
        "setstatuscriteriatooncriteriagroup()": {
          "definition": "Set_status_criteria_to__on_criteria_group__(List<string> statusNames, int numCriteria)"
        },
        "setemployingorganizationcriteriatooncriteriagroup()": {
          "definition": "Set_employing_organization_criteria_to__on_criteria_group__(string orgs, int numCriteria)"
        },
        "verifyinusewarningdisplays()": {
          "definition": "Verify_In_Use_Warning_Displays()"
        },
        "browsetopagetoaddnewcertification()": {
          "definition": "Browse_to_Page_to_Add_New_Certification()"
        },
        "verifyvalidationfailedduetomissingstartorendinterval()": {
          "definition": "Verify_validation_failed_due_to_missing_start_or_end_interval()"
        },
        "deleteexpirationrule()": {
          "definition": "Delete_expiration_rule__(int ruleNum)"
        },
        "resetcomplexrulevalidation()": {
          "definition": "ResetComplexRuleValidation()"
        },
        "shownewversionalert()": {
          "definition": "ShowNewVersionAlert()"
        },
        "bindemploymentcriteria()": {
          "definition": "BindEmploymentCriteria(List<List<string>> criteria)"
        },
        "verifycriterialistdoesnotincludeingroup()": {
          "definition": "Verify_criteria_list_does_not_include__in_group__(string listItem, int groupNum)"
        },
        "redirecttoadmindashboard()": {
          "definition": "RedirectToAdminDashboard()"
        },
        "verifyvalidationfailedduetooverlap()": {
          "definition": "Verify_validation_failed_due_to_overlap()"
        },
        "displayduplicatenamemessage()": {
          "definition": "DisplayDuplicateNameMessage()"
        },
        "displaycomplexrulestartorendrequiredmessage()": {
          "definition": "DisplayComplexRuleStartOrEndRequiredMessage(List<int> indicies)"
        },
        "verifyredirecttoadmin()": {
          "definition": "Verify__redirect_to_Admin(string didDidNot)"
        },
        "verifyalertappearsnotifyingnotallrequirementsareautofulfilling()": {
          "definition": "Verify_alert_appears_notifying_not_all_requirements_are_auto_fulfilling()"
        },
        "verifyvalidationfailedduetoinvalidstartandendintervals()": {
          "definition": "Verify_validation_failed_due_to_invalid_start_and_end_intervals()"
        },
        "verifyredirecttocompliance()": {
          "definition": "Verify__redirect_to_Compliance(string didDidNot)"
        },
        "verifytheemailremindershows()": {
          "definition": "Verify_the__email_reminder_shows__(string reminderOrdinal, List<string> rowData)"
        },
        "browsetopagetoeditcertification()": {
          "definition": "Browse_to_Page_to_Edit_Certification__(string certificationName)"
        },
        "createasingleemploymentcriteriagroup()": {
          "definition": "Create_a_single_employment_criteria_group()"
        },
        "verifyredirecttoadmindashboard()": {
          "definition": "Verify__redirect_to_Admin_Dashboard(string didDidNot)"
        },
        "bindexpirationnotifications()": {
          "definition": "BindExpirationNotifications(IList<CertificationNotificationSubscriptionDTO> subscriptionDtos)"
        },
        "verifysavesucceeded()": {
          "definition": "Verify_save_succeeded()"
        },
        "createemploymentcriteriagroupswithtokens()": {
          "definition": "Create__employment_criteria_groups_with_tokens_(int numCriteria, string tokens)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "showinactivationalert()": {
          "definition": "ShowInactivationAlert()"
        },
        "showcannotautorenewalert()": {
          "definition": "ShowCannotAutoRenewAlert()"
        },
        "redirecttocompliance()": {
          "definition": "RedirectToCompliance()"
        },
        "showcertinusewarning()": {
          "definition": "ShowCertInUseWarning()"
        },
        "clickcontinueontheinactivationwarning()": {
          "definition": "Click_continue_on_the_inactivation_warning()"
        },
        "verifythereareemailreminders()": {
          "definition": "Verify_there_are__email_reminders(int numberOfReminders)"
        },
        "redirecttoadmin()": {
          "definition": "RedirectToAdmin()"
        },
        "settitlecriteriatooncriteriagroup()": {
          "definition": "Set_title_criteria_to__on_criteria_group__(string titles, int numCriteria)"
        },
        "browsetopagetocopycertification()": {
          "definition": "Browse_to_Page_to_Copy_Certification__(string certificationName)"
        },
        "createcertnamedwithtypeforowner()": {
          "definition": "Create_cert_named__with_type__for_owner__(string name, string type, string org)"
        },
        "displayrulesinvaliderrormessage()": {
          "definition": "DisplayRulesInvalidErrorMessage(List<int> startIndicies, List<int> endIndicies)"
        },
        "setactioncriteriatooncriteriagroup()": {
          "definition": "Set_action_criteria_to__on_criteria_group__(string actions, int numCriteria)"
        },
        "addexpirationrule()": {
          "definition": "Add_expiration_rule()"
        },
        "boxfornotificationtype()": {
          "definition": "__box_for__notification_type(string checkUncheckString, string notificationTypeOrdinal)"
        },
        "setemploymenttypecriteriatooncriteriagroup()": {
          "definition": "Set_employment_type_criteria_to__on_criteria_group__(string types, int numCriteria)"
        },
        "verifycriterialistincludesingroup()": {
          "definition": "Verify_criteria_list_includes__in_group__(string listItem, int groupNum)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "CertMasterAddEditWorkflow"
    },
    "housingreservationshortcuts": {
      "namespace": "",
      "methods": {
        "createreservationfor()": {
          "definition": "Create_reservation_for__(string className)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "HousingReservationShortcuts"
    },
    "reviewportaltestlist": {
      "namespace": "",
      "methods": {
        "considertestinactivity()": {
          "definition": "Consider_test__in_activity__(string testName, string activityName)"
        },
        "verifynumberofresultsenteredis()": {
          "definition": "Verify_number_of_results_entered_is__(int resultsEntered)"
        },
        "clicktodismiss()": {
          "definition": "Click_to_dismiss()"
        },
        "considerclass()": {
          "definition": "Consider_class__(string className)"
        },
        "verifysubmittingorganizationis()": {
          "definition": "Verify_submitting_organization_is__(string orgName)"
        },
        "verifytestinactivityisnotdisplayed()": {
          "definition": "Verify_test__in_activity__is_not_displayed(string testName, string activityName)"
        },
        "verifynumberofstudentsis()": {
          "definition": "Verify_number_of_students_is__(int students)"
        },
        "clicktodismissall()": {
          "definition": "Click_to_dismiss_all()"
        },
        "verifysubmittedonby()": {
          "definition": "Verify_submitted_on__by__(DateTime submissionDate, string submittedBy)"
        },
        "clicktoviewgrades()": {
          "definition": "Click_to_view_grades()"
        },
        "bindclasstestlist()": {
          "definition": "BindClassTestList(IEnumerable<PortalClassTestListItemDto> dtos)"
        },
        "verifyclassisnotdisplayed()": {
          "definition": "Verify_class__is_not_displayed(string className)"
        },
        "verifycommentsare()": {
          "definition": "Verify_comments_are__(string comments)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ReviewPortalTestListWorkflow"
    },
    "attemplateruleedit": {
      "namespace": "",
      "methods": {
        "savecompleted()": {
          "definition": "SaveCompleted()"
        },
        "bindsearchresults()": {
          "definition": "BindSearchResults(IList<AddRuleQuestionSearchResult> questions)"
        },
        "showrepullquestionswarning()": {
          "definition": "ShowRepullQuestionsWarning()"
        },
        "showduplicatequestionswarning()": {
          "definition": "ShowDuplicateQuestionsWarning()"
        },
        "ruleinvalidated()": {
          "definition": "RuleInvalidated()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ATTemplateRuleEditWorkflow"
    },
    "portaltabbar": {
      "namespace": "",
      "methods": {
        "settabs()": {
          "definition": "SetTabs(PortalTabBarDto dto)"
        },
        "setlabels()": {
          "definition": "SetLabels(string personName, string portalName)"
        },
        "browsetopageundertab()": {
          "definition": "Browse_to_page_under__tab(PortalTab tab)"
        },
        "verifydisplayednameis()": {
          "definition": "Verify_displayed_name_is__(string personName)"
        },
        "verifyportalnameis()": {
          "definition": "Verify_portal_name_is__(string name)"
        },
        "verifytabdisplayed()": {
          "definition": "Verify__tab__displayed(PortalTab tab, string status)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalTabBarWorkflow"
    },
    "navigationtile": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "NavigationTileWorkflow"
    },
    "grademanagement": {
      "namespace": "",
      "methods": {
        "takescoreisempty()": {
          "definition": "take_score_is_empty()"
        },
        "enterattemptscoresofforon()": {
          "definition": "enter_attempt_scores_of__for__on__(string attempts, string studentName, string testName)"
        },
        "enterattemptscoreofforon()": {
          "definition": "enter_attempt_score_of__for__on__(string attempt, string studentName, string testName)"
        },
        "takegradeisempty()": {
          "definition": "take_grade_is_empty()"
        },
        "takegradeis()": {
          "definition": "take_grade_is(decimal grade)"
        },
        "weaponserialnumberis()": {
          "definition": "weapon_serial_number_is(string serialNumber)"
        },
        "studentthetake()": {
          "definition": "student_the_take(string pass)"
        },
        "makeofweaponismodelofweaponisserialofweaponis()": {
          "definition": "make_of_weapon_is_model_of_weapon_is_serial_of_weapon_is(string make, string model, string serial)"
        },
        "takescoredisplayvalueisempty()": {
          "definition": "take_score_display_value_is_empty()"
        },
        "recordedtestgradeisempty()": {
          "definition": "recorded_test_grade_is_empty()"
        },
        "usingstudenttestfor()": {
          "definition": "Using_student_test__for__(string testName, string studentName)"
        },
        "recordedtestgradeis()": {
          "definition": "recorded_test_grade_is(decimal grade)"
        },
        "studentthetest()": {
          "definition": "student_the_test(string pass)"
        },
        "weaponmakeis()": {
          "definition": "weapon_make_is( string make )"
        },
        "studentactivitywithagradeofpercent()": {
          "definition": "Student__activity__with_a_grade_of__percent(string studentName, string passed, string activityName, decimal grade)"
        },
        "savestudenttest()": {
          "definition": "save_student_test()"
        },
        "takeratingisempty()": {
          "definition": "take_rating_is_empty()"
        },
        "weaponmodelis()": {
          "definition": "weapon_model_is(string model)"
        },
        "entertimeofforonpartof()": {
          "definition": "enter_time_of__for__on__part_of__(string time, string studentName, string partName, string multipartTestName)"
        },
        "recordedtestscoredisplayvalueis()": {
          "definition": "recorded_test_score_display_value_is(string score)"
        },
        "studentfulfilledofrequiredclasseswithanaverageofpercent()": {
          "definition": "student_fulfilled_of_required_classes_with_an_average_of_percent(string studentName, int fufilledClasses, int requiredClasses, decimal classGrade)"
        },
        "enterforon()": {
          "definition": "enter__for__on__(string pass, string studentName, string testName)"
        },
        "didnotcompletetake()": {
          "definition": "did_not_complete_take()"
        },
        "entercommentoffortest()": {
          "definition": "enter_comment_of__for_test(string comment)"
        },
        "waivefor()": {
          "definition": "waive__for__(string testName, string studentName)"
        },
        "takescoredisplayvalueis()": {
          "definition": "take_score_display_value_is(string score)"
        },
        "recordedtestscoreis()": {
          "definition": "recorded_test_score_is(decimal score)"
        },
        "startnewtakeoffor()": {
          "definition": "start_new_take_of_for(string multipartTest, string studentName)"
        },
        "verifyhasgradeontest()": {
          "definition": "Verify__has_grade__on_test__(string studentName, decimal score, string test)"
        },
        "recordedtestscoredisplayvalueisempty()": {
          "definition": "recorded_test_score_display_value_is_empty()"
        },
        "entercommentofforitem()": {
          "definition": "enter_comment_of__for_item__(string comment, string itemName)"
        },
        "takescoreis()": {
          "definition": "take_score_is(decimal score)"
        },
        "entertimeofforon()": {
          "definition": "enter_time_of__for__on__( string time, string studentName, string testName )"
        },
        "takeratingis()": {
          "definition": "take_rating_is(string rating)"
        },
        "enterattemptscoresofforonpartof()": {
          "definition": "enter_attempt_scores_of__for__on__part_of__(string attempts, string studentName, string partName, string multipartTestName)"
        },
        "gradestudenttest()": {
          "definition": "grade_student_test()"
        },
        "recordedtestscoreisempty()": {
          "definition": "recorded_test_score_is_empty()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "GradeManagement"
    },
    "viewreservation": {
      "namespace": "",
      "methods": {
        "verifyreservationdeleteconfirmationisvisible()": {
          "definition": "Verify_reservation_delete_confirmation_is_visible()"
        },
        "bindcurrentresidents()": {
          "definition": "BindCurrentResidents(IList<ReservationResidentDisplayDTO> residents, int numTotalResidents)"
        },
        "verifyeventcontactisblank()": {
          "definition": "Verify_Event_Contact_is_blank()"
        },
        "navigatetoreservationsmonitor()": {
          "definition": "NavigateToReservationsMonitor()"
        },
        "verifyroomis()": {
          "definition": "Verify_Room_is__(string room)"
        },
        "verifyroomtypeis()": {
          "definition": "Verify_Room_Type_is__(string roomType)"
        },
        "verifycheckindateisactual()": {
          "definition": "Verify_Check_in_date_is_actual()"
        },
        "verifydeletingthereservationenabled()": {
          "definition": "Verify_deleting_the_reservation__enabled(string isIsNotStr)"
        },
        "verifyeventdatesare()": {
          "definition": "Verify_Event_Dates_are__(string eventDateRange)"
        },
        "verifyrosterbilltopartycolumnvisible()": {
          "definition": "Verify_roster_bill_to_party_column__visible(string isIsNotVisibleStr)"
        },
        "navigatetorosterimport()": {
          "definition": "NavigateToRosterImport(int jobID)"
        },
        "inreservationdeleteconfirmationenterforreasonfordeleting()": {
          "definition": "In_reservation_delete_confirmation_enter__for_Reason_for_Deleting(string reason)"
        },
        "inrosterfilterscheckcheckedin()": {
          "definition": "In_roster_filters_check_Checked_In()"
        },
        "verifyresidentdeleteconfirmationisvisible()": {
          "definition": "Verify_resident_delete_confirmation_is_visible()"
        },
        "verifyinactiveduringmaintenancewarningisnotvisible()": {
          "definition": "Verify_inactive_during_maintenance_warning_is_not_visible()"
        },
        "verifyeventis()": {
          "definition": "Verify_Event_is__(string eventName)"
        },
        "considerrosterrowforresident()": {
          "definition": "Consider_roster_row_for_resident__(string residentName)"
        },
        "inrosterfilterscheckassigned()": {
          "definition": "In_roster_filters_check_Assigned()"
        },
        "verifybilltopartyis()": {
          "definition": "Verify_Bill_to_Party_is__(string billToParty)"
        },
        "clickremoveresident()": {
          "definition": "Click_Remove_Resident()"
        },
        "inresidentdeleteconfirmationclickdelete()": {
          "definition": "In_resident_delete_confirmation_click_Delete()"
        },
        "verifycheckindateis()": {
          "definition": "Verify_Check_in_date_is__(DateTime date)"
        },
        "verifystatusis()": {
          "definition": "Verify_Status_is__(string statusStr)"
        },
        "verifyusernavigatedtorosterimport()": {
          "definition": "Verify_usernavigated_to_Roster_Import()"
        },
        "verifyeditingthereservationandresidentspermitted()": {
          "definition": "Verify_editing_the_reservation_and_residents__permitted(string isIsNotStr)"
        },
        "verifyusernavigatedtothereservationsmonitor()": {
          "definition": "Verify_user_navigated_to_the_Reservations_Monitor()"
        },
        "verifyclasscontactisblank()": {
          "definition": "Verify_Class_Contact_is_blank()"
        },
        "verifycheckoutdateis()": {
          "definition": "Verify_Check_out_date_is__(DateTime date)"
        },
        "verifycheckoutdateisactual()": {
          "definition": "Verify_Check_out_date_is_actual()"
        },
        "verifyrosterincludesresident()": {
          "definition": "Verify_roster_includes_resident__(string residentName)"
        },
        "verifyclassis()": {
          "definition": "Verify_Class_is__(string className)"
        },
        "verifycheckoutdateflaggedasmissed()": {
          "definition": "Verify_Check_out_date__flagged_as_missed(string isIsNotStr)"
        },
        "bindprojectedresidents()": {
          "definition": "BindProjectedResidents(IList<ReservationRequirementDisplayDTO> studentReqs, IList<ReservationRequirementDisplayDTO> nonStudentReqs)"
        },
        "verifyrequirementsincludegroupsofstudents()": {
          "definition": "Verify_requirements_include__groups_of_students(int numGroups)"
        },
        "clickdelete()": {
          "definition": "Click_Delete()"
        },
        "verifyresidentastudent()": {
          "definition": "Verify_resident__a_student(string isIsNotString)"
        },
        "inrosterfilterscheckcheckedout()": {
          "definition": "In_roster_filters_check_Checked_Out()"
        },
        "clearrosterfilters()": {
          "definition": "Clear_roster_filters()"
        },
        "inresidentdeleteconfirmationenterforreasonfordeleting()": {
          "definition": "In_resident_delete_confirmation_enter__for_Reason_for_Deleting(string reason)"
        },
        "inreservationdeleteconfirmationclickdelete()": {
          "definition": "In_reservation_delete_confirmation_click_Delete()"
        },
        "verifydeletingthereservationpermitted()": {
          "definition": "Verify_deleting_the_reservation__permitted(string isIsNotStr)"
        },
        "verifyroomisblank()": {
          "definition": "Verify_Room_is_blank()"
        },
        "verifycheckindateflaggedasmissed()": {
          "definition": "Verify_Check_in_date__flagged_as_missed(string isIsNotStr)"
        },
        "verifyclassdatesare()": {
          "definition": "Verify_Class_Dates_are__(string classDateRange)"
        },
        "verifycheckoutdateisexpected()": {
          "definition": "Verify_Check_out_date_is_expected()"
        },
        "verifyinactiveduringmaintenancewarningisvisible()": {
          "definition": "Verify_inactive_during_maintenance_warning_is_visible()"
        },
        "verifyresidentisastudent()": {
          "definition": "Verify_resident_is_a_student()"
        },
        "verifyrequirementsincludegroupsofnonstudents()": {
          "definition": "Verify_requirements_include__groups_of_non_students(int numGroups)"
        },
        "saverosterfilters()": {
          "definition": "Save_roster_filters()"
        },
        "verifyinactiveduringmaintenancewarningtextis()": {
          "definition": "Verify_inactive_during_maintenance_warning_text_is(string wariningText)"
        },
        "browsetopageforreservationofclass()": {
          "definition": "Browse_to_page_for_reservation_of_class__(string className)"
        },
        "verifybilltopartyisblank()": {
          "definition": "Verify_Bill_to_Party_is_blank()"
        },
        "setprimarycontact()": {
          "definition": "SetPrimaryContact(int? personID, string contactName, bool canViewPerson)"
        },
        "verifycheckindateisexpected()": {
          "definition": "Verify_Check_in_date_is_expected()"
        },
        "inrosterfilterscheckunassigned()": {
          "definition": "In_roster_filters_check_Unassigned()"
        },
        "verifyrostershowsofresidents()": {
          "definition": "Verify_roster_shows__of__residents(int numDisplayed, int numTotal)"
        },
        "clickremoveroomassignment()": {
          "definition": "Click_Remove_Room_Assignment()"
        },
        "browsetopageforreservationofnonclassevent()": {
          "definition": "Browse_to_page_for_reservation_of_non_class_event__(string eventName)"
        },
        "verifygenderspecified()": {
          "definition": "Verify_gender__specified(string isIsNotStr)"
        },
        "verifyhousingdatesare()": {
          "definition": "Verify_Housing_dates_are__(string housingDateRange)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ViewReservationWorkflow"
    },
    "hoovermapping": {
      "namespace": "",
      "methods": {
        "alsomaptocolumn()": {
          "definition": "Also_map__to_column__(string parent, string child, string field, string column)"
        },
        "navigatetoreturnurl()": {
          "definition": "NavigateToReturnUrl()"
        },
        "verifyisnotmapped()": {
          "definition": "Verify__is_not_mapped(string parent, string child, string field)"
        },
        "verifyisarequiredfield()": {
          "definition": "verify_is_a_required_field(string parent, string child, string field)"
        },
        "verifywarningaboutdifferencesbetweendataandtemplatedisplayed()": {
          "definition": "Verify_warning_about_differences_between_data_and_template__displayed(string isIsNotDisplayedStr)"
        },
        "verifyallrequiredfieldsaremapped()": {
          "definition": "verify_all_required_fields_are_mapped()"
        },
        "verifyismappedtoconstant()": {
          "definition": "Verify__is_mapped_to_constant__(string parent, string child, string field, string value)"
        },
        "clickcontinue()": {
          "definition": "Click_continue()"
        },
        "showcanceldialog()": {
          "definition": "ShowCancelDialog()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifyunmappedrequiredfieldsareidentified()": {
          "definition": "verify_unmapped_required_fields_are_identified()"
        },
        "clickaddanotheron()": {
          "definition": "Click_Add_Another_on__(string parent, string child)"
        },
        "verifymapfield()": {
          "definition": "Verify__map_field__(string canCannot, string parent, string child, string field)"
        },
        "clickcancelandsetimportnameto()": {
          "definition": "Click_cancel_and_set_import_name_to(string name)"
        },
        "maptoconstant()": {
          "definition": "Map__to_constant__(string parent, string child, string field, string constant)"
        },
        "navigatetopage()": {
          "definition": "NavigateToPage(ImportWizardPage page)"
        },
        "verifyismappedtocolumn()": {
          "definition": "Verify__is_mapped_to_column__(string parent, string child, string field, string column)"
        },
        "showimportjobreallocated()": {
          "definition": "ShowImportJobReallocated()"
        },
        "maptocolumn()": {
          "definition": "Map__to_column__(string parent, string child, string field, string column)"
        },
        "unmap()": {
          "definition": "Unmap___(string parent, string child, string field)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "HooverMappingWorkflow"
    },
    "inquirydisplaybulletedlistitem": {
      "namespace": "",
      "methods": {
        "bindlistitems()": {
          "definition": "BindListItems(IList<string> listItems)"
        },
        "verifytherearebulletpoints()": {
          "definition": "Verify_there_are__bullet_points(int expectedBulletPointCount)"
        },
        "verifythatthebulletpointis()": {
          "definition": "Verify_that_the__bullet_point_is__(string ordinal, string bulletPointText)"
        },
        "initializecontrol()": {
          "definition": "InitializeControl()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "InquiryDisplayBulletedListItemWorkflow"
    },
    "completedtrainingbycategoryreport": {
      "namespace": "",
      "methods": {
        "verifyinprogressfootnotevisible()": {
          "definition": "Verify_In_Progress_footnote__visible(string status)"
        },
        "verifyfilteris()": {
          "definition": "Verify_filter__is__(string ordinal, string filterName, string filterValue)"
        },
        "verifypersoncategoryiswithhours()": {
          "definition": "Verify__person__category_is__with__hours(string personOrd, string categoryOrd, string categoryName, string hours)"
        },
        "verifytherearepeopleshown()": {
          "definition": "Verify_there_are__people_shown(int numPeople)"
        },
        "bindtraining()": {
          "definition": "BindTraining(CompletedTrainingByCategoryReportDto dto)"
        },
        "bindheaders()": {
          "definition": "BindHeaders(ReportHeaderDTO reportHeader)"
        },
        "setfootnotedisplay()": {
          "definition": "SetFootnoteDisplay(bool hasUnapproved, bool hasInProgress)"
        },
        "verifypersonhastrainingcategories()": {
          "definition": "Verify__person_has__Training_Categories(string ordinal, int number)"
        },
        "setemptydatamessagevisibility()": {
          "definition": "SetEmptyDataMessageVisibility(bool visible)"
        },
        "verifytherearefilters()": {
          "definition": "Verify_there_are__filters(int number)"
        },
        "verifypersoncategoryhaveanunapprovedfootnote()": {
          "definition": "Verify__person__category__have_an_unapproved_footnote(string personOrd, string categoryOrd, string status)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifypersonhaveanunapprovedfootnote()": {
          "definition": "Verify__person__have_an_unapproved_footnote(string personOrd, string status)"
        },
        "verifypersoncategoryhaveaninprogressfootnote()": {
          "definition": "Verify__person__category__have_an_in_progress_footnote(string personOrd, string categoryOrd, string status)"
        },
        "verifyunapprovedfootnotevisible()": {
          "definition": "Verify_Unapproved_footnote__visible(string status)"
        },
        "verifypersonhaveaninprogressfootnote()": {
          "definition": "Verify__person__have_an_in_progress_footnote(string personOrd, string status)"
        },
        "verifypersoniswithacademyidandemploymenttypeandappointmenttypeandtotaltraininghours()": {
          "definition": "Verify__person_is__with_academy_id__and_employment_type__and_appointment_type__and__total_training_hours(string ordinal, string personName, string academyId, string employmentType, string appointmentType, string totalHours)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "CompletedTrainingByCategoryReportWorkflow"
    },
    "editadhocdataoptions": {
      "namespace": "",
      "methods": {
        "bindsortfieldlist()": {
          "definition": "BindSortFieldList(IEnumerable<AdHocSortField> fields)"
        },
        "removesortoffield()": {
          "definition": "Remove_sort_of_field__(string field)"
        },
        "navigatetoreturnurl()": {
          "definition": "NavigateToReturnUrl()"
        },
        "clearsortfields()": {
          "definition": "Clear_sort_fields()"
        },
        "addsortoffield()": {
          "definition": "Add__sort_of_field__(AdHocSortDirection direction, string field)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "browsetopageforadhocexport()": {
          "definition": "Browse_to_page_for_adhoc_export__(string exportName)"
        },
        "verifyfieldissorted()": {
          "definition": "Verify_field__is_sorted__(string field, AdHocSortDirection direction)"
        },
        "navigatetopage()": {
          "definition": "NavigateToPage(AdHocWizardPage page)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EditAdHocDataOptionsWorkflow"
    },
    "instructormanagement": {
      "namespace": "",
      "methods": {
        "makeaninstructorwithprofile()": {
          "definition": "Make__an_instructor_with_profile__(string personName, string profileName)"
        },
        "removefromdivision()": {
          "definition": "Remove_from_division(string instructorName, string divisionName)"
        },
        "verifyavailabilityisonstartingatandendingat()": {
          "definition": "Verify_availability__is_on__starting_at__and_ending_at__(int availIndex, DateTime date, TimeSpan start, TimeSpan end)"
        },
        "addinstructoravailabilityforonfromto()": {
          "definition": "Add_instructor_availability_for__on__from__to__(string instructorName, DateTime date, Time startTime, Time endTime)"
        },
        "assigntodivision()": {
          "definition": "Assign_to_division( string instructorName, string divisionName )"
        },
        "addinstructorunavailabilityforonfromto()": {
          "definition": "Add_instructor_unavailability_for_on_from_to( string instructorName, DateTime date, Time startTime, Time endTime )"
        },
        "makenotaninstructor()": {
          "definition": "Make__not_an_instructor(string personName)"
        },
        "markinstructorabsentforallsegmentsonforreason()": {
          "definition": "Mark_Instructor_Absent_for_all_segments_on_for_reason(string instructorName, DateTime segmentDate, string absenceReason)"
        },
        "verifymaxhoursperquarterforissetto()": {
          "definition": "Verify_max_hours_per_quarter_for_is_set_to( string instructorName, int perQuarter )"
        },
        "verifyhasdivisions()": {
          "definition": "Verify__has_divisions__(string instructorName, string divisionString)"
        },
        "verifyhasavailabilityprofile()": {
          "definition": "Verify__has_availability_profile_(string instructorName, string profileName)"
        },
        "createinstructornamedwithavailabilityof()": {
          "definition": "Create_instructor_named__with_availability_of__( string instructorName, string profileName )"
        },
        "hireinstructoratas()": {
          "definition": "Hire_instructor__at__as__(string instructorName, string organizationName, string titleName)"
        },
        "verifythereareavailabilities()": {
          "definition": "Verify_there_are__availabilities(int numAvail)"
        },
        "changestatusto()": {
          "definition": "Change_status_to(string instructorName, string status)"
        },
        "addbaselineinstructorunavailabilityforonfromto()": {
          "definition": "Add_baseline_instructor_unavailability_for_on_from_to(string instructorName, DateTime date, Time startTime, Time endTime)"
        },
        "verifymaxhoursperissetto()": {
          "definition": "Verify__max_hours_per__is_set_to_( string instructorName, string period, int perDay )"
        },
        "verifyisunavailableonfromto()": {
          "definition": "Verify__is_unavailable_on__from__to_(string instructorName, DateTime date, Time startTime, Time endTime )"
        },
        "setmaxhoursperto()": {
          "definition": "Set__max_hours_per__to(string instructorName, DayOrWeek period, int hours)"
        },
        "createinstructornamedwithemailaddressandavailabilityof()": {
          "definition": "Create_instructor_named__with_email_address__and_availability_of__( string instructorName, string emailAddress, string profileName)"
        },
        "verifynotavailableon()": {
          "definition": "Verify_not_available_on(DayOfWeek day)"
        },
        "verifymaxhourspermonthforissetto()": {
          "definition": "Verify_max_hours_per_month_for_is_set_to( string instructorName, int perMonth )"
        },
        "verifyhasabsenceson()": {
          "definition": "Verify_has_absences_on(string instructorName, DateTime absenceDate)"
        },
        "createinstructornamedwithacademyidof()": {
          "definition": "Create_instructor_named__with_academy_id_of__(string fullName, string academyId)"
        },
        "instructorhasunavailabilityonfromto()": {
          "definition": "Instructor_has_unavailability_on_from_to( string instructorName, DateTime date, Time startTime, Time endTime )"
        },
        "getavailabilityforfromto()": {
          "definition": "Get_Availability_for_from_to(string instructorName, DateTime start, DateTime end)"
        },
        "createinstructornamed()": {
          "definition": "Create_instructor_named__(string fullName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "InstructorManagement"
    },
    "schedulemanagement": {
      "namespace": "",
      "methods": {
        "authorizeforsegments()": {
          "definition": "Authorize_for_segments( string instructorName )"
        },
        "savescheduletemplateas()": {
          "definition": "Save_schedule_template_as__( string templateLabel )"
        },
        "verifycontainsclassaward()": {
          "definition": "Verify__contains_class_award__(string className, string awardName)"
        },
        "specifystartingdateas()": {
          "definition": "Specify_starting_date_as__( string date )"
        },
        "setlistofauthorizationsegmentsto()": {
          "definition": "Set_list_of_authorization_segments_to( string ids )"
        },
        "authorizebaselineinstructorforsegmentswithpriorityandlevel()": {
          "definition": "Authorize_baseline_instructor_for_segments_with_priority_and_level(string instructorName, string priority, string level)"
        },
        "authorizeforsegmentswithpriorityandlevel()": {
          "definition": "Authorize_for_segments_with_priority_and_level( string instructorName, string priority, string level )"
        },
        "authorizebaselineinstructorforsegments()": {
          "definition": "Authorize_baseline_instructor_for_segments(string instructorName)"
        },
        "verifyhasconflicts()": {
          "definition": "Verify__has_conflicts(string schedulingClassName, int numConflicts)"
        },
        "setavailabilityprofileto()": {
          "definition": "Set_availability_profile_to__( string profileName )"
        }
      },
      "parent-name": "Workflow",
      "class-name": "ScheduleManagement"
    },
    "eventrequestinventoryedit": {
      "namespace": "",
      "methods": {
        "verifyequipmentlistcontains()": {
          "definition": "Verify_equipment_list_contains__(string name)"
        },
        "clickedit()": {
          "definition": "Click_edit()"
        },
        "selectfacilityrequestnamed()": {
          "definition": "Select_facility_request_named__(string name)"
        },
        "enterfornumberofperiodsofuse()": {
          "definition": "Enter__for_number_of_periods_of_use(int numUse)"
        },
        "verifyinventoryperiodofresultsinclude()": {
          "definition": "Verify_inventory_period_of_results_include__(string name)"
        },
        "verifyequipmentlistdoesnotcontain()": {
          "definition": "Verify_equipment_list_does_not_contain__(string name)"
        },
        "dispose()": {
          "definition": "Dispose()"
        },
        "verifyfacilitylistdoesnotcontain()": {
          "definition": "Verify_facility_list_does_not_contain__(string name)"
        },
        "binddescriptionsforavailableperiodsofuse()": {
          "definition": "BindDescriptionsForAvailablePeriodsOfUse(List<string> periodsOfUse)"
        },
        "bindperiodsofuse()": {
          "definition": "BindPeriodsOfUse(List<PeriodOfUseDTO> data)"
        },
        "verifyinventoryperiodofuseselectedis()": {
          "definition": "Verify_inventory_period_of_use_selected_is__(string name)"
        },
        "verifyfacilitylistcontains()": {
          "definition": "Verify_facility_list_contains__(string name)"
        },
        "verifynoequipmentrequestlabelshown()": {
          "definition": "Verify_no_equipment_request_label__shown(string isIsNot)"
        },
        "verifyinventoryresourcetypeaheadresultsincludenamed()": {
          "definition": "Verify_inventory_resource_typeahead_results_include__named__(ResourceType resourceType, string name)"
        },
        "verifyinventoryresourceisnamed()": {
          "definition": "Verify_inventory_resource_is__named__(ResourceType inventoryType, string name)"
        },
        "bindfacilityrequests()": {
          "definition": "BindFacilityRequests(IEnumerable<InventoryRequestSummaryDTO> facilities)"
        },
        "verifyinventoryeditpopovershown()": {
          "definition": "Verify_inventory_edit_popover__shown(string isIsNot)"
        },
        "clickaddequipment()": {
          "definition": "Click_add_equipment()"
        },
        "enterininventoryresourcetypeahead()": {
          "definition": "Enter__in_inventory_resource_typeahead(string text)"
        },
        "showquantity()": {
          "definition": "ShowQuantity(bool show)"
        },
        "selectininventoryperiodsofuse()": {
          "definition": "Select__in_inventory_periods_of_use(string name)"
        },
        "verifynofacilityrequestlabelshown()": {
          "definition": "Verify_no_facility_request_label__shown(string isIsNot)"
        },
        "clickaddfacility()": {
          "definition": "Click_add_facility()"
        },
        "verifyinventoryresourcetypeaheadresultsdonotincludenamed()": {
          "definition": "Verify_inventory_resource_typeahead_results_do_not_include__named__(ResourceType resourceType, string name)"
        },
        "showinventoryeditpopover()": {
          "definition": "ShowInventoryEditPopover()"
        },
        "bindequipmentrequests()": {
          "definition": "BindEquipmentRequests(IEnumerable<InventoryRequestSummaryDTO> equipment)"
        },
        "binddescriptionsforavailablepricelevels()": {
          "definition": "BindDescriptionsForAvailablePriceLevels(List<string> priceLevels)"
        },
        "clicksave()": {
          "definition": "Click_save()"
        },
        "selectequipmentrequestnamed()": {
          "definition": "Select_equipment_request_named__(string name)"
        },
        "clickdelete()": {
          "definition": "Click_delete()"
        },
        "selectnamedasinventoryresource()": {
          "definition": "Select__named__as_inventory_resource(ResourceType resourceType, string name)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EventRequestInventoryEditWorkflow"
    },
    "housingrequestedit": {
      "namespace": "",
      "methods": {
        "verifythatpurposecollected()": {
          "definition": "Verify_that_Purpose__collected(string isIsNotCollectedStr)"
        },
        "browsetopageforin()": {
          "definition": "Browse_to_page_for__in__(string personName, string className)"
        },
        "verifythathousingrequestedhasnopublishedoptions()": {
          "definition": "Verify_that_Housing_Requested_has_no_published_options()"
        },
        "navigatetoresidentrecord()": {
          "definition": "NavigateToResidentRecord()"
        },
        "verifythatexpectedcheckinis()": {
          "definition": "Verify_that_Expected_Checkin_is__(DateTime expectedCheckIn)"
        },
        "verifythatspecialinstructionsis()": {
          "definition": "Verify_that_Special_Instructions_is__(string specialInstructions)"
        },
        "verifythatcheckedinwarningisdisplayed()": {
          "definition": "Verify_that_Checked_In_warning_is_displayed()"
        },
        "verifythatexpectedcheckoutis()": {
          "definition": "Verify_that_Expected_Checkout_is__(DateTime expectedCheckOut)"
        },
        "selectforpricelevel()": {
          "definition": "Select__for_price_level(string priceLevelDescription)"
        },
        "enterforpurpose()": {
          "definition": "Enter__for_Purpose(string purpose)"
        },
        "verifythathousingrequestedisusage()": {
          "definition": "Verify_that_Housing_Requested_is_usage__(string usageTypeName)"
        },
        "enterdateforexpectedcheckout()": {
          "definition": "Enter_date__for_Expected_Checkout(DateTime expectedCheckOut)"
        },
        "verifythatpurposeis()": {
          "definition": "Verify_that_Purpose_is__(string purpose)"
        },
        "verifythathousingrequestedhaspublishedoptions()": {
          "definition": "Verify_that_Housing_Requested_has_published_options__(List<string> usageTypeNames)"
        },
        "navigatetostudentregistrationrecord()": {
          "definition": "NavigateToStudentRegistrationRecord()"
        },
        "selectforspecialaccommodations()": {
          "definition": "Select__for_Special_Accommodations(string specialAccommodationsDesc)"
        },
        "selectforhousingbilltoparty()": {
          "definition": "Select__for_Housing_Bill_to_Party(string billToParty)"
        },
        "selectforresidenttype()": {
          "definition": "Select__for_Resident_Type(string residentTypeDesc)"
        },
        "enterdateforexpectedcheckin()": {
          "definition": "Enter_date__for_Expected_Checkin(DateTime expectedCheckIn)"
        },
        "discardoldpriceandselect()": {
          "definition": "Discard_old_price_and_select____(string usageTypeName, string priceLevelDescription)"
        },
        "entertextforspecialinstructions()": {
          "definition": "Enter_text__for_Special_Instructions(string specialInstructions)"
        },
        "verifythatspecialaccommodationsis()": {
          "definition": "Verify_that_Special_Accommodations_is__(string specialAccommodationsDesc)"
        },
        "verifythatresidenttypeis()": {
          "definition": "Verify_that_Resident_Type_is__(string residentTypeDesc)"
        },
        "verifythatspecialinstructionsisblank()": {
          "definition": "Verify_that_Special_Instructions_is_blank()"
        },
        "verifythatpurposeisblank()": {
          "definition": "Verify_that_Purpose_is_blank()"
        },
        "verifythatassignedwarningisdisplayed()": {
          "definition": "Verify_that_Assigned_warning_is_displayed()"
        },
        "verifythatpricelevelisreadonlywithtext()": {
          "definition": "Verify_that_price_level_is_read_only_with_text(string text)"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "verifythathousingrequestedhasnoselection()": {
          "definition": "Verify_that_Housing_Requested_has_no_selection()"
        },
        "verifythatpricelevelhasnoselection()": {
          "definition": "Verify_that_Price_Level_has_no_selection()"
        },
        "verifythatusernavigatedtoregistrationrecord()": {
          "definition": "Verify_that_user_navigated_to_registration_record()"
        },
        "verifythathousingrequestedhasunpublishedoptions()": {
          "definition": "Verify_that_Housing_Requested_has_unpublished_options__(List<string> usageTypeNames)"
        },
        "verifyhousingbillingvisible()": {
          "definition": "Verify_Housing_Billing__Visible(string isIsNotString)"
        },
        "verifythathousingrequestedhasnounpublishedoptions()": {
          "definition": "Verify_that_Housing_Requested_has_no_unpublished_options()"
        },
        "browsetopageforresident()": {
          "definition": "Browse_to_page_for_resident__(string personName)"
        },
        "verifythatpriceleveloptionsforare()": {
          "definition": "Verify_that_Price_Level_options_for__are__(string usageTypeName, List<string> priceLevelDescriptions)"
        },
        "verifythatpricelevelis()": {
          "definition": "Verify_that_Price_Level_is__(string priceLevelDescription)"
        },
        "verifythatusernavigatedtoresidentrecord()": {
          "definition": "Verify_that_user_navigated_to_resident_record()"
        },
        "selectforusagetype()": {
          "definition": "Select__for_usage_type(string usageTypeName)"
        },
        "verifythathousingrequestedisreadonlywithtext()": {
          "definition": "Verify_that_housing_requested_is_read_only_with_text__(string text)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "HousingRequestEditWorkflow"
    },
    "classtranscriptedit": {
      "namespace": "",
      "methods": {
        "verifypagevalid()": {
          "definition": "Verify_page__valid(string isIsNotString)"
        },
        "uncheckinthetestscoresettingsbox()": {
          "definition": "Uncheck__in_the_test_score_settings_box(string testName)"
        },
        "selecttranscripttemplatefromthedropdown()": {
          "definition": "Select_transcript_template__from_the_dropdown(string transcriptTemplateName)"
        },
        "navigatetoprogramro()": {
          "definition": "NavigateToProgramRO(int classDefinitionID)"
        },
        "bindtranscripttemplates()": {
          "definition": "BindTranscriptTemplates(IList<TranscriptTemplateDescriptionDTO> transcriptTemplates)"
        },
        "checkinthetestscoresettingsbox()": {
          "definition": "Check__in_the_test_score_settings_box(string testName)"
        },
        "verifyselectedtranscriptisandgradeandscoreconfigurationshowing()": {
          "definition": "Verify_selected_transcript_is__and_grade_and_score_configuration__showing(string transcriptName, string isIsNotString)"
        },
        "verifythatisinthetestscoresettingsboxandselected()": {
          "definition": "Verify_that__is_in_the_test_score_settings_box_and__selected(string testName, string isIsNotString)"
        },
        "browsetoforclass()": {
          "definition": "Browse_to_for_class__(string trainingClassName)"
        },
        "clickcancel()": {
          "definition": "Click_Cancel()"
        },
        "clickradiobuttontoshowgradesonly()": {
          "definition": "Click_radio_button_to_show_grades_only()"
        },
        "verifytherearetranscripttemplatechoicesinthedropdown()": {
          "definition": "Verify_there_are__transcript_template_choices_in_the_dropdown(int numberOfTranscriptTemplates)"
        },
        "verifytherearetestsinthescoresettingsbox()": {
          "definition": "Verify_there_are__tests_in_the_score_settings_box(int numberOfTests)"
        },
        "bindtranscripttestsettings()": {
          "definition": "BindTranscriptTestSettings(IList<TranscriptTestSettingDTO> transcriptTestSettings)"
        },
        "verifyprogramandclassnameissetto()": {
          "definition": "Verify_program_and_class_name_is_set_to__(string programAndClassName)"
        },
        "browsetoforclasstemplate()": {
          "definition": "Browse_to_for_class_template__(string classTemplateName)"
        },
        "clickradiobuttontoshowbothgradesandscores()": {
          "definition": "Click_radio_button_to_show_both_grades_and_scores()"
        },
        "verifyusernavigatedtotheclassdefinitionreadonlypage()": {
          "definition": "Verify_user__navigated_to_the_class_definition_readonly_page(string wasWasNotString)"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "verifythechoiceinthetranscripttemplatedropdownis()": {
          "definition": "Verify_the__choice_in_the_transcript_template_dropdown_is__(string ordinal, string transcriptTemplateName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ClassTranscriptEditWorkflow"
    },
    "inquiryresponsetrainingselectionlist": {
      "namespace": "",
      "methods": {
        "verifytrainingclassalerticonhastextof()": {
          "definition": "Verify_training_class__alert_icon_has_text_of__(string className, string alertText)"
        },
        "verifytrainingclasshastrainingcategoryof()": {
          "definition": "Verify_training_class__has_training_category_of__(string className, string categoryName)"
        },
        "verifytrainingisselected()": {
          "definition": "Verify_training__is_selected(string trainingName)"
        },
        "verifytrainingclasshasenddateof()": {
          "definition": "Verify_training_class__has_end_date_of__(string className, DateTime endDate)"
        },
        "verifytrainingisavailableforselection()": {
          "definition": "Verify_training__is_available_for_selection(string trainingName)"
        },
        "verifytherearetrainingrecords()": {
          "definition": "Verify_there_are__training_records(int numRecs)"
        },
        "verifytrainingclasshasgradeof()": {
          "definition": "Verify_training_class__has_grade_of__(string className, string gradeStr)"
        },
        "verifytrainingcannotbeselected()": {
          "definition": "Verify_training__cannot_be_selected(string trainingName)"
        },
        "verifytrainingclasshashoursofhm()": {
          "definition": "Verify_training_class__has_hours_of__h__m(string className, int hours, int mins)"
        },
        "verifytrainingclassisindicatedasinactiveordeleted()": {
          "definition": "Verify_training_class__is_indicated_as_inactive_or_deleted(string className)"
        },
        "verifytrainingclasshasstartdateof()": {
          "definition": "Verify_training_class__has_start_date_of__(string className, DateTime startDate)"
        },
        "verifytrainingclassisnotindicatedasinactiveordeleted()": {
          "definition": "Verify_training_class__is_not_indicated_as_inactive_or_deleted(string className)"
        },
        "verifytrainingclasshasstudentstatusof()": {
          "definition": "Verify_training_class__has_student_status_of__(string className, string statusName)"
        },
        "verifytrainingclasshasnotrainingcategory()": {
          "definition": "Verify_training_class__has_no_training_category(string className)"
        },
        "bindtrainingsections()": {
          "definition": "BindTrainingSections(List<PersonTrainingGroupDTO> groupedPersonTraining)"
        },
        "initializecontrol()": {
          "definition": "InitializeControl()"
        },
        "selecttrainingforfulfillment()": {
          "definition": "Select_training__for_fulfillment(string trainingName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "InquiryResponseTrainingSelectionListWorkflow"
    },
    "completedtrainingbypersonreport": {
      "namespace": "",
      "methods": {
        "verifyenddateis()": {
          "definition": "Verify_end_date_is__(string endDate)"
        },
        "considerperson()": {
          "definition": "Consider_person(string person)"
        },
        "considertraining()": {
          "definition": "Consider_training(string name)"
        },
        "verifystartdateis()": {
          "definition": "Verify_start_date_is__(string startDate)"
        },
        "verifythepageforhasarowfor()": {
          "definition": "Verify_the_page_for__has_a_row_for_(string person, string training)"
        },
        "verifystatusis()": {
          "definition": "Verify_status_is__(string status)"
        },
        "verifyhoursare()": {
          "definition": "Verify_hours_are__(string hours)"
        },
        "verifythepagefordoesnothavearowfor()": {
          "definition": "Verify_the_page_for__does_not_have_a_row_for_(string person, string training)"
        },
        "verifycategoryis()": {
          "definition": "Verify_category_is__(string category)"
        },
        "verifyreporthaspeople()": {
          "definition": "Verify_report_has__people(int people)"
        },
        "binddatasource()": {
          "definition": "BindDataSource(IList<PersonsCompletedTrainingDTO> data)"
        },
        "verifythepageforhasnotraining()": {
          "definition": "Verify_the_page_for__has_no_training(string person)"
        },
        "verifypersonhastrainingrows()": {
          "definition": "Verify_person_has__training_rows(int rows)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "CompletedTrainingByPersonReportWorkflow"
    },
    "selectsendingorganization": {
      "namespace": "",
      "methods": {
        "changesendingorganizationtonone()": {
          "definition": "Change_sending_organization_to_none()"
        },
        "changesendingorganizationtowithtitle()": {
          "definition": "Change_sending_organization_to__with_title__(string orgName, string titleName)"
        },
        "bindemployments()": {
          "definition": "BindEmployments(IList<SendingOrgEmploymentDTO> employments)"
        },
        "changesendingorganizationtoemploymentwith()": {
          "definition": "Change_sending_organization_to_employment_with__(string employerName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "SelectSendingOrganizationWorkflow"
    },
    "formbuilderhelper": {
      "namespace": "",
      "methods": {
        "verifyfieldhaslistoptions()": {
          "definition": "VerifyFieldHasListOptions(int blockIndex, int fieldIndex, string options)"
        },
        "moveblock()": {
          "definition": "MoveBlock(int sourceIndex, int targetIndex)"
        },
        "bindfieldpicker()": {
          "definition": "BindFieldPicker(FormBuilderFieldPickerDTO fieldPicker)"
        },
        "bindwebform()": {
          "definition": "BindWebForm(FormBuilderFormDTO form)"
        },
        "setfieldlabelto()": {
          "definition": "SetFieldLabelTo(int blockIndex, int fieldIndex, string newLabel)"
        },
        "setfielddescriptionto()": {
          "definition": "SetFieldDescriptionTo(int fieldIndex, string newDescription)"
        },
        "canceldeletewarning()": {
          "definition": "CancelDeleteWarning()"
        },
        "setfieldrequiredness()": {
          "definition": "SetFieldRequiredness(int fieldIndex, bool isRequired)"
        },
        "deletefieldfromblock()": {
          "definition": "DeleteFieldFromBlock(int fieldIndex, int blockIndex)"
        },
        "setfieldlistoptionsto()": {
          "definition": "SetFieldListOptionsTo(int fieldIndex, string newOptions)"
        },
        "verifyfieldrequiredness()": {
          "definition": "VerifyFieldRequiredness(int blockIndex, int fieldIndex, bool isRequired)"
        },
        "verifydeletewarningvisibility()": {
          "definition": "VerifyDeleteWarningVisibility(bool isVisible, string message)"
        },
        "verifyfieldhaslabel()": {
          "definition": "VerifyFieldHasLabel(int blockIndex, int fieldIndex, string label)"
        },
        "setfieldhelptextto()": {
          "definition": "SetFieldHelpTextTo(int fieldIndex, string newHelpText)"
        },
        "confirmdeletewarning()": {
          "definition": "ConfirmDeleteWarning()"
        },
        "verifyfieldhasdescription()": {
          "definition": "VerifyFieldHasDescription(int blockIndex, int fieldIndex, string description)"
        },
        "verifyblockhasfieldcount()": {
          "definition": "VerifyBlockHasFieldCount(int blockIndex, int expectedNumberOfFields)"
        },
        "addblocktoform()": {
          "definition": "AddBlockToForm(string tabName, string fieldName)"
        },
        "addlikertoption()": {
          "definition": "AddLikertOption(int fieldIndex, string optionText)"
        },
        "deletelikertoption()": {
          "definition": "DeleteLikertOption(int fieldIndex, int optionIndex)"
        }
      },
      "parent-name": null,
      "class-name": "FormBuilderWorkflowHelper"
    },
    "testmanagementfnh": {
      "namespace": "",
      "methods": {
        "addtestasapartwithheader()": {
          "definition": "Add_test__as_a_part_with_header__(string testName, string header)"
        },
        "allowretakesperstudent()": {
          "definition": "Allow__retakes_per_student(int numberOfRetakes)"
        },
        "createnewtestnamed()": {
          "definition": "create_new__test_named__(TestType testType, string testName)"
        },
        "collectweaponmakeandmodel()": {
          "definition": "Collect_weapon_make_and_model()"
        },
        "theattemptpassinggradeis()": {
          "definition": "The_attempt_passing_grade_is__(decimal grade)"
        },
        "addanitemwithtextwhichrequiresascoreofoutoftopassandiscritical()": {
          "definition": "Add_an_item_with_text__which_requires_a_score_of__out_of__to_pass_and_is_critical(string itemText, decimal passingScore, decimal maxScore)"
        },
        "recordthegradeaseither0or100()": {
          "definition": "Record_the_grade_as_either_0_or_100()"
        },
        "addanitemwithtext()": {
          "definition": "Add_an_item_with_text__(string itemText)"
        },
        "theoverallpassinggradeis()": {
          "definition": "The_overall_passing_grade_is__(decimal grade)"
        },
        "saveassessmenttest()": {
          "definition": "Save_assessment_test()"
        },
        "collectweaponserialnumber()": {
          "definition": "Collect_weapon_serial_number()"
        },
        "attemptscoresaremeasuredas()": {
          "definition": "Attempt_scores_are_measured_as__(TimeEntryFormat timeFormat)"
        },
        "addanitemwithtextandabbreviationandlearningobjectives()": {
          "definition": "Add_an_item_with_text__and_abbreviation__and_learning_objectives__(string itemText, string itemAbbreviation, List<string> eloNames)"
        },
        "allowattemptslabeled()": {
          "definition": "Allow__attempts_labeled__(int numAttempts, string attemptLabel)"
        },
        "addanitemwithtextandlearningobjectives()": {
          "definition": "Add_an_item_with_text__and_learning_objectives__(string itemText, List<string> eloNames)"
        },
        "createanewpassfailchecklisttestnamed()": {
          "definition": "Create_a_new_pass_fail_checklist_test_named__(string testName)"
        },
        "addanitemwithtextwhichiscritical()": {
          "definition": "Add_an_item_with_text__which_is_critical(string itemText)"
        },
        "assigntoactivityinclass()": {
          "definition": "Assign__to_activity__in_class__(string testName, string activityName, string className)"
        },
        "createanewscoredchecklisttestnamed()": {
          "definition": "Create_a_new_scored_checklist_test_named__(string testName)"
        },
        "comparetimestoamaximumpassingscoreofbutdonotassignagrade()": {
          "definition": "Compare_times_to_a_maximum_passing_score_of__but_do_not_assign_a_grade(string time)"
        },
        "marktestatrisk()": {
          "definition": "Mark_test_at_risk()"
        },
        "addanitemwithtextwhichrequiresascoreofoutoftopass()": {
          "definition": "Add_an_item_with_text__which_requires_a_score_of__out_of__to_pass(string itemText, decimal passingScore, decimal maxScore)"
        },
        "settonongraded()": {
          "definition": "Set_to_non_graded()"
        },
        "createfirearmstestnamed()": {
          "definition": "Create_firearms_test_named__(string testName)"
        },
        "setthepassedretestpolicyto()": {
          "definition": "Set_the_passed_retest_policy_to__( PassedRetestPolicy policy )"
        },
        "addlearningobjectives()": {
          "definition": "Add_learning_objectives__(List<string> eloNames)"
        },
        "setthefailedretestpolicyto()": {
          "definition": "Set_the_failed_retest_policy_to__(FailedRetestPolicy policy)"
        },
        "eachattemptcanrangefromto()": {
          "definition": "Each_attempt_can_range_from__to__(decimal min, decimal max)"
        },
        "overridegradewithzerooronehundred()": {
          "definition": "Override_grade_with_zero_or_one_hundred()"
        },
        "marktestasmustpass()": {
          "definition": "Mark_test_as_must_pass()"
        },
        "scoretestasofattempts()": {
          "definition": "Score_test_as__of____attempts(ScoredAssessmentTest.AttemptScoringMethod scoringMethod, ScoredAssessmentTest.ScoredTestAttemptSelect whichAttempts, int numAttempts)"
        },
        "thestudentmustpassatleastitemstopassthetest()": {
          "definition": "The_student_must_pass_at_least__items_to_pass_the_test(int numItems)"
        },
        "thescoreisbasedonpassingalltestpartsandnogradeisassigned()": {
          "definition": "The_score_is_based_on_passing_all_test_parts_and_no_grade_is_assigned()"
        },
        "allowattemptslabeledrequiringstudentstopassattemptstopassthetest()": {
          "definition": "Allow__attempts_labeled__requiring_students_to_pass__attempts_to_pass_the_test(int numAttempts, string attemptLabel, int numPassedAttemptsRequired)"
        },
        "thetesthasaminimumpassingof()": {
          "definition": "The_test_has_a_minimum_passing__of__(MinimumPassingValueType minPassingValueType, decimal minPassingValue)"
        },
        "labelpassinggradesasandfailinggradesas()": {
          "definition": "Label_passing_grades_as__and_failing_grades_as__(string passLabel, string failLabel)"
        },
        "addapassfailitemwithtext()": {
          "definition": "Add_a_pass_fail_item_with_text__(string itemText)"
        },
        "assigntoactivityinclasstemplate()": {
          "definition": "Assign__to_activity__in_class_template__(string testName, string activityName, string className)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "TestManagementFNH"
    },
    "hooverupload": {
      "namespace": "",
      "methods": {
        "bindselectablefiles()": {
          "definition": "BindSelectableFiles(IList<string> files)"
        },
        "uploadfile()": {
          "definition": "Upload_file(string fileName)"
        },
        "waitforuploadtocomplete()": {
          "definition": "Wait_for_upload_to_complete()"
        },
        "verifyfilehasrows()": {
          "definition": "Verify_file_has__rows(int rows)"
        },
        "verifyusernavigatedto()": {
          "definition": "Verify_user_navigated_to__(ImportWizardPage page)"
        },
        "uploadfilewithcontents()": {
          "definition": "Upload_file_with_contents(string fileContents)"
        },
        "binddocumentfiles()": {
          "definition": "BindDocumentFiles(IList<string> files)"
        },
        "navigatetoreturnurl()": {
          "definition": "NavigateToReturnUrl()"
        },
        "clickcontinue()": {
          "definition": "Click_continue()"
        },
        "showcanceldialog()": {
          "definition": "ShowCancelDialog()"
        },
        "verifyfilewasparsedcorrectly()": {
          "definition": "Verify_file_was_parsed_correctly()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "navigatetopage()": {
          "definition": "NavigateToPage(ImportWizardPage page)"
        },
        "showimportjobreallocated()": {
          "definition": "ShowImportJobReallocated()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "HooverUploadWorkflow"
    },
    "resourceoverview": {
      "namespace": "",
      "methods": {
        "facilitiesschedulingcategory()": {
          "definition": "___facilities_scheduling_category___(string action, string categoryName)"
        },
        "verifytypedoesnotcontaingroupwithresource()": {
          "definition": "Verify_type____does_not_contain_group___with_resource__(string resourceType, string groupName, string resourceName)"
        },
        "bindresourcecategories()": {
          "definition": "BindResourceCategories(IEnumerable<ResourceGroupListItemDTO> categories)"
        },
        "equipmenttype()": {
          "definition": "___equipment_type(string action)"
        },
        "verifyresourcehasschedulingblockson()": {
          "definition": "Verify_resource____has___scheduling_blocks_on___(string resourceName, int numBlocks, DateTime date)"
        },
        "program()": {
          "definition": "___program___(string action, string programName)"
        },
        "verifytypecontainsgroupwithresource()": {
          "definition": "Verify_type___contains_group___with_resource__(string resourceType, string groupName, string resourceName)"
        },
        "clearfilter()": {
          "definition": "ClearFilter(FilterItem filter)"
        },
        "allprogramsforowner()": {
          "definition": "___all_programs_for_owner____(string action, string ownerName)"
        },
        "clearfilters()": {
          "definition": "Clear_filters()"
        },
        "savefilters()": {
          "definition": "Save_filters()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "showpersonnelwithoutdivisions()": {
          "definition": "___show_personnel_without_divisions(string action)"
        },
        "allpersonneldivisionsforowner()": {
          "definition": "___all_personnel_divisions_for_owner____(string action, string ownerName)"
        },
        "facilitiestype()": {
          "definition": "___facilities_type(string action)"
        },
        "personneltype()": {
          "definition": "___personnel_type(string action)"
        },
        "equipmentschedulingcategory()": {
          "definition": "___equipment_scheduling_category___(string action, string categoryName)"
        },
        "personneldivision()": {
          "definition": "___personnel_division___(string action, string divisionName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ResourceOverviewWorkflow"
    },
    "hooverhrimport": {
      "namespace": "",
      "methods": {
        "verifythatentitiesweremodified()": {
          "definition": "Verify_that__entities_were_modified(int count)"
        },
        "exporterrors()": {
          "definition": "Export_errors()"
        },
        "uploadfile()": {
          "definition": "Upload_file(string fileName)"
        },
        "waitforuploadtocomplete()": {
          "definition": "Wait_for_upload_to_complete()"
        },
        "clickimport()": {
          "definition": "Click_Import()"
        },
        "verifythatentitieswerecreated()": {
          "definition": "Verify_that__entities_were_created(int count)"
        },
        "navigatetoimportmonitor()": {
          "definition": "NavigateToImportMonitor()"
        },
        "verifyfilehasrows()": {
          "definition": "Verify_file_has__rows(int rows)"
        },
        "uploadfilewithcontents()": {
          "definition": "Upload_file_with_contents(string fileContents)"
        },
        "navigatetoreturnurl()": {
          "definition": "NavigateToReturnUrl()"
        },
        "verifyerrorlistcontains()": {
          "definition": "Verify_error_list_contains__(string text)"
        },
        "verifythatrecordsweremodified()": {
          "definition": "Verify_that____records_were_modified(int count, string entity)"
        },
        "verifythatrecordswereinactivated()": {
          "definition": "Verify_that____records_were_inactivated(int count, string entity)"
        },
        "waitforimporttocomplete()": {
          "definition": "Wait_for_import_to_complete()"
        },
        "verifyfilewasparsedcorrectly()": {
          "definition": "Verify_file_was_parsed_correctly()"
        },
        "verifythatrecordswerecreated()": {
          "definition": "Verify_that____records_were_created(int count, string entity)"
        },
        "verifythatentitiesfailed()": {
          "definition": "Verify_that__entities_failed(int count)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "HooverHRImportWorkflow"
    },
    "personnelshortfall": {
      "namespace": "",
      "methods": {
        "setfiltertoonlyshowshortfallsforruleswithauthorization()": {
          "definition": "Set_filter_to_only_show_shortfalls_for_rules_with_authorization__(List<string> authNames)"
        },
        "verifyhasrows()": {
          "definition": "Verify_has_rows(int count)"
        },
        "bindshortfalldata()": {
          "definition": "BindShortfallData(IEnumerable<PersonnelShortfallDTO> shortfallData)"
        },
        "showautoassigninfo()": {
          "definition": "ShowAutoAssignInfo()"
        },
        "alertsending()": {
          "definition": "AlertSending()"
        },
        "setfiltertoonlyshowshortfallsforsegmentsfromtheseprograms()": {
          "definition": "Set_filter_to_only_show_shortfalls_for_segments_from_these_programs__(List<string> programNames)"
        },
        "clearfilters()": {
          "definition": "Clear_filters()"
        },
        "setfiltertoonlyshowshortfallsforsegmentsfromthesedivisions()": {
          "definition": "Set_filter_to_only_show_shortfalls_for_segments_from_these_divisions__(List<string> divisionNames)"
        },
        "setfiltertoonlyshowshortfallsbetweenand()": {
          "definition": "Set_filter_to_only_show_shortfalls_between_and(DateTime start, DateTime end)"
        },
        "setfiltertoincludeshortfallswhennoautoassignmenthasbeenrun()": {
          "definition": "Set_filter_to_include_shortfalls_when_no_autoassignment_has_been_run()"
        },
        "setfiltertoonlyshowshortfallsonorafter()": {
          "definition": "Set_filter_to_only_show_shortfalls_on_or_after(DateTime date)"
        },
        "verifyhasrow()": {
          "definition": "Verify_has_row(string row)"
        },
        "setfiltertoonlyshowshortfallsonorbefore()": {
          "definition": "Set_filter_to_only_show_shortfalls_on_or_before(DateTime date)"
        },
        "showaffinityautoassignoptions()": {
          "definition": "ShowAffinityAutoAssignOptions()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PersonnelShortfallWorkflow"
    },
    "relocateresident": {
      "namespace": "",
      "methods": {
        "verifyroomoptionsundercomparableinclude()": {
          "definition": "Verify_room_options_under_Comparable_include__(string roomName)"
        },
        "verifyexpectedcheckoutdatewasdefaultedto()": {
          "definition": "Verify_Expected_Check_Out_Date_was_defaulted_to__(DateTime expectedCheckOutDate)"
        },
        "verifyrequestedhousingis()": {
          "definition": "Verify_Requested_Housing_is__(string requestedHousingDesc)"
        },
        "verifyroomoptionsundernotrecommendedinclude()": {
          "definition": "Verify_room_options_under_Not_Recommended_include__(string roomName)"
        },
        "selectforbillingpricelevel()": {
          "definition": "Select__for_Billing_Price_Level(string priceLevelOption)"
        },
        "verifyexpectedcheckoutdatewasdefaultedtoblank()": {
          "definition": "Verify_Expected_Check_Out_Date_was_defaulted_to_blank()"
        },
        "verifyroomoptionsinclude()": {
          "definition": "Verify_room_options_include__(string roomName)"
        },
        "dispose()": {
          "definition": "Dispose()"
        },
        "verifyresidentnameis()": {
          "definition": "Verify_Resident_Name_is__(string residentName)"
        },
        "selectfornewroom()": {
          "definition": "Select__for_New_Room(string roomOption)"
        },
        "enterforrelocationdate()": {
          "definition": "Enter__for_Relocation_Date(DateTime relocationDate)"
        },
        "bindmodel()": {
          "definition": "BindModel(RelocateResidentDisplayDTO dto)"
        },
        "verifyroomoptionsdonotinclude()": {
          "definition": "Verify_room_options_do_not_include__(string roomName)"
        },
        "verifyrelocationdatewasdefaultedto()": {
          "definition": "Verify_Relocation_Date_was_defaulted_to__(DateTime relocationDate)"
        },
        "verifypricelevelrequired()": {
          "definition": "Verify_price_level__required(string isIsNotStr)"
        },
        "selectfor()": {
          "definition": "Select__for__(string selectedText, string fieldLabel)"
        },
        "clickrelocate()": {
          "definition": "Click_Relocate()"
        },
        "verifyrequestedhousingdatesaretoandcheckoutdatepassed()": {
          "definition": "Verify_Requested_Housing_Dates_are__to__and_check_out_date__passed(DateTime expectedCheckInDate, DateTime expectedCheckOutDate, string hasHasNotStr)"
        },
        "verifyroomoptionsunderrecommendedinclude()": {
          "definition": "Verify_room_options_under_Recommended_include__(string roomName)"
        },
        "verifypriceleveloptionsare()": {
          "definition": "Verify_price_level_options_are__(List<string> expectedOptions)"
        },
        "enterforexpectedcheckoutdate()": {
          "definition": "Enter__for_Expected_Check_Out_Date(DateTime expectedCheckOutDate)"
        },
        "verifycurrentroomis()": {
          "definition": "Verify_Current_Room_is__(string currentRoomDesc)"
        },
        "verifyrelocationdateis()": {
          "definition": "Verify_Relocation_Date_is__(DateTime relocationDate)"
        },
        "verifyexpectedcheckoutdateis()": {
          "definition": "Verify_Expected_Check_Out_Date_is__(DateTime expectedCheckOutDate)"
        },
        "browsetopageforresidentrecordofacadisperson()": {
          "definition": "Browse_to_page_for_resident_record_of_Acadis_person__(string residentName)"
        },
        "verifycheckedinis()": {
          "definition": "Verify_Checked_In_is__(string currentCheckInDesc)"
        },
        "verifypriceleveloptionsinclude()": {
          "definition": "Verify_price_level_options_include__(string expectedOption)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "RelocateResidentWorkflow"
    },
    "classtranscriptband": {
      "namespace": "",
      "methods": {
        "clickedit()": {
          "definition": "Click_Edit()"
        },
        "browsetoforclass()": {
          "definition": "Browse_to_for_class__(string trainingClassName)"
        },
        "navigatetoeditclasstranscript()": {
          "definition": "NavigateToEditClassTranscript(int classDefinitionID)"
        },
        "verifyusereditthetranscriptsettings()": {
          "definition": "Verify_user__edit_the_transcript_settings(string canCannotString)"
        },
        "verifytranscriptdescriptionis()": {
          "definition": "Verify_transcript_description_is__(string transcriptDescription)"
        },
        "browsetoforclasstemplate()": {
          "definition": "Browse_to_for_class_template__(string classTemplateName)"
        },
        "verifyusernavigatedtoeditthetranscript()": {
          "definition": "Verify_user__navigated_to_edit_the_transcript(string wasWasNotString)"
        },
        "verifygradesdescriptionis()": {
          "definition": "Verify_grades_description_is__(string gradesDescription)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ClassTranscriptBandWorkflow"
    },
    "gradeexport": {
      "namespace": "",
      "methods": {
        "findexportrowfor()": {
          "definition": "Find_export_row_for__(string personName)"
        },
        "verifythatfieldhasvalue()": {
          "definition": "Verify_that__field_has_value__(string field, string value)"
        },
        "exportgradesfor()": {
          "definition": "Export_Grades_for__(string className)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "GradeExportWorkflow"
    },
    "acadislessonplanlist": {
      "namespace": "",
      "methods": {
        "clickviewlessonplan()": {
          "definition": "Click_View_Lesson_Plan()"
        },
        "verifytherearelessonplansinthelistfor()": {
          "definition": "Verify_there_are__lesson_plans_in_the_list_for__(int expectedNumberOfPlans, string academyName)"
        },
        "verifycreateclasstemplatemenuisnotvisible()": {
          "definition": "Verify_Create_Class_Template_menu_is_not_visible()"
        },
        "considerrowofthelistfor()": {
          "definition": "Consider_row__of_the_list_for__(int rowNumber, string academyName)"
        },
        "verifysubmittedis()": {
          "definition": "Verify_Submitted_is__(string submitted)"
        },
        "verifyclasstemplatelinkisvisible()": {
          "definition": "Verify_class_template_link_is_visible()"
        },
        "dismisslessonplanprefilledpopoverpermanently()": {
          "definition": "Dismiss_lesson_plan_pre_filled_popover_permanently()"
        },
        "verifyclasstemplatelinkisnotvisible()": {
          "definition": "Verify_class_template_link_is_not_visible()"
        },
        "verifycreateclasstemplatemenuisvisible()": {
          "definition": "Verify_Create_Class_Template_menu_is_visible()"
        },
        "verifylessonplanprefilledpopoverdisplayed()": {
          "definition": "Verify_lesson_plan_pre_filled_popover__displayed(string wasOrWasNotStr)"
        },
        "verifythedisplayedacademiesare()": {
          "definition": "Verify_the_displayed_academies_are__(List<string> academyNames)"
        },
        "verifyusernavigatedtothedashboard()": {
          "definition": "Verify_user__navigated_to_the_dashboard(string wasWasNotString)"
        },
        "browsetopagefromlessonplan()": {
          "definition": "Browse_to_page_from_lesson_plan__(string lessonPlanName)"
        },
        "verifynoacademiesaredisplayed()": {
          "definition": "Verify_no_academies_are_displayed()"
        },
        "verifyactionmenuisvisible()": {
          "definition": "Verify_action_menu_is_visible()"
        },
        "verifyuserhasaccesstocreatetemplateaccess()": {
          "definition": "Verify_user_has_access_to_create_templateaccess()"
        },
        "verifyrequestcommentsis()": {
          "definition": "Verify_Request_Comments_is__(string specialRequest)"
        },
        "verifyclasstemplatenamelabelisnotvisible()": {
          "definition": "Verify_class_template_name_label_is_not_visible()"
        },
        "promptuserwithdeleteconfirmation()": {
          "definition": "PromptUserWithDeleteConfirmation(int lessonPlanID)"
        },
        "verifyusernavigatedtoselectedclasstemplate()": {
          "definition": "Verify_user_navigated_to_selected_class_template()"
        },
        "bindlessonplans()": {
          "definition": "BindLessonPlans(IList<AcadisLessonPlanListAcademyDTO> academies)"
        },
        "verifyactionmenuisnotvisible()": {
          "definition": "Verify_action_menu_is_not_visible()"
        },
        "verifystatusis()": {
          "definition": "Verify_Status_is__(string status)"
        },
        "verifyclasstemplatenamefieldis()": {
          "definition": "Verify_Class_Template_name_field_is_(string templateName)"
        },
        "verifyclasstemplatenamelabelisvisible()": {
          "definition": "Verify_class_template_name_label_is_visible()"
        },
        "verifyrequestedforis()": {
          "definition": "Verify_Requested_For_is__(string requestedFor)"
        },
        "clickcreateclasstemplate()": {
          "definition": "Click_Create_Class_Template()"
        },
        "clicksavebutton()": {
          "definition": "Click_Save_button()"
        },
        "verifyusernavigatedtoviewlessonplan()": {
          "definition": "Verify_user__navigated_to_view_lesson_plan__(string wasWasNotString, string lessonPlanCourseTitle)"
        },
        "selectforprogram()": {
          "definition": "Select__for_Program(string programName)"
        },
        "verifyusernavigatedtoselectedlessonplan()": {
          "definition": "Verify_user_navigated_to_selected_lesson_plan()"
        },
        "navigatetoviewlessonplan()": {
          "definition": "NavigateToViewLessonPlan(int lessonPlanID)"
        },
        "navigatetodashboard()": {
          "definition": "NavigateToDashboard()"
        },
        "navigatetocreateclasstemplate()": {
          "definition": "NavigateToCreateClassTemplate(int lessonPlanID)"
        },
        "verifyclasstemplatenamefieldisblank()": {
          "definition": "Verify_Class_Template_name_field_is_blank()"
        },
        "verifycoursetitleis()": {
          "definition": "Verify_Course_Title_is__(string courseTitle)"
        },
        "verifyrequestedbyis()": {
          "definition": "Verify_Requested_By_is__(string requestedBy)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AcadisLessonPlanListWorkflow"
    },
    "acadisservicehelper": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "AcadisServiceHelper"
    },
    "testopiaurlresolver": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "TestopiaUrlResolver"
    },
    "studenttestsearch": {
      "namespace": "",
      "methods": {
        "enterforfirstname()": {
          "definition": "Enter_for_first_name(string text)"
        },
        "selectfordepartedstudents()": {
          "definition": "Select_for_departed_students(string text)"
        },
        "enterforlastname()": {
          "definition": "Enter_for_last_name(string text)"
        },
        "enterfortestname()": {
          "definition": "Enter_for_test_name(string text)"
        },
        "selectformatchmode()": {
          "definition": "Select_for_match_mode(string text)"
        },
        "resultsrowis()": {
          "definition": "Results_row_is(int rowNumber, string resultText)"
        },
        "resultscriteriatextcontains()": {
          "definition": "Results_criteria_text_contains(string text)"
        },
        "selectforstudentteststatus()": {
          "definition": "Select_for_student_test_status(string text)"
        },
        "resultsshownoresults()": {
          "definition": "Results_show_no_results()"
        },
        "enterforclassname()": {
          "definition": "Enter_for_class_name(string text)"
        },
        "resultsshowoutofresults()": {
          "definition": "Results_show_out_of_results(int shownResults, int totalResults)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "enterforacademyid()": {
          "definition": "Enter_for_academy_id(string text)"
        },
        "clicksearch()": {
          "definition": "Click_search()"
        },
        "selectforprogram()": {
          "definition": "Select_for_program(string text)"
        },
        "viewsearchresults()": {
          "definition": "ViewSearchResults()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "StudentTestSearchWorkflow"
    },
    "personsearch": {
      "namespace": "",
      "methods": {
        "verifythatresultsincludewithcertification()": {
          "definition": "Verify_that_results_include__with_certification__(string personName, string certification)"
        },
        "withexpirationdatebetweenand()": {
          "definition": "with_expiration_date_between__and__(DateTime startDate, DateTime endDate)"
        },
        "writeexport()": {
          "definition": "WriteExport(string export)"
        },
        "withpersonudfgreaterthanorequalto()": {
          "definition": "with_person_udf__greater_than_or_equal_to__(string udfField, int startVal)"
        },
        "verifythathasacademyid()": {
          "definition": "Verify_that__has_academy_ID__(string personName, string academyID)"
        },
        "withpersonudflessthanorequaltodate()": {
          "definition": "with_person_udf__less_than_or_equal_to_date__(string udfField, DateTime endVal)"
        },
        "withatmosttraininghourscomplete()": {
          "definition": "with_at_most__training_hours_complete(double n)"
        },
        "verifythathastraininghours()": {
          "definition": "Verify_that__has__training_hours(string personName, double expectedTrainingHours)"
        },
        "clickemailselected()": {
          "definition": "Click_Email_Selected()"
        },
        "verifythathasemptyacademyid()": {
          "definition": "Verify_that__has_empty_academy_ID(string personName)"
        },
        "withappointmenttype()": {
          "definition": "with_appointment_type_(string types)"
        },
        "withtrainingnamematching()": {
          "definition": "with_training_name_matching__(string trainingName)"
        },
        "verifythatresultsare()": {
          "definition": "Verify_that_results_are__(List<string> personNames)"
        },
        "navigatetopersonneltraininghours()": {
          "definition": "NavigateToPersonnelTrainingHours(Guid searchID)"
        },
        "withpersonudfbetweendatesand()": {
          "definition": "with_person_udf__between_dates__and__(string udfField, DateTime startVal, DateTime endVal)"
        },
        "enablemultiselect()": {
          "definition": "EnableMultiSelect()"
        },
        "bindsearchresults()": {
          "definition": "BindSearchResults(PagedResultDTO<PersonSearchResultDTO> results, bool showRestrictedAccessWarning)"
        },
        "enablemerge()": {
          "definition": "EnableMerge()"
        },
        "enableemailselected()": {
          "definition": "EnableEmailSelected()"
        },
        "withdropdownpersonudfmatching()": {
          "definition": "with_dropdown_person_udf__matching__(string udfField, string udfValue)"
        },
        "disableactionmenu()": {
          "definition": "DisableActionMenu()"
        },
        "withcertificationsearchfunction()": {
          "definition": "with_certification_search_function()"
        },
        "verifythatthereareresults()": {
          "definition": "Verify_that_there_are__results(int numResults)"
        },
        "withcertificationactionsbetweenand()": {
          "definition": "with_certification_actions_between_and(DateTime startDate, DateTime endDate)"
        },
        "withcertificationactions()": {
          "definition": "with_certification_actions(List<string> actionTypeNames)"
        },
        "withlastname()": {
          "definition": "with_last_name(string lastName)"
        },
        "withfirstname()": {
          "definition": "with_first_name(string firstName)"
        },
        "exportselected()": {
          "definition": "Export_Selected()"
        },
        "verifythatexportcolumnsare()": {
          "definition": "Verify_that_export_columns_are_(List<string> headers)"
        },
        "enableexportall()": {
          "definition": "EnableExportAll()"
        },
        "showmergeblockers()": {
          "definition": "ShowMergeBlockers(IEnumerable<string> mergeBlockers)"
        },
        "unselectwithcertification()": {
          "definition": "Unselect__with_certification__(string personName, string certificationName)"
        },
        "verifythatthereareresultsdisplayed()": {
          "definition": "Verify_that_there_are__results_displayed(int numResults)"
        },
        "enableexportselected()": {
          "definition": "EnableExportSelected()"
        },
        "witheffectivedatebetweenand()": {
          "definition": "with_effective_date_between__and__(DateTime startDate, DateTime endDate)"
        },
        "dosearch()": {
          "definition": "Do_search()"
        },
        "withcertificationstatuses()": {
          "definition": "with_certification_statuses__(List<string> statusNames)"
        },
        "clicksearchinactive()": {
          "definition": "Click_search_inactive()"
        },
        "verifythatresultis()": {
          "definition": "Verify_that_result__is__(int rowNumber, List<string> values)"
        },
        "withtitle()": {
          "definition": "with_title_(string titles)"
        },
        "withquicksearch()": {
          "definition": "with_quicksearch__(string quicksearchParam)"
        },
        "withatleasttraininghourscomplete()": {
          "definition": "with_at_least__training_hours_complete(double n)"
        },
        "withtrainingprogram()": {
          "definition": "with_training_program__(string programName)"
        },
        "verifythatresultsinclude()": {
          "definition": "Verify_that_results_include__(string personName)"
        },
        "exportall()": {
          "definition": "Export_All()"
        },
        "verifythatthereareblockersformerge()": {
          "definition": "Verify_that_there_are__blockers_for_merge(int count)"
        },
        "clickaddtrainingevent()": {
          "definition": "Click_Add_Training_Event()"
        },
        "canseecertificationprintlinks()": {
          "definition": "CanSeeCertificationPrintLinks(bool allowed)"
        },
        "considersearchresultfor()": {
          "definition": "Consider_search_result_for__(string personName)"
        },
        "verifythathasprimaryorganization()": {
          "definition": "Verify_that__has_primary_organization__(string personName, string primaryOrgName)"
        },
        "verifythatresulthasaliasshown()": {
          "definition": "Verify_that_result_has_alias__shown(string aliasName)"
        },
        "verifythathasemptyprimaryorganization()": {
          "definition": "Verify_that__has_empty_primary_organization(string personName)"
        },
        "verifythathasstatus()": {
          "definition": "Verify_that__has_status__(string personName, string statusName)"
        },
        "withpersonudflessthanorequalto()": {
          "definition": "with_person_udf__less_than_or_equal_to__(string udfField, int endVal)"
        },
        "withpersonudfbetweenand()": {
          "definition": "with_person_udf__between__and__(string udfField, int startVal, int endVal)"
        },
        "withemploymentstatus()": {
          "definition": "with_employment_status__(string status)"
        },
        "enablechecktraining()": {
          "definition": "EnableCheckTraining()"
        },
        "verifythathastitle()": {
          "definition": "Verify_that__has_title__(string personName, string title)"
        },
        "withacademyid()": {
          "definition": "with_academy_id__(List<string> academyIds)"
        },
        "withpersonudfgreaterthanorequaltodate()": {
          "definition": "with_person_udf__greater_than_or_equal_to_date__(string udfField, DateTime startVal)"
        },
        "verifythatresultsdonotinclude()": {
          "definition": "Verify_that_results_do_not_include__(string personName)"
        },
        "withofthecertifications()": {
          "definition": "with__of_the_certifications__(CertSearchInclusionOptions inclusionMode, List<string> certNames)"
        },
        "searchwithcriteria()": {
          "definition": "Search_with_criteria()"
        },
        "withemploymenttype()": {
          "definition": "with_employment_type_(string types)"
        },
        "createsearchcriteria()": {
          "definition": "Create_search_criteria()"
        },
        "enableaddtrainingevent()": {
          "definition": "EnableAddTrainingEvent()"
        },
        "verifythatexportrowis()": {
          "definition": "Verify_that_export_row__is__(int rowNumber, List<string> values)"
        },
        "verifythatthereareexportrows()": {
          "definition": "Verify_that_there_are__export_rows(int number)"
        },
        "updateallselected()": {
          "definition": "UpdateAllSelected(string allIds)"
        },
        "unselect()": {
          "definition": "Unselect__(string personName)"
        },
        "withmatchtype()": {
          "definition": "with_match_type(SearchComparison matchType)"
        },
        "withtrainingtimeframefromto()": {
          "definition": "with_training_timeframe_from__to__(DateTime startDate, DateTime endDate)"
        },
        "navigatetopersonmerge()": {
          "definition": "NavigateToPersonMerge()"
        },
        "verifythatmergeblockersincludes()": {
          "definition": "Verify_that_merge_blockers_includes__(string blockerMessage)"
        },
        "withresultsperpage()": {
          "definition": "with__results_per_page(int num)"
        },
        "verifythathasemptytitle()": {
          "definition": "Verify_that__has_empty_title(string personName)"
        },
        "withtraininghourscompletefromto()": {
          "definition": "with_training_hours_complete_from__to__(double from, double to)"
        },
        "select()": {
          "definition": "Select__(string personName)"
        },
        "verifythataliasesareshown()": {
          "definition": "Verify_that__aliases_are_shown(int aliasCount)"
        },
        "withpersonstatuses()": {
          "definition": "with_person_statuses__(List<string> statusNames)"
        },
        "verifythatbemerged()": {
          "definition": "Verify_that____be_merged(string peopleToMerge, string canCanNot)"
        },
        "withissuedatebetweenand()": {
          "definition": "with_issue_date_between__and__(DateTime startDate, DateTime endDate)"
        },
        "enabletrainingreports()": {
          "definition": "EnableTrainingReports()"
        },
        "withpersonudfmatching()": {
          "definition": "with_person_udf__matching__(string udfField, string udfValue)"
        },
        "checkpersonneltraininghours()": {
          "definition": "Check_Personnel_Training_Hours()"
        },
        "selectwithcertification()": {
          "definition": "Select__with_certification__(string personName, string certificationName)"
        },
        "requestallresults()": {
          "definition": "Request_all_results()"
        },
        "verifyredirectedtoperson()": {
          "definition": "Verify_redirected_to_person()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PersonSearchWorkflow"
    },
    "testopiaacadisservice": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "TestopiaAcadisService"
    },
    "inquiryquestion": {
      "namespace": "",
      "methods": {
        "verifyresponseisnotrequired()": {
          "definition": "Verify_response_is_not_required()"
        },
        "initializecontrolreadonly()": {
          "definition": "InitializeControlReadOnly(PerformanceReportRatingDTO dto)"
        },
        "bindresponseoptions()": {
          "definition": "BindResponseOptions(IList<ResponseOptionDTO> optionDTOs, bool isRequired, bool allowMultipleResposonses)"
        },
        "verifyisanoption()": {
          "definition": "Verify__is_an_option(string optionText)"
        },
        "verifyoptionisnotselected()": {
          "definition": "Verify_option__is_not_selected(string optionText)"
        },
        "verifymultipleresponsesnotallowed()": {
          "definition": "Verify_multiple_responses_not_allowed()"
        },
        "verifythereareoptionsdisplayed()": {
          "definition": "Verify_there_are__options_displayed(int numOptions)"
        },
        "removeoptionselection()": {
          "definition": "Remove__option_selection(string optionText)"
        },
        "verifyresponseisrequired()": {
          "definition": "Verify_response_is_required()"
        },
        "verifymultipleresponsesallowed()": {
          "definition": "Verify_multiple_responses_allowed()"
        },
        "selectoption()": {
          "definition": "Select__option(string optionText)"
        },
        "verifyoptionisselected()": {
          "definition": "Verify_option__is_selected(string optionText)"
        },
        "initializecontrol()": {
          "definition": "InitializeControl()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "InquiryQuestion"
    },
    "mvbaseexporthandler": {
      "namespace": "",
      "methods": {
        "considerrowwhereis()": {
          "definition": "Consider_row_where__is__(string field, string fieldValue)"
        },
        "verifyfilenameis()": {
          "definition": "Verify_file_name_is__(string fileName)"
        },
        "verifytherearerows()": {
          "definition": "Verify_there_are__rows(int count)"
        },
        "writeexport()": {
          "definition": "WriteExport(string fileName, IList<string> exportData)"
        },
        "verifythatresultsdoesnotcontainrowwhereisandis()": {
          "definition": "Verify_that_results_does_not_contain_row_where__is__and__is__(string field1, string field1Value, string field2, string field2Value)"
        },
        "verifytherearecolumns()": {
          "definition": "Verify_there_are__columns(int count)"
        },
        "verifythatrowwhereisandisappearsbeforerowwhereisandis()": {
          "definition": "Verify_that_row_where__is__and__is__appears_before_row_where__is__and__is__(string row1Field1, string row1Field1Value, string row1Field2, string row1Field2Value, string row2Field1, string row2Field1Value, string row2Field2, string row2Field2Value)"
        },
        "verifyaccessdenied()": {
          "definition": "Verify_access_denied()"
        },
        "verifyis()": {
          "definition": "Verify__is__(string fieldName, string value)"
        },
        "verifythereareinstancesofcolumn()": {
          "definition": "Verify_there_are__instances_of_column__(int totalInstances, string columnName)"
        },
        "considerrowwhereisandis()": {
          "definition": "Consider_row_where__is__and__is__(string field1, string field1Value, string field2, string field2Value)"
        },
        "verifyinstanceofcolumnis()": {
          "definition": "Verify__instance_of_column__is__(string ordinal, string fieldName, string value)"
        },
        "accessdenied()": {
          "definition": "AccessDenied()"
        },
        "verifyisnotnull()": {
          "definition": "Verify__is_not_null(string fieldName)"
        },
        "verifyaccessgranted()": {
          "definition": "Verify_access_granted()"
        },
        "verifythatresultscontainsrowwhereisandis()": {
          "definition": "Verify_that_results_contains_row_where__is__and__is__(string field1, string field1Value, string field2, string field2Value)"
        },
        "verifyexportcontainsdata()": {
          "definition": "Verify_export_contains_data()"
        },
        "considerrow()": {
          "definition": "Consider_row__(int row)"
        }
      },
      "parent-name": null,
      "class-name": "MVBaseExportHandlerWorkflow"
    },
    "studenttestsearchresults": {
      "namespace": "",
      "methods": {
        "clickchangeresultsperpageto()": {
          "definition": "Click_change_results_per_page_to(int resultsPerPage)"
        },
        "currentsortisbyindescendingorder()": {
          "definition": "Current_sort_is_by_in_descending_order(string sortType)"
        },
        "deleteisnotallowed()": {
          "definition": "Delete_is_not_allowed()"
        },
        "afterdelete()": {
          "definition": "AfterDelete()"
        },
        "browsetopagesearchingforclassnameequalto()": {
          "definition": "Browse_to_Page_Searching_for_class_name_equal_to__(string name)"
        },
        "currentdisplayedrecordsis()": {
          "definition": "Current_displayed_records_is(string resultString)"
        },
        "rowis()": {
          "definition": "Row_is(int rowNumber, string resultString)"
        },
        "bindsearchresults()": {
          "definition": "BindSearchResults(PagedResultDTO<StudentTestSearchResultDTO> searchResults)"
        },
        "clickprinttestlinkfor()": {
          "definition": "Click_print_test_link_for(int rowNumber)"
        },
        "clickchangepageto()": {
          "definition": "Click_change_page_to(int pageNumber)"
        },
        "printstudenttests()": {
          "definition": "PrintStudentTests(StudentExamsForPrintingDTO testsToPrint)"
        },
        "therearenoresults()": {
          "definition": "There_are_no_results()"
        },
        "thereareoutofresultsshown()": {
          "definition": "There_are_out_of_results_shown(int shownResults, int totalResults)"
        },
        "deleteisallowed()": {
          "definition": "Delete_is_allowed()"
        },
        "browsetopagesearchingforfirstnamecontaining()": {
          "definition": "Browse_to_Page_Searching_for_first_name_containing(string firstName)"
        },
        "criteriatextcontains()": {
          "definition": "Criteria_text_contains(string text)"
        },
        "clicksortlinkfor()": {
          "definition": "Click_sort_link_for(string sortType)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "clickprintselectedtests()": {
          "definition": "Click_print_selected_tests()"
        },
        "currentsortisbyinascendingorder()": {
          "definition": "Current_sort_is_by_in_ascending_order(string sortType)"
        },
        "clickdelete()": {
          "definition": "Click_delete()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "StudentTestSearchResultsWorkflow"
    },
    "analysisofstudentperformanceforpassfailchecklistreport": {
      "namespace": "",
      "methods": {
        "verifytestisgraded()": {
          "definition": "Verify_Test_Is_Graded()"
        },
        "verifymeanplusonestandarddeviationis()": {
          "definition": "Verify_Mean_Plus_One_Standard_Deviation_is__(decimal meanValue)"
        },
        "verifyscoremeanis()": {
          "definition": "Verify_Score_Mean_is__(string meanScore)"
        },
        "verifymaximumtakenumberis()": {
          "definition": "Verify_Maximum_Take_Number_is__(int maxTakeNumber)"
        },
        "verifyminimumpassinggradeis()": {
          "definition": "Verify_Minimum_Passing_Grade_is(decimal minPassingGrade)"
        },
        "verifygradestandarddeviationis()": {
          "definition": "Verify_Grade_Standard_Deviation_is__(decimal deviation)"
        },
        "verifytestnameis()": {
          "definition": "Verify_Test_Name_is__(string testName)"
        },
        "verifyscorelabelsingularis()": {
          "definition": "Verify_Score_Label_Singular_is__(string scoreLabel)"
        },
        "verifyincompleteexclusiontextisshown()": {
          "definition": "Verify_Incomplete_Exclusion_Text_is_shown()"
        },
        "verifyscoreskewnessis()": {
          "definition": "Verify_Score_Skewness_is__(string skewness)"
        },
        "verifyheaderis()": {
          "definition": "verify_header_is__(string headerText)"
        },
        "verifysumofcountspertakeis()": {
          "definition": "Verify_Sum_Of_Counts_Per_Take_is__(int count)"
        },
        "verifymaximumpossiblescoreis()": {
          "definition": "Verify_Maximum_Possible_Score_is__(decimal maxScore)"
        },
        "verifygradeskewnessis()": {
          "definition": "Verify_Grade_Skewness_is__(string skewness)"
        },
        "verifygradekurtosisis()": {
          "definition": "Verify_Grade_Kurtosis_is__(string kurtosis)"
        },
        "verifytestisnotgraded()": {
          "definition": "Verify_Test_Is_Not_Graded()"
        },
        "verifyreportdatahasgraderows()": {
          "definition": "verify_report_data_has__grade_rows(int numRows)"
        },
        "verifyscorevarianceis()": {
          "definition": "Verify_Score_Variance_is__(string variance)"
        },
        "verifygrademeanis()": {
          "definition": "Verify_Grade_Mean_is__(decimal mean)"
        },
        "verifytestisnotpassfail()": {
          "definition": "Verify_test_is_not_PassFail()"
        },
        "verifygradevarianceis()": {
          "definition": "Verify_Grade_Variance_is__(string variance)"
        },
        "verifymeanminusonestandarddeviationis()": {
          "definition": "Verify_Mean_Minus_One_Standard_Deviation_is__(decimal meanValue)"
        },
        "verifytestispassfail()": {
          "definition": "Verify_Test_Is_PassFail()"
        },
        "verifyscorelabelpluralis()": {
          "definition": "Verify_Score_Label_Plural_is__(string scoreLabel)"
        },
        "verifyincompleteexclusiontextisnotshown()": {
          "definition": "Verify_Incomplete_Exclusion_Text_is_not_shown()"
        },
        "verifygraderowhasboundstoandscorerangeandcountspertakeanddescription()": {
          "definition": "Verify_grade_row__has_bounds__to__and_score_range__and__counts_per_take_and_description__(int rowNum, decimal lowerBound, decimal upperBound, string range, int counts, string description)"
        },
        "verifyscoremedianis()": {
          "definition": "Verify_Score_Median_is__(string medianScore)"
        },
        "verifytherearenormaldistributionpoints()": {
          "definition": "Verify_there_are__normal_distribution_points(int pointCount)"
        },
        "binddatasource()": {
          "definition": "BindDataSource(AnalysisOfStudentPerformanceReportDTO dto)"
        },
        "browsetoanalysisofstudentperformancepassfailchecklistreportfor()": {
          "definition": "Browse_to_Analysis_Of_Student_Performance_Pass_Fail_Checklist_Report_for__(string testName)"
        },
        "verifyinitialtakegradedistributionsis()": {
          "definition": "Verify_Initial_Take_Grade_Distributions_is__(int distributionCount)"
        },
        "verifyscorekurtosisis()": {
          "definition": "Verify_Score_Kurtosis_is__(string kurtosis)"
        },
        "verifygrademedianis()": {
          "definition": "Verify_Grade_Median_is__(decimal median)"
        },
        "verifyscorestandarddeviationis()": {
          "definition": "Verify_Score_Standard_Deviation_is__(string deviation)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AnalysisOfStudentPerformanceForPassFailChecklistReportWorkflow"
    },
    "classregistrationrosterexport": {
      "namespace": "",
      "methods": {
        "writeexport()": {
          "definition": "WriteExport(string fileName, IList<string> exportData)"
        },
        "export()": {
          "definition": "Export()"
        },
        "performsearch()": {
          "definition": "Perform_search()"
        },
        "clickexportselected()": {
          "definition": "Click_export_selected()"
        },
        "dispose()": {
          "definition": "Dispose()"
        },
        "verifynextexportcolumnis()": {
          "definition": "Verify_next_export_column_is__(string name)"
        },
        "verifyrowwasexported()": {
          "definition": "Verify__row_was_exported(int numRows)"
        },
        "setsearchcriterionfirstnameto()": {
          "definition": "Set_search_criterion_first_name_to__(string firstName)"
        },
        "verifyexportvalueisfor()": {
          "definition": "Verify_export_value_is__for__(string value, string colName)"
        },
        "clickexportselectedsearchresults()": {
          "definition": "Click_export_selected_search_results()"
        },
        "selectstudent()": {
          "definition": "Select_student__(string name)"
        },
        "verifyrowswereexported()": {
          "definition": "Verify__rows_were_exported(int numRows)"
        },
        "clickexportallsearchresults()": {
          "definition": "Click_export_all_search_results()"
        },
        "browsetopage()": {
          "definition": "Browse_to_page()"
        },
        "verifyexportcolumnis()": {
          "definition": "Verify_export_column__is__(int colNum, string name)"
        },
        "setsearchcriterionacademyidto()": {
          "definition": "Set_search_criterion_academy_id_to__(string academyId)"
        },
        "setsearchcriterionlastnameto()": {
          "definition": "Set_search_criterion_last_name_to__(string lastName)"
        },
        "forexportrow()": {
          "definition": "For_export_row__(int rowNum)"
        }
      },
      "parent-name": "MVBaseExportHandlerWorkflow",
      "class-name": "ClassRegistrationRosterExportWorkflow"
    },
    "permissionuser": {
      "namespace": "",
      "methods": {
        "restrictusertoassignedclassesonly()": {
          "definition": "Restrict_user__to_assigned_classes_only(string userName)"
        },
        "withuser()": {
          "definition": "With_user(string userName)"
        },
        "allowviewingofunemployedpeople()": {
          "definition": "Allow_viewing_of_unemployed_people()"
        },
        "removepermissionsfromrole()": {
          "definition": "Remove_permissions_from_role(string bizfunc, string role)"
        },
        "assignrole()": {
          "definition": "AssignRole(string roleName)"
        },
        "grantdatapermissionon()": {
          "definition": "GrantDataPermissionOn(string orgName)"
        },
        "verifyhasroleaccess()": {
          "definition": "Verifyhasroleaccess(string userName, string roleName)"
        },
        "verifyhaspermissiontodata()": {
          "definition": "Verify__has_permission_to__Data(string userName, string orgName)"
        },
        "revokefromrole()": {
          "definition": "Revoke___from_role__(string bizFuncDisplayName, BizFuncPerms permission, string roleName)"
        },
        "verifylackspermissiontodata()": {
          "definition": "Verify__lacks_permission_to__Data(string userName, string orgName)"
        },
        "removepermissionfromrole()": {
          "definition": "Remove__permission_from_role__(string moduleName, string bizfunc, string role)"
        },
        "allowforonrole()": {
          "definition": "Allow__for__on_role__(string bizFuncDisplayName, string permission, string module, string role)"
        },
        "grantdatapermissiononto()": {
          "definition": "GrantDataPermissionOnTo(string orgName, string userName)"
        },
        "removedatapermissiontoallbutfrom()": {
          "definition": "Remove_Data_Permission_To_All_But_From(string orgName, string userName)"
        },
        "verifyonlyhaspermissiontodata()": {
          "definition": "Verify__Only_Has_Permission_To__Data(string userName, string orgName)"
        },
        "setassignedclassesonly()": {
          "definition": "Set_Assigned_Classes_Only()"
        },
        "restrictusertospecificorganizations()": {
          "definition": "Restrict_user__to_specific_organizations(string userName)"
        },
        "unassignrolefromuser()": {
          "definition": "Unassign_role__from_user__(string roleName, string userName)"
        },
        "removedatapermissionforfrom()": {
          "definition": "Remove_data_permission_for_from(string orgName, string userName)"
        },
        "validatecurrentlyloggedinuseris()": {
          "definition": "Validate_currently_logged_in_user_is(string userName)"
        },
        "hasaccessto()": {
          "definition": "Has_access_to(string permission, BizFunc bizFunc)"
        },
        "allowonrole()": {
          "definition": "Allow__on_role__(string bizFuncDisplayName, string permission, string role)"
        },
        "grantallpermissionstorole()": {
          "definition": "Grant_all_permissions_to_role__(string roleName)"
        },
        "assignroletouser()": {
          "definition": "AssignRoleToUser(string roleName, string userName)"
        },
        "addtorole()": {
          "definition": "Add___to_role__(string bizFuncDisplayName, BizFuncPerms permission, string roleName)"
        },
        "createrolewithstatus()": {
          "definition": "Create_role_with_status(string roleName, string status)"
        },
        "verifypermittedorganizationsincludeonly()": {
          "definition": "Verify_permitted_organizations_include_only(string orgNameList)"
        },
        "disallowviewingofunemployedpeople()": {
          "definition": "Disallow_viewing_of_unemployed_people()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "PermissionUser"
    },
    "inquiryresponseemploymentselectionlist": {
      "namespace": "",
      "methods": {
        "verifyemploymentisprimary()": {
          "definition": "Verify_employment__is_primary(string employmentOrgName)"
        },
        "verifyemploymentisindicatedasdeleted()": {
          "definition": "Verify_employment__is_indicated_as_deleted(string employmentOrgName)"
        },
        "verifyemploymentisnotselected()": {
          "definition": "Verify_employment__is_not_selected(string employmentOrgName)"
        },
        "verifyemploymentisselected()": {
          "definition": "Verify_employment__is_selected(string employmentOrgName)"
        },
        "verifyemploymenthastitleof()": {
          "definition": "Verify_employment__has_title_of__(string employmentOrgName, string titleName)"
        },
        "bindrepeater()": {
          "definition": "BindRepeater(List<EmploymentDTO> empDTOs)"
        },
        "verifyemploymenthashiredateof()": {
          "definition": "Verify_employment__has_hire_date_of__(string employmentOrgName, string hireDate)"
        },
        "verifythereareemploymentrecords()": {
          "definition": "Verify_there_are__employment_records(int numRecs)"
        },
        "verifyemploymentisnotindicatedasdeleted()": {
          "definition": "Verify_employment__is_not_indicated_as_deleted(string employmentOrgName)"
        },
        "selectemploymentforfulfillment()": {
          "definition": "Select_employment__for_fulfillment(string employmentOrgName)"
        },
        "verifyemploymenthasstatusof()": {
          "definition": "Verify_employment__has_status_of__(string employmentOrgName, string statusName)"
        },
        "initializecontrol()": {
          "definition": "InitializeControl()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "InquiryResponseEmploymentSelectionListWorkflow"
    },
    "housingresidentshortcuts": {
      "namespace": "",
      "methods": {
        "changeresidenthousingtypeto()": {
          "definition": "Change_resident_housing_type_to(string personName, string type)"
        },
        "verifynameis()": {
          "definition": "Verify_name_is__(string value)"
        },
        "verifyresidenthasassignedpricelevelwithpricesnapshotat()": {
          "definition": "Verify_resident_has_assigned_price_level__with_price_snapshot_at(string personName, string priceLevel, decimal price)"
        },
        "verifyaddressstreet2is()": {
          "definition": "Verify_address_street2_is__(string value)"
        },
        "changeactualcheckindateforto()": {
          "definition": "Change_actual_checkin_date_for__to__(string personName, DateTime checkInDate)"
        },
        "verifygenderis()": {
          "definition": "Verify_gender_is__(string value)"
        },
        "assigntoroominforclass()": {
          "definition": "Assign__to_room__in__for_class__(string personName, string roomName, string buildingName, string floorName, string className)"
        },
        "verifybillingpartyis()": {
          "definition": "Verify_billing_party_is__(string value)"
        },
        "verifyphoneextensionis()": {
          "definition": "Verify_phone_extension_is__(string value)"
        },
        "verifybillingorganizationis()": {
          "definition": "Verify_billing_organization_is__(string value)"
        },
        "verifyresidentisunassigned()": {
          "definition": "Verify_resident__is_unassigned(string personName)"
        },
        "verifyphonetypeis()": {
          "definition": "Verify_phone_type_is__(string value)"
        },
        "verifyphonenumberis()": {
          "definition": "Verify_phone_number_is__(string value)"
        },
        "verifyexpectedcheckindateis()": {
          "definition": "Verify_expected_checkin_date_is__(DateTime value)"
        },
        "verifyspecialinstructionsare()": {
          "definition": "Verify_special_instructions_are__(string value)"
        },
        "verifyaddressstreet1is()": {
          "definition": "Verify_address_street1_is__(string value)"
        },
        "changeresidentgenderto()": {
          "definition": "Change_resident_gender_to(string personName, string gender)"
        },
        "verifyaddresszipis()": {
          "definition": "Verify_address_zip_is__(string value)"
        },
        "verifyresidentisassignedtoroom()": {
          "definition": "Verify_resident__is_assigned_to_room__(string personName, string roomName)"
        },
        "verifyresidentanaddress()": {
          "definition": "Verify_resident__an_address(string hasDoesNotHave)"
        },
        "verifyrequestedusagetypeis()": {
          "definition": "Verify_requested_usage_type_is__(string value)"
        },
        "verifyresidentischeckedintoroomwithusage()": {
          "definition": "Verify_resident__is_checked_in_to_room__with_usage__(string personName, string roomName, string usage)"
        },
        "checkintoassignedhousingon()": {
          "definition": "Check__in_to_assigned_housing_on__(string personName, DateTime checkInDate)"
        },
        "verifystatusis()": {
          "definition": "Verify_status_is__(HousingStatus value)"
        },
        "verifytitleis()": {
          "definition": "Verify_title_is__(string value)"
        },
        "verifybillinggrantis()": {
          "definition": "Verify_billing_grant_is__(string value)"
        },
        "changeresidentreservationto()": {
          "definition": "Change_resident_reservation_to(string personName, string res)"
        },
        "verifyexpectedcheckoutdateis()": {
          "definition": "Verify_expected_checkout_date_is__(DateTime value)"
        },
        "verifyaddresscityis()": {
          "definition": "Verify_address_city_is__(string value)"
        },
        "checkoutofassignedhousingon()": {
          "definition": "Check__out_of_assigned_housing_on__(string personName, DateTime checkOutDate)"
        },
        "verifypurposeis()": {
          "definition": "Verify_purpose_is__(string value)"
        },
        "verifypriceatrequesttimeis()": {
          "definition": "Verify_price_at_request_time_is__(string value)"
        },
        "verifybillingcategoryis()": {
          "definition": "Verify_billing_category_is__(string value)"
        },
        "verifyspecialaccomodationsare()": {
          "definition": "Verify_special_accomodations_are__(string value)"
        },
        "assigntoroomin()": {
          "definition": "Assign__to_room__in____(string personName, string roomName, string buildingName, string floorName)"
        },
        "verifyaddressstateis()": {
          "definition": "Verify_address_state_is__(string value)"
        },
        "verifyastudent()": {
          "definition": "Verify__a_student(string isIsNot)"
        },
        "verifyrequestedpricelevelis()": {
          "definition": "Verify_requested_price_level_is__(string value)"
        },
        "verifyemailis()": {
          "definition": "Verify_email_is__(string value)"
        },
        "considerresidentinevent()": {
          "definition": "Consider_resident__in_event__(string residentName, string eventName)"
        },
        "verifycommentsare()": {
          "definition": "Verify_comments_are__(string value)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "HousingResidentShortcuts"
    },
    "reservationmanagement": {
      "namespace": "",
      "methods": {
        "addacademyreservationnamedforstartingendingforstudents()": {
          "definition": "Add_Academy_Reservation_named_for_starting_ending_for_students( string resName, string className, DateTime start, DateTime end, int howManyStudents )"
        }
      },
      "parent-name": null,
      "class-name": "ReservationManagement"
    },
    "classdescriptivefields": {
      "namespace": "",
      "methods": {
        "browsetopageforclass()": {
          "definition": "Browse_to_Page_for_class(string className)"
        },
        "browsetocontrolforclasstemplate()": {
          "definition": "Browse_to_control_for_class_template__(string templateName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ClassDescriptiveFieldsWorkflow"
    },
    "classperformancereports": {
      "namespace": "",
      "methods": {
        "browsetoclassperformancereportsfor()": {
          "definition": "Browse_to_Class_Performance_Reports_for(string className)"
        },
        "verifyperformancereportisavailableforassignment()": {
          "definition": "verify_performance_report__is_available_for_assignment(string performanceReportName)"
        },
        "verifypagetitleis()": {
          "definition": "verify_page_title_is_(string pageTitle)"
        },
        "verifyperformancereportdoesnotrequireadditionalinformation()": {
          "definition": "Verify_performance_report__does_not_require_additional_information(string performanceReportName)"
        },
        "verifyperformancereportisassigned()": {
          "definition": "verify_performance_report__is_assigned(string performanceReportName)"
        },
        "verifyperformancereportisnotavailableforassignment()": {
          "definition": "verify_performance_report__is_not_available_for_assignment(string performanceReportName)"
        },
        "assignperformancereporttoclass()": {
          "definition": "assign_performance_report__to_class(string performanceReportName)"
        },
        "verifyperformancereportisnotassigned()": {
          "definition": "verify_performance_report__is_not_assigned(string performanceReportName)"
        },
        "verifyperformancereportrequiresadditionalinformation()": {
          "definition": "Verify_performance_report__requires_additional_information(string performanceReportName)"
        },
        "unassignperformancereportfromclass()": {
          "definition": "unassign_performance_report__from_class(string performanceReportName)"
        },
        "saveorupdate()": {
          "definition": "save_or_update()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ClassPerformanceReports"
    },
    "roomusagegrid": {
      "namespace": "",
      "methods": {
        "unchecksecondaryusageforallrooms()": {
          "definition": "Uncheck_secondary_usage__for_all_rooms(string usageName)"
        },
        "setusages()": {
          "definition": "SetUsages(IList<UsageDTO> usages)"
        },
        "checksecondaryusageforroom()": {
          "definition": "Check_secondary_usage__for_room__(string usageName, string roomName)"
        },
        "selectprimaryusageforroom()": {
          "definition": "Select_primary_usage__for_room__(string usageName, string roomName)"
        },
        "uncheckallsecondaryusagesforallrooms()": {
          "definition": "Uncheck_all_secondary_usages_for_all_rooms()"
        },
        "roomhasnosecondaryusages()": {
          "definition": "Room__has_no_secondary_usages(string roomName)"
        },
        "selectprimaryusageforallrooms()": {
          "definition": "Select_primary_usage__for_all_rooms(string usageName)"
        },
        "checksecondaryusageforallrooms()": {
          "definition": "Check_secondary_usage__for_all_rooms(string usageName)"
        },
        "unselectprimaryusageforroom()": {
          "definition": "Unselect_primary_usage_for_room__(string roomName)"
        },
        "bindrooms()": {
          "definition": "BindRooms(IList<RoomUsagesDTO> roomDTOs)"
        },
        "roomhasnoprimaryusage()": {
          "definition": "Room__has_no_primary_usage(string roomName)"
        },
        "roomhassecondaryusage()": {
          "definition": "Room_has_secondary_usage__(string roomName, string usageName)"
        },
        "checkallsecondaryusagesforroom()": {
          "definition": "Check_all_secondary_usages_for_room__(string roomName)"
        },
        "unselectprimaryusageforallrooms()": {
          "definition": "Unselect_primary_usage_for_all_rooms()"
        },
        "uncheckallsecondaryusagesforroom()": {
          "definition": "Uncheck_all_secondary_usages_for_room__(string roomName)"
        },
        "checkallsecondaryusagesforallrooms()": {
          "definition": "Check_all_secondary_usages_for_all_rooms()"
        },
        "roomhasprimaryusage()": {
          "definition": "Room__has_primary_usage__(string roomName, string usageName)"
        },
        "clicksave()": {
          "definition": "Click_save()"
        },
        "unchecksecondaryusageforroom()": {
          "definition": "Uncheck_secondary_usage__for_room__(string usageName, string roomName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "RoomUsageGridWorkflow"
    },
    "expectedcheckinlist": {
      "namespace": "",
      "methods": {
        "checkinon()": {
          "definition": "Check_in__on__(string residentName, DateTime checkInDate)"
        },
        "verifyassignedusageis()": {
          "definition": "Verify_Assigned_Usage_is__(string usage)"
        },
        "verifyroomis()": {
          "definition": "Verify_Room_is__(string room)"
        },
        "verifyresidentoverdue()": {
          "definition": "Verify_resident__overdue(string isIsNotStr)"
        },
        "checkinallresidentson()": {
          "definition": "Check_in_all_residents_on__(DateTime checkInDate)"
        },
        "navigateback()": {
          "definition": "NavigateBack()"
        },
        "verifyusernavigatedaway()": {
          "definition": "Verify_user__navigated_away(string hasHasNotStr)"
        },
        "checkinallresidentsontheirexpectedcheckindates()": {
          "definition": "Check_in_all_residents_on_their_expected_check_in_dates()"
        },
        "browsetopageforreservationofevent()": {
          "definition": "Browse_to_page_for_reservation_of_event__(string eventName)"
        },
        "verifyresidentanonstudent()": {
          "definition": "Verify_resident__a_non_student(string isIsNotStr)"
        },
        "verifygenderis()": {
          "definition": "Verify_Gender_is__(string gender)"
        },
        "verifyrequestedusageis()": {
          "definition": "Verify_Requested_Usage_is__(string usage)"
        },
        "bindexpectedresidents()": {
          "definition": "BindExpectedResidents(IList<ExpectedCheckInResidentDTO> residents)"
        },
        "browsetopageforreservationofclass()": {
          "definition": "Browse_to_page_for_reservation_of_class__(string className)"
        },
        "verifynightsis()": {
          "definition": "Verify_Nights_is__(int nights)"
        },
        "verifylistdoesnotinclude()": {
          "definition": "Verify_list_does_not_include__(string residentName)"
        },
        "verifylistincludes()": {
          "definition": "Verify_list_includes__(string residentName)"
        },
        "considerrowfor()": {
          "definition": "Consider_row_for__(string residentName)"
        },
        "verifyrequestedusagedisplayed()": {
          "definition": "Verify_Requested_Usage__displayed(string isIsNotStr)"
        },
        "verifyexpectedcheckinis()": {
          "definition": "Verify_Expected_Check_in_is(string expectedCheckInDateStr)"
        },
        "checkinontheirexpectedcheckindate()": {
          "definition": "Check_in__on_their_expected_check_in_date(string residentName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ExpectedCheckInListWorkflow"
    },
    "testopiaobjectbuilder": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "TestopiaObjectBuilder"
    },
    "retrieveacademyid": {
      "namespace": "",
      "methods": {
        "showunabletosendmessage()": {
          "definition": "ShowUnableToSendMessage()"
        },
        "shownomatchmessage()": {
          "definition": "ShowNoMatchMessage()"
        },
        "verifysuccessmessageshown()": {
          "definition": "Verify_success_message_shown()"
        },
        "verifynomatchmessageshown()": {
          "definition": "Verify_no_match_message_shown()"
        },
        "showsuccessmessage()": {
          "definition": "ShowSuccessMessage()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "RetrieveAcademyIDWorkflow"
    },
    "printcertificatepreferences": {
      "namespace": "",
      "methods": {
        "selectcertification()": {
          "definition": "Select_certification__(string certName)"
        },
        "selectunprintedcertifications()": {
          "definition": "Select_unprinted_certifications()"
        },
        "openprintwindow()": {
          "definition": "OpenPrintWindow(CertificateIdsAndAddressType criteria, bool isPortal, bool forceHtml)"
        },
        "verifycertificationinformationisvisible()": {
          "definition": "Verify_certification_information_is_visible()"
        },
        "verifyreportopensinhtmlview()": {
          "definition": "Verify_report_opens_in_html_view()"
        },
        "verifynodaterangeentered()": {
          "definition": "Verify_no_date_range_entered()"
        },
        "setdaterangetoand()": {
          "definition": "Set_date_range_to__and__(DateTime start, DateTime end)"
        },
        "clickprint()": {
          "definition": "Click_Print()"
        },
        "verifyreportprintwindowisvisible()": {
          "definition": "Verify_report_print_window_is_visible()"
        },
        "uncheckrenewedcertifications()": {
          "definition": "Uncheck_Renewed_certifications()"
        },
        "selectmailingaddressof()": {
          "definition": "Select_mailing_address_of(string addressType)"
        },
        "showparameterspopup()": {
          "definition": "ShowParametersPopup()"
        },
        "selectrecipienttype()": {
          "definition": "Select_recipient_type__(string recipientType)"
        },
        "verifydaterangeisto()": {
          "definition": "Verify_date_range_is__to__(DateTime start, DateTime end)"
        },
        "verifymailingaddressselectionisnotvisible()": {
          "definition": "Verify_mailing_address_selection_is_not_visible()"
        },
        "verifyrenewedcertificationsischecked()": {
          "definition": "Verify_renewed_certifications_is_checked()"
        },
        "verifyunprintedcertificationsisselected()": {
          "definition": "Verify_unprinted_certifications_is_selected()"
        },
        "verifycertificatescreated()": {
          "definition": "Verify__certificates_created(int numCreated)"
        },
        "checkissuedcertifications()": {
          "definition": "Check_Issued_certifications()"
        },
        "checkrenewedcertifications()": {
          "definition": "Check_Renewed_certifications()"
        },
        "uncheckissuedcertifications()": {
          "definition": "Uncheck_Issued_certifications()"
        },
        "verifyacertficatereportwascreatedforwithissuedateandmailingaddressof()": {
          "definition": "Verify_a__certficate_report_was_created_for__with_issue_date__and_mailing_address_of__(string certName, string printedRecipientName, DateTime issueDate, string printedAddr)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifymailingaddressselectionisvisible()": {
          "definition": "Verify_mailing_address_selection_is_visible()"
        },
        "verifyprintcertificateparameterswindowisvisible()": {
          "definition": "Verify_print_certificate_parameters_window_is_visible()"
        },
        "verifyissuedcertificationsischecked()": {
          "definition": "Verify_issued_certifications_is_checked()"
        },
        "browsetoreportsdashboardandclickprintcertifications()": {
          "definition": "Browse_to_reports_dashboard_and_click_Print_Certifications()"
        },
        "verifynoselectedcertification()": {
          "definition": "Verify_no_selected_certification()"
        },
        "selectprintedcertifications()": {
          "definition": "Select_printed_certifications()"
        },
        "closereportwindowandindicatereportwasnotprinted()": {
          "definition": "Close_report_window_and_indicate_report_was_not_printed()"
        },
        "verifythecertificatereportforusedtheprinttemplate()": {
          "definition": "Verify_the_certificate_report__for__used_the__print_template(string certName, string recipientName, string printTemplateName)"
        },
        "verifyrecipienttypeis()": {
          "definition": "Verify_recipient_type_is__(string recipientType)"
        },
        "closereportwindowandindicatereportwasprinted()": {
          "definition": "Close_report_window_and_indicate_report_was_printed()"
        },
        "show()": {
          "definition": "Show()"
        },
        "verifyselectedmailingaddressis()": {
          "definition": "Verify_selected_mailing_address_is__(string addressType)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PrintCertificatePreferences"
    },
    "animallist": {
      "namespace": "",
      "methods": {
        "verifyanimalnamedisassignedto()": {
          "definition": "Verify_animal_named_is_assigned_to( string itemName, string assigneeName )"
        },
        "verifyanimalnamedislistedasstolen()": {
          "definition": "Verify_animal_named__is_listed_as_stolen( string itemName )"
        },
        "bindanimallist()": {
          "definition": "BindAnimalList(IEnumerable<AnimalListItemDto> items)"
        },
        "verifyinisunchecked()": {
          "definition": "Verify__in__is_unchecked( string itemName, string groupName )"
        },
        "verifyanimallistcontainsitems()": {
          "definition": "Verify_animal_list_contains__items(int count)"
        },
        "checkin()": {
          "definition": "Check__in_( string itemName, string groupName )"
        },
        "showfilters()": {
          "definition": "Show_Filters()"
        },
        "browsetoanimallistfororganization()": {
          "definition": "Browse_to_Animal_List_for_Organization__(string organizationName)"
        },
        "verifyinischecked()": {
          "definition": "Verify__in__is_checked( string itemName, string groupName )"
        },
        "uncheckin()": {
          "definition": "Uncheck__in_( string itemName, string groupName )"
        },
        "verifyanimalnamedislistedaslost()": {
          "definition": "Verify_animal_named__is_listed_as_lost( string itemName )"
        },
        "savefilters()": {
          "definition": "Save_filters()"
        },
        "selectexpiredinthelastdays()": {
          "definition": "Select_expired_in_the_last__days( string days )"
        },
        "verifylistcontainsannamedwithbrandnumber()": {
          "definition": "Verify_list_contains_an______named__with_Brand_Number__(string status, string breed, string type, string name, string brand)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AnimalList"
    },
    "certapplicationapproval": {
      "namespace": "",
      "methods": {
        "setapplicationdateto()": {
          "definition": "Set_application_date_to__(DateTime effectiveDt)"
        },
        "clickreturntoapplicationfromstatuschangeconfirmation()": {
          "definition": "Click_return_to_application_from_status_change_confirmation()"
        },
        "setothercertificationnumberto()": {
          "definition": "Set_other_certification_number_to__(string otherNum)"
        },
        "verifymarkforprintingisnotavailable()": {
          "definition": "Verify_mark_for_printing_is_not_available()"
        },
        "verifycurrentstatusis()": {
          "definition": "Verify_current_status_is__(string statusName)"
        },
        "setstatusto()": {
          "definition": "Set_status_to__(string statusName)"
        },
        "verifythereisnoothercertificationnumber()": {
          "definition": "Verify_there_is_no_other_certification_number()"
        },
        "verifycurrentexpirationis()": {
          "definition": "Verify_current_expiration_is__(DateTime expDate)"
        },
        "approvalcomplete()": {
          "definition": "ApprovalComplete()"
        },
        "verifycertificationis()": {
          "definition": "Verify_certification_is_(string certName)"
        },
        "clicksaveasexpiredinstatuschangeconfirmation()": {
          "definition": "Click_save_as_expired_in_status_change_confirmation()"
        },
        "approvalcancelled()": {
          "definition": "ApprovalCancelled()"
        },
        "verifystatuschangeconfirmationisvisible()": {
          "definition": "Verify_status_change_confirmation_is_visible()"
        },
        "clickcontinue()": {
          "definition": "Click_Continue()"
        },
        "verifyeffectivedateis()": {
          "definition": "Verify_effective_date_is__(DateTime effDate)"
        },
        "clickcancel()": {
          "definition": "Click_cancel()"
        },
        "initializeexpirationsynccontrol()": {
          "definition": "InitializeExpirationSyncControl(int recipientID, int? issuedCertificationID)"
        },
        "verifyexpirationsyncisnotavailable()": {
          "definition": "Verify_expiration_sync_is_not_available()"
        },
        "verifymarkforprintingisavailable()": {
          "definition": "Verify_mark_for_printing_is_available()"
        },
        "showapprovaldialog()": {
          "definition": "ShowApprovalDialog()"
        },
        "verifyeffectivedatelabelis()": {
          "definition": "Verify_effective_date_label_is__(string effDtLbl)"
        },
        "seteffectivedateto()": {
          "definition": "Set_effective_date_to__(DateTime effectiveDt)"
        },
        "verifyapprovalinformationpopoverisnotvisible()": {
          "definition": "Verify_approval_information_popover_is_not_visible()"
        },
        "verifyexpirationdateisneverexpires()": {
          "definition": "Verify_expiration_date_is_Never_Expires()"
        },
        "verifystatusis()": {
          "definition": "Verify_status_is__(string statusName)"
        },
        "verifyothercertificationnumberis()": {
          "definition": "Verify_other_certification_number_is__(string otherNum)"
        },
        "setexpirationdateto()": {
          "definition": "Set_expiration_date_to__(DateTime effectiveDt)"
        },
        "verifyapplicationdateis()": {
          "definition": "Verify_application_date_is__(DateTime applicationDate)"
        },
        "showstatusconfirmation()": {
          "definition": "ShowStatusConfirmation()"
        },
        "verifyexpirationdateis()": {
          "definition": "Verify_expiration_date_is__(DateTime expectedNewExpDt)"
        },
        "verifyapprovalinformationpopoverisvisible()": {
          "definition": "Verify_approval_information_popover_is_visible()"
        },
        "verifyexpirationsyncisavailable()": {
          "definition": "Verify_expiration_sync_is_available()"
        },
        "verifyissuedateis()": {
          "definition": "Verify_issue_date_is__(DateTime issueDate)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "CertApplicationApproval"
    },
    "rejectedtrainingmonitor": {
      "namespace": "",
      "methods": {
        "selectfiscalyearbutton()": {
          "definition": "SelectFiscalYearButton()"
        },
        "bindclasses()": {
          "definition": "BindClasses( IEnumerable<RejectedClassDTO> classes )"
        },
        "verifytraininghoursequal()": {
          "definition": "Verify_training_hours_equal_( double trainingHours )"
        },
        "verifycustomstartdateis()": {
          "definition": "Verify_custom_start_date_is_(string theDate)"
        },
        "verifyenddateis()": {
          "definition": "Verify_end_date_is_( string endDate )"
        },
        "verifyclassnameddoesnotshowinlist()": {
          "definition": "Verify_class_named__does_not_show_in_list(string className)"
        },
        "setfiscaltimeframetocurrentyear()": {
          "definition": "Set_fiscal_timeframe_to_current_year()"
        },
        "verifycustomenddateis()": {
          "definition": "Verify_custom_end_date_is_(string theDate)"
        },
        "addfiscalenditem()": {
          "definition": "AddFiscalEndItem(string text, string value)"
        },
        "verifyclassnamedshowsinlist()": {
          "definition": "Verify_class_named__shows_in_list(string className)"
        },
        "updatesorticons()": {
          "definition": "UpdateSortIcons()"
        },
        "setfiscalstartyearto()": {
          "definition": "Set_fiscal_start_year_to(int startDate)"
        },
        "verifynoclasseslistedasrejectedtraining()": {
          "definition": "Verify_no_classes_listed_as_Rejected_training()"
        },
        "setcustomenddateto()": {
          "definition": "Set_custom_end_date_to_(string endDate)"
        },
        "clearacademyselections()": {
          "definition": "Clear_Academy_Selections()"
        },
        "setupprogramtree()": {
          "definition": "SetupProgramTree(SortedDictionary<string, Tuple<ProgramCategoryDTO, ProgramTypeDTO>> sortedProgramTypeHashtable)"
        },
        "verifystartdateis()": {
          "definition": "Verify_start_date_is_( string startDate )"
        },
        "verifyfiscalenddateis()": {
          "definition": "Verify_fiscal_end_date_is(string endDate)"
        },
        "selectacademy()": {
          "definition": "Select_Academy_(string academyName)"
        },
        "selectcustomtimeframebutton()": {
          "definition": "Select_Custom_Timeframe_Button()"
        },
        "setfiscalendyearto()": {
          "definition": "Set_fiscal_end_year_to(int endDate)"
        },
        "verifyrejectionreasonis()": {
          "definition": "Verify_Rejection_Reason_is( string rejectionReason )"
        },
        "verifyfiscalstartdateis()": {
          "definition": "Verify_fiscal_start_date_is(string startDate)"
        },
        "sortby()": {
          "definition": "Sort_by_(RejectedTrainingMonitorSortColumns sortColumn)"
        },
        "clearallfilterselections()": {
          "definition": "Clear_all_filter_selections()"
        },
        "applyfilters()": {
          "definition": "Apply_Filters()"
        },
        "usingclass()": {
          "definition": "Using_class_( string className )"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifyclasseslistedasrejectedtraining()": {
          "definition": "Verify__classes_listed_as_Rejected_training(int numClasses)"
        },
        "updateprogramslabel()": {
          "definition": "UpdateProgramsLabel(bool isAllPrograms)"
        },
        "setcustomstartdateto()": {
          "definition": "Set_custom_start_date_to_(string startDate)"
        },
        "addfiscalstartitem()": {
          "definition": "AddFiscalStartItem(string text, string value)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "RejectedTrainingMonitor"
    },
    "billtoparty": {
      "namespace": "",
      "methods": {
        "selectforgrant()": {
          "definition": "Select__for_Grant(string grantName)"
        },
        "enterforotherorganizationtypeahead()": {
          "definition": "Enter__for_Other_Organization_typeahead(string searchText)"
        },
        "dispose()": {
          "definition": "Dispose()"
        },
        "selectforbilltoparty()": {
          "definition": "Select__for_Bill_to_Party(string billToPartyName)"
        },
        "selectforotherorganization()": {
          "definition": "Select__for_Other_Organization(string organizationName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "BillToPartyWorkflow"
    },
    "certificationverification": {
      "namespace": "",
      "methods": {
        "verifyforhasexpirationfromtoday()": {
          "definition": "Verify__for____has_expiration____from_today(string certVersionName, string recipientType, string recipientName, int expireInterval, string expireTimeUnit)"
        },
        "verifycurrentversionofwillbaserenewalexpirationonrenewaldate()": {
          "definition": "Verify_current_version_of__will_base_renewal_expiration_on_renewal_date(string certMasterName)"
        },
        "verifyforhasexpirationoftoday()": {
          "definition": "Verify__for____has_expiration_of_today(string certVersionName, string recipientType, string recipientName)"
        },
        "verifyforhasanactionofwithastatusofnocommentsaneffectivedateoftodayandcontingentexpiration()": {
          "definition": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of_today_and_contingent_expiration(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus)"
        },
        "verifyforhasanactionofwithastatusofnocommentsaneffectivedateofandcontingentexpiration()": {
          "definition": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of__and_contingent_expiration(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, DateTime actionEffectiveDate)"
        },
        "verifyconferralrequirementoncannotbeeditedbecauseofreuse()": {
          "definition": "Verify__conferral_requirement__on__cannot_be_edited_because_of_reuse(CertRequirementContext requirementType, string requirementText, string certMasterName)"
        },
        "verifycurrentversionofhasprinttemplateof()": {
          "definition": "Verify_current_version_of__has_print_template_of__(string certMasterName, string tenplate)"
        },
        "verifycurrentversionofhasdisciplineof()": {
          "definition": "Verify_current_version_of__has_discipline_of__(string certMasterName, string discipline)"
        },
        "verifycurrentversionofwillbaserenewalexpirationoncurrentexpiration()": {
          "definition": "Verify_current_version_of__will_base_renewal_expiration_on_current_expiration(string certMasterName)"
        },
        "verifyforhasexpirationof()": {
          "definition": "Verify__for____has_expiration_of__(string certVersionName, string recipientType, string recipientName, DateTime expirationDate)"
        },
        "verifycurrentversionofhasbriefdescriptionof()": {
          "definition": "Verify_current_version_of__has_brief_description_of__(string masterName, string description)"
        },
        "verifyforhasanactionofwithastatusofnocommentsaneffectivedateofandnoexpirationdate()": {
          "definition": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of__and_no_expiration_date(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, DateTime actionEffectiveDate)"
        },
        "verifyforhasanactionofwithastatusofacommentofaneffectivedateoftodayandanexpirationdatefromtoday()": {
          "definition": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of_today_and_an_expiration_date____from_today(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment, int expireInterval, string expireTimeUnit)"
        },
        "verifycurrentversionofhasaffirmationtextof()": {
          "definition": "Verify_current_version_of__has_affirmation_text_of__(string certMasterName, string affirmationTxt)"
        },
        "verifythateveryoneingrouphascertautorenewedwithexpiration()": {
          "definition": "Verify_that_everyone_in_group_has_cert_autorenewed_with_expiration_(string groupName, string certVersionName, DateTime expirationDate)"
        },
        "verifyforhasanactionofwithastatusofnocommentsaneffectivedateoftodayandanexpirationdatefromtoday()": {
          "definition": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of_today_and_an_expiration_date____from_today(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, int expireInterval, string expireTimeUnit)"
        },
        "verifycurrentversionofhasauditnotificationtextof()": {
          "definition": "Verify_current_version_of__has_audit_notification_text_of__(string certMasterName, string auditNotifTxt)"
        },
        "verifyforhasanactionofwithastatusofacommentofaneffectivedateoftodayandanexpirationdateoftoday()": {
          "definition": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of_today_and_an_expiration_date_of_today(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment)"
        },
        "verifycurrentversionofhasrenewalrequirements()": {
          "definition": "Verify_current_version_of__has__renewal_requirements(string certMasterName, int numReqs)"
        },
        "verifycurrentversionofallowsinactiverenewals()": {
          "definition": "Verify_current_version_of__allows_inactive_renewals(string certMasterName)"
        },
        "verifycurrentversionofhasguidelinetextof()": {
          "definition": "Verify_current_version_of__has_guideline_text_of__(string certMasterName, string guidelineTxt)"
        },
        "verifycurrentversionofhasreferencenumberof()": {
          "definition": "Verify_current_version_of__has_reference_number_of__(string masterName, string referenceNumber)"
        },
        "verifyforhasissuedateof()": {
          "definition": "Verify__for____has_issue_date_of__(string certVersionName, string recipientType, string recipientName, DateTime issueDate)"
        },
        "verifyconferralrequirementoncanbeedited()": {
          "definition": "Verify__conferral_requirement__on__can_be_edited(CertRequirementContext requirementType, string requirementText, string certMasterName)"
        },
        "verifyforhasanactionofwithastatusofacommentofaneffectivedateoftodayplusandanexpirationdateof()": {
          "definition": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of_today_plus____and_an_expiration_date_of__(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment, int effDateInterval, string effDateTimeUnit, DateTime actionExpirationDate)"
        },
        "verifyforhasothercertificationidof()": {
          "definition": "Verify__for____has_other_certification_ID_of__(string certVersionName, string recipientType, string recipientName, string otherNumber)"
        },
        "verifyforhasanactionofwithastatusofnocommentsaneffectivedateoftodayplusandanexpirationdateof()": {
          "definition": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of_today_plus____and_an_expiration_date_of__(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, int effDateInterval, string effDateTimeUnit, DateTime actionExpirationDate)"
        },
        "verifycurrentversionofdoesnotallowinactiverenewals()": {
          "definition": "Verify_current_version_of__does_not_allow_inactive_renewals(string certMasterName)"
        },
        "verifyforhasanactionofwithastatusofnocommentsaneffectivedateoftodayandanexpirationdateof()": {
          "definition": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of_today_and_an_expiration_date_of__(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, DateTime actionExpirationDate)"
        },
        "verifydoesnothavesamerequirementsas()": {
          "definition": "Verify__does_not_have_same_requirements_as__(string certName1, string certName2)"
        },
        "verifycurrentversionofhasauditpercentageof()": {
          "definition": "Verify_current_version_of__has_audit_percentage_of__(string certMasterName, int percentage)"
        },
        "verifythatdoesnothavecertification()": {
          "definition": "Verify_that____does_not_have_certification(string recipientType, string recipientName, string certVersionName)"
        },
        "verifycurrentversionofisoftype()": {
          "definition": "Verify_current_version_of__is_of_type(string masterName, string type)"
        },
        "verifyforhasanactionofwithastatusofacommentofaneffectivedateoftodayplusandanexpirationdatefromtoday()": {
          "definition": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of_today_plus____and_an_expiration_date____from_today(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment, int effDateInterval, string effDateTimeUnit, int expireInterval, string expireTimeUnit)"
        },
        "verifythatnorecipienthascertification()": {
          "definition": "Verify_that_no_recipient_has_certification__(string certVersionName)"
        },
        "verifyforhasactions()": {
          "definition": "Verify__for____has__actions(string certVersionName, string recipientType, string recipientName, int numActions)"
        },
        "verifyforhasnotbeenprinted()": {
          "definition": "Verify__for____has_not_been_printed(string certVersionName, string recipientType, string recipientName)"
        },
        "verifyforhasanactionofwithastatusofnocommentsaneffectivedateoftodayandnoexpirationdate()": {
          "definition": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of_today_and_no_expiration_date(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus)"
        },
        "verifyforhasanactionofwithastatusofacommentofaneffectivedateofandanexpirationdateof()": {
          "definition": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of__and_an_expiration_date_of__(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment, DateTime actionEffectiveDate, DateTime actionExpirationDate)"
        },
        "verifyhassamerequirementsas()": {
          "definition": "Verify__has_same_requirements_as__(string certName1, string certName2)"
        },
        "verifycurrentversionofhasnoowner()": {
          "definition": "Verify_current_version_of__has_no_owner(string certMasterName)"
        },
        "verifyforhasanactionofwithastatusofacommentofaneffectivedateofandcontingentexpiration()": {
          "definition": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of__and_contingent_expiration(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment, DateTime actionEffectiveDate)"
        },
        "verifycurrentversionofhasguidelinesof()": {
          "definition": "Verify_current_version_of__has_guidelines_of__(string masterName, string guideline)"
        },
        "verifyforhasanactionofwithastatusofacommentofaneffectivedateofandnoexpirationdate()": {
          "definition": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of__and_no_expiration_date(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment, DateTime actionEffectiveDate)"
        },
        "verifyforhasadeletedactionofwithastatusofacommentofaneffectivedateofandanexpirationdateof()": {
          "definition": "Verify__for____has_a_deleted_action_of__with_a_status_of__a_comment_of__an_effective_date_of__and_an_expiration_date_of__(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment, DateTime actionEffectiveDate, DateTime actionExpirationDate)"
        },
        "verifycurrentversionofportalrenewalrequiresrequirementfulfillment()": {
          "definition": "Verify_current_version_of__portal_renewal_requires_requirement_fulfillment(string certMasterName)"
        },
        "verifycurrentversionofportalrenewalrequiresrequirementaffirmationonly()": {
          "definition": "Verify_current_version_of__portal_renewal_requires_requirement_affirmation_only(string certMasterName)"
        },
        "verifycurrentversionofdoesnotexpire()": {
          "definition": "Verify_current_version_of__does_not_expire(string masterName)"
        },
        "verifyforhasanactionofwithastatusofnocommentsaneffectivedateofandanexpirationdateof()": {
          "definition": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of__and_an_expiration_date_of__(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, DateTime actionEffectiveDate, DateTime actionExpirationDate)"
        },
        "verifyforhasanactionofwithastatusofacommentofaneffectivedateofandanexpirationdatefromtoday()": {
          "definition": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of__and_an_expiration_date____from_today(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment, DateTime actionEffectiveDate, int expireInterval, string expireTimeUnit)"
        },
        "verifyforhasnoexpiration()": {
          "definition": "Verify__for____has_no_expiration(string certVersionName, string recipientType, string recipientName)"
        },
        "verifyforhasissuedateoftodayplus()": {
          "definition": "Verify__for____has_issue_date_of_today_plus____(string certVersionName, string recipientType, string recipientName, int interval, string timeUnit)"
        },
        "verifyforhasanactionofwithastatusofnocommentsaneffectivedateoftodayplusandanexpirationdatefromtoday()": {
          "definition": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of_today_plus____and_an_expiration_date____from_today(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, int effDateInterval, string effDateTimeUnit, int expireInterval, string expireTimeUnit)"
        },
        "verifyforhasadeletedactionofwithastatusofacommentofaneffectivedateofandnoexpirationdate()": {
          "definition": "Verify__for____has_a_deleted_action_of__with_a_status_of__a_comment_of__an_effective_date_of__and_no_expiration_date(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment, DateTime actionEffectiveDate)"
        },
        "verifythereareversionsof()": {
          "definition": "Verify_there_are__versions_of_(int expectedNumber, string masterName)"
        },
        "verifycurrentversionofhasnoprinttemplate()": {
          "definition": "Verify_current_version_of__has_no_print_template(string certMasterName)"
        },
        "verifycurrentversionofexpiresevery()": {
          "definition": "Verify_current_version_of__expires_every____(string masterName, int expireInterval, string expireType)"
        },
        "verifycurrentversionofhasownerof()": {
          "definition": "Verify_current_version_of__has_owner_of__(string certMasterName, string ownerName)"
        },
        "verifythathascertificationwithstatus()": {
          "definition": "Verify_that____has_certification__with_status(string recipientType, string recipientName, string certVersionName, string statusName)"
        },
        "verifyforhasanactionofwithastatusofnocommentsaneffectivedateoftodayplusandanexpirationdateoftoday()": {
          "definition": "Verify__for____has_an_action_of__with_a_status_of__no_comments_an_effective_date_of_today_plus____and_an_expiration_date_of_today(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, int effDateInterval, string effDateTimeUnit)"
        },
        "verifyforhasanactionofwithastatusofacommentofaneffectivedateoftodayandanexpirationdateof()": {
          "definition": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of_today_and_an_expiration_date_of__(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment, DateTime actionExpirationDate)"
        },
        "verifythathascertificationapplicationfor()": {
          "definition": "Verify_that____has__certification_application_for__(string recipientType, string recipientName, string statusName, string certVersionName)"
        },
        "verifyforhasanactionofwithastatusofacommentofaneffectivedateoftodayandnoexpirationdate()": {
          "definition": "Verify__for____has_an_action_of__with_a_status_of__a_comment_of__an_effective_date_of_today_and_no_expiration_date(string certVersionName, string recipientType, string recipientName, string actionRecordType, string actionStatus, string actionComment)"
        },
        "verifyforhasissuedateoftoday()": {
          "definition": "Verify__for____has_issue_date_of_today(string certVersionName, string recipientType, string recipientName)"
        },
        "verifyitemonhasnoguidelines()": {
          "definition": "Verify__item__on__has_no_guidelines(CertRequirementContext requirementType, string requirementText, string certMasterName)"
        },
        "verifyforhasnoothercertificationid()": {
          "definition": "Verify__for____has_no_other_certification_ID(string certVersionName, string recipientType, string recipientName)"
        },
        "verifycurrentversionofhasconferralrequirements()": {
          "definition": "Verify_current_version_of__has__conferral_requirements(string certMasterName, int numReqs)"
        },
        "verifycurrentversionofactive()": {
          "definition": "Verify_current_version_of____active(string masterName, string isIsNot)"
        },
        "verifyforhascontingentexpiration()": {
          "definition": "Verify__for____has_contingent_expiration(string certVersionName, string recipientType, string recipientName)"
        },
        "verifyitemonhasguidelines()": {
          "definition": "Verify__item__on__has_guidelines(CertRequirementContext requirementType, string requirementText, string certMasterName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "CertificationVerification"
    },
    "personinventorylist": {
      "namespace": "",
      "methods": {
        "verifyusernavigatedtoanimal()": {
          "definition": "Verify_user_navigated_to_animal()"
        },
        "findrowwithidentifyingnumber()": {
          "definition": "Find_row_with_identifying_number__(string idNumber)"
        },
        "verifyresourceis()": {
          "definition": "Verify_resource_is__(string resource)"
        },
        "verifyusernavigatedtovehicle()": {
          "definition": "Verify_user_navigated_to_vehicle()"
        },
        "browsetoinventorylistforperson()": {
          "definition": "Browse_to_inventory_list_for_person__(string personName)"
        },
        "verifyusernavigatedtofirearm()": {
          "definition": "Verify_user_navigated_to_firearm()"
        },
        "verifyidentifyingnumberis()": {
          "definition": "Verify_identifying_number_is__(string idNumber)"
        },
        "verifydetailsare()": {
          "definition": "Verify_details_are__(string details)"
        },
        "navigatetofirearm()": {
          "definition": "NavigateToFirearm(int itemID)"
        },
        "verifylistcontainsitems()": {
          "definition": "Verify_list_contains__items(int numItems)"
        },
        "navigatetovehicle()": {
          "definition": "NavigateToVehicle(int itemID)"
        },
        "verifyusernavigatedtoaccountableproperty()": {
          "definition": "Verify_user_navigated_to_accountable_property()"
        },
        "navigatetoaccountableproperty()": {
          "definition": "NavigateToAccountableProperty(int itemID)"
        },
        "verifytypeis()": {
          "definition": "Verify_type_is__(string type)"
        },
        "verifyviewlinkisvisible()": {
          "definition": "Verify_view_link_is_visible()"
        },
        "clickviewlinkwithidentifyingnumber()": {
          "definition": "Click_view_link_with_identifying_number__(string id)"
        },
        "bindinventoryitems()": {
          "definition": "BindInventoryItems(IEnumerable<PersonInventoryItemDTO> items)"
        },
        "navigatetoanimal()": {
          "definition": "NavigateToAnimal(int itemID)"
        },
        "verifyviewlinkishidden()": {
          "definition": "Verify_view_link_is_hidden()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PersonInventoryListWorkflow"
    },
    "documentstorage": {
      "namespace": "",
      "methods": {
        "changedefaultdocumentstorageproviderto()": {
          "definition": "Change_default_document_storage_provider_to__(DocumentStorageProviderType providerType)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "DocumentStorageWorkflow"
    },
    "classcertsselection": {
      "namespace": "",
      "methods": {
        "verifyiseligibletoreceivewithreason()": {
          "definition": "Verify__is_eligible_to_receive__with_reason__(string studentName, string certName, string reason)"
        },
        "selectforcertification()": {
          "definition": "Select__for_certification__(string personName, string certName)"
        },
        "browsetocertselectionforclassandcertification()": {
          "definition": "Browse_to_cert_selection_for_class__and_certification__(string className, string certName)"
        },
        "verifytherearestudentsshown()": {
          "definition": "Verify_there_are__students_shown(int numStudents)"
        },
        "verifyisnotdisplayed()": {
          "definition": "Verify__is_not_displayed(string studentName)"
        },
        "continuetoclassconferral()": {
          "definition": "Continue_to_class_conferral()"
        },
        "browsetocertselectionforclass()": {
          "definition": "Browse_to_cert_selection_for_class__(string className)"
        },
        "bindconferralgrid()": {
          "definition": "BindConferralGrid(ClassCertsSelectionDTO data)"
        },
        "selectallstudentstoreceivealleligiblecerts()": {
          "definition": "Select_all_students_to_receive_all_eligible_certs()"
        },
        "verifyisnoteligibletoreceivewithreason()": {
          "definition": "Verify__is_not_eligible_to_receive__with_reason__(string studentName, string certName, string reason)"
        },
        "verifytherearecertificationsshown()": {
          "definition": "Verify_there_are__certifications_shown(int numCertifications)"
        },
        "selecttoreceivealleligiblecertifications()": {
          "definition": "Select__to_receive_all_eligible_certifications(string personName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ClassCertsSelection"
    },
    "portalusersearch": {
      "namespace": "",
      "methods": {
        "verifyredirectedtoportalusersearchresults()": {
          "definition": "Verify_redirected_to_Portal_User_Search_Results()"
        },
        "setresultsperpageto()": {
          "definition": "Set_Results_Per_Page_to(int resultsPerPage)"
        },
        "setinservicepermissioncheckbox()": {
          "definition": "Set_InService_Permission_checkbox()"
        },
        "setregistrationtrainingcoordinatorpermissioncheckbox()": {
          "definition": "Set_Registration_Training_Coordinator_Permission_checkbox()"
        },
        "setlastnameto()": {
          "definition": "Set_Last_Name_to__(string lastName)"
        },
        "setfirstnameto()": {
          "definition": "Set_First_Name_to__(string firstName)"
        },
        "setindividualpermissioncheckbox()": {
          "definition": "Set_Individual_Permission_checkbox()"
        },
        "setworkforcepersonnelpermissioncheckbox()": {
          "definition": "Set_Workforce_Personnel_Permission_checkbox()"
        },
        "setusernameto()": {
          "definition": "Set_User_Name_to__(string userName)"
        },
        "addtoorganizations()": {
          "definition": "Add__to_Organizations(string orgName)"
        },
        "setregistrationselfpermissioncheckbox()": {
          "definition": "Set_Registration_Self_Permission_checkbox()"
        },
        "browsetoportalusersearch()": {
          "definition": "Browse_to_Portal_User_Search()"
        },
        "dosearch()": {
          "definition": "Do_Search()"
        },
        "setmatchtypeto()": {
          "definition": "Set_Match_Type_to__(SearchComparison matchType)"
        },
        "setplaneventspermissioncheckbox()": {
          "definition": "Set_PlanEvents_Permission_checkbox()"
        },
        "setworkforcepermissioncheckbox()": {
          "definition": "Set_Workforce_Permission_checkbox()"
        },
        "viewsearchresults()": {
          "definition": "ViewSearchResults()"
        },
        "setworkforcecertificationrenewalpermissioncheckbox()": {
          "definition": "Set_Workforce_Certification_Renewal_Permission_checkbox()"
        },
        "setinstructorpermissioncheckbox()": {
          "definition": "Set_Instructor_Permission_checkbox()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalUserSearchWorkflow"
    },
    "classperformancereportsadditionalinfo": {
      "namespace": "",
      "methods": {
        "browsetoclassperformancereportsadditionalinfofor()": {
          "definition": "Browse_to_Class_Performance_Reports_Additional_Info_for(string className)"
        },
        "verifythatreportcompetencyhasadditionalinformationsetto()": {
          "definition": "Verify_that_report__competency__has_additional_information_set_to__(string reportName, int rowNumber, string infoType)"
        },
        "assigntocompetency()": {
          "definition": "assign__to_competency_(string additionalInfoName, string competencyName)"
        },
        "verifythatreportcompetencyisnamed()": {
          "definition": "Verify_that_report__competency__is_named__(string reportName, int rowNumber, string competencyName)"
        },
        "verifypagetitleis()": {
          "definition": "verify_page_title_is_(string pageTitle)"
        },
        "verifythatreportcompetencyhasresulttype()": {
          "definition": "Verify_that_report__competency__has_result_type__(string reportName, int rowNumber, string resultType)"
        },
        "verifythatreportshowscompetencies()": {
          "definition": "Verify_that_report__shows__competencies(string reportName, int number)"
        },
        "deselecttestforcompetency()": {
          "definition": "deselect_test_for_competency_(string competencyName)"
        },
        "verifythatreportcompetencyhasgroup()": {
          "definition": "Verify_that_report__competency__has_group__(string reportName, int rowNumber, string groupName)"
        },
        "saveorupdate()": {
          "definition": "save_or_update()"
        }
      },
      "parent-name": null,
      "class-name": "ClassPerformanceReportsAdditionalInfo"
    },
    "overrideprice": {
      "namespace": "",
      "methods": {
        "selectoverridetotalprice()": {
          "definition": "Select_override_total_price()"
        },
        "selectoverrideusageandpricelevels()": {
          "definition": "Select_override_usage_and_price_levels()"
        },
        "verifyexistingoverrideinfoisnotshown()": {
          "definition": "Verify_existing_override_info_is_not_shown()"
        },
        "openfor()": {
          "definition": "Open_for__(string name)"
        },
        "verifyexistingoverrideinfoisshown()": {
          "definition": "Verify_existing_override_info_is_shown()"
        },
        "bindoverridepricelevels()": {
          "definition": "BindOverridePriceLevels(List<OverrideUsagePriceLevelDTO> prices)"
        },
        "verifyoverrideusageandpricelevelsisselected()": {
          "definition": "Verify_override_usage_and_price_levels_is_selected()"
        },
        "verifyoverridetotalprice()": {
          "definition": "Verify_override_total_price()"
        },
        "selectforoverrideusage()": {
          "definition": "Select__for_Override_Usage(string usage)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "OverridePriceWorkflow"
    },
    "automatedemailedit": {
      "namespace": "",
      "methods": {
        "verifydeletenotificationtypeconfirmationshowing()": {
          "definition": "Verify_delete_notification_type_confirmation__showing(string isIsNot)"
        },
        "setreplytoaddressto()": {
          "definition": "Set_Reply_To_Address_to__(string addr)"
        },
        "verifyemailtitleis()": {
          "definition": "Verify_Email_Title_is(string title)"
        },
        "verifyemailsetup()": {
          "definition": "Verify_email__setup(string isOrNot)"
        },
        "verifyautomaticsendingisdisabled()": {
          "definition": "Verify_automatic_sending_is_disabled()"
        },
        "verifysubjectis()": {
          "definition": "Verify_Subject_is__(string subject)"
        },
        "verifyautomaticsendingbeturnedoff()": {
          "definition": "Verify_automatic_sending__be_turned_off(string canCanNot)"
        },
        "disableautomaticsendingofthismessage()": {
          "definition": "Disable_automatic_sending_of_this_message()"
        },
        "bindplaceholderhelptext()": {
          "definition": "BindPlaceholderHelpText(IList<KeyValuePair<string,string>> placeholders)"
        },
        "verifyccis()": {
          "definition": "Verify_CC_is__(string name)"
        },
        "verifybccis()": {
          "definition": "Verify_BCC_is__(string name)"
        },
        "selectforrecipients()": {
          "definition": "Select__for_Recipients(List<string> recipientSelection)"
        },
        "verifyoptionsforrecipientsare()": {
          "definition": "Verify_options_for_Recipients_are__(List<string> recipientOptions)"
        },
        "verifytherearenotificationtypes()": {
          "definition": "Verify_there_are__notification_types(int numberOfNotificationTypes)"
        },
        "verifyreplytoaddressis()": {
          "definition": "Verify_Reply_To_Address_is__(string address)"
        },
        "setccto()": {
          "definition": "Set_CC_to__(string addr)"
        },
        "setbccto()": {
          "definition": "Set_BCC_to__(string addr)"
        },
        "clickdeleteonthenotificationtype()": {
          "definition": "Click_Delete_on_the__Notification_Type(string notificationTypeOrdinal)"
        },
        "clickcancelonthedeletenotificationconfirmation()": {
          "definition": "Click_Cancel_on_the_Delete_Notification_Confirmation()"
        },
        "bindcertificationexpirationnotifications()": {
          "definition": "BindCertificationExpirationNotifications(IList<RowIdentifyingDTO<NotificationTypeListItemDTO>> notifications)"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for__(string displayName)"
        },
        "setsenderemailaddressto()": {
          "definition": "Set_Sender_Email_Address_to__(string addr)"
        },
        "verifythenotificationtypeis()": {
          "definition": "Verify_the__notification_type_is__(string ordinal, List<string> expectedCells)"
        },
        "verifymessagebodyis()": {
          "definition": "Verify_Message_Body_is__(string body)"
        },
        "setmessageintroductionto()": {
          "definition": "Set_Message_Introduction_to__(string intro)"
        },
        "saveemailsettings()": {
          "definition": "Save_email_settings()"
        },
        "clickeditonthenotificationtype()": {
          "definition": "Click_Edit_on_the__Notification_Type(string notificationTypeOrdinal)"
        },
        "verifyautomaticsendingisenabled()": {
          "definition": "Verify_automatic_sending_is_enabled()"
        },
        "showdeletenotificationtypewarning()": {
          "definition": "ShowDeleteNotificationTypeWarning(Guid notificationTypeID)"
        },
        "verifyisaselectedrecipient()": {
          "definition": "Verify__is_a_selected_recipient(string item)"
        },
        "redirectaftersave()": {
          "definition": "RedirectAfterSave()"
        },
        "verifymessageintroductionis()": {
          "definition": "Verify_Message_Introduction_is__(string intro)"
        },
        "clickcontinueonthedeletenotificationconfirmation()": {
          "definition": "Click_Continue_on_the_Delete_Notification_Confirmation()"
        },
        "verifysendernameis()": {
          "definition": "Verify_Sender_Name_is__(string name)"
        },
        "verifymessageconclusionis()": {
          "definition": "Verify_Message_Conclusion_is__(string concl)"
        },
        "setmessageconclusionto()": {
          "definition": "Set_Message_Conclusion_to__(string concl)"
        },
        "allowemailtobesentautomatically()": {
          "definition": "Allow_email_to_be_sent_automatically()"
        },
        "showaddeditnotificationtypemodal()": {
          "definition": "ShowAddEditNotificationTypeModal()"
        },
        "setsubjectto()": {
          "definition": "Set_Subject_to__(string subj)"
        },
        "setsendernameto()": {
          "definition": "Set_Sender_Name_to__(string name)"
        },
        "verifysenderemailaddressis()": {
          "definition": "Verify_Sender_Email_Address_is__(string address)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AutomatedEmailEdit"
    },
    "displaysettings": {
      "namespace": "",
      "methods": {
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "save()": {
          "definition": "Save()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "DisplaySettingsWorkflow"
    },
    "classcertsconferral": {
      "namespace": "",
      "methods": {
        "verifyisbeingconferred()": {
          "definition": "Verify__is_being_conferred(string certName)"
        },
        "setcustomissuedateforto()": {
          "definition": "Set_custom_issue_date_for__to__(string certName, DateTime issueDate)"
        },
        "verifyhasdefaultexpirationdate()": {
          "definition": "Verify__has_default_expiration_date__(string certName, string expirationDate)"
        },
        "setcustomexpirationdateforto()": {
          "definition": "Set_custom_expiration_date_for__to__(string certName, DateTime expirationDate)"
        },
        "showstatuschangewarning()": {
          "definition": "ShowStatusChangeWarning()"
        },
        "verifyoverridewarningpopoverwasshown()": {
          "definition": "Verify_override_warning_popover_was_shown()"
        },
        "selectissueonclassenddatefor()": {
          "definition": "Select_issue_on_class_end_date_for__(string certName)"
        },
        "showoverridingdatawarning()": {
          "definition": "ShowOverridingDataWarning()"
        },
        "verifystatuschangewarningpopoverwasshown()": {
          "definition": "Verify_status_change_warning_popover_was_shown()"
        },
        "bindcerts()": {
          "definition": "BindCerts(List<ClassCertsConferralDTO.CertInfo> certs)"
        },
        "browsetocertconferralforclass()": {
          "definition": "Browse_to_cert_conferral_for_class__(string className)"
        },
        "selectissueontestdatefor()": {
          "definition": "Select_issue_on_test_date_for__(string certName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ClassCertsConferral"
    },
    "crossclassgradesexport": {
      "namespace": "",
      "methods": {
        "writeexport()": {
          "definition": "WriteExport(string fileName, IList<string> exportData)"
        },
        "exportgrades()": {
          "definition": "Export_grades()"
        }
      },
      "parent-name": "MVBaseExportHandlerWorkflow",
      "class-name": "CrossClassGradesExportWorkflow"
    },
    "testopiafilterview": {
      "namespace": "",
      "methods": {
        "setquicklinkconversion()": {
          "definition": "SetQuickLinkConversion(string group, Func<IGrouping<string, FilterDTO>, string> conversion)"
        },
        "initializefilters()": {
          "definition": "InitializeFilters(IEnumerable<FilterDTO> filters)"
        },
        "clickdone()": {
          "definition": "ClickDone()"
        }
      },
      "parent-name": null,
      "class-name": "TestopiaFilterView"
    },
    "crossclasstestanalysislist": {
      "namespace": "",
      "methods": {
        "navigatetocrosstestanalysisparameters()": {
          "definition": "NavigateToCrossTestAnalysisParameters()"
        },
        "verifynoresultsmessageshowing()": {
          "definition": "Verify_no_results_message__showing(string isIsNotString)"
        },
        "verifyusernavigatedtothetestingdashboard()": {
          "definition": "Verify_user__navigated_to_the_testing_dashboard(string wasWasNotString)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifyusernavigatedtothetestanalysisparameters()": {
          "definition": "Verify_user__navigated_to_the_test_analysis_parameters(string wasWasNotString)"
        },
        "verifyresultstableshowing()": {
          "definition": "Verify_results_table__showing(string isIsNotString)"
        },
        "verifytherearerowsintheresultstable()": {
          "definition": "Verify_there_are__rows_in_the_results_table(int expectedNumberOfRows)"
        },
        "verifythatrowisforonclass()": {
          "definition": "Verify_that_row__is_for__on_class__(int ordinal, string testName, string className)"
        },
        "navigatetodashboard()": {
          "definition": "NavigateToDashboard()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "CrossClassTestAnalysisListWorkflow"
    },
    "taskmanagement": {
      "namespace": "",
      "methods": {
        "endclassstatusupdate()": {
          "definition": "end_class_status_update()"
        },
        "enditemanalysisdirtycheck()": {
          "definition": "End_item_analysis_dirty_check()"
        },
        "startlmsduedatenotification()": {
          "definition": "Start_LMS_due_date_notification()"
        },
        "failtaskwithreason()": {
          "definition": "Fail_task__with_reason__(AcadisTaskType taskType, string failureReason)"
        },
        "endautoexpirecerts()": {
          "definition": "End_auto_expire_certs()"
        },
        "startclassstatusupdate()": {
          "definition": "Start_class_status_update()"
        },
        "starttask()": {
          "definition": "Start_task__(AcadisTaskType taskType)"
        },
        "startitemanalysisdirtycheck()": {
          "definition": "Start_item_analysis_dirty_check()"
        },
        "endlmsduedatenotification()": {
          "definition": "End_LMS_due_date_notification()"
        },
        "startautoexpirecerts()": {
          "definition": "Start_auto_expire_certs()"
        },
        "endtask()": {
          "definition": "End_task__(AcadisTaskType taskType)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "TaskManagement"
    },
    "housingrequestdisplay": {
      "namespace": "",
      "methods": {
        "verifythatstudenthasnotspecifiedahousingrequest()": {
          "definition": "Verify_that_student_has_not_specified_a_housing_request()"
        },
        "shownorequestspecified()": {
          "definition": "ShowNoRequestSpecified()"
        },
        "verifythatexpectedcheckinis()": {
          "definition": "Verify_that_Expected_Checkin_is__(string expectedCheckInDate)"
        },
        "verifythatspecialinstructionsis()": {
          "definition": "Verify_that_Special_Instructions_is__(string specialInstructions)"
        },
        "verifythatexpectedcheckoutis()": {
          "definition": "Verify_that_Expected_Checkout_is__(string expectedCheckOutDate)"
        },
        "verifythatstudenthasrequestfornohousing()": {
          "definition": "Verify_that_student_has_request_for_no_housing()"
        },
        "verifythatstudenthasrequestforhousing()": {
          "definition": "Verify_that_student_has_request_for_housing()"
        },
        "shownohousingrequested()": {
          "definition": "ShowNoHousingRequested()"
        },
        "showhousingrequest()": {
          "definition": "ShowHousingRequest(HousingRequestDisplayDTO dto)"
        },
        "verifythatpricelevelis()": {
          "definition": "Verify_that_Price_Level_is__(string priceLevelDescription)"
        },
        "displayhousingrequestforenrollmentofin()": {
          "definition": "Display_housing_request_for_enrollment_of__in__(string personName, string className)"
        },
        "verifythathousingrequestedis()": {
          "definition": "Verify_that_Housing_Requested_is__(string usageTypeName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "HousingRequestDisplayWorkflow"
    },
    "inquiryfreeform": {
      "namespace": "",
      "methods": {
        "verifyfreeformansweris()": {
          "definition": "Verify_freeform_answer_is__(string answer)"
        },
        "enterfreeformanswerof()": {
          "definition": "Enter_freeform_answer_of__(string answer)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "InquiryFreeform"
    },
    "inventorycompliancesearchresults": {
      "namespace": "",
      "methods": {
        "returntosearchcriteriascreen()": {
          "definition": "ReturnToSearchCriteriaScreen()"
        },
        "verifysearchfoundtotalresults()": {
          "definition": "Verify_search_found__total_results(int expectedNumberOfResults)"
        },
        "verifyrowissuedis()": {
          "definition": "Verify_row__issued_is(int row, string issued)"
        },
        "verifyrowexpirationis()": {
          "definition": "Verify_row__expiration_is__(int row, string expiration)"
        },
        "verifyrowcertificationis()": {
          "definition": "Verify_row__certification_is__(int row, string cert)"
        },
        "browsetosearchresults()": {
          "definition": "Browse_to_search_results()"
        },
        "bindsearchresults()": {
          "definition": "BindSearchResults(PagedResultDTO<InventoryComplianceSearchResultDTO> results)"
        },
        "verifythatmorethanresultswerefound()": {
          "definition": "Verify_that_more_than__results_were_found(int count)"
        },
        "verifyrowcertificationstatusis()": {
          "definition": "Verify_row__certification_status_is__(int row, string certStatus)"
        },
        "sortby()": {
          "definition": "Sort_by____(InventoryComplianceSearchSortColumn column, string ascendingDescending)"
        },
        "verifyrownameis()": {
          "definition": "verify_row__name_is__(int row, string name)"
        },
        "verifyrowidentifyingnumberis()": {
          "definition": "Verify_row__identifying_number_is__(int row, string expectedIdentifyingNumber)"
        },
        "verifyrowowneris()": {
          "definition": "Verify_row__owner_is__(int row, string owner)"
        },
        "verifyrowassignedtois()": {
          "definition": "Verify_row__assigned_to_is__(int row, string assignedTo)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "InventoryComplianceSearchResults"
    },
    "listmanagement": {
      "namespace": "",
      "methods": {
        "selectasusage()": {
          "definition": "Select__as_usage( string usage )"
        },
        "selectentry()": {
          "definition": "Select_entry( string entryName )"
        },
        "verifycerttypenotsavedindatabase()": {
          "definition": "Verify_cert_type_not_saved_in_database(string entryName)"
        },
        "enterasname()": {
          "definition": "Enter__as_name( string entryName )"
        },
        "chooseasthebusinesscarddisplay()": {
          "definition": "Choose_as_the_business_card_display( string displayString )"
        },
        "createlistitemwithdescriptionwithusage()": {
          "definition": "Create_List_Item_with_Description_with_usage(string list, string item, string description, string usage)"
        },
        "enterasdescription()": {
          "definition": "Enter__as_description( string entryDescription )"
        },
        "deletelistitem()": {
          "definition": "Delete_List_Item__(string lookupName, string entryName)"
        },
        "removeentry()": {
          "definition": "Remove_entry(string itemName)"
        },
        "cancellistentry()": {
          "definition": "Cancel_list_Entry()"
        },
        "savelistentry()": {
          "definition": "Save_List_Entry()"
        },
        "verifysearchresultsare()": {
          "definition": "Verify_search_results_are__(List<string> expectedNames)"
        },
        "searchforliststhestring()": {
          "definition": "Search_for_lists__the_string__(string searchType, string searchString)"
        },
        "listcontainssystemdefineditem()": {
          "definition": "List_contains_system_defined_item__(string itemName)"
        },
        "fetchentriesfor()": {
          "definition": "Fetch_entries_for( string lookupName )"
        },
        "listdoesnotcontain()": {
          "definition": "List_does_not_contain(string itemName)"
        },
        "listcontainsitems()": {
          "definition": "List_contains__items( int itemCount )"
        },
        "listcontains()": {
          "definition": "List_contains__( string itemName )"
        },
        "entrydescriptionis()": {
          "definition": "Entry_Description_is(string entryDescription)"
        },
        "editlistitemwithusage()": {
          "definition": "Edit__List_Item__with_usage__(string list, string name, string usage)"
        },
        "verifyentrydisplayinbusinesscardissetto()": {
          "definition": "Verify_entry__Display_in_Business_card_is_set_to__( string listEntryName, string displayString )"
        },
        "createlistitemunderwithnamewithdescriptionthatis()": {
          "definition": "Create_List_Item_under_with_Name_with_Description_that_is(string list, string item, string description, string isAvailableOrNot)"
        },
        "listcontainswithusage()": {
          "definition": "List_contains__with_usage__(string itemName, string usage)"
        },
        "managelist()": {
          "definition": "Manage_List( string listName )"
        },
        "createinstructorabsencereasonwithnoname()": {
          "definition": "Create_instructor_absence_reason_with_no_name()"
        },
        "createinstructorabsencereasonof()": {
          "definition": "Create_instructor_absence_reason_of(string absenceReason)"
        },
        "enterasreferencingstatus()": {
          "definition": "Enter__as_referencing_status(string activeInactive)"
        },
        "verifylistmanagementsearchreturnedresults()": {
          "definition": "Verify_list_management_search_returned__results(int count)"
        },
        "createlistitemunderwithnameareferencingstatusofanddescriptionthatis()": {
          "definition": "Create_list_item_under_with_name__a_referencing_status_of__and_description__that_is__(string list, string item, string refStatus, string description, string isAvailableOrNot)"
        },
        "verifysavedisnotcasedindatabase()": {
          "definition": "Verify_saved__is_not_cased__in_database(string entryName, string badCaseName)"
        },
        "entryhasusage()": {
          "definition": "Entry_has_usage(string expectedUsage)"
        },
        "chooseasthereferencingrecordstatus()": {
          "definition": "Choose__as_the_referencing_record_status( string refStatus )"
        },
        "editlistitemwithnewnamewithnewdescriptionwithusage()": {
          "definition": "Edit__List_Item__with_new_name__with_new_description__with_usage__(string list, string oldName, string newName, string description, string usage)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "ListManagement"
    },
    "usercreation": {
      "namespace": "",
      "methods": {
        "editusersetpersonid()": {
          "definition": "Edit_user__set_personid__(string username, string newPersonId)"
        },
        "updatepasswordmanagementdefaultssetpassworddurationtomonths()": {
          "definition": "Update_Password_Management_Defaults_set_password_duration_to_months(int numMonths)"
        },
        "verifysavestatuscontains()": {
          "definition": "Verify_save_status_contains(SaveResponse status)"
        },
        "verifynameis()": {
          "definition": "Verify_name_is__(string name)"
        },
        "getlistofusers()": {
          "definition": "Get_List_Of_Users()"
        },
        "verifyuserhasacademyidnamewithstatusandroles()": {
          "definition": "Verify_user_has_academy_id_name_with_status_and_roles(string username, string academyId, string fullName, string status, string roles)"
        },
        "createpersonnamed()": {
          "definition": "Create_Person_named(string fullName)"
        },
        "updateusersetactivedirectoryusernameto()": {
          "definition": "Update_User_set_active_directory_username_to(string username, string adUsername)"
        },
        "reuseusernamefails()": {
          "definition": "ReuseUsernameFails(string username)"
        },
        "createuserfromwithactivedirectoryusername()": {
          "definition": "Create_user_from_with_active_directory_username(string username, string personLastname, string adUsername)"
        },
        "createuserforwithusername()": {
          "definition": "Create_User_for__with_username__(string personName, string userName)"
        },
        "deleteuser()": {
          "definition": "Delete_User(string username)"
        },
        "editusersetusername()": {
          "definition": "Edit_user__set_username__(string username, string newUsername)"
        },
        "usingperson()": {
          "definition": "Using_Person__(string fullName)"
        },
        "verifyuserdoesnotexist()": {
          "definition": "Verify_User_does_not_exist(string username)"
        },
        "adduserwithpersonidandstatus()": {
          "definition": "Add_user__with_personid__and__status(string username, int personId, LoginStatus status)"
        },
        "createseconduserfails()": {
          "definition": "CreateSecondUserFails(string userName)"
        },
        "updateusersetusernameto()": {
          "definition": "Update_User_set_username_to(string oldUsername, string newUsername)"
        },
        "delete()": {
          "definition": "Delete__(string username)"
        },
        "verifyfirstnameequals()": {
          "definition": "VerifyFirstNameEquals(string firstName)"
        },
        "adduserwithpersonidstatusandallfieldspopulated()": {
          "definition": "Add_user__with_personid__status_and_all_fields_populated(string username, int personId, LoginStatus status)"
        },
        "createuserwithusername()": {
          "definition": "CreateUserWithUserName(string userName)"
        },
        "grantauthorization()": {
          "definition": "Grant_authorization(string auth)"
        },
        "createpersonlastnamefirstname()": {
          "definition": "CreatePersonLastnameFirstname(string lastName, string firstName)"
        },
        "adduserwithpersonidstatusandonlyrequiredfieldspopulated()": {
          "definition": "Add_user__with_personid____status_and_only_required_fields_populated(string username, string personId, LoginStatus status)"
        },
        "verifyuserstatusequals()": {
          "definition": "VerifyUserStatusEquals(LoginStatus status)"
        },
        "verifyrolescontains()": {
          "definition": "Verify_roles_contains__(string role)"
        },
        "changeusernameto()": {
          "definition": "ChangeUsernameTo(string username)"
        },
        "updateusersetusernametoandactivedirectoryusernameto()": {
          "definition": "Update_User_set_username_to_and_active_directory_username_to(string oldUsername, string newUsername, string adUsername)"
        },
        "verifyexpirationis2monthsfromnow()": {
          "definition": "Verify_Expiration_is_2_months_from_now()"
        },
        "getuser()": {
          "definition": "Get_user__(string username)"
        },
        "verifyonlyhaspermissionto()": {
          "definition": "Verify_only_has_permission_to(string username, List<string> orgs)"
        },
        "inactivateuser()": {
          "definition": "Inactivate_User()"
        },
        "verifylastloginis()": {
          "definition": "Verify_last_login_is__(DateTime lastLogin)"
        },
        "makecurrentpersonuserwithname()": {
          "definition": "Make_current_person_user_with_name( string userName )"
        },
        "verifyprimaryorganizationis()": {
          "definition": "Verify_Primary_Organization_is__(string orgName)"
        },
        "useridnotequals()": {
          "definition": "UserIDNotEquals(string userID)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "UserCreation"
    },
    "scheduleanevent": {
      "namespace": "",
      "methods": {
        "verifyeventnameis()": {
          "definition": "Verify_event_name_is__(string expectedName)"
        },
        "checkisallday()": {
          "definition": "Check_is_all_day()"
        },
        "enterforendtime()": {
          "definition": "Enter__for_end_time(string time)"
        },
        "browsetoscheduleaneventpageforresource()": {
          "definition": "Browse_to_schedule_an_event_page_for_resource__(string resourceName)"
        },
        "enterforstartdate()": {
          "definition": "Enter__for_start_date(DateTime date)"
        },
        "verifyeventconflictswithotheritemsontheschedule()": {
          "definition": "Verify_event_conflicts_with__other_items_on_the_schedule(int count)"
        },
        "browsetopageforresourcetoeditscheduledeventrequest()": {
          "definition": "Browse_to_page_for_resource__to_edit_scheduled_event_request__(string resourceName, string eventName)"
        },
        "enterforenddate()": {
          "definition": "Enter__for_end_date(DateTime date)"
        },
        "verifyconflictalertisnotshown()": {
          "definition": "Verify_conflict_alert_is_not_shown()"
        },
        "browsetoscheduleaneventpageforresourceandeventrequest()": {
          "definition": "Browse_to_schedule_an_event_page_for_resource__and_event_request__(string resourceName, string eventName)"
        },
        "uncheckisallday()": {
          "definition": "Uncheck_is_all_day()"
        },
        "verifyendsis()": {
          "definition": "Verify_Ends_is__(DateTime expectedEnd)"
        },
        "verifyconflictalertisshownasa()": {
          "definition": "Verify_conflict_alert_is_shown_as_a__(string type)"
        },
        "enterforeventname()": {
          "definition": "Enter__for_event_name(string name)"
        },
        "showconflictalert()": {
          "definition": "ShowConflictAlert(bool showAsError, List<CreateConflictInfoDTO.Conflict> conflicts)"
        },
        "verifystarttimeis()": {
          "definition": "Verify_start_time_is__(string time)"
        },
        "enterforstarttime()": {
          "definition": "Enter__for_start_time(string time)"
        },
        "verifystartsis()": {
          "definition": "Verify_Starts_is__(DateTime expectedStart)"
        },
        "verifyendtimeis()": {
          "definition": "Verify_end_time_is__(string time)"
        },
        "clicksave()": {
          "definition": "Click_Save()"
        },
        "verifyalldaychecked()": {
          "definition": "Verify_All_day__checked(string isIsNot)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ScheduleAnEventWorkflow"
    },
    "portalaccess": {
      "namespace": "",
      "methods": {
        "verifypersonupdateworkforcepersonnelintheportal()": {
          "definition": "Verify_person__update_workforce_personnel_in_the_portal(string canCannot)"
        },
        "clicksavetochangeusernameto()": {
          "definition": "Click_Save_to_change_username_to__(string newUsername)"
        },
        "verifyusermakechangestotheorganizationsportaloptions()": {
          "definition": "Verify_user__make_changes_to_the_Organizations_portal_options(string canCannot)"
        },
        "verifypersoncanonlyselfregister()": {
          "definition": "Verify_person_can_only_self_register()"
        },
        "verifytherearenoavailableorganizations()": {
          "definition": "Verify_there_are_no_available_organizations()"
        },
        "verifyportalstatuswarningdisplayed()": {
          "definition": "Verify_portal_status_warning_displayed()"
        },
        "verifypersonpersonalportalpermissions()": {
          "definition": "Verify_person__Personal_portal_permissions(string hasDoesNotHave)"
        },
        "useraccesstoinstructorportal()": {
          "definition": "__user_access_to_instructor_portal(string allowDisallow)"
        },
        "usertoseesuborganizations()": {
          "definition": "__user_to_see_suborganizations(string allowDisallow)"
        },
        "verifypersonregistrationportalpermissions()": {
          "definition": "Verify_person__Registration_portal_permissions(string hasDoesNotHave)"
        },
        "verifysamlvisible()": {
          "definition": "Verify_SAML__visible(string isIsNotString)"
        },
        "verifyusermakechangestotheindividualband()": {
          "definition": "Verify_user__make_changes_to_the_Individual_band(string canCannot)"
        },
        "verifyusermakechangestotheorganizationcertificationsportaloptions()": {
          "definition": "Verify_user__make_changes_to_the_OrganizationCertifications_portal_options(string canCannot)"
        },
        "setemailto()": {
          "definition": "Set_email_to__(string email)"
        },
        "showduplicateemailchangeerror()": {
          "definition": "ShowDuplicateEmailChangeError()"
        },
        "allowusertoselfregister()": {
          "definition": "Allow_user_to_self_register()"
        },
        "verifyportalusernameandemailreads()": {
          "definition": "Verify_portal_username_and_email_reads__(string email)"
        },
        "setorganizationto()": {
          "definition": "Set_organization_to__(string organization)"
        },
        "showduplicateemailerror()": {
          "definition": "ShowDuplicateEmailError()"
        },
        "verifyportalaccountislocked()": {
          "definition": "Verify_portal_account_is_locked()"
        },
        "verifyusermakechangestothevehicleadminportaloptions()": {
          "definition": "Verify_user__make_changes_to_the_VehicleAdmin_portal_options(string canCannot)"
        },
        "useraccesstopersonalportal()": {
          "definition": "__user_access_to_personal_portal(string allowDisallow)"
        },
        "verifyusermakechangestothepersonalportaloptions()": {
          "definition": "Verify_user__make_changes_to_the_Personal_portal_options(string canCannot)"
        },
        "usertoreneworganizationpersonnelcertifications()": {
          "definition": "__user_to_renew_organization_personnel_certifications(string allowDisallow)"
        },
        "verifypersonregisterallactivepersonnel()": {
          "definition": "Verify_person__register_all_active_personnel(string canCannot)"
        },
        "hidechangeemailmodal()": {
          "definition": "HideChangeEmailModal()"
        },
        "verifypersonactasavehicleadministratorintheportal()": {
          "definition": "Verify_person__act_as_a_vehicle_administrator_in_the_portal(string canCannot)"
        },
        "verifyusermakechangestotheworkforceportaloptions()": {
          "definition": "Verify_user__make_changes_to_the_Workforce_portal_options(string canCannot)"
        },
        "verifyanewportalaccountemailwasnotsent()": {
          "definition": "Verify_a_new_portal_account_email_was_not_sent()"
        },
        "verifychangeusernamemodalisdisplayed()": {
          "definition": "Verify_change_username_modal_is_displayed()"
        },
        "returntopreviouspage()": {
          "definition": "ReturnToPreviousPage()"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_Page_for__(string personName)"
        },
        "verifynewproctoraccountemailwassentto()": {
          "definition": "Verify_new_proctor_account_email_was_sent_to__(string email)"
        },
        "verifypersoncannotsubmitregistrations()": {
          "definition": "Verify_person_cannot_submit_registrations()"
        },
        "verifyactivedirectoryusernameisempty()": {
          "definition": "Verify_Active_Directory_username_is_empty()"
        },
        "verifypersonselfregisterintheportal()": {
          "definition": "Verify_person__self_register_in_the_portal(string canCannot)"
        },
        "clickcancel()": {
          "definition": "Click_Cancel()"
        },
        "verifypersonviewworkforceperformancereportsintheportal()": {
          "definition": "Verify_person__view_workforce_performance_reports_in_the_portal(string canCannot)"
        },
        "verifyproctorusernameandemailreads()": {
          "definition": "Verify_proctor_username_and_email_reads__(string email)"
        },
        "bindperformancereports()": {
          "definition": "BindPerformanceReports(IEnumerable<PerformanceReportPermissionDTO> reports)"
        },
        "verifyuserseesuborganizations()": {
          "definition": "Verify_user__see_suborganizations(string canCannot)"
        },
        "verifychangeusernamemodalisnotdisplayed()": {
          "definition": "Verify_change_username_modal_is_not_displayed()"
        },
        "verifyduplicateemailerrorisdisplayedonmodal()": {
          "definition": "Verify_duplicate_email_error_is_displayed_on_modal()"
        },
        "verifypersonrenewworkforcepersonnelcertificationsintheportal()": {
          "definition": "Verify_person__renew_workforce_personnel_certifications_in_the_portal(string canCannot)"
        },
        "browsetoportalaccountfor()": {
          "definition": "Browse_to_portal_account_for__(string personName)"
        },
        "verifypersonpermissionforperformancereport()": {
          "definition": "Verify_person__permission_for__performance_report(string hasDoesNotHave, string bizFuncPermText, string bizFuncDisplayName)"
        },
        "verifypersonupdateorganizationinformationintheportal()": {
          "definition": "Verify_person__Update_Organization_Information_in_the_portal(string canCannot)"
        },
        "verifyactivedirectoryusernameis()": {
          "definition": "Verify_Active_Directory_username_is__(string username)"
        },
        "usertoupdateorganizationpersonnelinformation()": {
          "definition": "__user_to_update_organization_personnel_information(string allowDisallow)"
        },
        "verifypersonorganizationportalpermissions()": {
          "definition": "Verify_person__Organization_portal_permissions(string hasDoesNotHave)"
        },
        "verifynewportalaccountemailwassentto()": {
          "definition": "Verify_new_portal_account_email_was_sent_to__(string email)"
        },
        "donotallowusertosubmitregistrations()": {
          "definition": "Do_not_allow_user_to_submit_registrations()"
        },
        "browsetoproctoraccountfor()": {
          "definition": "Browse_to_proctor_account_for__(string personName)"
        },
        "setproctororganizationto()": {
          "definition": "Set_proctor_organization_to__(string organization)"
        },
        "verifyuserwasreturnedtothepersonpage()": {
          "definition": "Verify_user_was_returned_to_the_person_page()"
        },
        "usertoeditorganizationpointsofcontact()": {
          "definition": "__user_to_edit_organization_points_of_contact(string allowDisallow)"
        },
        "usertoactasvehicleadministrator()": {
          "definition": "__user_to_act_as_vehicle_administrator(string allowDisallow)"
        },
        "setsamlusernameto()": {
          "definition": "Set_SAML_username_to__(string username)"
        },
        "useraccesstoworkforceportal()": {
          "definition": "__user_access_to_workforce_portal(string allowDisallow)"
        },
        "clicksave()": {
          "definition": "Click_save()"
        },
        "grantpermissionforperformancereportbizfunc()": {
          "definition": "Grant__permission_for__performance_report_bizfunc(string bizFuncPermText, string bizFuncDisplayName)"
        },
        "verifyactivedirectoryvisible()": {
          "definition": "Verify_Active_Directory__visible(string isIsNotString)"
        },
        "verifypersonsuborganizationportalpermissions()": {
          "definition": "Verify_person__Sub_Organization_portal_permissions(string hasDoesNotHave)"
        },
        "clicklinktochangeusername()": {
          "definition": "Click_link_to_change_username()"
        },
        "setproctoraccessstatusto()": {
          "definition": "Set_proctor_access_status_to__(string status)"
        },
        "verifyproctorstatuswarningdisplayed()": {
          "definition": "Verify_proctor_status_warning_displayed()"
        },
        "useraccesstoplanevents()": {
          "definition": "__user_access_to_plan_events(string allowDisallow)"
        },
        "verifyusernameiseditable()": {
          "definition": "Verify_username_is_editable()"
        },
        "verifyproctoraccountisnotlocked()": {
          "definition": "Verify_proctor_account_is_not_locked()"
        },
        "verifyusernameisempty()": {
          "definition": "Verify_username_is_empty()"
        },
        "verifyavailableorganizationsare()": {
          "definition": "Verify_available_organizations_are__(List<string> orgNames)"
        },
        "usertovieworganizationperformancereports()": {
          "definition": "__user_to_view_organization_performance_reports(string allowDisallow)"
        },
        "setpagetitle()": {
          "definition": "SetPageTitle(string pageTitle, string personName)"
        },
        "setactivedirectoryusernameto()": {
          "definition": "Set_Active_Directory_username_to__(string username)"
        },
        "useraccesstoregistrationportal()": {
          "definition": "__user_access_to_registration_portal(string allowDisallow)"
        },
        "verifyusernameisdisplayedaslabel()": {
          "definition": "Verify_username_is_displayed_as_label()"
        },
        "verifypersonuseorganizationcertificationsintheportal()": {
          "definition": "Verify_person__use_Organization_Certifications_in_the_portal(string canCannot)"
        },
        "setportalaccessstatusto()": {
          "definition": "Set_portal_access_status_to__(string status)"
        },
        "createportalaccountforwithemail()": {
          "definition": "Create_Portal_account_for__with_email__(string personName, string emailAddr)"
        },
        "verifyproctoraccessstatusreads()": {
          "definition": "Verify_proctor_access_status_reads__(string status)"
        },
        "showchangeemailmodal()": {
          "definition": "ShowChangeEmailModal()"
        },
        "verifyusermakechangestotheregistrationportaloptions()": {
          "definition": "Verify_user__make_changes_to_the_Registration_portal_options(string canCannot)"
        },
        "verifypersoninserviceportalpermissions()": {
          "definition": "Verify_person__InService_portal_permissions(string hasDoesNotHave)"
        },
        "verifypersonnamereads()": {
          "definition": "Verify_person_name_reads__(string personName)"
        },
        "allowusertoregisterallactivepersonnel()": {
          "definition": "Allow_user_to_register_all_active_personnel()"
        },
        "useraccesstoorganizationportal()": {
          "definition": "__user_access_to_organization_portal(string allowDisallow)"
        },
        "verifyusermakechangestotheinstructorportaloptions()": {
          "definition": "Verify_user__make_changes_to_the_Instructor_portal_options(string canCannot)"
        },
        "verifyduplicateemailerrorisdisplayed()": {
          "definition": "Verify_duplicate_email_error_is_displayed()"
        },
        "usertovieworsubmitapplicationsforcertificationrenewal()": {
          "definition": "__user_to_view_or_submit_applications_for_certification_renewal(string allowDisallow)"
        },
        "verifypersoninstructorportalpermissions()": {
          "definition": "Verify_person__Instructor_portal_permissions(string hasDoesNotHave)"
        },
        "verifypersonpayorganizationinvoicesintheportal()": {
          "definition": "Verify_person_pay_Organization_Invoices_in_the_portal(string canCannot)"
        },
        "verifyportalaccessstatusreads()": {
          "definition": "Verify_portal_access_status_reads__(string portalStatus)"
        },
        "verifysamlusernameis()": {
          "definition": "Verify_SAML_username_is__(string username)"
        },
        "usertoeditorganizationcontactinformationandpointsofcontact()": {
          "definition": "__user_to_edit_organization_contact_information_and_points_of_contact(string allowDisallow)"
        },
        "verifyanewproctoraccountemailwasnotsent()": {
          "definition": "Verify_a_new_proctor_account_email_was_not_sent()"
        },
        "useraccesstoplaneventsandrequestresources()": {
          "definition": "__user_access_to_plan_events_and_request_resources(string allowDisallow)"
        },
        "verifyproctororganizationreads()": {
          "definition": "Verify_proctor_organization_reads__(string organization)"
        },
        "verifyproctoraccountislocked()": {
          "definition": "Verify_proctor_account_is_locked()"
        },
        "verifyusermakechangestotheinserviceportaloptions()": {
          "definition": "Verify_user__make_changes_to_the_InService_portal_options(string canCannot)"
        },
        "verifyportalaccountisnotlocked()": {
          "definition": "Verify_portal_account_is_not_locked()"
        },
        "useraccesstoinserviceportal()": {
          "definition": "__user_access_to_inservice_portal(string allowDisallow)"
        },
        "verifyorganizationreads()": {
          "definition": "Verify_organization_reads__(string organization)"
        },
        "verifypersonworkforceportalpermissions()": {
          "definition": "Verify_person__Workforce_portal_permissions(string hasDoesNotHave)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalAccessWorkflow"
    },
    "showhideattribute": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "ShowHideAttribute"
    },
    "performancepreportlist": {
      "namespace": "",
      "methods": {
        "verifylastapprovedblank()": {
          "definition": "Verify_last_approved__blank(string isOrIsNot)"
        },
        "redirecttoeditreport()": {
          "definition": "RedirectToEditReport(int versionID)"
        },
        "verifyowneris()": {
          "definition": "Verify_owner_is__(string owner)"
        },
        "verifyrowsdisplay()": {
          "definition": "Verify__rows_display(int count)"
        },
        "showinusewarning()": {
          "definition": "ShowInUseWarning(int versionID)"
        },
        "verifyfirstusedblank()": {
          "definition": "Verify_first_used__blank(string isOrIsNot)"
        },
        "verifyrownameis()": {
          "definition": "Verify_row_name_is__(string rowName)"
        },
        "showfutureversionwarning()": {
          "definition": "ShowFutureVersionWarning(int versionID)"
        },
        "verifystatusis()": {
          "definition": "Verify_status_is__(string status)"
        },
        "bindperformancereports()": {
          "definition": "BindPerformanceReports(List<PerformanceReportExportListDTO> dtoList)"
        },
        "verifyversionis()": {
          "definition": "Verify_version_is__(int version)"
        },
        "considerreportrow()": {
          "definition": "Consider__report_row(string ordinal)"
        },
        "seteditreportpermission()": {
          "definition": "SetEditReportPermission(bool canEdit)"
        },
        "verifyapprovedis()": {
          "definition": "Verify_approved_is__(int approved)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PerformancePreportListWorkflow"
    },
    "activityonlineproperties": {
      "namespace": "",
      "methods": {
        "browsetopageforactivityonclasstemplate()": {
          "definition": "Browse_to_page_for_activity__on_class_template_(string activityName, string className)"
        },
        "browsetopageforelementofactivityonclass()": {
          "definition": "Browse_to_page_for_element__of_activity__on_class_( string elementName, string activityName, string className )"
        },
        "chooseoptionfortimeincourse()": {
          "definition": "Choose_option_for_Time_In_Course( string timeInCourseChoice )"
        },
        "makeonlinecontentuneditable()": {
          "definition": "MakeOnlineContentUneditable(string reason)"
        },
        "selectforonlinecontent()": {
          "definition": "Select__for_online_content( string onlineContentName )"
        },
        "selectforstarts()": {
          "definition": "Select__for_Starts(string selection)"
        },
        "savecomplete()": {
          "definition": "SaveComplete(  )"
        },
        "selectfortypeofduedate()": {
          "definition": "Select__for_type_of_Due_Date(string selection)"
        },
        "bindcompletionrequirements()": {
          "definition": "BindCompletionRequirements(List<KeyValuePair<int,string>> options)"
        },
        "selectforends()": {
          "definition": "Select__for_Ends(string selection)"
        },
        "browsetopageforactivityonclass()": {
          "definition": "Browse_to_page_for_activity__on_class_( string activityName, string className )"
        },
        "selectforstartsprerequisite()": {
          "definition": "Select__for_Starts_prerequisite(string selection)"
        },
        "selectstudentsviewcontentindividually()": {
          "definition": "Select_students__view_content_individually(string viewContent)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ActivityOnlinePropertiesWorkflow"
    },
    "dependentfundinformationro": {
      "namespace": "",
      "methods": {
        "setfiscalofficerpersonid()": {
          "definition": "SetFiscalOfficerPersonID(int personID)"
        },
        "setsecretarypersonid()": {
          "definition": "SetSecretaryPersonID(int personID)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "DependentFundInformationROWorkflow"
    },
    "onlinestudentdetails": {
      "namespace": "",
      "methods": {
        "verifytakewaslaunchedindays()": {
          "definition": "Verify_take__was_launched_in__days(int take, int days)"
        },
        "verifyviewrawdetails()": {
          "definition": "Verify__view_raw_details(string canCannot)"
        },
        "verifypersonnameisalink()": {
          "definition": "Verify_person_name_is_a_link()"
        },
        "bindstudentlearns()": {
          "definition": "BindStudentLearns(IList<StudentLearnDTO> studentTakes)"
        },
        "preparetrainingcategoryoptions()": {
          "definition": "PrepareTrainingCategoryOptions(string trainingCategoryName)"
        },
        "verifytakesexist()": {
          "definition": "Verify__takes_exist(int count)"
        },
        "verifytrainingcategoryeditlinkdoesnotappear()": {
          "definition": "Verify_training_category_edit_link_does_not_appear()"
        },
        "verifytakewascompletedindays()": {
          "definition": "Verify_take__was_completed_in__days(int take, int days)"
        },
        "verifynotakestextisdisplayed()": {
          "definition": "Verify_no_takes_text_is_displayed()"
        },
        "setshowpassfail()": {
          "definition": "SetShowPassFail(bool showPassFail)"
        },
        "browsetostudentdetailsforeventandstudent()": {
          "definition": "Browse_to_student_details_for_event_and_student(string eventName, string studentName)"
        },
        "bindviewlmsdetailslink()": {
          "definition": "BindViewLmsDetailsLink(int enrollmentID, int studentActivityLmsID)"
        },
        "verifytakescoreis()": {
          "definition": "Verify_take__score_is__(int take, string value)"
        },
        "settrainingcategoryto()": {
          "definition": "Set_training_category_to__(string trainingCategory)"
        },
        "clickedittrainingcategory()": {
          "definition": "Click_edit_training_category()"
        },
        "showedittrainingcategorypopover()": {
          "definition": "ShowEditTrainingCategoryPopover()"
        },
        "verifytakepassfailis()": {
          "definition": "Verify_take__passfail_is__(int take, string value)"
        },
        "verifyeditgrades()": {
          "definition": "Verify__edit_grades(string canCannot)"
        },
        "clickdone()": {
          "definition": "Click_done()"
        },
        "verifylabelforassigneddateistoday()": {
          "definition": "Verify_label_for_Assigned_Date_is_today()"
        },
        "verifytakedurationis()": {
          "definition": "Verify_take__duration_is__(int take, string value)"
        },
        "verifypersonnameisnotalink()": {
          "definition": "Verify_person_name_is_not_a_link()"
        },
        "verifytrainingcategoryeditlinkappears()": {
          "definition": "Verify_training_category_edit_link_appears()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "OnlineStudentDetailsWorkflow"
    },
    "endofclass": {
      "namespace": "",
      "methods": {
        "setsurveyoverridability()": {
          "definition": "SetSurveyOverridability(bool forStudent, bool forStaff, bool forSendingOrg, bool forPostClassStudent, bool forPostClassSupervisor)"
        },
        "verifysendingorgsurveyautoemailwarningshown()": {
          "definition": "Verify_sending_org_survey_auto_email_warning__shown(string isOrIsNot)"
        },
        "verifystaffsurveyis()": {
          "definition": "Verify_staff_survey_is__(string enabledOrDisabled)"
        },
        "browsetopageforclasstemplate()": {
          "definition": "Browse_to_page_for_class_template__(string templateName)"
        },
        "verifysendingorgsurveyis()": {
          "definition": "Verify_sending_org_survey_is__(string enabledOrDisabled)"
        },
        "verifyfollowupstudentsurveyis()": {
          "definition": "Verify_follow_up_student_survey_is__(string enabledOrDisabled)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "browsetopagefortrainingclass()": {
          "definition": "Browse_to_page_for_training_class__(string className)"
        },
        "verifystudentsurveyis()": {
          "definition": "Verify_student_survey_is__(string enabledOrDisabled)"
        },
        "verifystudentsurveyautoemailwarningshown()": {
          "definition": "Verify_student_survey_auto_email_warning__shown(string isOrIsNot)"
        },
        "verifyfollowupsupervisorsurveyis()": {
          "definition": "Verify_follow_up_supervisor_survey_is__(string enabledOrDisabled)"
        },
        "verifystaffsurveyautoemailwarningshown()": {
          "definition": "Verify_staff_survey_auto_email_warning__shown(string isOrIsNot)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EndOfClassWorkflow"
    },
    "reviewportaltestresults": {
      "namespace": "",
      "methods": {
        "verifystudenthasnoresult()": {
          "definition": "Verify_student__has_no_result(string studentName, string academyId)"
        },
        "verifystudentisnotdisplayedinstudentswithnoresults()": {
          "definition": "Verify_student__is_not_displayed_in_students_with_no_results(string studentName, string academyId)"
        },
        "verifyofstudentssubmittedby()": {
          "definition": "Verify__of__students_submitted__by__(int resultsEntered, int students, DateTime submissionDate, string submittedBy)"
        },
        "bindsubmittedresults()": {
          "definition": "BindSubmittedResults(IEnumerable<PortalClassTestEntryListItemDto> dtos)"
        },
        "verifyrecordedpassfailresultis()": {
          "definition": "Verify_recorded_pass_fail_result_is__(string passFail)"
        },
        "considersubmittedresultfor()": {
          "definition": "Consider_submitted_result_for__(string studentName, string academyId)"
        },
        "verifystudentisnotdisplayedinsubmittedresults()": {
          "definition": "Verify_student__is_not_displayed_in_submitted_results(string studentName, string academyId)"
        },
        "verifypercentageresultis()": {
          "definition": "Verify_percentage_result_is__(decimal score)"
        },
        "verifytestdateis()": {
          "definition": "Verify_test_date_is__(DateTime testDate)"
        },
        "verifyrecordedgradeis()": {
          "definition": "Verify_recorded_grade_is__(decimal grade)"
        },
        "verifypassfailresultis()": {
          "definition": "Verify_pass_fail_result_is__(string passFail)"
        },
        "bindstudentswithnoresults()": {
          "definition": "BindStudentsWithNoResults(IEnumerable<PortalClassTestEntryListItemDto> dtos)"
        },
        "verifytestdateisnotset()": {
          "definition": "Verify_test_date_is_not_set()"
        },
        "waitforclicktolandusonreviewpage()": {
          "definition": "Wait_for_click_to_land_us_on_review_page()"
        },
        "verifyresultisnotset()": {
          "definition": "Verify_result_is_not_set()"
        },
        "verifycommentsare()": {
          "definition": "Verify_comments_are__(string comments)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ReviewPortalTestResultsWorkflow"
    },
    "radiogroupattribute": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "RadioGroupAttribute"
    },
    "checkboxattribute": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "CheckBoxAttribute"
    },
    "curriculumlearningobjectives": {
      "namespace": "",
      "methods": {
        "removelearningobjectivefrom()": {
          "definition": "Remove_learning_objective__from__(string learningObjectiveName, string activityName)"
        },
        "verifycannotedit()": {
          "definition": "Verify_cannot_edit()"
        },
        "verifyrootactivityexists()": {
          "definition": "Verify_root_activity__exists(string activityName)"
        },
        "verifylearningobjectivedoesnotexistunder()": {
          "definition": "Verify_learning_objective__does_not_exist_under__(string learningObjectiveName, string activityName)"
        },
        "verifycanedit()": {
          "definition": "Verify_can_edit()"
        },
        "browsetopageforcurriculum()": {
          "definition": "Browse_to_page_for_curriculum(string curriculumName)"
        },
        "verifylearningobjectiveexistsunder()": {
          "definition": "Verify_learning_objective_exists_under__(string learningObjectiveName, string activityName)"
        },
        "addlearningobjectivesto()": {
          "definition": "Add_learning_objectives__to__(List<string> elos, string activityName)"
        },
        "verifysubactivityexistsunder()": {
          "definition": "Verify_subactivity__exists_under__(string subActivityName, string activityName)"
        },
        "verifythatmultipleactivitieswarningshowsup()": {
          "definition": "Verify_that_multiple_activities_warning_shows_up()"
        },
        "verifythatmultipleactivitieswarningdoesnotshowup()": {
          "definition": "Verify_that_multiple_activities_warning_does_not_show_up()"
        },
        "checkdonotshowinfutureforwarning()": {
          "definition": "Check_do_not_show_in_future_for_warning()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "CurriculumLearningObjectivesWorkflow"
    },
    "portalsettingmanagement": {
      "namespace": "",
      "methods": {
        "verifythenumberofpendinginserviceeventsis()": {
          "definition": "Verify_the_number_of_pending_inservice_events_is__(int count)"
        },
        "addallowedcerttype()": {
          "definition": "Add_allowed_cert_type(string certType)"
        },
        "bindemploymentinfoupdatehandling()": {
          "definition": "BindEmploymentInfoUpdateHandling(IEnumerable<FieldSettingDTO> items)"
        },
        "verifythatpubliccertificationrequestsareallowed()": {
          "definition": "Verify_that_public_certification_requests_are_allowed()"
        },
        "setportalnameto()": {
          "definition": "Set_Portal_Name_to__(string name)"
        },
        "allowpubliccertificationrequests()": {
          "definition": "Allow_public_certification_requests()"
        },
        "changelabelfordocumentto()": {
          "definition": "Change_label_for_document__to__(int docPos, string label)"
        },
        "updatesettingstonotrequiretrainingcategoryinportal()": {
          "definition": "Update_settings_to_not_require_training_category_in_portal()"
        },
        "selectemploymentdocumentsarenotallowedforattachment()": {
          "definition": "Select_employment_documents_are_not_allowed_for_attachment()"
        },
        "bindemploymentdocumentsettings()": {
          "definition": "BindEmploymentDocumentSettings(IEnumerable<PortalSettingsDTO.EmploymentDocumentSetting> employmentDocuments)"
        },
        "verifythatemergencycontactinforequirementvisible()": {
          "definition": "Verify_that_emergency_contact_info_requirement_visible(string isIsNot)"
        },
        "verifythattheportalrenewallimitisdays()": {
          "definition": "Verify_that_the_portal_renewal_limit_is_days(int days)"
        },
        "verifyemploymentdocumentallowanceisavailableforselection()": {
          "definition": "Verify_employment_document_allowance_is_available_for_selection()"
        },
        "verifythenumberofpendingdeferredrostereventsis()": {
          "definition": "Verify_the_number_of_pending_deferred_roster_events_is__(int count)"
        },
        "clickcancel()": {
          "definition": "Click_Cancel()"
        },
        "setportalnicknameto()": {
          "definition": "Set_Portal_Nickname_to__(string nickname)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifythatlessonplanrequestsallowed()": {
          "definition": "Verify_that_lesson_plan_requests__allowed(string areAreNotString)"
        },
        "addanemploymentdocumentwithlabelthatiswithnohelptext()": {
          "definition": "Add_an_employment_document_with_label__that_is__with_no_help_text(string label, string optOrReqd)"
        },
        "setpersonalinformationupdatesforinformationto()": {
          "definition": "Set_personal_information_updates_for__information_to__(string fieldDescription, string requiredNotRequired)"
        },
        "clicksave()": {
          "definition": "Click_Save()"
        },
        "verifythatpubliccertificationrequestsarenotallowed()": {
          "definition": "Verify_that_public_certification_requests_are_not_allowed()"
        },
        "setportalrenewallimittodays()": {
          "definition": "Set_portal_renewal_limit_to_days(int days)"
        },
        "selecttoallowdocumentstobeattachedfornewhires()": {
          "definition": "Select_to_allow_documents_to_be_attached_for_new_hires()"
        },
        "verifythatallowedemaildomainsinclude()": {
          "definition": "Verify_that_allowed_email_domains__include(string doOrDoNot, string domain)"
        },
        "clicktosaveallowedemaildomains()": {
          "definition": "Click_to_save_allowed_email_domains()"
        },
        "verifyemploymentdocumentsarenotallowedtobeattached()": {
          "definition": "Verify_employment_documents_are_not_allowed_to_be_attached()"
        },
        "trainingcatalog()": {
          "definition": "__training_catalog(string allowDisallowString)"
        },
        "changedocumentto()": {
          "definition": "Change_document__to__(int docPos, string optOrReqd)"
        },
        "verifythatinformationisforpersonalinformationupdatesfor()": {
          "definition": "Verify_that_information_is__for_personal_information_updates_for__(string requiredNotRequired, string fieldDescription)"
        },
        "setallowedemaildomainsto()": {
          "definition": "Set_allowed_email_domains_to__(string domains)"
        },
        "verifyemploymentdocumenthaslabeliswithnohelptext()": {
          "definition": "Verify_employment_document__has_label__is__with_no_help_text(int docPos, string label, string optOrReqd)"
        },
        "clicktoallowanyemaildomain()": {
          "definition": "Click_to_allow_any_email_domain()"
        },
        "setpersonalinformationupdatesactionforto()": {
          "definition": "Set_personal_information_updates_action_for__to__(string fieldDescription, string action)"
        },
        "verifythereareemploymentdocumentsinthelist()": {
          "definition": "Verify_there_are__employment_documents_in_the_list(int numDocs)"
        },
        "verifyemploymentdocumentsareallowedtobeattached()": {
          "definition": "Verify_employment_documents_are_allowed_to_be_attached()"
        },
        "setnumberofpendinginserviceevents()": {
          "definition": "SetNumberOfPendingInServiceEvents(int count)"
        },
        "verifythatpersonalinformationupdatesforare()": {
          "definition": "Verify_that_personal_information_updates_for__are__(string fieldDescription, string action)"
        },
        "deletedocument()": {
          "definition": "Delete_document__(int docPos)"
        },
        "updatesettingstorequiretrainingcategoryinportal()": {
          "definition": "Update_settings_to_require_training_category_in_portal()"
        },
        "lessonplanrequests()": {
          "definition": "__lesson_plan_requests(string allowDisallowString)"
        },
        "verifyallcerttypesareallowedinpubliclookup()": {
          "definition": "Verify_all_cert_types_are_allowed_in_public_lookup()"
        },
        "addanemploymentdocumentwithlabelthatiswithhelptext()": {
          "definition": "Add_an_employment_document_with_label__that_is__with_help_text__(string label, string optOrReqd, string helpTxt)"
        },
        "verifyemploymentdocumentallowanceisnotavailableforselection()": {
          "definition": "Verify_employment_document_allowance_is_not_available_for_selection()"
        },
        "setnumberofpendingdeferredrosterevents()": {
          "definition": "SetNumberOfPendingDeferredRosterEvents(int count)"
        },
        "bindpersonalinfoupdatehandling()": {
          "definition": "BindPersonalInfoUpdateHandling(IEnumerable<FieldSettingDTO> items)"
        },
        "verifyemploymentdocumenthaslabeliswithhelptext()": {
          "definition": "Verify_employment_document__has_label__is__with_help_text__(int docPos, string label, string optOrReqd, string helpTxt)"
        },
        "verifythatanyemaildomainallowed()": {
          "definition": "Verify_that_any_email_domain__allowed(string isOrIsNot)"
        },
        "verifythattrainingandeventsbandvisible()": {
          "definition": "Verify_that_training_and_events_band__visible(string isIsNot)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalSettingManagement"
    },
    "onlinetestsimulator": {
      "namespace": "",
      "methods": {
        "prepareposttestsurvey()": {
          "definition": "Prepare_post_test_survey()"
        },
        "begintakingtestfor()": {
          "definition": "Begin_taking_test__for__(string testName, string studentName)"
        },
        "toggleflagfor()": {
          "definition": "Toggle_flag_for__(string questionText)"
        },
        "begintakingtestinclassfor()": {
          "definition": "Begin_taking_test__in_class__for__(string testName, string className,string studentName)"
        },
        "submittest()": {
          "definition": "Submit_test()"
        },
        "testtimerheartbeat()": {
          "definition": "Test_timer_heartbeat()"
        },
        "answertoquestion()": {
          "definition": "Answer__to_question__(string selectedAnswerLetter, string questionText)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "OnlineTestSimulator"
    },
    "billingpreferences": {
      "namespace": "",
      "methods": {
        "bindcreateat()": {
          "definition": "BindCreateAt(IEnumerable<DropDownItem> options)"
        },
        "choosenottotrackcategory()": {
          "definition": "Choose_not_to_track_category()"
        },
        "verifywhentocreatebillinginformationcontainsoption()": {
          "definition": "Verify_when_to_create_billing_information_contains_option__(string createAt)"
        },
        "verifycategoryisnotlicensed()": {
          "definition": "Verify_category__is_not_licensed(BillingCategory category)"
        },
        "bindpreferences()": {
          "definition": "BindPreferences(IEnumerable<BillingPreferenceDTO> dtos)"
        },
        "preparetosave()": {
          "definition": "Prepare_to_save()"
        },
        "verifycategoryratecalculationis()": {
          "definition": "Verify_category__rate_calculation_is__(BillingCategory category, string rateCalculation)"
        },
        "showeditpopover()": {
          "definition": "ShowEditPopover()"
        },
        "preparetosavepreference()": {
          "definition": "Prepare_to_save_preference()"
        },
        "verifyflatfeeisavailable()": {
          "definition": "Verify_flat_fee_is_available()"
        },
        "choosetocreatebillinginformation()": {
          "definition": "Choose_to_create_billing_information__(string createAt)"
        },
        "verifycategoryislicensed()": {
          "definition": "Verify_category__is_licensed(BillingCategory category)"
        },
        "choosenottotrackbilling()": {
          "definition": "Choose_not_to_track_billing()"
        },
        "verifyredirectedtoglobalsettings()": {
          "definition": "Verify_redirected_to_global_settings()"
        },
        "verifyflatfeevalidationisenabled()": {
          "definition": "Verify_flat_fee_validation_is_enabled()"
        },
        "choosetotrackcategory()": {
          "definition": "Choose_to_track_category()"
        },
        "clicksavepreference()": {
          "definition": "Click_save_preference()"
        },
        "verifycategorytrackingisenabled()": {
          "definition": "Verify_category__tracking_is_enabled(BillingCategory category)"
        },
        "verifycategorywhentocreatebillinginformationis()": {
          "definition": "Verify_category__when_to_create_billing_information_is__(BillingCategory category, string createAtDescription)"
        },
        "verifypreferencelistcontainsitems()": {
          "definition": "Verify_preference_list_contains__items(int count)"
        },
        "verifyeditpopoverisshown()": {
          "definition": "Verify_edit_popover_is_shown()"
        },
        "verifypreferencelistcontainscategory()": {
          "definition": "Verify_preference_list_contains_category__(BillingCategory category)"
        },
        "verifyflatfeeisnotavailable()": {
          "definition": "Verify_flat_fee_is_not_available()"
        },
        "choosetotrackbilling()": {
          "definition": "Choose_to_track_billing()"
        },
        "verifywhentocreatebillinginformationvalidationisdisabled()": {
          "definition": "Verify_when_to_create_billing_information_validation_is_disabled()"
        },
        "verifyflatfeevalidationisdisabled()": {
          "definition": "Verify_flat_fee_validation_is_disabled()"
        },
        "verifywhoisresponsibleforfeesvalidationisdisabled()": {
          "definition": "Verify_who_is_responsible_for_fees_validation_is_disabled()"
        },
        "verifycategorypartiesresponsibleforfeesis()": {
          "definition": "Verify_category__parties_responsible_for_fees_is__(BillingCategory category, string billToParties)"
        },
        "verifywhentocreatebillinginformationvalidationisenabled()": {
          "definition": "Verify_when_to_create_billing_information_validation_is_enabled()"
        },
        "verifypartiesresponsibleforfeescontainsoption()": {
          "definition": "Verify_parties_responsible_for_fees_contains_option__(string billToParty)"
        },
        "choosetocalculatebillingasaflatfee()": {
          "definition": "Choose_to_calculate_billing_as_a_flat_fee()"
        },
        "clicktoeditcategory()": {
          "definition": "Click_to_edit_category__(BillingCategory category)"
        },
        "choosetocalculatebillingasavariablefee()": {
          "definition": "Choose_to_calculate_billing_as_a_variable_fee()"
        },
        "verifyallcategoryvalidationisdisabled()": {
          "definition": "Verify_all_category_validation_is_disabled()"
        },
        "clicksave()": {
          "definition": "Click_save()"
        },
        "verifycategorytrackingisdisabled()": {
          "definition": "Verify_category__tracking_is_disabled(BillingCategory category)"
        },
        "verifypartiesresponsibleforfeesvalidationisenabled()": {
          "definition": "Verify_parties_responsible_for_fees_validation_is_enabled()"
        },
        "redirecttoglobalsettings()": {
          "definition": "RedirectToGlobalSettings()"
        },
        "enterasaflatfee()": {
          "definition": "Enter__as_a_flat_fee(decimal flatRate)"
        },
        "choosetoberesponsibleforfees()": {
          "definition": "Choose__to_be_responsible_for_fees(string billToParty)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "BillingPreferencesWorkflow"
    },
    "classsurveylist": {
      "namespace": "",
      "methods": {
        "verifyhasresponsesrecorded()": {
          "definition": "Verify__has_responses_recorded(string surveyName)"
        },
        "verifydoesnothaveresponsesrecorded()": {
          "definition": "Verify__does_not_have_responses_recorded(string surveyName)"
        },
        "verifydescriptionforis()": {
          "definition": "Verify_description_for__is__(string surveyName, string surveyDescription)"
        },
        "browsetopageforclass()": {
          "definition": "Browse_to_page_for_class__(string className)"
        },
        "bindsurveys()": {
          "definition": "BindSurveys(IEnumerable<ClassSurveyListDTO.Survey> dtos)"
        },
        "verifysurveysare()": {
          "definition": "Verify_surveys_are__(List<string> orderedSurveyNames)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ClassSurveyListWorkflow"
    },
    "xadrtestertests": {
      "namespace": "",
      "methods": {
        "nullclientinstancereportserror()": {
          "definition": "NullClientInstanceReportsError()"
        },
        "nullreturnfromclientreportserror()": {
          "definition": "NullReturnFromClientReportsError()"
        },
        "cleanxadrconfigcanconnect()": {
          "definition": "CleanXadrConfigCanConnect()"
        },
        "basexadrhasnoerrors()": {
          "definition": "BaseXadrHasNoErrors()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "XadrTesterTests"
    },
    "phonenumberdata": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "PhoneNumberData"
    },
    "pendingperformancereportslist": {
      "namespace": "",
      "methods": {
        "verifythatnoevaluationsmessageisvisible()": {
          "definition": "Verify_that_no_evaluations_message_is_visible()"
        },
        "bindevaluationlist()": {
          "definition": "BindEvaluationList(IList<PendingPerformanceReportDTO> data)"
        },
        "verifythatevaluationlistcontainsforlastsavedon()": {
          "definition": "Verify_that_evaluation_list_contains__for__last_saved_on__(string evaluationName, string personName, DateTime lastSaved)"
        },
        "verifycanapproveevaluationforlastsavedon()": {
          "definition": "Verify_can_approve_evaluation__for__last_saved_on__(string evaluationName, string personName, DateTime lastSaved)"
        },
        "verifythatnoevaluationsmessageisnotvisible()": {
          "definition": "Verify_that_no_evaluations_message_is_not_visible()"
        },
        "browsetopagefororganizations()": {
          "definition": "Browse_to_page_for_organizations()"
        },
        "verifycannotapproveevaluationforlastsavedon()": {
          "definition": "Verify_cannot_approve_evaluation__for__last_saved_on__(string evaluationName, string personName, DateTime lastSaved)"
        },
        "browsetopageforpeople()": {
          "definition": "Browse_to_page_for_people()"
        },
        "verifythatevaluationlistcontainsitems()": {
          "definition": "Verify_that_evaluation_list_contains__items(int number)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PendingPerformanceReportsListWorkflow"
    },
    "inserviceattendeesearch": {
      "namespace": "",
      "methods": {
        "continuecurrentusersession()": {
          "definition": "Continue_current_user_session()"
        },
        "verifyresults()": {
          "definition": "Verify___results(int count)"
        },
        "verifyresultis()": {
          "definition": "Verify_result__is__(int index, string resultText)"
        },
        "searchfor()": {
          "definition": "Search_for__(string searchText)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "InServiceAttendeeSearchWorkflow"
    },
    "certificationactivity": {
      "namespace": "",
      "methods": {
        "verifythatdisciplinehasissuedrenewedtotalactions()": {
          "definition": "Verify_that__discipline_has__issued__renewed__total_actions(string discipline, int issued, int renewed, int total)"
        },
        "filtersetfiscalstartyearto()": {
          "definition": "Filter_set_fiscal_start_year_to__(string year)"
        },
        "filtersetcustomstartdateto()": {
          "definition": "Filter_set_custom_start_date_to__(string date)"
        },
        "verifythatnodatamessageisdisplayed()": {
          "definition": "Verify_that_no_data_message_is_displayed()"
        },
        "verifythatorgisnotvisible()": {
          "definition": "Verify_that_org__is_not_visible(string orgName)"
        },
        "filtersetcustomenddateto()": {
          "definition": "Filter_set_custom_end_date_to__(string date)"
        },
        "filterselectowner()": {
          "definition": "Filter_select_owner(string ownerName)"
        },
        "clearfilters()": {
          "definition": "Clear_filters()"
        },
        "savefilters()": {
          "definition": "Save_filters()"
        },
        "verifysingleownerisdisplayedinfilters()": {
          "definition": "Verify_single_owner__is_displayed_in_filters(string ownerName)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "filtersetfiscalendyearto()": {
          "definition": "Filter_set_fiscal_end_year_to__(string year)"
        },
        "verifythatdefaulttimeframewithnodatamessageisdisplayed()": {
          "definition": "Verify_that_default_timeframe_with_no_data_message_is_displayed()"
        },
        "verifythatcerthasdisciplineandissuedrenewedtotalactions()": {
          "definition": "Verify_that_cert___has_discipline__and___issued__renewed__total__actions(string certName, string discipline, int issued, int renewed, int total)"
        },
        "verifythatownerhasissuedrenewedtotalactions()": {
          "definition": "Verify_that_owner__has__issued__renewed__total_actions(string ownerName, int issued, int renewed, int total)"
        },
        "verifythatdefaulttimeframemessageisdisplayed()": {
          "definition": "Verify_that_default_timeframe_message_is_displayed()"
        },
        "clearandsavefilters()": {
          "definition": "Clear_and_save_filters()"
        },
        "filterselectcertificationtype()": {
          "definition": "Filter_select_certification_type(string certType)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "CertificationActivityWorkflow"
    },
    "offcenterfacilitylist": {
      "namespace": "",
      "methods": {
        "verifybuildingis()": {
          "definition": "Verify_building_is__(string buildingName)"
        },
        "bindfacilities()": {
          "definition": "BindFacilities(IList<OffCenterFacilityDTO> facilities)"
        },
        "verifystatusis()": {
          "definition": "Verify_status_is__(string status)"
        },
        "verifylisthasrows()": {
          "definition": "Verify_list_has__rows(int numRows)"
        },
        "verifyaddhousingfacilitybuttonvisible()": {
          "definition": "Verify_Add_Housing_Facility_button__visible(string isIsNotVisibleStr)"
        },
        "lookatrow()": {
          "definition": "Look_at_row__(int rowOrdinal)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "OffCenterFacilityListWorkflow"
    },
    "licensing": {
      "namespace": "",
      "methods": {
        "assignlicenseto()": {
          "definition": "Assign__license_to_(string moduleLabelDescription, string orgName)"
        },
        "assignalicenseto()": {
          "definition": "Assign_a__license_to(string moduleLabelDescription, string orgName)"
        },
        "unassignallbaselicenses()": {
          "definition": "Unassign_all_base_licenses()"
        },
        "verifydoesnothavealicense()": {
          "definition": "Verify__does_not_have_a__license(string orgName, string moduleLabelDescription)"
        },
        "removelicensefrom()": {
          "definition": "Remove__license_from_(string moduleLabelDescription, string orgName)"
        },
        "removelicensedmodulefromallorganizations()": {
          "definition": "Remove_licensed_module__from_all_Organizations(string moduleName)"
        },
        "unassignalllicenses()": {
          "definition": "Unassign_all__licenses(string moduleLabelDescription)"
        },
        "unassignallacadislicenses()": {
          "definition": "Unassign_all_Acadis_licenses()"
        },
        "verifyacadishasavailablelicenses()": {
          "definition": "Verify_Acadis_has_available__licenses(string moduleLabelDescription)"
        },
        "verifydoesnothaveabaselicense()": {
          "definition": "Verify__does_not_have_a_base_license(string orgName)"
        },
        "unassignandremovelicensesformodule()": {
          "definition": "Unassign_and_remove_licenses_for_module__(string moduleName)"
        },
        "setquantityoflicensesforto()": {
          "definition": "Set_quantity_of_licenses_for__to__(string moduleName, int quantity)"
        },
        "removebaselicensefrom()": {
          "definition": "Remove_base_license_from_(string orgName)"
        },
        "verifyacadishasnoavailablelicenses()": {
          "definition": "Verify_Acadis_has_no_available__licenses(string moduleLabelDescription)"
        },
        "verifyacadishasavailablebaselicenses()": {
          "definition": "Verify_Acadis_has_available_base_licenses()"
        },
        "unassignandremovealllicenses()": {
          "definition": "Unassign_and_remove_all_licenses()"
        },
        "verifyacadishasnoavailablebaselicenses()": {
          "definition": "Verify_Acadis_has_no_available_base_licenses()"
        },
        "assignallbaselicenses()": {
          "definition": "Assign_all_base_licenses()"
        },
        "assignbaselicenseto()": {
          "definition": "Assign_base_license_to_(string orgName)"
        },
        "verifyhasalicense()": {
          "definition": "Verify__has_a__license(string orgName, string moduleLabelDescription)"
        },
        "verifyhasabaselicense()": {
          "definition": "Verify__has_a_base_license(string orgName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "Licensing"
    },
    "forecastinggoals": {
      "namespace": "",
      "methods": {
        "forgoal()": {
          "definition": "For_goal__(int row)"
        },
        "verifytherearenogoals()": {
          "definition": "Verify_there_are_no_goals()"
        },
        "verifylastupdatedis()": {
          "definition": "Verify_last_updated_is__(string lastUpdated)"
        },
        "showoverview()": {
          "definition": "ShowOverview()"
        },
        "verifyorganizationis()": {
          "definition": "Verify_organization_is__(string org)"
        },
        "verifynogoalstextis()": {
          "definition": "Verify_no_goals_text_is__(string messageText)"
        },
        "bindgoals()": {
          "definition": "BindGoals(List<GoalListItemDTO> dtos, bool showDelete, bool showCopy, bool canEdit)"
        },
        "verifyusercanaddgoals()": {
          "definition": "Verify_user_can_add_goals()"
        },
        "verifyusercannotaddgoals()": {
          "definition": "Verify_user_cannot_add_goals()"
        },
        "verifyusercandeletegoals()": {
          "definition": "Verify_user_can_delete_goals()"
        },
        "verifyusercannotcopygoals()": {
          "definition": "Verify_user_cannot_copy_goals()"
        },
        "checkactivefilter()": {
          "definition": "Check_active_filter()"
        },
        "savefilters()": {
          "definition": "Save_filters()"
        },
        "verifydescriptionis()": {
          "definition": "Verify_description_is__(string desc)"
        },
        "verifyusercancopygoals()": {
          "definition": "Verify_user_can_copy_goals()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "uncheckactivefilter()": {
          "definition": "Uncheck_active_filter()"
        },
        "verifygoalis()": {
          "definition": "Verify_goal_is__(string name)"
        },
        "showaddgoal()": {
          "definition": "ShowAddGoal()"
        },
        "deletegoal()": {
          "definition": "Delete_goal(string name)"
        },
        "checkinactivefilter()": {
          "definition": "Check_inactive_filter()"
        },
        "verifyusercannotdeletegoals()": {
          "definition": "Verify_user_cannot_delete_goals()"
        },
        "verifytherearegoals()": {
          "definition": "Verify_there_are__goals(int num)"
        },
        "copygoal()": {
          "definition": "Copy_Goal(string name)"
        },
        "uncheckinactivefilter()": {
          "definition": "Uncheck_inactive_filter()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ForecastingGoalsWorkflow"
    },
    "compliancedashboard": {
      "namespace": "",
      "methods": {
        "verifycanissueorganizationcertifications()": {
          "definition": "Verify_can_issue_organization_certifications()"
        },
        "verifycansearchpersoncertifications()": {
          "definition": "Verify_can_search_person_certifications()"
        },
        "verifycannotsearchorganizationcertifications()": {
          "definition": "Verify_cannot_search_organization_certifications()"
        },
        "verifycannotreviewpendingorganizationaudits()": {
          "definition": "Verify_cannot_review_pending_organization_audits()"
        },
        "verifycannotsearchinventorycertifications()": {
          "definition": "Verify_cannot_search_inventory_certifications()"
        },
        "verifycannotsearchpersoncertifications()": {
          "definition": "Verify_cannot_search_person_certifications()"
        },
        "verifycanaddacertification()": {
          "definition": "Verify_can_add_a_certification()"
        },
        "verifycanissuepersoncertifications()": {
          "definition": "Verify_can_issue_person_certifications()"
        },
        "verifycanissuevehiclecertifications()": {
          "definition": "Verify_can_issue_vehicle_certifications()"
        },
        "verifycanviewlistofcertifications()": {
          "definition": "Verify_can_view_list_of_certifications()"
        },
        "verifycannotviewlistofcertifications()": {
          "definition": "Verify_cannot_view_list_of_certifications()"
        },
        "verifycansearchinventorycertifications()": {
          "definition": "Verify_can_search_inventory_certifications()"
        },
        "verifycannotissuevehiclecertifications()": {
          "definition": "Verify_cannot_issue_vehicle_certifications()"
        },
        "verifycannotreviewpendingpersonaudits()": {
          "definition": "Verify_cannot_review_pending_person_audits()"
        },
        "verifycannotaddacertification()": {
          "definition": "Verify_cannot_add_a_certification()"
        },
        "verifycannotissuepersoncertifications()": {
          "definition": "Verify_cannot_issue_person_certifications()"
        },
        "verifycanreviewpendingpersonaudits()": {
          "definition": "Verify_can_review_pending_person_audits()"
        },
        "verifycannotissueorganizationcertifications()": {
          "definition": "Verify_cannot_issue_organization_certifications()"
        },
        "verifycansearchorganizationcertifications()": {
          "definition": "Verify_can_search_organization_certifications()"
        },
        "verifycanreviewpendingorganizationaudits()": {
          "definition": "Verify_can_review_pending_organization_audits()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ComplianceDashboard"
    },
    "acadislessonplanreadonly": {
      "namespace": "",
      "methods": {
        "browsetopageforlessonplan()": {
          "definition": "Browse_to_page_for_lesson_plan__(string lessonPlanCourseTitle)"
        },
        "verifyuserwasnavigatedtothelessonplanrequestlisthighlighting()": {
          "definition": "Verify_user_was_navigated_to_the_lesson_plan_request_list_highlighting__(string lessonPlanCourseTitle)"
        },
        "verifylessonplanismarkedinactivatedbyon()": {
          "definition": "Verify_lesson_plan_is_marked_inactivated_by__on__(string inactivatedName, DateTime inactivatedTime)"
        },
        "navigatetoclassdefinition()": {
          "definition": "NavigateToClassDefinition()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "navigatetolistoflessonplans()": {
          "definition": "NavigateToListOfLessonPlans(int lessonPlanID)"
        },
        "bindlessonplanversionhistory()": {
          "definition": "BindLessonPlanVersionHistory(IList<LessonPlanVersionHistoryItemDTO> items)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AcadisLessonPlanReadonlyWorkflow"
    },
    "apiaccesslist": {
      "namespace": "",
      "methods": {
        "verifylistdoesnotincludeconsumer()": {
          "definition": "Verify_list_does_not_include_consumer__(string consumerName)"
        },
        "verifygeneratedcredentialsaredisplayed()": {
          "definition": "Verify_generated_credentials_are_displayed()"
        },
        "clickrevokeforconsumer()": {
          "definition": "Click_Revoke_for_consumer__(string consumerName)"
        },
        "selectpresetroles()": {
          "definition": "Select_preset_roles__(List<string> roleNames)"
        },
        "verifyavailablepresetrolesdonotinclude()": {
          "definition": "Verify_available_preset_roles_do_not_include__(string roleName)"
        },
        "verifyavailablepresetrolesinclude()": {
          "definition": "Verify_available_preset_roles_include__(string roleName)"
        },
        "clickviewforconsumer()": {
          "definition": "Click_View_for_consumer__(string consumerName)"
        },
        "bindapipermissions()": {
          "definition": "BindApiPermissions(IList<ApiPermissionsDTO> apis)"
        },
        "verifylistincludesconsumerwithusernameandroles()": {
          "definition": "Verify_list_includes_consumer__with_username__and_roles__(string consumerName, string username, string roles)"
        },
        "bindcredentials()": {
          "definition": "BindCredentials(IList<ApiAccessDTO> credentials)"
        },
        "showcredentialdetails()": {
          "definition": "ShowCredentialDetails(ApiCredentialDetailsDTO credential, string configFragment)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "APIAccessListWorkflow"
    },
    "dashboard": {
      "namespace": "",
      "methods": {
        "browsetodashboardfor()": {
          "definition": "Browse_to_dashboard_for__(AcadisTabs module)"
        },
        "bindtiles()": {
          "definition": "BindTiles()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "DashboardWorkflow"
    },
    "grademanagementfnh": {
      "namespace": "",
      "methods": {
        "enteronpassfailtestfor()": {
          "definition": "enter_on_passfailtest_for__(string passFail, string student)"
        },
        "testscoreisnotrecorded()": {
          "definition": "Test_score_is_not_recorded()"
        },
        "enterattemptscoresofforon()": {
          "definition": "enter_attempt_scores_of__for__on__(string attempts, string student, string testName)"
        },
        "enterattemptscoreofforon()": {
          "definition": "enter_attempt_score_of__for__on__(string attempts, string student, string testName)"
        },
        "takegradeis()": {
          "definition": "take_grade_is(decimal grade)"
        },
        "verifythattesthasnocomment()": {
          "definition": "Verify_that_test_has_no_comment()"
        },
        "studentthetake()": {
          "definition": "student_the_take(string pass)"
        },
        "verifythattestwastakenon()": {
          "definition": "Verify_that_test_was_taken_on__(DateTime date)"
        },
        "enterandsavescoresofforonin()": {
          "definition": "enter_and_save_scores_of__for__on__in__(string attempts, string studentName, string testName, string className)"
        },
        "setweaponmaketoandmodelto()": {
          "definition": "Set_weapon_make_to__and_model_to__(string makeName, string modelName)"
        },
        "verifyactivitygradeforonis()": {
          "definition": "Verify_activity_grade_for__on__is__(string studentName, string activityName, decimal grade)"
        },
        "verifystudentthetest()": {
          "definition": "Verify_student_the_test(Pass passed)"
        },
        "verifythatitemresultis()": {
          "definition": "Verify_that_item__result_is__(string itemText, string result)"
        },
        "getstudenttestrecordfor()": {
          "definition": "Get_student_test_record_for__(string studentName)"
        },
        "setweaponserialnumberto()": {
          "definition": "Set_weapon_serial_number_to__(string serialNumber)"
        },
        "verifythatpartattemptwascompleted()": {
          "definition": "Verify_that_part__attempt__was_completed(string partHeader, int attemptNumber)"
        },
        "verifythatparthascomment()": {
          "definition": "Verify_that_part__has_comment__(string partHeader, string comment)"
        },
        "verifythattesthasnodaterecorded()": {
          "definition": "Verify_that_test_has_no_date_recorded()"
        },
        "recordedtestgradeis()": {
          "definition": "recorded_test_grade_is(decimal grade)"
        },
        "studentthetest()": {
          "definition": "student_the_test(string pass)"
        },
        "verifythatattemptresultis()": {
          "definition": "Verify_that_attempt__result_is__(int attemptNumber, string result)"
        },
        "verifystudentpart()": {
          "definition": "Verify_student__part__(Pass passed, string partHeader)"
        },
        "enterattemptscoresofforontakenonthengradeandsavetest()": {
          "definition": "enter_attempt_scores_of__for__on__taken_on__then_grade_and_save_test(string attempts, string student, string testName, DateTime date)"
        },
        "verifythattesthastakes()": {
          "definition": "Verify_that_test_has__takes(int numTakes)"
        },
        "gettestfromclassactivity()": {
          "definition": "Get_test__from_class__activity__(string testName, string className, string activityName)"
        },
        "verifythattesthascomment()": {
          "definition": "Verify_that_test_has_comment__(string comment)"
        },
        "verifythatpartattemptresultis()": {
          "definition": "Verify_that_part__attempt__result_is__(string partHeader, int attemptNumber, string result)"
        },
        "savestudenttest()": {
          "definition": "save_student_test()"
        },
        "gettestfromclass()": {
          "definition": "get_test__from_class__( string testName, string className )"
        },
        "recordedtestgradeforpartis()": {
          "definition": "Recorded_test_grade_for_part__is__(string partHeader, decimal grade)"
        },
        "verifytransferresultforoninhasgradeandpassfail()": {
          "definition": "verify_transfer_result_for__on__in__has_grade__and_passfail__(string studentName, string testName, string className, string grade, string passFail)"
        },
        "verifyactivity()": {
          "definition": "Verify____activity__(string studentName, Pass pass, string activityName)"
        },
        "enterattemptscoresofforonthengradeandsavetest()": {
          "definition": "enter_attempt_scores_of__for__on__then_grade_and_save_test(string attempts, string student, string testName)"
        },
        "recordedtestscoreforpartis()": {
          "definition": "Recorded_test_score_for_part__is__(string partHeader, decimal score)"
        },
        "waivefor()": {
          "definition": "Waive__for(string testName, string student)"
        },
        "recordedtestscoreis()": {
          "definition": "recorded_test_score_is(decimal score)"
        },
        "verifythatattemptwasnotcompleted()": {
          "definition": "Verify_that_attempt__was_not_completed(int attemptNumber)"
        },
        "datetakenis()": {
          "definition": "date_taken_is__(DateTime dateTaken)"
        },
        "takescoreis()": {
          "definition": "take_score_is(decimal score)"
        },
        "enterattemptscoresofforontakenon()": {
          "definition": "enter_attempt_scores_of__for__on__taken_on__(string attempts, string student, string testName, DateTime date)"
        },
        "verifystudenttestwasobservedby()": {
          "definition": "Verify_student_test_was_observed_by(string observerName)"
        },
        "enterattemptscoresofforonpartof()": {
          "definition": "enter_attempt_scores__of_for__on_part__of__(string attempts, string student, string partName, string testName)"
        },
        "gradestudenttest()": {
          "definition": "grade_student_test()"
        },
        "verifythatpartattemptwasnotcompleted()": {
          "definition": "Verify_that_part__attempt__was_not_completed(string partHeader, int attemptNumber)"
        },
        "verifynostudenttestrecordfor()": {
          "definition": "Verify_no_student_test_record_for__(string studentName)"
        },
        "verifythatattemptwascompleted()": {
          "definition": "Verify_that_attempt__was_completed(int attemptNumber)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "GradeManagementFNH"
    },
    "eventrequestlist": {
      "namespace": "",
      "methods": {
        "verifythereareapprovedeventrequestslisted()": {
          "definition": "Verify_there_are__approved_event_requests_listed(int numberOfRequests)"
        },
        "verifythesubmittedeventonlineisnamedandstartsonandendson()": {
          "definition": "Verify_the_submitted_event_on_line__is_named__and_starts_on_and_ends_on(int line, string eventName, DateTime startDate, DateTime endDate)"
        },
        "verifytherejectedeventonlineisnamedandstartsonandendson()": {
          "definition": "Verify_the_rejected_event_on_line__is_named__and_starts_on_and_ends_on(int line, string eventName, DateTime startDate, DateTime endDate)"
        },
        "verifytherearesubmittedeventrequestslisted()": {
          "definition": "Verify_there_are__submitted_event_requests_listed(int numberOfRequests)"
        },
        "bindapprovedrequests()": {
          "definition": "BindApprovedRequests(IEnumerable<EventRequestListDTO> eventRequests)"
        },
        "bindrejectedrequests()": {
          "definition": "BindRejectedRequests(IEnumerable<EventRequestListDTO> eventRequests)"
        },
        "verifytheapprovedeventonlineisnamedandstartsonandendson()": {
          "definition": "Verify_the_approved_event_on_line__is_named__and_starts_on_and_ends_on(int line, string eventName, DateTime startDate, DateTime endDate)"
        },
        "bindsubmittedrequests()": {
          "definition": "BindSubmittedRequests(IEnumerable<EventRequestListDTO> eventRequests)"
        },
        "verifytherearerejectedeventrequestslisted()": {
          "definition": "Verify_there_are__rejected_event_requests_listed(int numberOfRequests)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EventRequestListWorkflow"
    },
    "profileeditphones": {
      "namespace": "",
      "methods": {
        "settotheprimaryphone()": {
          "definition": "Set_to_the_primary_phone()"
        },
        "addnewphoneincontactinfo()": {
          "definition": "Add_new_phone_in_contact_info()"
        },
        "considerphonenumber()": {
          "definition": "Consider_phone_number__(string phone)"
        },
        "verifyphonetypeis()": {
          "definition": "Verify_phone_type_is(string value)"
        },
        "setphoneextensionto()": {
          "definition": "Set_phone_extension_to(string value)"
        },
        "setphonetypeto()": {
          "definition": "Set_phone_type_to(string value)"
        },
        "deletephone()": {
          "definition": "Delete_phone()"
        },
        "bindphones()": {
          "definition": "BindPhones(IEnumerable<PhoneDto> phones)"
        },
        "setphonenumberto()": {
          "definition": "Set_phone_number_to(string value)"
        },
        "verifytherearephones()": {
          "definition": "Verify_there_are__phones(int count)"
        },
        "verifyphoneprimary()": {
          "definition": "Verify_phone__primary(string isIsNot)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ProfileEditPhonesWorkflow"
    },
    "classsearch": {
      "namespace": "",
      "methods": {
        "resultcountgreaterthan()": {
          "definition": "Result_Count_Greater_Than(int expected)"
        },
        "resultcountequals()": {
          "definition": "Result_Count_Equals(int expected)"
        },
        "search()": {
          "definition": "Search()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "ClassSearch"
    },
    "vehicleedit": {
      "namespace": "",
      "methods": {
        "markasinactive()": {
          "definition": "Mark_as_Inactive()"
        },
        "enterasmake()": {
          "definition": "Enter__as_Make(string make)"
        },
        "editvehiclefromorganization()": {
          "definition": "Edit_vehicle_from_organization(string vehicleName, string organizationName)"
        },
        "enterasname()": {
          "definition": "Enter_as_Name(string vehicleName)"
        },
        "selectasnimsavailability()": {
          "definition": "Select_as_NIMS_Availability(string value)"
        },
        "enterasvin()": {
          "definition": "Enter_as_VIN(string vin)"
        },
        "enterasdateremovedfromservice()": {
          "definition": "Enter_as_Date_Removed_from_Service(DateTime date)"
        },
        "addnewvehicle()": {
          "definition": "Add_new_Vehicle()"
        },
        "enterasdescription()": {
          "definition": "Enter__as_Description(string description)"
        },
        "enterascolorscheme()": {
          "definition": "Enter__as_Color_Scheme(string colorScheme)"
        },
        "addnewvehicletoorganization()": {
          "definition": "Add_new_Vehicle_to_organization(string organizationName)"
        },
        "selectasnimscategory()": {
          "definition": "Select_as_NIMS_Category(string value)"
        },
        "selectasnimsresource()": {
          "definition": "Select_as_NIMS_Resource(string value)"
        },
        "enterasdateenteredservice()": {
          "definition": "Enter_as_Date_entered_Service(DateTime date)"
        },
        "selectasnimstier()": {
          "definition": "Select_as_NIMS_Tier(string value)"
        },
        "verifyvehiclesexistunder()": {
          "definition": "Verify__Vehicles__exist_under(int count, string vehicleName, string organizationName)"
        },
        "enterasmodel()": {
          "definition": "Enter__as_Model(string model)"
        },
        "selectasvehicletype()": {
          "definition": "Select_as_Vehicle_Type( string value )"
        },
        "returntorecord()": {
          "definition": "ReturnToRecord()"
        },
        "markasactive()": {
          "definition": "Mark_as_Active()"
        },
        "savevehicle()": {
          "definition": "Save_vehicle()"
        },
        "enterasyear()": {
          "definition": "Enter__as_Year(string year)"
        },
        "selectasnimskind()": {
          "definition": "Select_as_NIMS_Kind(string value)"
        },
        "addnewvehiclenamedtoorganization()": {
          "definition": "Add_new_Vehicle_named_to_organization(string vehicleName, string organizationName)"
        },
        "enterasmileageenteredon()": {
          "definition": "Enter_as_Mileage_entered_on(string mileage, DateTime date)"
        },
        "selectasnimstype()": {
          "definition": "Select_as_NIMS_Type(string value)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "VehicleEdit"
    },
    "performancereportwatermark": {
      "namespace": "",
      "methods": {
        "verifyfirstpagewatermarkissetto()": {
          "definition": "Verify_First_Page_Watermark_is_set_to( OtherPageWatermarkOption watermarkOption )"
        },
        "verifyfirstpagewatermarkimagefilenameisblank()": {
          "definition": "Verify_First_Page_Watermark_Image_filename_is_blank()"
        },
        "savewatermarkoptions()": {
          "definition": "Save_Watermark_Options()"
        },
        "verifyotherpageswatermarkimagefilenameisblank()": {
          "definition": "Verify_Other_Pages_Watermark_Image_filename_is_blank()"
        },
        "setfirstpagewatermarkimagefilenameto()": {
          "definition": "Set_First_Page_Watermark_Image_filename_to( string filename )"
        },
        "setotherpageswatermarkimagefilenameto()": {
          "definition": "Set_Other_Pages_Watermark_Image_filename_to( string filename )"
        },
        "browsetowatermarkoptionsfor()": {
          "definition": "Browse_to_watermark_options_for( string reportLabel )"
        },
        "setotherpagessubjectblocktohundredthsofaninch()": {
          "definition": "Set_Other_Pages_Subject_Block_to__hundredths_of_an_inch( string hundredths )"
        },
        "verifyotherpageswatermarkissetto()": {
          "definition": "Verify_Other_Pages_Watermark_is_set_to( OtherPageWatermarkOption watermarkOption )"
        },
        "setfirstpagewatermarkto()": {
          "definition": "Set_First_Page_Watermark_to( OtherPageWatermarkOption watermarkOption )"
        },
        "setotherpageswatermarkto()": {
          "definition": "Set_Other_Pages_Watermark_to( OtherPageWatermarkOption watermarkOption )"
        },
        "verifyfirstpagecontentwillbeginhundredthsofaninchfromthetop()": {
          "definition": "Verify_first_page_content_will_begin_hundredths_of_an_inch_from_the_top( string displayText )"
        },
        "setfirstpagesubjectblocktohundredthsofaninch()": {
          "definition": "Set_First_Page_Subject_Block_to__hundredths_of_an_inch( string hundredths )"
        },
        "verifyotherpagescontentwillbeginhundredthsofaninchfromthetop()": {
          "definition": "Verify_other_pages_content_will_begin_hundredths_of_an_inch_from_the_top( string displayText )"
        },
        "verifyotherpageswatermarkimagefilenameissetto()": {
          "definition": "Verify_Other_Pages_Watermark_Image_filename_is_set_to( string filename )"
        },
        "verifyfirstpagewatermarkimagefilenameissetto()": {
          "definition": "Verify_First_Page_Watermark_Image_filename_is_set_to( string filename )"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PerformanceReportWatermarkWorkflow"
    },
    "portalwebform": {
      "namespace": "",
      "methods": {
        "removeattacheddocumentfromblockfield()": {
          "definition": "Remove_Attached_Document_from_block_field(int blockIndex, int fieldIndex)"
        },
        "showinvalidtokenwarning()": {
          "definition": "ShowInvalidTokenWarning()"
        },
        "selectfromthetypeahead()": {
          "definition": "Select__from_the_type_ahead(string typeAheadValue)"
        },
        "uncheckcheckboxofblockfield()": {
          "definition": "Uncheck_checkbox__of_block__field__(string label, int blockIndex, int fieldIndex)"
        },
        "setmaximumuploadfilesizetokb()": {
          "definition": "Set_Maximum_Upload_File_Size_to__kb(int maxFileSizeInKB)"
        },
        "verifyblockfieldlistitemis()": {
          "definition": "Verify_block__field__list_item__is__(int blockIndex, int fieldIndex, int listItemIndex, string value)"
        },
        "verifytypeaheadresultsshowitems()": {
          "definition": "Verify_type_ahead_results_show__items(int numberOfItems)"
        },
        "uploadinvalidfileforblockfieldexpectingerror()": {
          "definition": "Upload_invalid_file__for_block__field__expecting_error(string filename, int blockIndex, int fieldIndex)"
        },
        "uploadtextfilenamedcontainingforblockfield()": {
          "definition": "Upload_text_file_named__containing__for_block__field__(string fileName, string contents, int blockIndex, int fieldIndex)"
        },
        "verifyblockfieldhasdescription()": {
          "definition": "Verify_block__field__has_description__(int blockIndex, int fieldIndex, string description)"
        },
        "verifyuserhasnotnavigatedtothedatacollectorlist()": {
          "definition": "Verify_user_has_not_navigated_to_the_data_collector_list()"
        },
        "verifyblockfieldshowslistitems()": {
          "definition": "Verify_block__field__shows__list_items(int blockIndex, int fieldIndex, int listItemCount)"
        },
        "enterintoblockfield()": {
          "definition": "Enter__into_block__field__(string value, int blockIndex, int fieldIndex)"
        },
        "uploadfileforblockfield()": {
          "definition": "Upload_file__for_block__field__(string filename, int blockIndex, int fieldIndex, bool? isBadRequest)"
        },
        "verifyuserwasshowninvalidtokenwarning()": {
          "definition": "Verify_user_was_shown_invalid_token_warning()"
        },
        "clickcancel()": {
          "definition": "Click_Cancel()"
        },
        "verifyuserhasnavigatedtothedatacollectorlistandwasthanked()": {
          "definition": "Verify_user_has_navigated_to_the_data_collector_list_and_was_thanked()"
        },
        "verifytypeaheadresultis()": {
          "definition": "Verify__type_ahead_result_is__(string resultOrdinalString, string expectedResult)"
        },
        "verifyblockfieldrequired()": {
          "definition": "Verify_block__field____required(int blockIndex, int fieldIndex, string isIsNotRequired)"
        },
        "browsetopageforwebformaspublicuser()": {
          "definition": "Browse_to_page_for_webform__as_public_user(string webFormName)"
        },
        "verifyblockhasfields()": {
          "definition": "Verify_block__has__fields(int blockIndex, int numFields)"
        },
        "selectlikertoptionfromblockfield()": {
          "definition": "Select_Likert_option__from_block__field__(string likertText, int blockIndex, int fieldIndex)"
        },
        "binddatacollectorblocks()": {
          "definition": "BindDataCollectorBlocks(IList<PortalWebFormBlockDTO> dataCollectorBlocks)"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "verifyuserhasnavigatedtotheformnolongeravailablepage()": {
          "definition": "Verify_user_has_navigated_to_the_Form_No_Longer_Available_page()"
        },
        "checkcheckboxofblockfield()": {
          "definition": "Check_checkbox__of_block__field__(string label, int blockIndex, int fieldIndex)"
        },
        "verifyblockfieldhasvalidationmessage()": {
          "definition": "Verify_block__field__has_validation_message__(int blockIndex, int fieldIndex, string message)"
        },
        "verifyuserhasnavigatedtothedatacollectorlistandwasnotthanked()": {
          "definition": "Verify_user_has_navigated_to_the_data_collector_list_and_was_not_thanked()"
        },
        "navigatetodatacollectorlistwiththankyou()": {
          "definition": "NavigateToDataCollectorListWithThankYou()"
        },
        "uploadprotectedtextfilenamedcontainingforblockfield()": {
          "definition": "Upload_protected_text_file_named__containing__for_block__field__(string fileName, string contents, int blockIndex, int fieldIndex)"
        },
        "verifyformhasvalidationfailures()": {
          "definition": "Verify_form_has__validation_failures(int expectedNumErrors)"
        },
        "typeintotypeaheadforblockfield()": {
          "definition": "Type__into_type_ahead_for_block__field__(string searchString, int blockIndex, int fieldIndex)"
        },
        "selectfromdropdowninblockfield()": {
          "definition": "Select__from_dropdown_in_block__field__(string value, int blockIndex, int fieldIndex)"
        },
        "navigatetonotavailableerror()": {
          "definition": "NavigateToNotAvailableError()"
        },
        "navigatetodatacollectorlist()": {
          "definition": "NavigateToDataCollectorList()"
        },
        "verifyformhasblocks()": {
          "definition": "Verify_form_has__blocks(int numBlocks)"
        },
        "browsetopageforwebform()": {
          "definition": "Browse_to_page_for_webform__(string webFormName)"
        },
        "verifyblockfieldhaslabel()": {
          "definition": "Verify_block__field__has_label__(int blockIndex, int fieldIndex, string label)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalWebFormWorkflow"
    },
    "studentexamfeedbackreport": {
      "namespace": "",
      "methods": {
        "verifynumberofexamsforstudentis()": {
          "definition": "Verify_Number_Of_Exams_for_Student_is__(int itemCount)"
        },
        "verifythetestnameis()": {
          "definition": "Verify_the_Test_Name_is__(string str)"
        },
        "verifythetextforquestionis()": {
          "definition": "Verify_the_Text_for_Question_is__(string str)"
        },
        "verifyreportrundateis()": {
          "definition": "Verify_Report_Run_Date_is__(string runDate)"
        },
        "verifytheformattedquestionnameis()": {
          "definition": "Verify_the_Formatted_Question_Name_is__(string str)"
        },
        "verifytheselectedanswerletterforquestionis()": {
          "definition": "Verify_the_Selected_Answer_Letter_for_Question_is__(string str)"
        },
        "verifynumberofreportquestionsis()": {
          "definition": "Verify_Number_Of_Report_Questions_is__(int itemCount)"
        },
        "verifyfeedbackimageurlforansweris()": {
          "definition": "Verify_Feedback_Image_Url_for_Answer_is__(string str)"
        },
        "verifyfeedbackforansweris()": {
          "definition": "Verify_Feedback_for_Answer_is__(string str)"
        },
        "usingstudent()": {
          "definition": "Using_Student__(string studentName)"
        },
        "verifyquestionisnotonthereport()": {
          "definition": "Verify_question_is_not_on_the_report()"
        },
        "verifyclassnameis()": {
          "definition": "Verify_Class_Name_Is(string className)"
        },
        "usinganswer()": {
          "definition": "Using_Answer(string answerLetter)"
        },
        "verifynumberoftestquestionsis()": {
          "definition": "Verify_Number_Of_Test_Questions_is__(int itemCount)"
        },
        "verifytheformattedquestionnumberis()": {
          "definition": "Verify_the_Formatted_Question_Number_is__(string str)"
        },
        "verifynumbercorrectforstudentis()": {
          "definition": "Verify_Number_Correct_for_Student_is__(int itemCount)"
        },
        "browsetoreportpagefor()": {
          "definition": "Browse_to_Report_Page_for(string testName)"
        },
        "verifyglobalreportheaderis()": {
          "definition": "Verify_Global_Report_Header_Is(string reportHeader)"
        },
        "verifythatthefontforansweris()": {
          "definition": "Verify_That_the_font_for_Answer_is__(string state)"
        },
        "verifyheadercriterionhasitems()": {
          "definition": "Verify_Header_Criterion_has__Items(int itemCount)"
        },
        "verifythatthedisplaytextforansweris()": {
          "definition": "Verify_That_the_display_text_for_Answer_is__(string str)"
        },
        "todayis()": {
          "definition": "Today_is__(string dateToday)"
        },
        "verifyerrormessageisempty()": {
          "definition": "Verify_Error_Message_Is_Empty()"
        },
        "verifystudentcountis()": {
          "definition": "Verify_Student_Count_is__(int itemCount)"
        },
        "verifythatthemediafilebytesforanswerarethesameasthosefor()": {
          "definition": "Verify_that_the_media_file_bytes_for_Answer_are_the_same_as_those_for__(string fileName)"
        },
        "verifynumberofanswersis()": {
          "definition": "Verify_Number_Of_Answers_is__(int itemCount)"
        },
        "usingquestion()": {
          "definition": "Using_Question(string questionName)"
        },
        "verifyacademyidlabelis()": {
          "definition": "Verify_Academy_Id_Label_Is(string str)"
        },
        "binddatasource()": {
          "definition": "BindDataSource(StudentExamFeedbackReportDTO dto)"
        },
        "verifythatthedisplaylabelforansweris()": {
          "definition": "Verify_That_the_display_label_for_Answer_is__(string str)"
        },
        "verifyreportheaderis()": {
          "definition": "Verify_Report_Header_is__( string valueText)"
        },
        "verifyreportnameis()": {
          "definition": "Verify_Report_Name_is__(string valueText)"
        },
        "verifythatthemediafilebytesforquestionarethesameasthosefor()": {
          "definition": "Verify_that_the_media_file_bytes_for_Question_are_the_same_as_those_for__(string fileName)"
        },
        "verifyheadercriterionhasitemlabelledwithtext()": {
          "definition": "Verify_Header_Criterion_has_Item_labelled__with_text__(string labelText, string valueText)"
        },
        "verifyquestionisonthereport()": {
          "definition": "Verify_question_is_on_the_report()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "StudentExamFeedbackReportWorkflow"
    },
    "rulesmanagement": {
      "namespace": "",
      "methods": {
        "removefacilityrulefromblock()": {
          "definition": "Remove_facility_rule_from_block(string blockName)"
        },
        "rulerequirescertificationin()": {
          "definition": "Rule__requires_certification_in__(string ruleName, string certName)"
        },
        "addpersonnelruletoblock()": {
          "definition": "Add_personnel_rule_to_block(string ruleName, string blockName)"
        },
        "verifyactivityinscheduledclasshasfacilityrulerequiring()": {
          "definition": "Verify_activity_in_scheduled_class_has_facility_rule_requiring(string activityName, string className, string categoryName)"
        },
        "createfacilityrulerequiringfacilitiesnamed()": {
          "definition": "Create_facility_rule_requiring_facilities_named(string ruleName, int count, string facilityName)"
        },
        "verifyactivityinscheduledclasshaspersonnelrulerequiringinstructors()": {
          "definition": "Verify_activity_in_scheduled_class_has_personnel_rule_requiring__instructors(string activityName, string className, int numInstructors)"
        },
        "usingactivityschedule()": {
          "definition": "using_Activity_Schedule( string activityScheduleName )"
        },
        "verifyblockhasfacilityrule()": {
          "definition": "Verify_block_has_facility_rule(string blockName, string ruleName)"
        },
        "verifyschedulehasfacilityrule()": {
          "definition": "Verify_schedule_has_facility_rule(string scheduleName, string ruleName)"
        },
        "verifypersonnelruleappliestoschedulingactivity()": {
          "definition": "Verify_personnel_rule_applies_to_scheduling_activity( string ruleName, string activityName )"
        },
        "verifyscheduledclasshaspersonnelrulerequiringinstructors()": {
          "definition": "Verify_scheduled_class_has_personnel_rule_requiring__instructors(string className, int numInstructors)"
        },
        "verifyblockinactivityinscheduledclasshaspersonnelrulerequiringinstructors()": {
          "definition": "Verify_block_in_activity_in_scheduled_class_has_personnel_rule_requiring_instructors(string blockName, string activityName, string className, int numInstructors)"
        },
        "verifyblockhaspersonnelrule()": {
          "definition": "Verify_block_has_personnel_rule(string blockName, string ruleName)"
        },
        "createfacilityrulerequiringfacilitynamed()": {
          "definition": "Create_facility_rule_requiring_facility_named(string ruleName, string facilityName)"
        },
        "rulerequiresdivisonof()": {
          "definition": "Rule__requires_divison_of__( string ruleName, string divisionName )"
        },
        "verifyactivityinschedulehaspersonnelrule()": {
          "definition": "Verify_activity_in_schedule_has_personnel_rule(string activityName, string scheduleName, string ruleName)"
        },
        "addpersonnelruletoschedule()": {
          "definition": "Add_personnel_rule_to_schedule_(string ruleName, string scheduleName)"
        },
        "ruleisanaffinityrule()": {
          "definition": "Rule_is_an_affinity_rule(string ruleName)"
        },
        "verifypersonnelruleappliestoschedule()": {
          "definition": "Verify_personnel_rule_applies_to_schedule_( string ruleName, string scheduleName )"
        },
        "addpersonnelruletoschedulingactivity()": {
          "definition": "Add_personnel_rule__to_scheduling_activity__(string ruleName, string activityName)"
        },
        "createpersonnelrulerequiringinstructors()": {
          "definition": "Create_personnel_rule_requiring_instructors(string ruleName, int num)"
        },
        "verifypersonnelruleappliestoblock()": {
          "definition": "Verify_personnel_rule_applies_to_block(string ruleName, string blockName)"
        },
        "createequipmentrulerequiringequipmentnamed()": {
          "definition": "Create_equipment_rule_requiring_equipment_named(string ruleName, int count, string equipmentName)"
        },
        "usingclassschedule()": {
          "definition": "using_class_schedule_( string classScheduleName )"
        },
        "facilityruleisanaffinityrule()": {
          "definition": "Facility_rule_is_an_affinity_rule(string ruleName)"
        },
        "addfacilityruletoschedule()": {
          "definition": "Add_facility_rule_to_schedule_(string ruleName, string scheduleName)"
        },
        "verifyactivityinschedulehasfacilityrule()": {
          "definition": "Verify_activity_in_schedule_has_facility_rule(string activityName, string scheduleName, string ruleName)"
        },
        "removefacilityrulefromactivityoverlay()": {
          "definition": "Remove_facility_rule_from_activity_overlay(string activityName)"
        },
        "verifyfacilityrulewaspersisted()": {
          "definition": "Verify_facility_rule_was_persisted(string ruleName)"
        },
        "removefacilityrulefromactivity()": {
          "definition": "Remove_facility_rule_from_activity(string activityName)"
        },
        "verifyfacilityruleappliestoschedule()": {
          "definition": "Verify_facility_rule_applies_to_schedule__( string ruleName, string scheduleName )"
        },
        "addfacilityruletoblock()": {
          "definition": "Add_facility_rule_to_block(string ruleName, string blockName)"
        },
        "createfacilityrulerequiring()": {
          "definition": "Create_facility_rule_requiring(string ruleName, int count, string categoryName)"
        },
        "addfacilityruletoschedulingactivity()": {
          "definition": "Add_facility_rule_to_scheduling_activity(string ruleName, string activityName)"
        },
        "rulecanbefulfilledbyaninstructorwithanylevelofauthorization()": {
          "definition": "Rule__can_be_fulfilled_by_an_instructor_with_any_level_of_authorization( string ruleName )"
        },
        "removefacilityrulefromclass()": {
          "definition": "Remove_facility_rule_from_class(string className)"
        },
        "verifypersonnelrulewaspersisted()": {
          "definition": "verify_personnel_rule__was_persisted( string ruleName )"
        },
        "addequipmentruletoblock()": {
          "definition": "Add_equipment_rule_to_block(string ruleName, string blockName)"
        },
        "verifyfacilityruleappliestoschedulingactivity()": {
          "definition": "Verify_facility_rule_applies_to_scheduling_activity( string ruleName, string activityName )"
        },
        "verifyschedulehaspersonnelrule()": {
          "definition": "Verify_schedule_has_personnel_rule(string scheduleName, string ruleName)"
        },
        "verifyfacilityruleappliestoblock()": {
          "definition": "Verify_facility_rule_applies_to_block(string ruleName, string blockName)"
        },
        "verifyscheduledclasshasfacilityrulerequiringcategory()": {
          "definition": "Verify_scheduled_class_has_facility_rule_requiring_category(string className, string categoryName)"
        },
        "createequipmentrulerequiring()": {
          "definition": "Create_equipment_rule_requiring(string ruleName, int count, string categoryName)"
        },
        "rulecanbefulfilledbyaninstructorwithauthorization()": {
          "definition": "Rule__can_be_fulfilled_by_an_instructor_with__authorization( string ruleName, string authLevelName )"
        },
        "verifyblockinactivityinscheduledclasshasfacilityrulerequiring()": {
          "definition": "Verify_block_in_activity_in_scheduled_class_has_facility_rule_requiring(string blockName, string activityName, string className, string categoryName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "RulesManagement"
    },
    "persontags": {
      "namespace": "",
      "methods": {
        "enterintypeahead()": {
          "definition": "Enter__in_type_ahead(string term)"
        },
        "selectexistingtag()": {
          "definition": "Select_existing_tag__(string tagName)"
        },
        "clearbaselinetags()": {
          "definition": "Clear_baseline_tags()"
        },
        "addnewtag()": {
          "definition": "Add_new_tag__(string tagName)"
        },
        "browsetotageditorfor()": {
          "definition": "Browse_to_tag_editor_for__(string personName)"
        },
        "verifytherearetypeaheadresults()": {
          "definition": "Verify_there_are__type_ahead_results(int count)"
        },
        "removetag()": {
          "definition": "Remove_tag__(string tagName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PersonTags"
    },
    "completedtrainingbycategory": {
      "namespace": "",
      "methods": {
        "verifyinprogressfootnotevisible()": {
          "definition": "Verify_In_Progress_footnote__visible(string status)"
        },
        "verifyselectedappointmenttypeisempty()": {
          "definition": "Verify_selected_Appointment_Type_is_empty()"
        },
        "verifysuborganizationoptionsinclude()": {
          "definition": "Verify_SubOrganization_options_include_(List<string> expectedOptions)"
        },
        "verifypersoncategoryiswithhours()": {
          "definition": "Verify__person__category_is__with__hours(string ordinal, string categoryOrd, string categoryName, string hours)"
        },
        "verifytherearepeopleshown()": {
          "definition": "Verify_there_are__people_shown(int numPeople)"
        },
        "bindtraining()": {
          "definition": "BindTraining(List<CompletedTrainingByCategoryDto> dto)"
        },
        "selectforsuborganizations()": {
          "definition": "Select__for_Sub_Organizations(List<string> selections)"
        },
        "setfootnotedisplay()": {
          "definition": "SetFootnoteDisplay(bool hasUnapproved, bool hasInProgress)"
        },
        "verifyemploymenttypeoptionsinclude()": {
          "definition": "Verify_Employment_Type_options_include_(List<string> expectedOptions)"
        },
        "verifyselectedemploymenttypeisempty()": {
          "definition": "Verify_selected_Employment_Type_is_empty()"
        },
        "selectforemploymenttypes()": {
          "definition": "Select__for_Employment_Types(List<string> selections)"
        },
        "verifypersonhastrainingcategories()": {
          "definition": "Verify__person_has__Training_Categories(string ordinal, int number)"
        },
        "setemptydatamessagevisibility()": {
          "definition": "SetEmptyDataMessageVisibility(bool visible)"
        },
        "verifyemptydatemessagevisible()": {
          "definition": "Verify_empty_date_message__visible(string status)"
        },
        "verifyemptyfiltersmessagevisible()": {
          "definition": "Verify_empty_filters_message__visible(string status)"
        },
        "selectforappointmenttypes()": {
          "definition": "Select__for_Appointment_Types(List<string> selections)"
        },
        "verifypersoncategoryhaveanunapprovedfootnote()": {
          "definition": "Verify__person__category__have_an_unapproved_footnote(string ordinal, string categoryOrd, string status)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifypersonhaveanunapprovedfootnote()": {
          "definition": "Verify__person__have_an_unapproved_footnote(string ordinal, string status)"
        },
        "bindyearranges()": {
          "definition": "BindYearRanges(IEnumerable<int> years)"
        },
        "selectsearchbyyearrange()": {
          "definition": "Select_Search_By_Year_Range()"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "verifypersoncategoryhaveaninprogressfootnote()": {
          "definition": "Verify__person__category__have_an_in_progress_footnote(string ordinal, string categoryOrd, string status)"
        },
        "verifyunapprovedfootnotevisible()": {
          "definition": "Verify_Unapproved_footnote__visible(string status)"
        },
        "selectsearchbycustomdates()": {
          "definition": "Select_Search_By_Custom_Dates()"
        },
        "clearallfilters()": {
          "definition": "Clear_All_Filters()"
        },
        "verifypersonhaveaninprogressfootnote()": {
          "definition": "Verify__person__have_an_in_progress_footnote(string ordinal, string status)"
        },
        "verifyappointmenttypeoptionsinclude()": {
          "definition": "Verify_Appointment_Type_options_include_(List<string> expectedOptions)"
        },
        "verifyselectedsuborganizationisempty()": {
          "definition": "Verify_selected_SubOrganization_is_empty()"
        },
        "verifypersoniswithacademyidandemploymenttypeandappointmenttypeandtotaltraininghours()": {
          "definition": "Verify__person_is__with_academy_id__and_employment_type__and_appointment_type__and__total_training_hours(string ordinal, string personName, string academyId, string employmentType, string appointmentType, string totalHours)"
        },
        "verifyyearrangefilterisselected()": {
          "definition": "Verify_Year_range_filter_is_selected()"
        },
        "setdefaultfiltermessagevisibility()": {
          "definition": "SetDefaultFilterMessageVisibility(bool visible)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "CompletedTrainingByCategoryWorkflow"
    },
    "questionanalysiscondensedreport": {
      "namespace": "",
      "methods": {
        "verifyhighscoreis()": {
          "definition": "Verify_high_score_is(string highScore)"
        },
        "verifythereportshowsfootnotekeyhastext()": {
          "definition": "Verify_the_report_shows_footnote_key__has_text__(int key, string footnote)"
        },
        "verifylowscoreis()": {
          "definition": "Verify_low_score_is(string lowScore)"
        },
        "verifytherowfortesteditionshowsfootnotes()": {
          "definition": "Verify_the_row_for_test_edition__shows_footnotes__(string testEditionName, string footnotes)"
        },
        "verifyclassnameis()": {
          "definition": "Verify_class_name_is(string className)"
        },
        "browsetoquestionanalysiscondensedreportfor()": {
          "definition": "Browse_to_Question_Analysis_Condensed_Report_for(string testName)"
        },
        "verifythereisdataforexammaster()": {
          "definition": "Verify_there_is_data_for_exam_master(string masterName)"
        },
        "verifythereportshowsfootnotes()": {
          "definition": "Verify_the_report_shows__footnotes(int numberOfFootnotes)"
        },
        "verifytherowfortesteditionshowsachancescoreofandacronbachsalphaof()": {
          "definition": "Verify_the_row_for_test_edition__shows_a_chance_score_of__and_a_cronbachs_alpha_of__(string testEditionName, string chance, string cronbachsAlphaOrKR20)"
        },
        "verifymaxnumberofanswersforanyquestionis()": {
          "definition": "Verify_max_number_of_answers_for_any_question_is(int maxNumberOfAnswers)"
        },
        "verifypercentpassingis()": {
          "definition": "Verify_percent_passing_is(string percentPassing)"
        },
        "hideunrequiredanswercolumns()": {
          "definition": "HideUnRequiredAnswerColumns(int numberOfRequiredColumns)"
        },
        "setdatasource()": {
          "definition": "SetDataSource(ExamQuestionAnalysisCondensedReportDTO data)"
        },
        "verifyreportdaterangeis()": {
          "definition": "Verify_report_date_range_is(string dateRange)"
        },
        "verifydataforhasarecordforquestion()": {
          "definition": "Verify_data_for__has_a_record_for_question__(string masterName, string questionAlias)"
        },
        "verifytherowfortesteditionshowsaskewnessofandakurtosisof()": {
          "definition": "Verify_the_row_for_test_edition__shows_a_skewness_of__and_a_kurtosis_of__(string testEditionName, string skewness, string kurtosis)"
        },
        "verifyaveragescoreis()": {
          "definition": "Verify_average_score_is(string avgScore)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "QuestionAnalysisCondensedReportWorkflow"
    },
    "requestpersonnelupdate": {
      "namespace": "",
      "methods": {
        "selectfromtheemploymentstatusdropdown()": {
          "definition": "Select__from_the_employment_status_dropdown(string statusDescription)"
        },
        "settitleto()": {
          "definition": "set_title_to__(string title)"
        },
        "verifysearchselectedperson()": {
          "definition": "Verify_search_selected_person__(string name)"
        },
        "verifythatisintheemploymentstatusdropdown()": {
          "definition": "Verify_that__is_in_the_employment_status_dropdown(string statusDescription)"
        },
        "returntoworkforcepersonnelpage()": {
          "definition": "ReturnToWorkforcePersonnelPage()"
        },
        "setrequesttypeto()": {
          "definition": "Set_request_type_to__(string updateOrRemove)"
        },
        "bindaddrequestappointmenttypes()": {
          "definition": "BindAddRequestAppointmentTypes(IList<NamedItem> appointmentTypes)"
        },
        "verifythatthereareemployeesintheemployeedropdown()": {
          "definition": "Verify_that_there_are__employees_in_the_employee_dropdown(int personnelCount)"
        },
        "setorganizationvisibility()": {
          "definition": "SetOrganizationVisibility(bool showOrganizationDdl)"
        },
        "setappointmenttypeto()": {
          "definition": "Set_appointment_type_to__(string appointmentType)"
        },
        "selectfromtheemployeedropdown()": {
          "definition": "Select__from_the_employee_dropdown(string employeeDescription)"
        },
        "setseparationdateto()": {
          "definition": "Set_separation_date_to__(DateTime separationDate)"
        },
        "verifyhiredateis()": {
          "definition": "Verify_hire_date_is__(string hireDate)"
        },
        "bindaddrequestemploymenttypes()": {
          "definition": "BindAddRequestEmploymentTypes(IList<NamedItem> employmentTypes)"
        },
        "verifythereareemploymentsshowing()": {
          "definition": "Verify_there_are_employments_showing(int employmentCount)"
        },
        "enterlastnameinsearchcriteria()": {
          "definition": "Enter_last_name__in_search_criteria(string lastName)"
        },
        "bindaddrequesttitleranks()": {
          "definition": "BindAddRequestTitleRanks(IList<NamedItem> titlesAndRanks)"
        },
        "clickcancel()": {
          "definition": "Click_Cancel()"
        },
        "verifyrequesttypeis()": {
          "definition": "Verify_request_type_is__(string updateOrRemove)"
        },
        "verifythatisintheemploymentactiondropdown()": {
          "definition": "Verify_that__is_in_the_employment_action_dropdown(string actionDescription)"
        },
        "verifythattheactionintheemploymentactiondropdownis()": {
          "definition": "Verify_that_the__action_in_the_employment_action_dropdown_is__(string ordinal, string actionDescription)"
        },
        "bindremovalrequestemploymentstatuses()": {
          "definition": "BindRemovalRequestEmploymentStatuses(IList<NamedItem> separationStatuses)"
        },
        "verifytheemploymentischecked()": {
          "definition": "Verify_the__employment__is_checked(string ordinal, string employmentDescription)"
        },
        "verifysearchdidnotselectaperson()": {
          "definition": "Verify_search_did_not_select_a_person()"
        },
        "setremovalcommentsto()": {
          "definition": "Set_removal_comments_to__(string comments)"
        },
        "verifynamefieldlabelis()": {
          "definition": "Verify_name_field_label_is__(string label)"
        },
        "bindremovalrequestemployees()": {
          "definition": "BindRemovalRequestEmployees(IList<PersonnelChangeRequestEmployeeDTO> employees)"
        },
        "bindaddrequestorganizations()": {
          "definition": "BindAddRequestOrganizations(IList<NamedItem> organizations)"
        },
        "verifythattheemployeeintheemployeedropdownis()": {
          "definition": "Verify_that_the__employee_in_the_employee_dropdown_is__(string ordinal, string employeeDescription)"
        },
        "verifyacademyiddisplayedis()": {
          "definition": "Verify_academy_id_displayed_is__(string academyId)"
        },
        "verifywewentbacktotheworkforcepage()": {
          "definition": "Verify_we_went_back_to_the_workforce_page()"
        },
        "clicksearch()": {
          "definition": "Click_search()"
        },
        "clicksubmit()": {
          "definition": "Click_Submit()"
        },
        "selectfromtheemploymentactiondropdown()": {
          "definition": "Select__from_the_employment_action_dropdown(string actionDescription)"
        },
        "bindemploymentactions()": {
          "definition": "BindEmploymentActions(IList<NamedItem> employmentActions)"
        },
        "setemploymenttypeto()": {
          "definition": "Set_employment_type_to__(string employmentType)"
        },
        "sethirecommentsto()": {
          "definition": "Set_hire_comments_to__(string comments)"
        },
        "clicksearchforadifferentperson()": {
          "definition": "Click_search_for_a_different_person()"
        },
        "verifythatthestatusintheemploymentstatusdropdownis()": {
          "definition": "Verify_that_the__status_in_the_employment_status_dropdown_is__(string ordinal, string statusDescription)"
        },
        "enteracademyidinsearchcriteria()": {
          "definition": "Enter_academy_id__in_search_criteria(string academyId)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "RequestPersonnelUpdateWorkflow"
    },
    "registrationhousingavailability": {
      "namespace": "",
      "methods": {
        "verifytotalreservedbedsis()": {
          "definition": "Verify_total_reserved_beds_is__(int totalReservedBeds)"
        },
        "dispose()": {
          "definition": "Dispose()"
        },
        "verifytotaldetailsaretotalmalefemaleandunspecified()": {
          "definition": "Verify__total_details_are__total__male__female_and__unspecified(string usageName, int totalCount, int maleCount, int femaleCount, int unspecifiedCount)"
        },
        "verifytotalresidentsenrolledis()": {
          "definition": "Verify_total_residents_enrolled_is__(int totalResidentsEnrolled)"
        },
        "verifyotherinventoryrowsareshown()": {
          "definition": "Verify__other_inventory_rows_are_shown(int rowCount)"
        },
        "verifyavailabledetailsaretotalmalefemaleandunspecified()": {
          "definition": "Verify__available_details_are__total__male__female_and__unspecified(string usageName, int totalCount, int maleCount, int femaleCount, int unspecifiedCount)"
        },
        "verifyotherinventoryrowliststotalreservednotassignedandavailable()": {
          "definition": "Verify__other_inventory_row_lists__total__reserved_not_assigned_and__available(string usageName, int totalCount, int rnaCount, int availableCount)"
        },
        "verifyreservednotassigneddetailsaretotalmalefemaleandunspecified()": {
          "definition": "Verify__reserved_not_assigned_details_are__total__male__female_and__unspecified(string usageName, int totalCount, int maleCount, int femaleCount, int unspecifiedCount)"
        },
        "verifytotalresidentspendingis()": {
          "definition": "Verify_total_residents_pending_is__(int totalResidentsPending)"
        },
        "verifyrowis()": {
          "definition": "Verify_row__is__(int rowNumber, List<string> rowData)"
        },
        "verifysummaryhasrows()": {
          "definition": "Verify_summary_has__rows(int numberOfRows)"
        },
        "onregistrationrosterforclassclickcallouticon()": {
          "definition": "On_registration_roster_for_class__click_callout_icon(string className)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "RegistrationHousingAvailabilityWorkflow"
    },
    "scheduleconflicts": {
      "namespace": "",
      "methods": {
        "browsetoforclassforfacilityrule()": {
          "definition": "Browse_to_for_class_for_facility_rule(string className, string blockName, string ruleName)"
        },
        "browsetoforclassassignabletype()": {
          "definition": "Browse_to_for_class_assignable_type(string className, AssignableType assignableType)"
        },
        "ignoreconflict()": {
          "definition": "Ignore_conflict(string conflict)"
        },
        "verifyconflictexists()": {
          "definition": "Verify_conflict__exists(string conflict)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifyhasconflictrow()": {
          "definition": "Verify_has_conflict_row(string conflict)"
        },
        "verifyhasconflicts()": {
          "definition": "Verify_has_conflicts(int conflictCount)"
        },
        "verifyhasconflictsoftype()": {
          "definition": "Verify_has__conflicts_of_type__(int conflictCount, string type)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ScheduleConflictsWorkflow"
    },
    "sendbankinginformation": {
      "namespace": "",
      "methods": {
        "verifyaccounttypescontains()": {
          "definition": "Verify_account_types_contains__(string accountType)"
        },
        "showinfosent()": {
          "definition": "ShowInfoSent()"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for__(string personName)"
        },
        "verifyselectionforaccounttypeisempty()": {
          "definition": "Verify_selection_for_AccountType_is_empty()"
        },
        "verifyinfosentmodaldisplayed()": {
          "definition": "Verify_info_sent_modal__displayed(string wasWasNot)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "SendBankingInformationWorkflow"
    },
    "testopiaconfigurationmanager": {
      "namespace": "",
      "methods": {
        "setappsetting()": {
          "definition": "SetAppSetting(AcadisConfigurationSettings key, string value)"
        },
        "reset()": {
          "definition": "Reset()"
        }
      },
      "parent-name": null,
      "class-name": "TestopiaConfigurationManager"
    },
    "mvbasecontrol": {
      "namespace": "",
      "methods": {
        "accessdenied()": {
          "definition": "AccessDenied()"
        }
      },
      "parent-name": null,
      "class-name": "MVBaseControlWorkflow"
    },
    "personmanagement": {
      "namespace": "",
      "methods": {
        "createpersonwithfullnameacademyidandssn()": {
          "definition": "Create_person_with_full_name_academy_id_and_ssn( string fullName, string academyID, string ssn )"
        },
        "makeaninstructor()": {
          "definition": "Make__an_instructor(string personNameLastFirst)"
        },
        "selectstatus()": {
          "definition": "Select_Status(PersonStatus status)"
        },
        "createpersonwithfirstnamelastnamemiddlenameacademyid()": {
          "definition": "Create_Person_With_First_Name_Last_Name_Middle_Name_Academy_Id( string firstName, string lastName, string middleName, string academyId, bool isInstructor )"
        },
        "employmentdutyassignmentendis()": {
          "definition": "Employment_Duty_Assignment_end_is(DateTime date)"
        },
        "verifythatdoesnothaveaphonenumber()": {
          "definition": "Verify_that_does_not_have_a_phone_number( string name )"
        },
        "setstatusto()": {
          "definition": "set_status_to__(PersonStatus status)"
        },
        "selectgender()": {
          "definition": "Select_Gender__(string gender)"
        },
        "heightis()": {
          "definition": "height_is__(int height)"
        },
        "checkthatcurrentpersonhasemptygender()": {
          "definition": "Check_that_current_person_has_empty_gender()"
        },
        "employmenttitlerankis()": {
          "definition": "Employment_TitleRank_is(string title)"
        },
        "verifypersonisinactive()": {
          "definition": "Verify_Person_is_inactive(string nameFirstLast)"
        },
        "createprimaryemploymentunder()": {
          "definition": "create_primary_employment_under(string orgName)"
        },
        "eyecoloris()": {
          "definition": "eye_color_is__(string color)"
        },
        "verifyhasportalaccount()": {
          "definition": "Verify__has_portal_account_(string personName, string userName)"
        },
        "verifyhasend()": {
          "definition": "Verify_has_end(string dutyAssignmentName, DateTime date)"
        },
        "usingperson()": {
          "definition": "Using_Person(string nameFirstLast)"
        },
        "selectthispersonaninstructor()": {
          "definition": "Select_This_Person__an_Instructor(string isOrIsNot)"
        },
        "employmentdutyassignmentstartis()": {
          "definition": "Employment_Duty_Assignment_start_is(DateTime date)"
        },
        "createpersonwithfirstnamelastnameacademyid()": {
          "definition": "Create_Person_With_First_Name_Last_Name_Academy_Id(string firstName, string lastName, string academyId)"
        },
        "personwithlastnamefirstnamessnacademyidisduplicate()": {
          "definition": "Person_with_Last_Name_First_Name_SSN_Academy_ID_is_duplicate(string last, string first, string ssn, string academyID)"
        },
        "entersuffix()": {
          "definition": "Enter_Suffix__(string suffix)"
        },
        "setemploymentstatusto()": {
          "definition": "Set_Employment_Status_to(string statusName)"
        },
        "verifythathasaddressandtype()": {
          "definition": "Verify_that_has_address_and_type( string name, string address, string phoneType )"
        },
        "driverslicenseforstateis()": {
          "definition": "Drivers_license_for_state__is__(string state, string number)"
        },
        "enterdateofbirth()": {
          "definition": "Enter_Date_of_Birth__(DateTime dob)"
        },
        "verifythathasemploymentat()": {
          "definition": "Verify_that_has_employment_at( string personName, string orgName )"
        },
        "selectdivision()": {
          "definition": "Select_Division(string divisions)"
        },
        "birthdateis()": {
          "definition": "Birthdate_is( DateTime dob )"
        },
        "verifyhasdutyassignment()": {
          "definition": "Verify_has_Duty_Assignment(string nameFirstLast, string organization)"
        },
        "verifythatdoesnothaveanaddress()": {
          "definition": "Verify_that_does_not_have_an_address( string name )"
        },
        "verifyhasstart()": {
          "definition": "Verify_has_start(string dutyAssignmentName, DateTime date)"
        },
        "save()": {
          "definition": "Save(Person person)"
        },
        "verifyhasacadisaccount()": {
          "definition": "Verify__has_Acadis_account_(string personName, string userName)"
        },
        "createmalepersonnamed()": {
          "definition": "Create_male_person_named( string fullName )"
        },
        "middlenameis()": {
          "definition": "Middle_name_is__(string middleName)"
        },
        "createinstructorwithavailabilityof()": {
          "definition": "Create_instructor_with_availability_of( string fullName, string availProfileName )"
        },
        "alertonprimaryset()": {
          "definition": "AlertOnPrimarySet()"
        },
        "employmenthiredateis()": {
          "definition": "Employment_Hire_Date_is(DateTime date)"
        },
        "ssnis()": {
          "definition": "SSN_is(string ssn)"
        },
        "setmaximumworkloadtohoursper()": {
          "definition": "Set_Maximum_Workload_to_Hours__per__(string maxHours, string maxHourPer)"
        },
        "verifypersondoesnotexist()": {
          "definition": "Verify_Person__does_not_exist( string fullName )"
        },
        "setudfto()": {
          "definition": "Set_Udf__to__(string label, string value)"
        },
        "createpersonas()": {
          "definition": "create_Person_as(string lastName)"
        },
        "enterssn()": {
          "definition": "Enter_SSN__(string ssn)"
        },
        "verifypersonexists()": {
          "definition": "Verify_Person__exists(string fullName)"
        },
        "createinstructorwithavailabilityofandmaxassignmentofhoursper()": {
          "definition": "Create_instructor_with_availability_of_and_max_assignment_of_hours_per( string fullName, string availProfileName, string hours, string hourPer )"
        },
        "assigntodivision()": {
          "definition": "Assign__to_division__(string personName, string divisionName)"
        },
        "createinstructorwithavailabilityofindivisions()": {
          "definition": "Create_instructor_with_availability_of__in_divisions__(string fullName, string availProfileName, string divisionNames)"
        },
        "verifythatdoesnothaveemploymentat()": {
          "definition": "Verify_that_does_not_have_employment_at( string personName, string orgName )"
        },
        "verifygenderis()": {
          "definition": "Verify_gender_is_(Gender gender)"
        },
        "statusis()": {
          "definition": "status_is__(PersonStatus status)"
        },
        "createpersonnamed()": {
          "definition": "Create_person_named__(string firstLastName)"
        },
        "createactiveportalaccesswithpermissionsinfrom()": {
          "definition": "create_active_portal_access_with_permissions_in__from(string param1, string param2, string orgName)"
        },
        "employmentorganizationis()": {
          "definition": "Employment_Organization_is(string orgName)"
        },
        "driverslicenseforis()": {
          "definition": "Drivers_License_for__is__(string fullName, string driversLicense)"
        },
        "bloodtypeis()": {
          "definition": "blood_type_is__(string bloodType)"
        },
        "driverslicenseis()": {
          "definition": "Drivers_License_is( string driversLicense )"
        },
        "verifypersonisactive()": {
          "definition": "Verify_Person_is_active(string nameFirstLast)"
        },
        "createstudents()": {
          "definition": "create_students(int numOfPeople)"
        },
        "genderis()": {
          "definition": "Gender_is__(string gender)"
        },
        "wasabsentfor()": {
          "definition": "_was_absent_for_(string instructorFullName, string segmentName)"
        },
        "createpersonnamedwithssnandgender()": {
          "definition": "Create_person_named_with_SSN_and_gender( string name, string ssn, string gender )"
        },
        "eeoccategoryis()": {
          "definition": "EEOC_Category_is__(string eeocCategory)"
        },
        "saveperson()": {
          "definition": "Save_Person( string personFullName )"
        },
        "saveemployment()": {
          "definition": "Save_Employment()"
        },
        "displayasprimary()": {
          "definition": "DisplayAsPrimary(bool hasMultipleEmployments)"
        },
        "suffixis()": {
          "definition": "Suffix_is__(string suffix)"
        },
        "verifyhasstatus()": {
          "definition": "Verify_has_status(string dutyAssignmentName, string status)"
        },
        "setpersonudfto()": {
          "definition": "set_person_udf__to__(string udfName, string value)"
        },
        "employmenttypeis()": {
          "definition": "Employment_Type_is(string title)"
        },
        "createpersonwithfirstnamelastnamemiddle()": {
          "definition": "Create_person_with_first_name__last_name__middle__(string firstName, string lastName, string middleName)"
        },
        "employmentappointmenttypeis()": {
          "definition": "Employment_Appointment_Type_is(string title)"
        },
        "updatecurrentpersonfromdatabase()": {
          "definition": "update_current_person_from_database()"
        },
        "haircoloris()": {
          "definition": "hair_color_is__(string color)"
        },
        "verifythathasphonenumberandtype()": {
          "definition": "Verify_that_has_phone_number_and_type( string name, string number, string phoneType )"
        },
        "weightis()": {
          "definition": "weight_is__(int weight)"
        },
        "checkthatcurrentpersonhasgender()": {
          "definition": "Check_that_current_person_has_gender( Gender gender )"
        },
        "setavailabilityprofileto()": {
          "definition": "Set_Availability_Profile_to__(string availabilityProfile)"
        },
        "employmentdutyassignmentisstatus()": {
          "definition": "Employment_Duty_Assignment_is_status(string orgName, string status)"
        },
        "deleteperson()": {
          "definition": "Delete_Person(string nameFirstLast)"
        },
        "dateofbirthis()": {
          "definition": "date_of_birth_is__(DateTime dob)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "PersonManagement"
    },
    "personflaglist": {
      "namespace": "",
      "methods": {
        "verifynameis()": {
          "definition": "Verify_name_is__(string name)"
        },
        "verifyaddedonis()": {
          "definition": "Verify_added_on_is__(string addedOn)"
        },
        "browsetopageforperson()": {
          "definition": "Browse_to_Page_For_Person__(string name)"
        },
        "verifysymbolis()": {
          "definition": "Verify_symbol_is__(string symbolDescription)"
        },
        "bindpersonflags()": {
          "definition": "BindPersonFlags(IList<PersonFlagListItemDTO> personFlags)"
        },
        "verifydescriptionis()": {
          "definition": "Verify_description_is__(string description)"
        },
        "verifythereareflagsinthelist()": {
          "definition": "Verify_there_are__flags_in_the_list(int numberOfFlags)"
        },
        "clickremove()": {
          "definition": "Click_remove()"
        },
        "considerrow()": {
          "definition": "Consider_row__(int rowNumber)"
        },
        "verifyaddedbyis()": {
          "definition": "Verify_added_by_is__(string addedBy)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PersonFlagListWorkflow"
    },
    "addresident": {
      "namespace": "",
      "methods": {
        "enterforotherorganizationtypeahead()": {
          "definition": "Enter__for_Other_Organization_typeahead(string searchText)"
        },
        "verifythatpurposecollected()": {
          "definition": "Verify_that_Purpose__collected(string isIsNotCollectedStr)"
        },
        "selectforgrant()": {
          "definition": "Select__for_Grant(string grant)"
        },
        "showprocessbasedonstatus()": {
          "definition": "ShowProcessBasedOnStatus(HousingStatus? status)"
        },
        "verifyoptionsforroomincludeunder()": {
          "definition": "Verify_options_for_room_include__under__(string roomName, string groupName)"
        },
        "verifyroomavailableoncheckindate()": {
          "definition": "Verify_room__available_on_check_in_date(string isIsNotAvailable)"
        },
        "setgenderchangewarningvisibility()": {
          "definition": "SetGenderChangeWarningVisibility(bool visible)"
        },
        "selectassignthisresidenttoaroom()": {
          "definition": "Select_assign_this_resident_to_a_room()"
        },
        "inchangeassignmentverifyisacomparablealternateroom()": {
          "definition": "In_Change_Assignment_Verify__is_a_comparable_alternate_room(string name)"
        },
        "verifyisselectedforresidenttype()": {
          "definition": "Verify__is_selected_for_resident_type(string type)"
        },
        "dispose()": {
          "definition": "Dispose()"
        },
        "verifythereisnoemergencycontact()": {
          "definition": "Verify_there_is_no_emergency_contact()"
        },
        "verifyoptionsforroomdoesnotinclude()": {
          "definition": "Verify_options_for_room_does_not_include__(string roomName)"
        },
        "bindsuffixes()": {
          "definition": "BindSuffixes(IList<string> suffixes)"
        },
        "hideprocess()": {
          "definition": "HideProcess()"
        },
        "inchangeassignmentselectforpricelevel()": {
          "definition": "In_Change_Assignment_Select__for_price_level(string levelName)"
        },
        "inchangeassignmentverifyusagesdoesnotcontain()": {
          "definition": "In_Change_Assignment_Verify_usages_does_not_contain__(string usage)"
        },
        "verifybillinginfoisnotbeingcollected()": {
          "definition": "Verify_billing_info_is_not_being_collected()"
        },
        "selectforroom()": {
          "definition": "Select__for_room(string roomName)"
        },
        "selectaddunlistedpersonasavisitor()": {
          "definition": "Select_add_unlisted_person_as_a_visitor()"
        },
        "inchangeassignmentverifyisarecommendedalternateroom()": {
          "definition": "In_Change_Assignment_Verify__is_a_recommended_alternate_room(string name)"
        },
        "verifystatusoptionsareshown()": {
          "definition": "Verify_status_options_are_shown()"
        },
        "verifybillinginfoisbeingcollected()": {
          "definition": "Verify_billing_info_is_being_collected()"
        },
        "verifyisselectedforvisitorgender()": {
          "definition": "Verify__is_selected_for_visitor_gender(string gender)"
        },
        "browsetopageforreservationofclass()": {
          "definition": "Browse_to_page_for_reservation_of_class__(string className)"
        },
        "browsetopageforreservationandresident()": {
          "definition": "Browse_to_page_for_reservation_and_resident(string reservationName, string residentName)"
        },
        "selectfor()": {
          "definition": "Select__for__(string selectedText, string fieldLabel)"
        },
        "selectforvisitorgender()": {
          "definition": "Select__for_visitor_gender(string gender)"
        },
        "selectungroupedperson()": {
          "definition": "Select_ungrouped_person__(string person)"
        },
        "bindeditemergencycontact()": {
          "definition": "BindEditEmergencyContact(PersonEmergencyContactEditDto dto)"
        },
        "verifyresidenttypeaheadreturnsunder()": {
          "definition": "Verify_resident_typeahead_returns__under__(string person, string reservation)"
        },
        "verifyisselectedforspecialaccomodations()": {
          "definition": "Verify__is_selected_for_special_accomodations(string type)"
        },
        "selectunderforroom()": {
          "definition": "Select__under__for_room(string roomName, string groupName)"
        },
        "selectcheckthisresidentintoaroom()": {
          "definition": "Select_check_this_resident_into_a_room()"
        },
        "selectforbilltoparty()": {
          "definition": "Select__for_Bill_to_Party(string billToParty)"
        },
        "verifystatusoptionsarehidden()": {
          "definition": "Verify_status_options_are_hidden()"
        },
        "inchangeassignmentverifypricelevelscontain()": {
          "definition": "In_Change_Assignment_Verify_price_levels_contain__(string pricelevel)"
        },
        "openchangeassignment()": {
          "definition": "Open_Change_Assignment()"
        },
        "inchangeassignmentselectforusage()": {
          "definition": "In_Change_Assignment_Select__for_usage(string usage)"
        },
        "selectforvisitorresidenttype()": {
          "definition": "Select__for_visitor_resident_type(string type)"
        },
        "inchangeassignmentverifyisnotanalternateroom()": {
          "definition": "In_Change_Assignment_Verify__is_not_an_alternate_Room(string name)"
        },
        "inchangeassignmentclickchangerecommendation()": {
          "definition": "In_Change_Assignment_Click_change_recommendation()"
        },
        "updateinfovisibility()": {
          "definition": "UpdateInfoVisibility()"
        },
        "selectrequesthousingforthisresident()": {
          "definition": "Select_request_housing_for_this_resident()"
        },
        "inchangeassignmentverifyusagescontain()": {
          "definition": "In_Change_Assignment_Verify_usages_contain__(string usage)"
        },
        "browsetopageforreservation()": {
          "definition": "Browse_to_page_for_reservation(string reservationName)"
        },
        "inchangeassignmentselectforalternateroom()": {
          "definition": "In_Change_Assignment_Select__for_alternate_room(string roomName)"
        },
        "entertextfor()": {
          "definition": "Enter_text__for__(string value, string label)"
        },
        "verifyoptionsforroominclude()": {
          "definition": "Verify_options_for_room_include(string roomName)"
        },
        "selectforvisitorspecialaccomodations()": {
          "definition": "Select__for_visitor_special_accomodations(string type)"
        },
        "typeintoresidenttypeahead()": {
          "definition": "Type__into_resident_typeahead(string prefix)"
        },
        "selectforotherorganization()": {
          "definition": "Select__for_Other_Organization(string organizationName)"
        },
        "inchangeassignmentverifypricelevelsdoesnotcontain()": {
          "definition": "In_Change_Assignment_Verify_price_levels_does_not_contain__(string pricelevel)"
        },
        "inchangeassignmentverifyisanonrecommendedalternateroom()": {
          "definition": "In_Change_Assignment_Verify__is_a_non_recommended_alternate_room(string name)"
        },
        "selectpersonwithoutreservation()": {
          "definition": "Select_person__without_reservation(string person)"
        },
        "selectresidentunder()": {
          "definition": "Select_resident__under__(string person, string reservation)"
        },
        "verifyresidenttypeaheadreturnswithoutgrouping()": {
          "definition": "Verify_resident_typeahead_returns__without_grouping(string person)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AddResidentWorkflow"
    },
    "organizationsearchresults": {
      "namespace": "",
      "methods": {
        "verifyactionisavailable()": {
          "definition": "Verify__action_is_available(string actionName)"
        },
        "writeexport()": {
          "definition": "WriteExport(string export)"
        },
        "setresultsperpageto()": {
          "definition": "Set_results_per_page_to_(int numPerPage)"
        },
        "verifyofcertificationsareonpage()": {
          "definition": "Verify__of__certifications_are_on_page(int pageCount, int totalCount)"
        },
        "verifyoforganizationsareonpage()": {
          "definition": "Verify__of__organizations_are_on_page(int pageCount, int totalCount)"
        },
        "verifyresultstitleis()": {
          "definition": "Verify_results_title_is__(string resultsTitle)"
        },
        "back()": {
          "definition": "Back()"
        },
        "bindsearchresults()": {
          "definition": "BindSearchResults(PagedResultDTO<OrganizationSearchResultDTO> results)"
        },
        "verifythatexportcolumnsare()": {
          "definition": "Verify_that_export_columns_are_(List<string> headers)"
        },
        "enableexportall()": {
          "definition": "EnableExportAll()"
        },
        "verifyresultsincludewithcertification()": {
          "definition": "Verify_results_include__with_certification__(string organizationName, string certificationName)"
        },
        "verifythatthereareexportrows()": {
          "definition": "Verify_that_there_are__export_rows(int number)"
        },
        "verifyresultsinclude()": {
          "definition": "Verify_results_include__(string organizationName)"
        },
        "updateallselected()": {
          "definition": "UpdateAllSelected(string allIds)"
        },
        "verifythatcolumnofrowis()": {
          "definition": "Verify_that_column__of_row__is_(string columnName, int rowNum, string expected)"
        },
        "enableexportselected()": {
          "definition": "EnableExportSelected()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "enablemergeselected()": {
          "definition": "EnableMergeSelected()"
        },
        "clicksearch()": {
          "definition": "Click_Search()"
        },
        "enableviewselected()": {
          "definition": "EnableViewSelected()"
        },
        "browsetopageforsearch()": {
          "definition": "Browse_to_Page_for__search(string searchType)"
        },
        "exportall()": {
          "definition": "Export_all()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "OrganizationSearchResults"
    },
    "importfileupload": {
      "namespace": "",
      "methods": {
        "verifywarningthatacadisserviceisunavailableisshown()": {
          "definition": "Verify_warning_that_acadis_service_is_unavailable_is_shown()"
        },
        "cancelimportjob()": {
          "definition": "Cancel_import_job()"
        },
        "verifyfileimporterroris()": {
          "definition": "Verify_file_import_error_is__(string expectedMessage)"
        },
        "setdocumentfilelinkdetails()": {
          "definition": "SetDocumentFileLinkDetails(ImportUploadLinkDetailsDTO dto)"
        },
        "uploadfile()": {
          "definition": "Upload_file__(string filename)"
        },
        "waitforuploadtocomplete()": {
          "definition": "Wait_for_upload_to_complete()"
        },
        "setimportmodeinstructions()": {
          "definition": "SetImportModeInstructions(ImportModeInstructionsDTO dto)"
        },
        "verifydocumentselectiondialogcontains()": {
          "definition": "Verify_document_selection_dialog_contains__(string filename)"
        },
        "selectdocumentfile()": {
          "definition": "Select_document_file__(string filename)"
        },
        "setacadisserviceisrunningto()": {
          "definition": "Set_acadis_service_is_running_to__(bool isRunning)"
        },
        "uploaddocumentfile()": {
          "definition": "Upload_document_file__(string filename)"
        },
        "setfilelinkdetails()": {
          "definition": "SetFileLinkDetails(ImportUploadLinkDetailsDTO dto)"
        },
        "reloadtoimportjob()": {
          "definition": "ReloadToImportJob(int importJobID)"
        },
        "preparegradeimportfortestinclass()": {
          "definition": "Prepare_grade_import_for_test__in_class__(string testName, string className)"
        },
        "showcreateorganizations()": {
          "definition": "ShowCreateOrganizations()"
        },
        "verifyheaderis()": {
          "definition": "Verify_Header_is(string headerText)"
        },
        "setselectabledocumentfiles()": {
          "definition": "SetSelectableDocumentFiles(IEnumerable<string> files)"
        },
        "preparedocumentimportforrecords()": {
          "definition": "Prepare_document_import_for_records( DocumentOwnerType ownerType)"
        },
        "clickcontinue()": {
          "definition": "Click_continue()"
        },
        "selectforcreateorupdaterecords()": {
          "definition": "Select__for_create_or_update_records(ImportMode mode)"
        },
        "prepareclassimport()": {
          "definition": "Prepare_class_import()"
        },
        "manuallyplacefilestoimport()": {
          "definition": "Manually_place_files_to_import()"
        },
        "verifyimportmodeisavailable()": {
          "definition": "Verify_import_mode_is_available()"
        },
        "preparepersonimport()": {
          "definition": "Prepare_person_import()"
        },
        "prepareemploymentimport()": {
          "definition": "Prepare_employment_import()"
        },
        "navigatetopage()": {
          "definition": "NavigateToPage(ImportWizardPage page)"
        },
        "showimportjobreallocated()": {
          "definition": "ShowImportJobReallocated()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ImportFileUploadWorkflow"
    },
    "portalusersearchresults": {
      "namespace": "",
      "methods": {
        "writeexport()": {
          "definition": "WriteExport(string export)"
        },
        "verifyresultstotal()": {
          "definition": "Verify__results_total(int totalResults)"
        },
        "selectallresults()": {
          "definition": "Select_All_Results()"
        },
        "browsetoportalusersearchresults()": {
          "definition": "Browse_to_Portal_User_Search_Results()"
        },
        "verifyrowignoringcreationdateis()": {
          "definition": "Verify_row__ignoring_creation_date_is_(int rowNum, string expectedRow)"
        },
        "verifyresultsinpage()": {
          "definition": "Verify__results_in_page(int numResults)"
        },
        "verifysearchcriteriaare()": {
          "definition": "Verify_search_criteria_are__(string criteria)"
        },
        "bindsearchresults()": {
          "definition": "BindSearchResults(PagedResultDTO<PortalUserSearchResultDto> searchResults)"
        },
        "changepageto()": {
          "definition": "Change_page_to__(int pageNum)"
        },
        "enableexportall()": {
          "definition": "EnableExportAll()"
        },
        "changeresultsperpageto()": {
          "definition": "Change_results_per_page_to__(int numResults)"
        },
        "updateallselected()": {
          "definition": "UpdateAllSelected(string ids)"
        },
        "exportselected()": {
          "definition": "Export_Selected()"
        },
        "changesortcolumnto()": {
          "definition": "Change_sort_column_to__(PortalUserSearchSortColumn column)"
        },
        "enableexportselected()": {
          "definition": "EnableExportSelected()"
        },
        "verifysomeresultsreturned()": {
          "definition": "Verify_some_results_returned()"
        },
        "verifyeditresults()": {
          "definition": "Verify__edit_results(string canOrNot)"
        },
        "verifyheadersare()": {
          "definition": "Verify_headers_are__(string headers)"
        },
        "verifyresultiswithacademyidandorganizationandpermissionsandstatus()": {
          "definition": "Verify_result__is__with_Academy_ID__and_organization__and_permissions__and_status__(int resultNumber, string fullName, string academyId, string orgName, string permissions, string status)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalUserSearchResultsWorkflow"
    },
    "editadhocsave": {
      "namespace": "",
      "methods": {
        "navigatetoreturnurl()": {
          "definition": "NavigateToReturnUrl()"
        },
        "verifysaveexportavailable()": {
          "definition": "Verify_save_export_available()"
        },
        "savenamevalidationfailure()": {
          "definition": "SaveNameValidationFailure(bool nameInUse)"
        },
        "navigatetolistofadhocexports()": {
          "definition": "NavigateToListOfAdHocExports()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "browsetopageforadhocexport()": {
          "definition": "Browse_to_page_for_adhoc_export__(string exportName)"
        },
        "navigatetopage()": {
          "definition": "NavigateToPage(AdHocWizardPage page)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EditAdHocSaveWorkflow"
    },
    "militaryserviceedit": {
      "namespace": "",
      "methods": {
        "verifyyearsofserviceis()": {
          "definition": "Verify_Years_of_Service_is(int yearsOfService)"
        },
        "verifyrankis()": {
          "definition": "Verify_Rank_is__(string rank)"
        },
        "clickdeleteforrow()": {
          "definition": "Click_Delete_for_row__(int rowIndex)"
        },
        "verifylistcontainsrows()": {
          "definition": "Verify_list_contains__rows(int numRows)"
        },
        "clickadd()": {
          "definition": "Click_Add()"
        },
        "clickeditforrow()": {
          "definition": "Click_Edit_for_row__(int rowIndex)"
        },
        "enterforspecialskills()": {
          "definition": "Enter__for_Special_Skills(string specialSkills)"
        },
        "enterforbranch()": {
          "definition": "Enter__for_Branch(string branchName)"
        },
        "enterforrank()": {
          "definition": "Enter__for_Rank(string rank)"
        },
        "enterfordischarge()": {
          "definition": "Enter__for_Discharge(string dischargeTypeName)"
        },
        "bindmilitaryservice()": {
          "definition": "BindMilitaryService(IList<MilitaryServiceDTO> serviceItems)"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for__(string personName)"
        },
        "verifybranchis()": {
          "definition": "Verify_Branch_is__(string branchName)"
        },
        "verifyspecialskillsare()": {
          "definition": "Verify_Special_Skills_are__(string specialSkills)"
        },
        "enterforyearsofservice()": {
          "definition": "Enter__for_Years_of_Service(int yearsOfService)"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "beginverifyingrow()": {
          "definition": "Begin_verifying_row__(int rowIndex)"
        },
        "verifydischargeis()": {
          "definition": "Verify_Discharge_is__(string dischargeTypeName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "MilitaryServiceEditWorkflow"
    },
    "pointsofcontactlistportal": {
      "namespace": "",
      "methods": {
        "verifythatispocwithroleandemailandphone()": {
          "definition": "Verify_that__is__POC_with_role__and_email__and_phone__(string personName, string primary, string roleName, string email, string phone)"
        },
        "removepointofcontact()": {
          "definition": "Remove_Point_of_Contact(string personName)"
        },
        "bindrepeater()": {
          "definition": "BindRepeater(IList<PointOfContactListItemDTO> contacts)"
        },
        "verifyusereditcontacts()": {
          "definition": "Verify_user__edit_contacts(string value)"
        },
        "browsetopointsofcontactfor()": {
          "definition": "Browse_to_Points_of_contact_for__(string orgName)"
        },
        "verifytherearepointsofcontact()": {
          "definition": "Verify_there_are__points_of_contact(int number)"
        }
      },
      "parent-name": "MVBaseControlWorkflow",
      "class-name": "PointsOfContactListPortalWorkflow"
    },
    "studentlist": {
      "namespace": "",
      "methods": {
        "browsetostudentlistfor()": {
          "definition": "Browse_to_Student_List_for__(string className)"
        },
        "verifyabsencecommentis()": {
          "definition": "Verify_absence_comment_is__(string comment)"
        },
        "clickemailselected()": {
          "definition": "Click_Email_Selected()"
        },
        "verifymakeupabsencerecordedbyis()": {
          "definition": "Verify_makeup_absence_recorded_by_is__(string recordedBy)"
        },
        "dispose()": {
          "definition": "Dispose()"
        },
        "verifyfromemailaddressis()": {
          "definition": "Verify_from_email_address_is__(string email)"
        },
        "verifythatunfulfilledlisthasentrywithnameandstatus()": {
          "definition": "Verify_that_unfulfilled_list_has_entry_with_name__and_status__(string name, string status)"
        },
        "showeditstatusdialog()": {
          "definition": "Show_Edit_Status_Dialog()"
        },
        "showrosterreport()": {
          "definition": "ShowRosterReport(IClassRosterReportCriteria dto)"
        },
        "enablestandardexports()": {
          "definition": "EnableStandardExports()"
        },
        "enableenrollmentreports()": {
          "definition": "EnableEnrollmentReports()"
        },
        "enablesensitiveexports()": {
          "definition": "EnableSensitiveExports()"
        },
        "verifyprintofcompletiondiplomasisavailable()": {
          "definition": "Verify_print_of_completion_diplomas_is_available()"
        },
        "setcaneditdeparture()": {
          "definition": "SetCanEditDeparture(bool canEditDeparture)"
        },
        "verifytherearediplomasdisplayedforprinting()": {
          "definition": "Verify_there_are_diplomas_displayed_for_printing(int numDiplomas)"
        },
        "verifymessagebodyis()": {
          "definition": "Verify_message_body_is__(string body)"
        },
        "verifythatisnotenrolledin()": {
          "definition": "Verify_that__is_not_enrolled_in__(string studentName, string className)"
        },
        "printcompletiondiplomas()": {
          "definition": "Print_completion_diplomas()"
        },
        "closestudentabsencemodal()": {
          "definition": "Close_student_absence_modal()"
        },
        "clickemailattendancereport()": {
          "definition": "Click_email_attendance_report()"
        },
        "verifymakeupabsencetypeis()": {
          "definition": "Verify_makeup_absence_type_is__(string absenceType)"
        },
        "verifymodalabsencecountis()": {
          "definition": "Verify_modal_absence_count_is__(int count)"
        },
        "verifynostudentsenrolledmessageisvisible()": {
          "definition": "Verify_no_students_enrolled_message_is_visible()"
        },
        "verifymakeupabsencedateis()": {
          "definition": "Verify_makeup_absence_date_is__(DateTime dt)"
        },
        "unselectstudent()": {
          "definition": "Unselect_Student_(int itemIndex)"
        },
        "clicktonotshowdiplomanotificationagain()": {
          "definition": "Click_to_not_show_diploma_notification_again()"
        },
        "verifymakeupdateis()": {
          "definition": "Verify_makeup_date_is__(DateTime dt)"
        },
        "considermodalmakeuprow()": {
          "definition": "Consider_modal_makeup_row(int idx)"
        },
        "deleteenrollment()": {
          "definition": "Delete_Enrollment()"
        },
        "verifydidnotgetanemailbecausetheyhavenoemailaddress()": {
          "definition": "Verify__did_not_get_an_email_because_they_have_no_email_address(string student)"
        },
        "forstudent()": {
          "definition": "For_student__(string name)"
        },
        "verifyabsencedateis()": {
          "definition": "Verify_absence_date_is__(DateTime dt)"
        },
        "openstudentabsencemodal()": {
          "definition": "Open_student_absence_modal()"
        },
        "showdeleteconfirmation()": {
          "definition": "ShowDeleteConfirmation(IEnumerable<string> itemsToRemove)"
        },
        "verifyattendancelinkisnotvisible()": {
          "definition": "Verify_attendance_link_is_not_visible()"
        },
        "verifyabsencerecordedbyis()": {
          "definition": "Verify_absence_recorded_by_is__(string recordedBy)"
        },
        "showcheckedinstudentalert()": {
          "definition": "ShowCheckedInStudentAlert(IEnumerable<string> checkedInStudents)"
        },
        "verifynostudentsmatchfiltercriteriamessageisvisible()": {
          "definition": "Verify_no_students_match_filter_criteria_message_is_visible()"
        },
        "showsensitivedatadialog()": {
          "definition": "ShowSensitiveDataDialog()"
        },
        "verifymakeupverificationis()": {
          "definition": "Verify_makeup_verification_is__(string verification)"
        },
        "verifyabsencecommentisblank()": {
          "definition": "Verify_absence_comment_is_blank()"
        },
        "verifyattendancelinkisvisible()": {
          "definition": "Verify_attendance_link_is_visible()"
        },
        "selectasnewstatus()": {
          "definition": "Select__as_new_status(string newStatus)"
        },
        "verifydiplomanotificationisdisplayed()": {
          "definition": "Verify_diploma_notification_is_displayed()"
        },
        "shownostudentsmeetfiltercriteriamessage()": {
          "definition": "ShowNoStudentsMeetFilterCriteriaMessage()"
        },
        "verifythatunfulfilledlisthasentries()": {
          "definition": "Verify_that_unfulfilled_list_has__entries(int count)"
        },
        "binddeleteconfirmation()": {
          "definition": "BindDeleteConfirmation(IEnumerable<string> itemsAffectedByDelete)"
        },
        "verifymodalmakeupcountis()": {
          "definition": "Verify_modal_makeup_count_is__(int count)"
        },
        "verifysubjectis()": {
          "definition": "Verify_subject_is__(string subject)"
        },
        "verifymakeupcommentis()": {
          "definition": "Verify_makeup_comment_is__(string comment)"
        },
        "closediplomanotification()": {
          "definition": "Close_diploma_notification()"
        },
        "enablestudentremoval()": {
          "definition": "EnableStudentRemoval()"
        },
        "filterbytestperformancestudentstests()": {
          "definition": "Filter_by_test_performance_students_tests(TestResultFilter testResult, string tests)"
        },
        "verifymakeupabsencecommentis()": {
          "definition": "Verify_makeup_absence_comment_is__(string comment)"
        },
        "showclasscompletionemailresultspopover()": {
          "definition": "ShowClassCompletionEmailResultsPopover()"
        },
        "verifyabsencetypeis()": {
          "definition": "Verify_absence_type_is__(string absenceType)"
        },
        "verifynostudentsenrolledmessageisnotvisible()": {
          "definition": "Verify_no_students_enrolled_message_is_not_visible()"
        },
        "considermodalabsencerow()": {
          "definition": "Consider_modal_absence_row(int idx)"
        },
        "shownostudentsmessage()": {
          "definition": "ShowNoStudentsMessage()"
        },
        "selectstudent()": {
          "definition": "Select_Student_(int itemIndex)"
        },
        "verifypageisredirectedtoimportwizard()": {
          "definition": "Verify_page_is_redirected_to_import_wizard()"
        },
        "clickimportstudents()": {
          "definition": "Click_Import_students()"
        },
        "bindenrollments()": {
          "definition": "BindEnrollments(List<StudentEnrollmentDTO> enrollments, bool canViewHousingRecords)"
        },
        "displayclasscompletiondiplomanotification()": {
          "definition": "DisplayClassCompletionDiplomaNotification()"
        },
        "bindeligiblegraduates()": {
          "definition": "BindEligibleGraduates(List<EligibleStudentDTO> eligibleStudents)"
        },
        "verifymakeupabsencecommentisblank()": {
          "definition": "Verify_makeup_absence_comment_is_blank()"
        },
        "bindclasscompletionemailresult()": {
          "definition": "BindClassCompletionEmailResult(List<string> studentsFailed, List<string> studentsWithoutEmail)"
        },
        "verifyclasscompletionemailpopoverisvisible()": {
          "definition": "Verify_class_completion_email_popover_is_visible()"
        },
        "enableenrollment()": {
          "definition": "EnableEnrollment()"
        },
        "redirecttodeparturepage()": {
          "definition": "RedirectToDeparturePage()"
        },
        "clickconfirmstatusdonebutton()": {
          "definition": "Click_Confirm_Status_Done_Button()"
        },
        "considerstudent()": {
          "definition": "Consider_Student__(int sequence)"
        },
        "redirecttoimportjob()": {
          "definition": "RedirectToImportJob(int jobId)"
        },
        "opendiplomaprintwindow()": {
          "definition": "OpenDiplomaPrintWindow(ICertificateReport report, string reportKey)"
        },
        "verifymakeupcommentisblank()": {
          "definition": "Verify_makeup_comment_is_blank()"
        },
        "showexport()": {
          "definition": "ShowExport(string csv)"
        },
        "verifyprintofcompletiondiplomasisnotavailable()": {
          "definition": "Verify_print_of_completion_diplomas_is_not_available()"
        },
        "verifydiplomanotificationisnotdisplayed()": {
          "definition": "Verify_diploma_notification_is_not_displayed()"
        },
        "showunfulfilledrequirements()": {
          "definition": "Show_unfulfilled_requirements()"
        },
        "bindrosterreportpreferences()": {
          "definition": "BindRosterReportPreferences(ClassRosterPreferences preferences)"
        },
        "enabletrainingreports()": {
          "definition": "EnableTrainingReports()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "StudentListWorkflow"
    },
    "emailpeoplecontrol": {
      "namespace": "",
      "methods": {
        "writeexport()": {
          "definition": "WriteExport(string export)"
        },
        "bindcouldnotsendtonameslist()": {
          "definition": "BindCouldNotSendToNamesList(IList<string> namesOfPeopleCouldNotSendTo)"
        },
        "verifyemailnotsentwarningshowing()": {
          "definition": "Verify_email_not_sent_warning__showing(string isIsNot)"
        },
        "shownotsentwarning()": {
          "definition": "ShowNotSentWarning()"
        },
        "hidesurveyoptions()": {
          "definition": "HideSurveyOptions()"
        },
        "verifysurveyoptionsvisible()": {
          "definition": "Verify_survey_options__visible(string boolable)"
        },
        "verifyrespondentgroupstartswith()": {
          "definition": "Verify_respondent_group_starts_with__(string groupNameStart)"
        },
        "show()": {
          "definition": "Show()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EmailPeopleControlWorkflow"
    },
    "maintenanceticketexport": {
      "namespace": "",
      "methods": {
        "writeexport()": {
          "definition": "WriteExport(string fileName, IList<string> exportData)"
        },
        "exportallmaintenanceticketsfromhousingtab()": {
          "definition": "Export_all_maintenance_tickets_from_housing_tab()"
        },
        "exportallmaintenancetickets()": {
          "definition": "Export_all_maintenance_tickets()"
        }
      },
      "parent-name": "MVBaseExportHandlerWorkflow",
      "class-name": "MaintenanceTicketExportWorkflow"
    },
    "rentablerecord": {
      "namespace": "",
      "methods": {
        "browsetopagefor()": {
          "definition": "Browse_to_page_for__(string name)"
        },
        "verifyfullsizeimageiscustom()": {
          "definition": "Verify_fullsize_image_is_custom()"
        },
        "verifycanrequestitem()": {
          "definition": "Verify_can_request_item()"
        },
        "verifypriceforatlevelis()": {
          "definition": "Verify_price_for__at_level__is__(string usage, string level, string price)"
        },
        "bindpricingtable()": {
          "definition": "BindPricingTable(List<string> headers, List<UsagePricesDTO> prices)"
        },
        "verifyfullsizeimageisdefault()": {
          "definition": "Verify_fullsize_image_is_default()"
        },
        "verifycannotrequestitem()": {
          "definition": "Verify_cannot_request_item()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "RentableRecordWorkflow"
    },
    "performancemonitor": {
      "namespace": "",
      "methods": {
        "startstopwatch()": {
          "definition": "Start_stopwatch()"
        },
        "ensurestopwatchtimeislessthanseconds()": {
          "definition": "Ensure_stopwatch_time_is_less_than__seconds(double time)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "PerformanceMonitor"
    },
    "departurelist": {
      "namespace": "",
      "methods": {
        "verifynameslinks()": {
          "definition": "Verify_names__links(string status)"
        },
        "verifydeletedepartureavailable()": {
          "definition": "Verify_Delete_Departure__available(string status)"
        },
        "setpagetitle()": {
          "definition": "SetPageTitle(string title)"
        },
        "exportdepartures()": {
          "definition": "ExportDepartures(string csvText, string fileName)"
        },
        "verifypagetitleis()": {
          "definition": "Verify_Page_Title_is__(string pageTitle)"
        },
        "binddepartedstudents()": {
          "definition": "BindDepartedStudents(IList<DepartureListDto> departures)"
        },
        "browsetopageforclass()": {
          "definition": "Browse_to_page_for_class__(string className)"
        },
        "setpermissions()": {
          "definition": "SetPermissions(bool hasEdit, bool hasAdd, bool hasDelete, bool hasPersonRead)"
        },
        "verifyexportdatarowis()": {
          "definition": "Verify_export_data_row__is__(int rowNum, List<string> values)"
        },
        "verifydepartstudentavailable()": {
          "definition": "Verify_Depart_Student__available(string status)"
        },
        "verifyexportheadersare()": {
          "definition": "Verify_export_headers_are(List<string> expected)"
        },
        "verifyexportdatacontainsrows()": {
          "definition": "Verify_export_data_contains_rows(int numRows)"
        },
        "deletedepartureforwithreason()": {
          "definition": "Delete_departure_for__with_reason_(string personName, string reason)"
        },
        "verifytherearestudentsdeparted()": {
          "definition": "Verify_there_are__students_departed(int numDepartures)"
        },
        "verifyeditdepartureavailable()": {
          "definition": "Verify_Edit_Departure__available(string status)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "DepartureListWorkflow"
    },
    "purgehrrecords": {
      "namespace": "",
      "methods": {
        "bindpurgelist()": {
          "definition": "BindPurgeList(IEnumerable<PurgeablePersonDTO> list)"
        },
        "skipintro()": {
          "definition": "SkipIntro()"
        },
        "delete()": {
          "definition": "Delete()"
        },
        "verifypurgeablecountis()": {
          "definition": "Verify_purgeable_count_is(int count)"
        },
        "selectall()": {
          "definition": "Select_All()"
        },
        "verifyrecordisnameacademyidemployerscreated()": {
          "definition": "Verify_record_is_Name_Academy_id_Employers_Created( int index, string name, string academyID, string employers, string created )"
        },
        "verifypropertyis()": {
          "definition": "verify_property__is__(string propName, string name)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PurgeHRRecords"
    },
    "scheduleconflictlist": {
      "namespace": "",
      "methods": {
        "ignore()": {
          "definition": "Ignore(string uniqueIdentifier, string description, bool ignoreBothSides)"
        },
        "updateconflicts()": {
          "definition": "UpdateConflicts(IEnumerable<ConflictLineItemDTO> items)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ScheduleConflictListWorkflow"
    },
    "flagtypelist": {
      "namespace": "",
      "methods": {
        "navigateback()": {
          "definition": "NavigateBack()"
        },
        "verifyaddeditmodalavailabilitychecked()": {
          "definition": "Verify_add_edit_modal_Availability__checked(string isIsNot)"
        },
        "verifysymboldropdownhasoptions()": {
          "definition": "Verify_symbol_dropdown_has__options(int symbolCount)"
        },
        "verifyitbeedited()": {
          "definition": "Verify_it__be_edited(string canCannot)"
        },
        "clickedit()": {
          "definition": "Click_Edit()"
        },
        "clickadd()": {
          "definition": "Click_Add()"
        },
        "clearbaselineflags()": {
          "definition": "Clear_baseline_flags()"
        },
        "checktheboxtopreventnewrequestsforenrollmentfromportal()": {
          "definition": "Check_the_box_to_prevent_new_requests_for_enrollment_from_portal()"
        },
        "clicksaveontheaddeditmodal()": {
          "definition": "Click_Save_on_the_add_edit_Modal()"
        },
        "verifyaddeditmodaldescriptionis()": {
          "definition": "Verify_add_edit_modal_Description_is__(string description)"
        },
        "verifyaddeditmodalcheckboxforpreventingnewrequestsforenrollmentfromportalchecked()": {
          "definition": "Verify_add_edit_modal_checkbox_for_preventing_new_requests_for_enrollment_from_portal__checked(string isIsNot)"
        },
        "verifyvisibilitydropdownhasoption()": {
          "definition": "Verify_visibility_dropdown_has_option__(string option)"
        },
        "considertheflagtype()": {
          "definition": "Consider_the__flag_type(string ordinal)"
        },
        "bindflagtypes()": {
          "definition": "BindFlagTypes(IList<FlagTypeListItemDTO> flagTypes)"
        },
        "enterfordescription()": {
          "definition": "Enter__for_Description(string description)"
        },
        "verifyuseraddnewflagtypes()": {
          "definition": "Verify_user__Add_new_flag_types(string canCannot)"
        },
        "checktheboxtohidefrompubliccertificationlookup()": {
          "definition": "Check_the_box_to_hide_from_public_certification_lookup()"
        },
        "checktheboxtomaketherecordavailable()": {
          "definition": "Check_the_box_to_make_the_record_available()"
        },
        "verifyitbedeleted()": {
          "definition": "Verify_it__be_deleted(string canCannot)"
        },
        "unchecktheboxtomaketherecordunavailable()": {
          "definition": "Uncheck_the_box_to_make_the_record_unavailable()"
        },
        "enterforsymbol()": {
          "definition": "Enter__for_Symbol(string symbol)"
        },
        "enterforvisibility()": {
          "definition": "Enter__for_Visibility(string visibility)"
        },
        "verifytheusageis()": {
          "definition": "Verify_the_Usage_is__(string usage)"
        },
        "clickdelete()": {
          "definition": "Click_Delete()"
        },
        "verifytableshowsflagtypes()": {
          "definition": "Verify_table_shows__flag_types(int flagTypeCount)"
        },
        "unchecktheboxtohidefrompubliccertificationlookup()": {
          "definition": "Uncheck_the_box_to_hide_from_public_certification_lookup()"
        },
        "verifyaddeditmodalvisibilityis()": {
          "definition": "Verify_add_edit_modal_Visibility_is__(string visibility)"
        },
        "unchecktheboxtopreventnewrequestsforenrollmentfromportal()": {
          "definition": "Uncheck_the_box_to_prevent_new_requests_for_enrollment_from_portal()"
        },
        "verifyaddeditmodalcheckboxforhidinginpubliccertificationlookupchecked()": {
          "definition": "Verify_add_edit_modal_checkbox_for_hiding_in_public_certification_lookup__checked(string isIsNot)"
        },
        "verifyaddeditmodalshowing()": {
          "definition": "Verify_Add_Edit_Modal__Showing(string isIsNot)"
        },
        "verifysymboldropdownhasoption()": {
          "definition": "Verify_symbol_dropdown_has_option__(string option)"
        },
        "clickback()": {
          "definition": "Click_Back()"
        },
        "verifytheflaglabelvalid()": {
          "definition": "Verify_the_Flag_Label__valid(string isIsNot)"
        },
        "verifyaddeditmodalflaglabelis()": {
          "definition": "Verify_add_edit_modal_Flag_Label_is__(string flagLabel)"
        },
        "verifythesymbolis()": {
          "definition": "Verify_the_Symbol_is__(string symbolDescription)"
        },
        "verifythenameis()": {
          "definition": "Verify_the_Name_is__(string name)"
        },
        "showaddeditmodal()": {
          "definition": "ShowAddEditModal()"
        },
        "enterforflaglabel()": {
          "definition": "Enter__for_Flag_Label(string flagLabel)"
        },
        "verifythevisibilityis()": {
          "definition": "Verify_the_Visibility_is__(string visibility)"
        },
        "verifyaddeditmodalsymbolis()": {
          "definition": "Verify_add_edit_modal_Symbol_is__(string symbol)"
        },
        "verifythedescriptionis()": {
          "definition": "Verify_the_Description_is__(string description)"
        },
        "verifytableshowing()": {
          "definition": "Verify_table__showing(string isIsNot)"
        },
        "verifyvisibilitydropdownhasoptions()": {
          "definition": "Verify_visibility_dropdown_has__options(int visibilityCount)"
        },
        "verifyitinuse()": {
          "definition": "Verify_it__in_use(string isIsNot)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "FlagTypeListWorkflow"
    },
    "navigationtileedit": {
      "namespace": "",
      "methods": {
        "verifyimageis()": {
          "definition": "Verify_image_is__(ImageResources imageResource)"
        },
        "begineditingnavigationtileatpositionondashboard()": {
          "definition": "Begin_editing_navigation_tile_at_position__on__dashboard(int position, AcadisTabs tab)"
        },
        "verifynotoolsareselected()": {
          "definition": "Verify_no_tools_are_selected()"
        },
        "entertitle()": {
          "definition": "Enter_title__(string title)"
        },
        "verifyisaselectabletool()": {
          "definition": "Verify__is_a_selectable_tool(string toolText)"
        },
        "clearselectedtools()": {
          "definition": "Clear_selected_tools()"
        },
        "selecttool()": {
          "definition": "Select_tool__(string quicksearchText)"
        },
        "begineditingnewnavigationtileondashboard()": {
          "definition": "Begin_editing_new_navigation_tile_on__dashboard(AcadisTabs tab)"
        },
        "verifyselectedtoolsare()": {
          "definition": "Verify_selected_tools_are__(List<string> tools)"
        },
        "verifydescriptionis()": {
          "definition": "Verify_description_is__(string description)"
        },
        "verifytitleis()": {
          "definition": "Verify_title_is__(string title)"
        },
        "enterdescription()": {
          "definition": "Enter_description__(string description)"
        },
        "savechangestonavigationtile()": {
          "definition": "Save_changes_to_navigation_tile()"
        },
        "chooseimage()": {
          "definition": "Choose_image__(ImageResources imageResource)"
        },
        "verifynoimageisselected()": {
          "definition": "Verify_no_image_is_selected()"
        },
        "verifyisnotaselectabletool()": {
          "definition": "Verify__is_not_a_selectable_tool(string toolText)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "NavigationTileEditWorkflow"
    },
    "completedtrainingmonitor": {
      "namespace": "",
      "methods": {
        "selectfiscalyearbutton()": {
          "definition": "SelectFiscalYearButton()"
        },
        "selecttrainingtypesfilter()": {
          "definition": "Select_Training_Types_Filter_(string trainingType)"
        },
        "verifyclassnamedshowsinlisttimes()": {
          "definition": "Verify_class_named__shows_in_list__times(string className, int num)"
        },
        "verifycustomstartdateis()": {
          "definition": "Verify_custom_start_date_is_(string theDate)"
        },
        "verifytraininghoursequal()": {
          "definition": "Verify_training_hours_equal_( string trainingHours )"
        },
        "verifyclasseslistedascompletedtraining()": {
          "definition": "Verify__classes_listed_as_completed_training(int numClasses)"
        },
        "writeexport()": {
          "definition": "WriteExport(IList<string> exportChunks)"
        },
        "verifyprimarycontactisnull()": {
          "definition": "Verify_primary_contact_is_null()"
        },
        "verifyclassnameddoesnotshowinlist()": {
          "definition": "Verify_class_named__does_not_show_in_list(string className)"
        },
        "clearprogramselections()": {
          "definition": "Clear_Program_Selections()"
        },
        "verifycustomenddateis()": {
          "definition": "Verify_custom_end_date_is_(string theDate)"
        },
        "verifyenddateis()": {
          "definition": "Verify_end_date_is_( string endDate )"
        },
        "verifynotrainingeventsarelisted()": {
          "definition": "Verify_no_training_events_are_listed()"
        },
        "removetrainingtypesfilter()": {
          "definition": "Remove_Training_Types_Filter_(string trainingType)"
        },
        "setfiscaltimeframetocurrentyear()": {
          "definition": "Set_fiscal_timeframe_to_current_year()"
        },
        "verifyclassnamedshowsinlist()": {
          "definition": "Verify_class_named__shows_in_list(string className)"
        },
        "verifyis()": {
          "definition": "Verify__is__(string exportColumn, string expectedValue)"
        },
        "setfiscalstartyearto()": {
          "definition": "Set_fiscal_start_year_to(int startDate)"
        },
        "updatesorticons()": {
          "definition": "UpdateSortIcons()"
        },
        "setupprogramfilters()": {
          "definition": "SetupProgramFilters(List<ProgramTypeDTO> programDTOs)"
        },
        "addfiscalenditem()": {
          "definition": "AddFiscalEndItem(string text, string value)"
        },
        "setcustomenddateto()": {
          "definition": "Set_custom_end_date_to_(string endDate)"
        },
        "usingclasswithhours()": {
          "definition": "Using_class__with__hours(string className, string hours)"
        },
        "clearacademyselections()": {
          "definition": "Clear_Academy_Selections()"
        },
        "selectacademy()": {
          "definition": "Select_Academy_(string academyName)"
        },
        "verifyprimarycontactis()": {
          "definition": "Verify_primary_contact_is_( string primaryContact )"
        },
        "exportdata()": {
          "definition": "Export_data()"
        },
        "verifyfiscalenddateis()": {
          "definition": "Verify_fiscal_end_date_is(string endDate)"
        },
        "verifystartdateis()": {
          "definition": "Verify_start_date_is_( string startDate )"
        },
        "saveprogramfiltersettings()": {
          "definition": "Save_Program_Filter_Settings()"
        },
        "selectcustomtimeframebutton()": {
          "definition": "Select_Custom_Timeframe_Button()"
        },
        "bindpaging()": {
          "definition": "BindPaging(CompletedTrainingPagingDTO pagingDto)"
        },
        "showprogramfilter()": {
          "definition": "Show_Program_Filter()"
        },
        "setfiscalendyearto()": {
          "definition": "Set_fiscal_end_year_to(int endDate)"
        },
        "verifyfiscalstartdateis()": {
          "definition": "Verify_fiscal_start_date_is(string startDate)"
        },
        "sortby()": {
          "definition": "Sort_by_( TrainingMonitorSortColumn sortColumn )"
        },
        "clearallfilterselections()": {
          "definition": "Clear_all_filter_selections()"
        },
        "verifyrowswereexported()": {
          "definition": "Verify__rows_were_exported(int count)"
        },
        "usingclass()": {
          "definition": "Using_class_( string className )"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifytypeis()": {
          "definition": "Verify_Type_is_( string classType )"
        },
        "verifycolumnsexistintheexport()": {
          "definition": "Verify__columns_exist_in_the_export(int count)"
        },
        "applyfilters()": {
          "definition": "Apply_Filters()"
        },
        "selectprogram()": {
          "definition": "Select_Program_(string programName)"
        },
        "updateprogramslabel()": {
          "definition": "UpdateProgramsLabel(bool isAllPrograms)"
        },
        "verifynumbergraduatedis()": {
          "definition": "Verify_number_graduated_is_( int numGraduated )"
        },
        "beginverifyingrow()": {
          "definition": "Begin_verifying_row__(int exportRow)"
        },
        "addfiscalstartitem()": {
          "definition": "AddFiscalStartItem(string text, string value)"
        },
        "bindcompletedtraining()": {
          "definition": "BindCompletedTraining(IList<CompletedTrainingMonitorRowDTO> completedTraining, int totalCount)"
        },
        "setcustomstartdateto()": {
          "definition": "Set_custom_start_date_to_(string startDate)"
        },
        "verifyisblank()": {
          "definition": "Verify__is_blank(string exportColumn)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "CompletedTrainingMonitor"
    },
    "preparetests": {
      "namespace": "",
      "methods": {
        "bindretestassignments()": {
          "definition": "BindRetestAssignments(List<StudentRetestEditionAssignmentDTO> retestAssignments, bool hasPreparePermission)"
        },
        "leavepage()": {
          "definition": "Leave_Page()"
        },
        "showbuttonsasprintonly()": {
          "definition": "ShowButtonsAsPrintOnly()"
        },
        "clickprepare()": {
          "definition": "Click_Prepare()"
        },
        "verifyretestbandisnotvisible()": {
          "definition": "Verify_retest_band_is_not_visible()"
        },
        "verifythatislistedinretestband()": {
          "definition": "Verify_that__is_listed_in_retest_band(string personName)"
        },
        "bindungradedinitialassignments()": {
          "definition": "BindUngradedInitialAssignments(List<StudentInitialEditionAssignmentDTO> ungradedInitialAssignments, bool hasPreparePermission)"
        },
        "browsetofortest()": {
          "definition": "Browse_To_For_Test(string testName)"
        },
        "prepareindividualtest()": {
          "definition": "Prepare_Individual_Test()"
        },
        "verifythatisnotlistedinretestband()": {
          "definition": "Verify_that__is_not_listed_in_retest_band(string personName)"
        },
        "verifyretestbandisvisible()": {
          "definition": "Verify_retest_band_is_visible()"
        },
        "refreshretests()": {
          "definition": "Refresh_retests()"
        },
        "verifytestforhasquestion()": {
          "definition": "Verify_test__for__has_question__(string testName, string personName, string questionName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PrepareTestsWorkflow"
    },
    "savepointmanagement": {
      "namespace": "",
      "methods": {
        "createsavepoint()": {
          "definition": "CreateSavePoint(string savePointName)"
        },
        "rollbacktosavepoint()": {
          "definition": "RollbackToSavePoint(string savePointName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "SavePointManagement"
    },
    "addeditresponseoptionset": {
      "namespace": "",
      "methods": {
        "clearnumericvalueonresponse()": {
          "definition": "Clear_numeric_value_on_response__(int position)"
        },
        "verifycommentoptiononresponseis()": {
          "definition": "Verify_comment_option_on_response__is__(int position, string commentOption)"
        },
        "browsetoresponseseditorforexistingresponselistnamedfromitemnamed()": {
          "definition": "Browse_to_responses_editor_for_existing_response_list_named__from_item_named__(string setName, string itemName)"
        },
        "setcommentstoonresponse()": {
          "definition": "Set_comments_to__on_response__(string optionName, int position)"
        },
        "deleteresponse()": {
          "definition": "Delete_response__(int position)"
        },
        "verifyinusealertisvisible()": {
          "definition": "Verify_in_use_alert_is_visible()"
        },
        "settexttoonresponse()": {
          "definition": "Set_text_to__on_response__(string text, int position)"
        },
        "savesuccessful()": {
          "definition": "SaveSuccessful()"
        },
        "verifytextonresponseisblank()": {
          "definition": "Verify_text_on_response__is_blank(int position)"
        },
        "clickcontinue()": {
          "definition": "Click_continue()"
        },
        "verifyresponselistnamedexists()": {
          "definition": "Verify_response_list_named__exists(string name)"
        },
        "addanotherresponse()": {
          "definition": "Add_another_response()"
        },
        "clickcancel()": {
          "definition": "Click_cancel()"
        },
        "verifyselectedbydefaultforresponseonsavedlistis()": {
          "definition": "Verify_selected_by_default_for_response__on_saved_list__is__(int position, string setName, bool selectedByDefault)"
        },
        "verifyemptyresponselistvalidationmessageisvisible()": {
          "definition": "Verify_empty_response_list_validation_message_is_visible()"
        },
        "verifynumericvalueisonresponse()": {
          "definition": "Verify_numeric_value_is__on_response(int numericValue, int position)"
        },
        "verifyinusealertisnotvisible()": {
          "definition": "Verify_in_use_alert_is_not_visible()"
        },
        "setselectedbydefaulttoonresponse()": {
          "definition": "Set_selected_by_default_to__on_response__(bool selectedByDefault, int position)"
        },
        "verifyhasresponses()": {
          "definition": "Verify__has__responses(string setName, int count)"
        },
        "verifyeditorcontainsrows()": {
          "definition": "Verify_editor_contains__rows(int numRows)"
        },
        "verifycommentoptionforresponseonsavedlistis()": {
          "definition": "Verify_comment_option_for_response__on_saved_list__is__(int position, string setName, CommentOptions commentOption)"
        },
        "verifyonlyoneitemselectedbydefaultvalidationmessageisvisible()": {
          "definition": "Verify_only_one_item_selected_by_default_validation_message_is_visible()"
        },
        "verifyselectedbydefaultonresponseis()": {
          "definition": "Verify_selected_by_default_on_response__is__(int position, bool selectedByDefault)"
        },
        "show()": {
          "definition": "Show(int? responseOptionSetID, bool canHaveMultipleResponses, string name, int? groupItemID)"
        },
        "setnumericvaluetoonresponse()": {
          "definition": "Set_numeric_value_to__on_response__(int numericValue, int position)"
        },
        "verifytextonresponseis()": {
          "definition": "Verify_text_on_response__is__(int position, string text)"
        },
        "verifytextforresponseonsavedlistis()": {
          "definition": "Verify_text_for_response__on_saved_list__is__(int position, string setName, string text)"
        },
        "verifyonlyoneitemselectedbydefaultvalidationmessageishidden()": {
          "definition": "Verify_only_one_item_selected_by_default_validation_message_is_hidden()"
        },
        "enterforsetname()": {
          "definition": "Enter__for_set_name(string setName)"
        },
        "verifyemptyresponselistvalidationmessageishidden()": {
          "definition": "Verify_empty_response_list_validation_message_is_hidden()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AddEditResponseOptionSetWorkflow"
    },
    "acadisuserrecord": {
      "namespace": "",
      "methods": {
        "indatapermissionsmodalverifyuserisrestrictedtoassignedclasses()": {
          "definition": "In_data_permissions_modal_verify_user_is_restricted_to_assigned_classes()"
        },
        "verifyaccesstoorganizationdoesnotincludesuborganizations()": {
          "definition": "Verify_access_to_organization__does_not_include_sub_organizations(string orgName)"
        },
        "verifydatapermissionsvisible()": {
          "definition": "Verify_data_permissions__visible(string areAreNotVisible)"
        },
        "verifyusernameineditmodalis()": {
          "definition": "Verify_username_in_edit_modal_is__(string username)"
        },
        "clickremoveforassignedrole()": {
          "definition": "Click_Remove_for_assigned_role__(string roleName)"
        },
        "verifyassignedrolesare()": {
          "definition": "Verify_assigned_roles_are__(List<string> expectedRoleNames)"
        },
        "verifynoorganizationsarepermitted()": {
          "definition": "Verify_no_organizations_are_permitted()"
        },
        "setstatusto()": {
          "definition": "Set_status_to__(LoginStatus status)"
        },
        "indatapermissionsmodalverifyuseraccessnonemployedpeople()": {
          "definition": "In_data_permissions_modal_verify_user__access_non_employed_people(string canCannotSeeNonEmployed)"
        },
        "showedituserdetailsmodal()": {
          "definition": "ShowEditUserDetailsModal()"
        },
        "assignrole()": {
          "definition": "Assign_role__(string roleName)"
        },
        "setusernameto()": {
          "definition": "Set_user_name_to__(string userName)"
        },
        "goback()": {
          "definition": "GoBack()"
        },
        "verifysamlusernameisblank()": {
          "definition": "Verify_SAML_username_is_blank()"
        },
        "bindroleassignments()": {
          "definition": "BindRoleAssignments(IEnumerable<RoleAssignmentDTO> assignments)"
        },
        "indatapermissionsmodalrestrictusertoassignedclasses()": {
          "definition": "In_data_permissions_modal_restrict_user_to_assigned_classes()"
        },
        "verifyuserisrestrictedtoassignedclasses()": {
          "definition": "Verify_user_is_restricted_to_assigned_classes()"
        },
        "verifystatusis()": {
          "definition": "Verify_status_is__(LoginStatus status)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "bindorgpermissions()": {
          "definition": "BindOrgPermissions(IEnumerable<PermittedOrgDTO> permittedOrgs)"
        },
        "indatapermissionsmodalselectorganizations()": {
          "definition": "In_data_permissions_modal_select_organizations__(List<string> orgNames)"
        },
        "verifyuserisrestrictedtospecificorganizations()": {
          "definition": "Verify_user_is_restricted_to_specific_organizations()"
        },
        "verifyuseraccessnonemployedpeople()": {
          "definition": "Verify_user__access_non_employed_people(string canCannotSeeNonEmployed)"
        },
        "verifydeleteuserenabled()": {
          "definition": "Verify_Delete_User__enabled(string isIsNotEnabled)"
        },
        "verifyactivedirectoryusernameduplicate()": {
          "definition": "Verify_Active_Directory_username__duplicate(string isIsNotDuplicate)"
        },
        "verifyactivedirectoryusernameis()": {
          "definition": "Verify_Active_Directory_username_is__(string username)"
        },
        "verifystatusineditmodalis()": {
          "definition": "Verify_status_in_edit_modal_is__(LoginStatus status)"
        },
        "deleteuserwithreason()": {
          "definition": "Delete_user_with_reason__(string reason)"
        },
        "indatapermissionsmodalverifynoorganizationsarepermitted()": {
          "definition": "In_data_permissions_modal_verify_no_organizations_are_permitted()"
        },
        "showeditdatapermissionsmodal()": {
          "definition": "ShowEditDataPermissionsModal()"
        },
        "setsamlusernameto()": {
          "definition": "Set_saml_user_name_to__(string userName)"
        },
        "showresetpasswordmodal()": {
          "definition": "ShowResetPasswordModal()"
        },
        "verifynewpasswordgenerated()": {
          "definition": "Verify_new_password__generated(string wasWasNotGenerated)"
        },
        "browsetopageforuser()": {
          "definition": "Browse_to_Page_for_user__(string username)"
        },
        "verifysamlusernamelabelvisible()": {
          "definition": "Verify_SAML_Username_label__visible(string isIsNotVisible)"
        },
        "verifyactivedirectoryusernameisblank()": {
          "definition": "Verify_Active_Directory_username_is_blank()"
        },
        "verifyactivedirectoryusernamelabelvisible()": {
          "definition": "Verify_Active_Directory_Username_label__visible(string isIsNotVisible)"
        },
        "clickremoveforpermittedorganization()": {
          "definition": "Click_Remove_for_permitted_organization(string orgName)"
        },
        "verifyusernameis()": {
          "definition": "Verify_username_is__(string username)"
        },
        "indatapermissionsmodalverifyuserisrestrictedtospecificorganizations()": {
          "definition": "In_data_permissions_modal_verify_user_is_restricted_to_specific_organizations()"
        },
        "verifyaccesstoorganizationincludessuborganizations()": {
          "definition": "Verify_access_to_organization__includes_sub_organizations(string orgName)"
        },
        "indatapermissionsmodalsetuseraccessnonemployedpeople()": {
          "definition": "In_data_permissions_modal_set_user__access_non_employed_people(string canCannotSeeNonEmployed)"
        },
        "verifyresetpasswordenabled()": {
          "definition": "Verify_Reset_Password__enabled(string isIsNotEnabled)"
        },
        "setactivedirectoryusernameto()": {
          "definition": "Set_active_directory_user_name_to__(string userName)"
        },
        "browsetopageforperson()": {
          "definition": "Browse_to_Page_for_person__(string personName)"
        },
        "verifyserviceusermessagedisplayed()": {
          "definition": "Verify_service_user_message__displayed(string isIsNotStr)"
        },
        "verifysamlusernamecollected()": {
          "definition": "Verify_SAML_username__collected(string isIsNotCollected)"
        },
        "verifyassignedrolesareempty()": {
          "definition": "Verify_assigned_roles_are_empty()"
        },
        "verifyusernameduplicate()": {
          "definition": "Verify_username__duplicate(string isIsNotDuplicate)"
        },
        "indatapermissionsmodalrestrictusertospecificorganizations()": {
          "definition": "In_data_permissions_modal_restrict_user_to_specific_organizations()"
        },
        "verifyusernavigatedtopreviouspage()": {
          "definition": "Verify_user_navigated_to_previous_page()"
        },
        "verifysamlusernameis()": {
          "definition": "Verify_SAML_username_is__(string username)"
        },
        "verifyactivedirectoryusernamecollected()": {
          "definition": "Verify_Active_Directory_username__collected(string isIsNotCollected)"
        },
        "verifyeditingrecordenabled()": {
          "definition": "Verify_editing_record__enabled(string isIsNotEnabled)"
        },
        "verifysamlusernameduplicate()": {
          "definition": "Verify_SAML_username__duplicate(string isIsNotDuplicate)"
        },
        "indatapermissionsmodalverifypermittedorganizationsare()": {
          "definition": "In_data_permissions_modal_verify_permitted_organizations_are__(List<string> orgNames)"
        },
        "verifypermittedorganizationsare()": {
          "definition": "Verify_permitted_organizations_are__(List<string> orgNames)"
        },
        "verifyactivedirectoryusernameinvalid()": {
          "definition": "Verify_Active_Directory_username__invalid(string isIsNotInvalid)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AcadisUserRecordWorkflow"
    },
    "departureeeocreportview": {
      "namespace": "",
      "methods": {
        "verifytheacademyidcolumnheaderis()": {
          "definition": "Verify_the_AcademyId_column_header_is(string academyIdHeader)"
        },
        "verifysumofrowethnicitycolumnsisequaltovalueofthecolumn()": {
          "definition": "Verify_sum_of_row_ethnicity_columns_is_equal_to_value_of_the__column(string rowLabel, string sumCol)"
        },
        "showresultsbypercent()": {
          "definition": "Show_results_by_percent()"
        },
        "highlightvalues()": {
          "definition": "Highlight_values()"
        },
        "verifythereportnameis()": {
          "definition": "Verify_the_report_name_is(string reportName)"
        },
        "verifyeeoccategoryisinheader()": {
          "definition": "Verify_Eeoc_Category__is_in_header(string strEeocCategory)"
        },
        "verifyrowhasvalueofforcolumnwithvaluedisplayedasandbackgroundis()": {
          "definition": "Verify__row_has_value_of__for_column__with_value_displayed_as__and_background_is__(string rowLabel, string cellValue, string colName, string isBold, string isShaded)"
        },
        "verifytheprogramabbreviationlistis()": {
          "definition": "Verify_the_program_abbreviation_list_is(string abbrList)"
        },
        "usecalendaryear()": {
          "definition": "Use_Calendar_Year()"
        },
        "setstartdateto()": {
          "definition": "Set_start_date_to(DateTime startDate)"
        },
        "verifythereporttimeframeis()": {
          "definition": "Verify_the_report_timeframe_is(string reportDate)"
        },
        "showreport()": {
          "definition": "ShowReport()"
        },
        "showresultsbycounts()": {
          "definition": "Show_results_by_counts()"
        },
        "usefiscalyear()": {
          "definition": "Use_Fiscal_Year()"
        },
        "setdatasource()": {
          "definition": "SetDataSource(DepartureDetailsByGenderAndEEOCReportDTO dto)"
        },
        "selectprogramfromclass()": {
          "definition": "Select_program_from_class(string className)"
        },
        "verifysumofrowgendercolumnsisequaltovalueofthecolumn()": {
          "definition": "Verify_sum_of_row_gender_columns_is_equal_to_value_of_the__column(string rowLabel, string sumCol)"
        },
        "verifythereportrundateistoday()": {
          "definition": "Verify_the_report_run_date_is_today()"
        },
        "verifythereporttimeframelabelis()": {
          "definition": "Verify_the_report_timeframe_label_is(string reportDateLabel)"
        },
        "verifyrowhasvalueofforcolumn()": {
          "definition": "Verify__row_has_value_of__for_column__(string rowLabel, string cellValue, string colName)"
        },
        "verifythereportheaderis()": {
          "definition": "Verify_the_report_header_is(string reportHeader)"
        },
        "setenddateto()": {
          "definition": "Set_end_date_to(DateTime endDate)"
        },
        "verifythereisarowwithlabel()": {
          "definition": "Verify_there_is_a_row_with_label(string rowLabel)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "DepartureEeocReportView"
    },
    "portaltrainingmanagement": {
      "namespace": "",
      "methods": {
        "launchandcompletewithpassing()": {
          "definition": "Launch__and_complete_with_passing(string eventName)"
        },
        "launchandcompleteon()": {
          "definition": "Launch__and_complete_on_( string eventName, DateTime completionDate )"
        },
        "launchandnotcomplete()": {
          "definition": "Launch_and_not_complete(string eventName)"
        },
        "launchandworkonforbutdonotfinish()": {
          "definition": "Launch__and_work_on_for__but_do_not_finish(string eventName, double minutes)"
        },
        "launchandcomplete()": {
          "definition": "Launch__and_complete(string eventName)"
        },
        "launchandcompletewithpercent()": {
          "definition": "Launch__and_complete_with__percent(string eventName, double percent)"
        },
        "launchandcompletewithpercentinminutes()": {
          "definition": "Launch__and_complete_with__percent_in__minutes(string eventName, double percent, double minutes)"
        },
        "launchandcompletewithpassinginminutes()": {
          "definition": "Launch__and_complete_with_passing_in__minutes(string eventName, double minutes)"
        },
        "launchandcompleteinminutes()": {
          "definition": "Launch__and_complete_in__minutes( string eventName, double minutes )"
        }
      },
      "parent-name": "Workflow",
      "class-name": "PortalTrainingManagement"
    },
    "assignmentrules": {
      "namespace": "",
      "methods": {
        "changeaffinityrule()": {
          "definition": "ChangeAffinityRule()"
        },
        "selectequipment()": {
          "definition": "Select_equipment()"
        },
        "selectresource()": {
          "definition": "Select_resource__(string resourceName)"
        },
        "clearresourcefocus()": {
          "definition": "ClearResourceFocus()"
        },
        "changeneworaffinity()": {
          "definition": "ChangeNewOrAffinity()"
        },
        "schedulehasrulethatbedeleted()": {
          "definition": "Schedule_has__rule__that__be_deleted(string ruleTypeName, string ruleName, string canOrCannot)"
        },
        "selectauthorization()": {
          "definition": "Select_authorization__(string authorization)"
        },
        "selectcategory()": {
          "definition": "Select_category__(string categoryName)"
        },
        "expandrulestree()": {
          "definition": "ExpandRulesTree()"
        },
        "browsetoassignmentrulesfor()": {
          "definition": "Browse_to_assignment_rules_for__(string scheduleName)"
        },
        "browsetoassignmentrulesforincurriculum()": {
          "definition": "Browse_to_assignment_rules_for__in_curriculum__(string scheduleName, string curriculumName)"
        },
        "blockhasrulethatbedeleted()": {
          "definition": "Block__has__rule__that__be_deleted(string activityName, string ruleTypeName, string ruleName, string canOrCannot)"
        },
        "setquantityto()": {
          "definition": "Set_quantity_to__(int quantity)"
        },
        "selectrequiressameresource()": {
          "definition": "Select_requires_same_resource()"
        },
        "selectpersonnel()": {
          "definition": "SelectPersonnel()"
        },
        "showdeleterulewithassignmentsprompt()": {
          "definition": "ShowDeleteRuleWithAssignmentsPrompt()"
        },
        "selectfacility()": {
          "definition": "Select_facility()"
        },
        "clickaddrule()": {
          "definition": "Click_add_rule()"
        },
        "selectrequiresanyresource()": {
          "definition": "Select_requires_any_resource()"
        },
        "canceldeleterule()": {
          "definition": "CancelDeleteRule()"
        },
        "addrulestoschedule()": {
          "definition": "Add_rules_to_schedule()"
        },
        "showdeleteaffinityruledialog()": {
          "definition": "ShowDeleteAffinityRuleDialog()"
        },
        "bindrulestree()": {
          "definition": "BindRulesTree()"
        },
        "toggleresourcetree()": {
          "definition": "ToggleResourceTree()"
        },
        "addrulestoactivity()": {
          "definition": "Add_rules_to_activity__(string activityName)"
        },
        "selectfacilities()": {
          "definition": "SelectFacilities()"
        },
        "activityhasrulethatbedeleted()": {
          "definition": "Activity__has__rule__that__be_deleted(string activityName, AssignableType ruleType, string ruleName, string canOrCannot)"
        },
        "expandnode()": {
          "definition": "ExpandNode(string nodeKey)"
        },
        "continuedeleterule()": {
          "definition": "ContinueDeleteRule()"
        },
        "saveandaddanotherrule()": {
          "definition": "SaveAndAddAnotherRule()"
        },
        "changeaffinityelement()": {
          "definition": "ChangeAffinityElement()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AssignmentRulesWorkflow"
    },
    "hooverstart": {
      "namespace": "",
      "methods": {
        "verifyihaveusedtemplatetimesmostrecentlyon()": {
          "definition": "Verify_I_have_used_template___times_most_recently_on__(string name, string used, string lastUsed)"
        },
        "verifymoduleavailable()": {
          "definition": "Verify_module__available(string module, string isIsNot)"
        },
        "selectscenario()": {
          "definition": "Select_scenario__(string name)"
        },
        "navigatetoreturnurl()": {
          "definition": "NavigateToReturnUrl()"
        },
        "selectmodule()": {
          "definition": "Select_module__(string name)"
        },
        "verifytemplatewascreatedbyandpublic()": {
          "definition": "Verify__template__was_created_by__and__public_(string type, string name, string owner, string isIsNot)"
        },
        "clickcontinue()": {
          "definition": "Click_Continue()"
        },
        "showcanceldialog()": {
          "definition": "ShowCancelDialog()"
        },
        "verifyishrimport()": {
          "definition": "Verify_is_HR_import()"
        },
        "verifytemplatesareavailable()": {
          "definition": "Verify__templates_are_available(int count)"
        },
        "browsetopageforcurrentimport()": {
          "definition": "Browse_to_Page_for_current_import()"
        },
        "selecttemplate()": {
          "definition": "Select_template__(string name)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "setimportjobid()": {
          "definition": "SetImportJobID(int jobID)"
        },
        "verifyscenarioavailable()": {
          "definition": "Verify_scenario__available(string scenario, string isIsNot)"
        },
        "makeimporthrimport()": {
          "definition": "Make_import_HR_Import()"
        },
        "navigatetopage()": {
          "definition": "NavigateToPage(ImportWizardPage page)"
        },
        "showimportjobreallocated()": {
          "definition": "ShowImportJobReallocated()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "HooverStartWorkflow"
    },
    "personneloverageuserfilters": {
      "namespace": "",
      "methods": {
        "alerteligibleinstructorsofshortfalls()": {
          "definition": "AlertEligibleInstructorsOfShortfalls()"
        },
        "bindfilterlists()": {
          "definition": "BindFilterLists(List<UserFilterBaseDTO> filters)"
        },
        "bindfilterlinks()": {
          "definition": "BindFilterLinks(List<UserFilterBaseDTO> filters)"
        },
        "savedata()": {
          "definition": "SaveData()"
        },
        "bindfilterdata()": {
          "definition": "BindFilterData()"
        },
        "shutupwarningaboutunusedeventremovefilter()": {
          "definition": "Shut_up_warning_about_unused_event_RemoveFilter()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PersonnelOverageUserFiltersWorkflow"
    },
    "surveyresponseaddedit": {
      "namespace": "",
      "methods": {
        "browsetopageforstudentinclassandsurvey()": {
          "definition": "Browse_to_page_for_student__in_class__and_survey__(string studentName, string className, string surveyName)"
        },
        "generateresponsesforsurvey()": {
          "definition": "Generate__responses_for__survey(int numberOfResponses, string surveyName)"
        },
        "browsetopageforstudentinclassandtesteditionandsurvey()": {
          "definition": "Browse_to_page_for_student__in_class__and_test_edition__and_survey__(string studentName, string className, string testEditionName, string surveyName)"
        },
        "bindsurveyresponse()": {
          "definition": "BindSurveyResponse(SurveyResponseAddEditDTO dto)"
        },
        "verifyanswerisforitemwithtext()": {
          "definition": "Verify_answer_is__for__item_with_text__(string answerText, InquiryItemType itemType, string itemText)"
        },
        "browsetopageforemailedsurveyingroup()": {
          "definition": "Browse_to_page_for__emailed_survey__in_group__(string ordinal, string surveyName, string cohortName)"
        },
        "answertoitemwithtext()": {
          "definition": "Answer__to__item_with_text__(string answerText, InquiryItemType itemType, string itemText)"
        },
        "browsetopageforstaffinclassandsurvey()": {
          "definition": "Browse_to_page_for_staff__in_class__and_survey__(string studentName, string className, string surveyName)"
        },
        "generateresponsesforsurveyinrespondentgroup()": {
          "definition": "Generate__responses_for__survey_in_respondent_group__(int numberOfResponses, string surveyName, string cohortName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "SurveyResponseAddEditWorkflow"
    },
    "onlineeventdetailview": {
      "namespace": "",
      "methods": {
        "verifyfilenameis()": {
          "definition": "Verify_FileName_is__(string fileName)"
        },
        "verifytimeincourseisnotvisible()": {
          "definition": "verify_time_in_course_is_not_visible()"
        },
        "verifycompletionrequirementis()": {
          "definition": "Verify_completion_requirement_is__(string requirement)"
        },
        "verifycoursegradeisnotvisible()": {
          "definition": "verify_course_grade_is_not_visible()"
        },
        "clickeditbuttonforcerts()": {
          "definition": "Click_edit_button_for_certs()"
        },
        "clickdeletebuttonenterforreasonandclickdeletebutton()": {
          "definition": "Click_delete_button_enter_for_reason_and_click_Delete_button(string deleteReason)"
        },
        "verifyreferenceis()": {
          "definition": "verify_reference_is__(string reference)"
        },
        "verifyowneris()": {
          "definition": "Verify_Owner_is__(string owner)"
        },
        "verifycontentis()": {
          "definition": "Verify_content_is__(string contentName)"
        },
        "verifycontainscertificationnamed()": {
          "definition": "verify_contains_certification_named__(string certName)"
        },
        "verifyeventdescriptionis()": {
          "definition": "Verify_event_description_is__(string description)"
        },
        "verifycostis()": {
          "definition": "verify_cost_is__(string cost)"
        },
        "verifycoursegradeis()": {
          "definition": "verify_course_grade_is__(string courseGradeDescription)"
        },
        "verifysignupavailabledateistodayandhasnoenddate()": {
          "definition": "Verify_signup_available_date_is_today_and_has_no_end_date()"
        },
        "verifystatusis()": {
          "definition": "Verify_status_is__(string status)"
        },
        "verifyhasbeendeleted()": {
          "definition": "Verify__has_been_deleted(string onlineEventName)"
        },
        "verifycategoryis()": {
          "definition": "Verify_category_is__(string category)"
        },
        "clickcheckboxtooncertificationnamedonthelist()": {
          "definition": "Click_checkbox_to__on_certification_named_on_the_list(string checkBoxAction, string certName)"
        },
        "browsetodetailsfor()": {
          "definition": "Browse_to_details_for__(string onlineEventToView)"
        },
        "bindlearningobjectives()": {
          "definition": "BindLearningObjectives(IEnumerable<LearningObjectiveDTO> learningObjectives)"
        },
        "verifycontainscertifications()": {
          "definition": "verify_contains__certifications(int certCount )"
        },
        "verifytimeincourseis()": {
          "definition": "verify_time_in_course_is__(string timeInCourseDescription)"
        },
        "clickdonebuttonontheselectedcertificationslist()": {
          "definition": "Click_done_button_on_the_selected_certifications_list()"
        },
        "verifytraininghoursis()": {
          "definition": "Verify_training_hours_is__(string trainingHours)"
        },
        "verifyceucreditsare()": {
          "definition": "Verify_ceu_credits_are__(string ceuCredits)"
        },
        "verifyinstructionmethodis()": {
          "definition": "Verify_instruction_method_is__(string instructionMethod)"
        },
        "verifyretakesis()": {
          "definition": "verify_retakes_is__(string retakesDescription)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "OnlineEventDetailView"
    },
    "chainofcustody": {
      "namespace": "",
      "methods": {
        "verifytheactionhasentrieslogged()": {
          "definition": "Verify_the__action_has_entries_logged( string ordinal, int numberOfEntries )"
        },
        "verifytheactionentryiswithassigneeonverifiedbyenteredby()": {
          "definition": "Verify_the__action__entry_is__with_assignee__on__verified_by__entered_by__( string actionOrdinal, string entryOrdinal, string actionVerb, string assigneeName, string date, string verifierName, string submitterName )"
        },
        "browsetochainofcustodyforfirearmfromorganization()": {
          "definition": "Browse_to_chain_of_custody_for_firearm__from_organization__(string firearmName, string organization)"
        },
        "verifytheactionentryincidentlocationisandincidentnumberisandincidentcommentis()": {
          "definition": "Verify_the__action__entry_incident_location_is__and_incident_number_is__and_incident_comment_is__( string actionOrdinal, string entryOrdinal, string location, string number, string incidentComment )"
        },
        "verifyassigneewithnameallowsaccessfromdatapartitioningistrue()": {
          "definition": "Verify_assignee_with_name__allows_access_from_data_partitioning_is_true(string assingeeName)"
        },
        "bindactionhistory()": {
          "definition": "BindActionHistory( IList<InventoryItemActionEditLogCollectionDTO> history )"
        },
        "verifyusercanreportresourcelostorstolen()": {
          "definition": "Verify_user_can__report_resource_lost_or_stolen( string not )"
        },
        "verifyactionexistsinlist()": {
          "definition": "Verify__action_exists_in_list( int count )"
        },
        "verifyusercanassignresource()": {
          "definition": "Verify_user_can__assign_resource( string not )"
        },
        "verifycanviewassigneeistrue()": {
          "definition": "Verify_can_view_assignee_is_true()"
        },
        "clickverifyforthechainofcustody()": {
          "definition": "Click_verify_for_the_chain_of_custody()"
        },
        "verifytheactionentryassignmentcommentisandverificationcommentis()": {
          "definition": "Verify_the_action_entry_assignment_comment_is_and_verification_comment_is( string actionOrdinal, string entryOrdinal, string assignmentComment, string verificationComment )"
        },
        "verifycanviewassigneeisfalse()": {
          "definition": "Verify_can_view_assignee_is_false()"
        },
        "verifytheactionhasentrylogged()": {
          "definition": "Verify_the__action_has_entry_logged( string ordinal, int one )"
        },
        "verifyusercanverifyresourceassignment()": {
          "definition": "Verify_user_can__verify_resource_assignment( string not )"
        },
        "clickeditfortheactioninthechainofcustody()": {
          "definition": "Click_edit_for_the__action_in_the_chain_of_custody( string ordinal )"
        },
        "verifyactionsexistinlist()": {
          "definition": "Verify__actions_exist_in_list( int count )"
        },
        "verifyassigneewithnameallowsaccessfromdatapartitioningisfalse()": {
          "definition": "Verify_assignee_with_name__allows_access_from_data_partitioning_is_false(string assingeeName)"
        },
        "browsetochainofcustodyforaccountablepropertyfromorganization()": {
          "definition": "Browse_to_chain_of_custody_for_accountable_property__from_organization__(string acctPropName, string organization)"
        },
        "verifytheactionentryisonverifiedbyenteredby()": {
          "definition": "Verify_the__action__entry_is__on__verified_by__entered_by__( string actionOrdinal, string entryOrdinal, string actionVerb, string date, string verifierName, string submitterName )"
        },
        "browsetochainofcustodyforanimalfromorganization()": {
          "definition": "Browse_to_chain_of_custody_for_animal__from_organization__( string name, string organization )"
        },
        "browsetochainofcustodyforvehiclefromorganization()": {
          "definition": "Browse_to_chain_of_custody_for_vehicle__from_organization__( string name, string organization )"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ChainOfCustodyWorkflow"
    },
    "cancelclass": {
      "namespace": "",
      "methods": {
        "show()": {
          "definition": "Show()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "CancelClassWorkflow"
    },
    "surveypreview": {
      "namespace": "",
      "methods": {
        "verifynamedisplaysas()": {
          "definition": "Verify_Name_displays_as__(string surveyName)"
        },
        "verifyitemtextis()": {
          "definition": "Verify_item_text_is__(string expectedText)"
        },
        "verifygrouphasname()": {
          "definition": "Verify_group__has_name__(int group, string name)"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for__(string surveyName)"
        },
        "verifyresponseoptionsare()": {
          "definition": "Verify_response_options_are__(List<string> expectedOptions)"
        },
        "verifygrouphasitems()": {
          "definition": "Verify_group__has__items(int group, int number)"
        },
        "verifytherearegroups()": {
          "definition": "Verify_there_are__groups(int number)"
        },
        "bindsurvey()": {
          "definition": "BindSurvey(SurveyPreviewDTO dto)"
        },
        "verifygrouphasnoname()": {
          "definition": "Verify_group__has_no_name(int group)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "SurveyPreviewWorkflow"
    },
    "studentresponseexport": {
      "namespace": "",
      "methods": {
        "writeexport()": {
          "definition": "WriteExport(string filename, IList<string> exportData)"
        },
        "verifyexportdatarowis()": {
          "definition": "Verify_export_data_row__is__(int rowNum, List<string> values)"
        },
        "verifyexportheadersare()": {
          "definition": "Verify_export_headers_are__(List<string> expected)"
        },
        "verifyexportdatacontainsrows()": {
          "definition": "Verify_export_data_contains__rows(int numRows)"
        },
        "download()": {
          "definition": "Download__(string fileName)"
        }
      },
      "parent-name": "MVBaseExportHandlerWorkflow",
      "class-name": "StudentResponseExportWorkflow"
    },
    "portalclasstestlist": {
      "namespace": "",
      "methods": {
        "considertestinactivity()": {
          "definition": "Consider_test__in_activity__(string testName, string activityName)"
        },
        "verifynumberofresultsenteredis()": {
          "definition": "Verify_number_of_results_entered_is__(int resultsEntered)"
        },
        "verifyentergrades()": {
          "definition": "Verify__enter_grades(string canCannot)"
        },
        "verifyclassdatesare()": {
          "definition": "Verify_class_dates_are__(DateTime startDate, DateTime endDate)"
        },
        "considerclass()": {
          "definition": "Consider_class__(string className)"
        },
        "verifystatusis()": {
          "definition": "Verify_status_is__(PortalAssessmentTestStatus status)"
        },
        "verifynumberofstudentsis()": {
          "definition": "Verify_number_of_students_is__(int students)"
        },
        "clicktoviewgrades()": {
          "definition": "Click_to_view_grades()"
        },
        "bindclasstestlist()": {
          "definition": "BindClassTestList(IEnumerable<PortalClassTestListItemDto> dtos)"
        },
        "verifyclassisnotdisplayed()": {
          "definition": "Verify_class__is_not_displayed(string className)"
        },
        "clicktoentergrades()": {
          "definition": "Click_to_enter_grades()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalClassTestListWorkflow"
    },
    "personperformancetester": {
      "namespace": "",
      "methods": {
        "insertpeoplewithdac()": {
          "definition": "Insert__people_with_dac(int count)"
        },
        "insertpeoplewithsql()": {
          "definition": "Insert__people_with_sql(int count)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "PersonPerformanceTester"
    },
    "inventoryavailabilitiesrecord": {
      "namespace": "",
      "methods": {
        "verifypricetableheaders()": {
          "definition": "Verify_price_table_headers_(List<string> headers)"
        },
        "isschedulable()": {
          "definition": "Is_schedulable()"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for(string itemName)"
        },
        "isrentable()": {
          "definition": "Is_rentable()"
        },
        "isnotrentable()": {
          "definition": "Is_not_rentable()"
        },
        "verifypricetablerowisperiodofusewithprices()": {
          "definition": "Verify_price_table_row__is__period_of_use__with_prices__(int row, string periodOfUse, List<string> content)"
        },
        "bindpricingtable()": {
          "definition": "BindPricingTable(List<string> priceHeaders, List<UsagePricesDTO> prices)"
        },
        "verifytherearenoprices()": {
          "definition": "Verify_there_are_no_prices()"
        },
        "isnotschedulable()": {
          "definition": "Is_not_schedulable()"
        },
        "verifybillinginformationshown()": {
          "definition": "Verify_billing_information__shown(string tf)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "InventoryAvailabilitiesRecordWorkflow"
    },
    "forecast": {
      "namespace": "",
      "methods": {
        "bindchartforecasts()": {
          "definition": "BindChartForecasts(List<CapabilityChartForecastDTO> dtos)"
        },
        "bindpersonforecasts()": {
          "definition": "BindPersonForecasts(List<CapabilityPersonForecastDTO> dtos)"
        },
        "verifyinventorysurplusis()": {
          "definition": "Verify_inventory_surplus_is__(int num)"
        },
        "verifypersoncapabilitiesinclude()": {
          "definition": "Verify_person_capabilities_include__(string name)"
        },
        "verifyinventorycapabilitiesinclude()": {
          "definition": "Verify_inventory_capabilities_include__(string name)"
        },
        "verifypersonsurplusis()": {
          "definition": "Verify_person_surplus_is__(int num)"
        },
        "verifystaffis()": {
          "definition": "Verify_staff_is__(int num)"
        },
        "verifyinventoryneededis()": {
          "definition": "Verify_inventory_needed_is__(int num)"
        },
        "verifytherearepersoncapabilities()": {
          "definition": "Verify_there_are__person_capabilities(int num)"
        },
        "verifypeopleneededis()": {
          "definition": "Verify_people_needed_is__(int num)"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for(string goal)"
        },
        "verifythereareinventorycapabilities()": {
          "definition": "Verify_there_are__inventory_capabilities(int num)"
        },
        "verifytemporarystaffis()": {
          "definition": "Verify_temporary_staff_is__(int num)"
        },
        "bindinventoryforecasts()": {
          "definition": "BindInventoryForecasts(List<CapabilityInventoryForecastDTO> dtos)"
        },
        "verifyotherpeopleis()": {
          "definition": "Verify_other_people_is__(int num)"
        },
        "verifychartcapabilitiesinclude()": {
          "definition": "Verify_chart_capabilities_include__(string name)"
        },
        "verifyinventoryownedis()": {
          "definition": "Verify_inventory_owned_is__(int num)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ForecastWorkflow"
    },
    "multiparttestpartpersistence": {
      "namespace": "",
      "methods": {
        "canroundtripamultiparttestpart()": {
          "definition": "Can_roundtrip_a_multipart_testpart()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "MultiPartTestPartPersistence"
    },
    "loquestiondetailsat": {
      "namespace": "",
      "methods": {
        "verifythatquestionsubcategoryis()": {
          "definition": "Verify_that_question_subcategory_is__(string subcategoryName)"
        },
        "verifythatanswerisandisincorrect()": {
          "definition": "Verify_that_answer__is__and_is_incorrect(string answerLetter, string answerText)"
        },
        "verifythatquestionnumberissameasid()": {
          "definition": "Verify_that_question_number_is_same_as_ID()"
        },
        "verifythatquestionhascredits()": {
          "definition": "Verify_that_question_has__credits(int numCredits)"
        },
        "verifythatdisplayedquestioniddoesnothaveversion()": {
          "definition": "Verify_that_displayed_question_ID_does_not_have_version()"
        },
        "verifythatquestionhaselos()": {
          "definition": "Verify_that_question_has_ELOs__(List<string> eloNames)"
        },
        "verifythattherearequestions()": {
          "definition": "Verify_that_there_are__questions(int numQuestions)"
        },
        "browsetopageforcurriculumandeloandtestandtestedition()": {
          "definition": "Browse_to_page_for_curriculum__and_ELO__and_test__and_test_edition__(string curriculumName, string eloName, string testName, string editionName)"
        },
        "verifythatdisplayedquestionidendswithversion()": {
          "definition": "Verify_that_displayed_question_ID_ends_with_version__(string version)"
        },
        "verifythatquestionanalysisis()": {
          "definition": "Verify_that_question_analysis_is__(string analysis)"
        },
        "verifythatquestioncategoryis()": {
          "definition": "Verify_that_question_category_is__(string categoryName)"
        },
        "usingquestion()": {
          "definition": "Using_question__(int index)"
        },
        "verifythatpagetitleis()": {
          "definition": "Verify_that_page_title_is__(string pageTitle)"
        },
        "settesteditionname()": {
          "definition": "SetTestEditionName(string editionName)"
        },
        "bindtestitems()": {
          "definition": "BindTestItems(EditionLODetailDTO itemDTO)"
        },
        "verifythatquestiontextis()": {
          "definition": "Verify_that_question_text_is__(string questionText)"
        },
        "verifythatquestionhasanswers()": {
          "definition": "Verify_that_question_has__answers(int numAnswers)"
        },
        "verifythatanswerisandiscorrect()": {
          "definition": "Verify_that_answer__is__and_is_correct(string answerLetter, string answerText)"
        },
        "verifythatquestionnumberis()": {
          "definition": "Verify_that_question_number_is__(int questionNumber)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "LOQuestionDetailsATWorkflow"
    },
    "trainingeventrosterreadonly": {
      "namespace": "",
      "methods": {
        "verifyattendeehastrainingcategory()": {
          "definition": "Verify_attendee__has_training_category(string personName, string categoryName)"
        },
        "verifyislistedasaninstructorwithacademyidandprimaryorganizationandroleandhours()": {
          "definition": "Verify__is_listed_as_an_instructor_with_Academy_ID__and_Primary_Organization__and_role__and__hours(string personName, string academyId, string orgName, string roleName, decimal hours)"
        },
        "verifycannotdeletedocuments()": {
          "definition": "Verify_cannot_delete_documents()"
        },
        "bindinstructors()": {
          "definition": "BindInstructors(IEnumerable<TrainingEventInstructorDTO> dtos)"
        },
        "verifycannotadddocument()": {
          "definition": "Verify_cannot_add_document()"
        },
        "verifycannotbeedited()": {
          "definition": "Verify__cannot_be_edited(string filename)"
        },
        "verifynumberofattendeesis()": {
          "definition": "Verify_number_of_attendees_is__(int count)"
        },
        "verifyattendeehasnotrainingcategory()": {
          "definition": "Verify_attendee__has_no_training_category(string personName)"
        },
        "verifythereareinstructorslisted()": {
          "definition": "Verify_there_are__instructors_listed(int count)"
        },
        "verifyexistsindocumentlistwithdescription()": {
          "definition": "Verify__exists_in_document_list_with_description__(string fileName, string description)"
        },
        "bindenrollments()": {
          "definition": "BindEnrollments(IEnumerable<TrainingEventAttendeeDTO> dtos)"
        },
        "verifylessonplanwarningappears()": {
          "definition": "Verify_lesson_plan_warning_appears()"
        },
        "browsetopageforclass()": {
          "definition": "Browse_to_page_for_class_(string eventName)"
        },
        "verifythedocumentlistcontainsdocuments()": {
          "definition": "Verify_the_document_list_contains__documents(int numDocs)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "TrainingEventRosterReadonlyWorkflow"
    },
    "hoovermatching": {
      "namespace": "",
      "methods": {
        "navigatetoreturnurl()": {
          "definition": "NavigateToReturnUrl()"
        },
        "verifycanmatchon()": {
          "definition": "Verify_can_match_on___(string parent, string child, string field)"
        },
        "clickcontinue()": {
          "definition": "Click_continue()"
        },
        "donotmatchon()": {
          "definition": "Do_not_match_on__(string parent, string child, string field)"
        },
        "showcanceldialog()": {
          "definition": "ShowCancelDialog()"
        },
        "verifycannotmatchon()": {
          "definition": "Verify_can_not_match_on___(string parent, string child, string field)"
        },
        "verifymatchchecked()": {
          "definition": "Verify_match____checked(string parent, string child, string field, string isIsNot)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "navigatetopage()": {
          "definition": "NavigateToPage(ImportWizardPage page)"
        },
        "matchon()": {
          "definition": "Match_on__(string parent, string child, string field)"
        },
        "verifycannotselectmatchon()": {
          "definition": "Verify_can_not_select_match_on___(string parent, string child, string field)"
        },
        "showimportjobreallocated()": {
          "definition": "ShowImportJobReallocated()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "HooverMatchingWorkflow"
    },
    "slowestpagesreport": {
      "namespace": "",
      "methods": {
        "verifyrecordhasaveragetimeof()": {
          "definition": "Verify__record_has_average_time_of_(string ordinal, decimal avgTime)"
        },
        "verifyrecordhaspagehitsof()": {
          "definition": "Verify__record_has_page_hits_of_(string ordinal, int pageHits)"
        },
        "verifyrecordhasminimumtimeof()": {
          "definition": "Verify__record_has_minimum_time_of_(string ordinal, decimal minTime)"
        },
        "verifyrecordhasmaximumtimeof()": {
          "definition": "Verify__record_has_maximum_time_of_(string ordinal, decimal maxTime)"
        },
        "verifyrecordhasseleniumpageid()": {
          "definition": "Verify__record_has_selenium_page_Id_(string ordinal, Guid pageId)"
        },
        "seedpagedata()": {
          "definition": "Seed_page_data()"
        },
        "verifytherearerecords()": {
          "definition": "Verify_there_are_records(int number)"
        },
        "bindrecords()": {
          "definition": "BindRecords(IEnumerable<SlowestPagesReportDto> slowestPages)"
        },
        "verifyrecordhasurl()": {
          "definition": "Verify__record_has_url_(string ordinal, string pageUrl)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "SlowestPagesReportWorkflow"
    },
    "hooveroptions": {
      "namespace": "",
      "methods": {
        "verifyoptionis()": {
          "definition": "Verify_option__is__(string option, string value)"
        },
        "bindoptions()": {
          "definition": "BindOptions(IEnumerable<ScenarioModuleOptionsDTO> options)"
        },
        "navigatetoreturnurl()": {
          "definition": "NavigateToReturnUrl()"
        },
        "specifyupdatescleardata()": {
          "definition": "Specify_updates__clear_data(string shouldShouldNot)"
        },
        "clickcontinue()": {
          "definition": "Click_continue()"
        },
        "showcanceldialog()": {
          "definition": "ShowCancelDialog()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "navigatetopage()": {
          "definition": "NavigateToPage(ImportWizardPage page)"
        },
        "showimportjobreallocated()": {
          "definition": "ShowImportJobReallocated()"
        },
        "specifyoptionas()": {
          "definition": "Specify_option__as__(string option, string value)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "HooverOptionsWorkflow"
    },
    "viewperformancereport": {
      "namespace": "",
      "methods": {
        "verifycertificationnameisonsuccessalert()": {
          "definition": "Verify_certification_name_is__on_success_alert(string value)"
        },
        "verifyactionisonsuccessalert()": {
          "definition": "Verify_action_is__on_success_alert(string value)"
        },
        "verifythatevaluationhasbeenapproved()": {
          "definition": "Verify_that_evaluation_has_been_approved()"
        },
        "considerthecertificationonthesuccessalert()": {
          "definition": "Consider_the__certification_on_the_success_alert(string ordinal)"
        },
        "verifythatevaluationhasnotbeenapproved()": {
          "definition": "Verify_that_evaluation_has_not_been_approved()"
        },
        "verifydeleteisavailable()": {
          "definition": "Verify_delete_is_available()"
        },
        "verifyrenewaloverridewarningshown()": {
          "definition": "Verify_renewal_override_warning__shown(string isIsNot)"
        },
        "verifyapproveisnotavailable()": {
          "definition": "Verify_approve_is_not_available()"
        },
        "showissuedcertificationsalert()": {
          "definition": "ShowIssuedCertificationsAlert(List<PerformanceReportSaveResultDTO.Certification> certifications)"
        },
        "verifythecompetencyisinthegroup()": {
          "definition": "Verify_the__competency_is__in_the__group(string competencyName, string ordinal, string groupName)"
        },
        "verifyapproveisavailable()": {
          "definition": "Verify_approve_is_available()"
        },
        "browsetoviewperformancereportforpersonoftype()": {
          "definition": "Browse_to_View_Performance_Report__for_Person__of_type__(int evaluationRowNumber, string personName, string reportName)"
        },
        "verifystudentfieldsarenotvisible()": {
          "definition": "Verify_student_fields_are_not_visible()"
        },
        "verifystudentfieldsarevisible()": {
          "definition": "Verify_student_fields_are_visible()"
        },
        "goback()": {
          "definition": "GoBack()"
        },
        "verifythatnotifyauthorcheckboxisenabled()": {
          "definition": "Verify_that_Notify_Author_checkbox_is_enabled()"
        },
        "verifyexpirationis()": {
          "definition": "Verify_expiration_is__(string value)"
        },
        "verifythereiscompetencynotinagroup()": {
          "definition": "Verify_there_is__competency_not_in_a_group(int count)"
        },
        "verifycertificationsrestrictedwarningshown()": {
          "definition": "Verify_certifications_restricted_warning__shown(string isOrNot)"
        },
        "checkqualitycontrolitem()": {
          "definition": "Check_quality_control_item( string itemLabel )"
        },
        "verifyconfercheckboxlabelis()": {
          "definition": "Verify_confer_checkbox_label_is__(string value)"
        },
        "verifyqualitycontrolitemsarerequired()": {
          "definition": "Verify_Quality_Control_items_are_required()"
        },
        "verifythecompetencyhasfilenamedwithdescriptionandprotected()": {
          "definition": "Verify_the_competency__has_file_named__with_description__and__protected(string competencyName, string fileName, string description, string is_isNot)"
        },
        "bindcompetencies()": {
          "definition": "BindCompetencies( IList<PerformanceReportRatingGroupDTO> data )"
        },
        "verifyqualitycontrolitemsarenotdisplayed()": {
          "definition": "Verify_Quality_Control_items_are_not_displayed()"
        },
        "verifythecompetencyfilenamedcannotbeviewed()": {
          "definition": "Verify_the__competency_file_named__cannot_be_viewed(string competencyName, string fileName)"
        },
        "verifyqualitycontrolitemsarenotrequired()": {
          "definition": "Verify_Quality_Control_items_are_not_required()"
        },
        "browsetoviewperformancereportfororganizationoftype()": {
          "definition": "Browse_to_View_Performance_Report__for_organization__of_type__(int evaluationRowNumber, string orgName, string reportName)"
        },
        "verifythefreeformanswerforreads()": {
          "definition": "Verify_the_freeform_answer_for__reads__(string competencyName, string freeformResponse)"
        },
        "verifystatusisonsuccessalert()": {
          "definition": "Verify_status_is__on_success_alert(string value)"
        },
        "verifycertificationsshownonthesuccessalert()": {
          "definition": "Verify__certifications_shown_on_the_success_alert(int count)"
        },
        "verifycertificationsuccessalertshown()": {
          "definition": "Verify_certification_success_alert__shown(string isOrNot)"
        },
        "verifyexpirationdateisonsuccessalert()": {
          "definition": "Verify_expiration_date_is__on_success_alert(string value)"
        },
        "verifyeditisnotavailable()": {
          "definition": "Verify_edit_is_not_available()"
        },
        "verifytherearecertificationsdisplayed()": {
          "definition": "Verify_there_are__certifications_displayed(int count)"
        },
        "verifythatnotifyauthorcheckboxisvisible()": {
          "definition": "Verify_that_Notify_Author_checkbox_is_visible()"
        },
        "verifythecompetencyfilenamedcanbeviewed()": {
          "definition": "Verify_the__competency_file_named__can_be_viewed(string competencyName, string fileName)"
        },
        "verifycurrentstatusis()": {
          "definition": "Verify_current_status_is__(string value)"
        },
        "verifydeleteisnotavailable()": {
          "definition": "Verify_delete_is_not_available()"
        },
        "verifynewexpirationis()": {
          "definition": "Verify_new_expiration_is__(string value)"
        },
        "showcertificationsrestrictedalert()": {
          "definition": "ShowCertificationsRestrictedAlert()"
        },
        "verifythecompetencynotinagroupis()": {
          "definition": "Verify_the__competency_not_in_a_group_is__(string ordinalName, string competencyName)"
        },
        "verifycommentsforcompetencyare()": {
          "definition": "Verify_comments_for_competency__are__(string competencyName, string comments)"
        },
        "verifyobservationperiodisnotdisplayed()": {
          "definition": "Verify_observation_period_is_not_displayed()"
        },
        "verifyqualitycontrolitemsaredisplayed()": {
          "definition": "Verify_Quality_Control_items_are_displayed()"
        },
        "showrenewaloverridewarning()": {
          "definition": "ShowRenewalOverrideWarning(IList<string> certsToWarnAbout)"
        },
        "verifyconfercheckboxchecked()": {
          "definition": "Verify_confer_checkbox__checked(string value)"
        },
        "verifydonebuttonavailable()": {
          "definition": "Verify_Done_Button__available(string status)"
        },
        "enterrejectioncomments()": {
          "definition": "Enter_rejection_comments__(string rejectionComments)"
        },
        "verifytherearecompetencygroups()": {
          "definition": "Verify_there_are__competency_groups(int count)"
        },
        "verifythecompetencyratingforreads()": {
          "definition": "Verify_the_competency_rating_for__reads__(string competencyName, string responseText)"
        },
        "verifythatnotifyauthorcheckboxisnotenabled()": {
          "definition": "Verify_that_Notify_Author_checkbox_is_not_enabled()"
        },
        "verifycertificationnameis()": {
          "definition": "Verify_certification_name_is_(string value)"
        },
        "verifyissuerenewaldateis()": {
          "definition": "Verify_issue_renewal_date_is__(string value)"
        },
        "verifyeditisavailable()": {
          "definition": "Verify_edit_is_available()"
        },
        "verifythecompetencyhasfilesattached()": {
          "definition": "Verify_the_competency__has__files_attached(string competencyName, int numFiles)"
        },
        "verifyfuturecertificationactionwarningshown()": {
          "definition": "Verify_future_certification_action_warning__shown(string isOrNot)"
        },
        "verifytherearecompetenciesinthegroup()": {
          "definition": "Verify_there_are__competencies_in_the__group(int count, string groupName)"
        },
        "verifythereiscompetencyinthegroup()": {
          "definition": "Verify_there_is__competency_in_the__group(int count, string groupName)"
        },
        "navigatetoeditreport()": {
          "definition": "NavigateToEditReport()"
        },
        "verifyeffectivedateisonsuccessalert()": {
          "definition": "Verify_effective_date_is__on_success_alert(string value)"
        },
        "bindcertifications()": {
          "definition": "BindCertifications(List<PerformanceReportForReadAddEditDTO.Certification> certs, bool allowChangeRecommendations)"
        },
        "verifydonelinkavailable()": {
          "definition": "Verify_Done_Link__available(string status)"
        },
        "verifycompetencygroupis()": {
          "definition": "Verify_competency_group__is__(int num, string groupName)"
        },
        "considerthecertification()": {
          "definition": "Consider_the__certification(string ordinal)"
        },
        "verifythatnotifyauthorcheckboxisnotvisible()": {
          "definition": "Verify_that_Notify_Author_checkbox_is_not_visible()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ViewPerformanceReport"
    },
    "employerauthoritydata": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "EmployerAuthorityData"
    },
    "hooverimport": {
      "namespace": "",
      "methods": {
        "exporterrors()": {
          "definition": "Export_errors()"
        },
        "uploadfilewithcontents()": {
          "definition": "Upload_file_with_contents(string fileContents)"
        },
        "mapcolumnto()": {
          "definition": "Map_column__to__(string columnName, string typeName, string fieldKey)"
        },
        "verifyerrorlistcontains()": {
          "definition": "Verify_Error_list_contains__(string expectedError)"
        },
        "selectmodule()": {
          "definition": "Select_module__(string moduleName)"
        },
        "performimport()": {
          "definition": "Perform_import()"
        },
        "matchon()": {
          "definition": "Match_on__(string typeName, string traitKey)"
        },
        "specifyoptionas()": {
          "definition": "Specify_option__as__(string optionName, string value)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "HooverImport"
    },
    "addeditperformancereport": {
      "namespace": "",
      "methods": {
        "verifythattheinstructionsaresetto()": {
          "definition": "Verify_that_the_instructions_are_set_to__(string instructions)"
        },
        "verifythatthecompetencyhasfilesattached()": {
          "definition": "Verify_that_the_competency__has__files_attached(string competencyName, int numFiles)"
        },
        "verifythatthereportisfor()": {
          "definition": "Verify_that_the_report_is_for__(string personName)"
        },
        "setanswerforto()": {
          "definition": "Set_Answer_for__to__(string competencyName, string answer)"
        },
        "clickdonotnotify()": {
          "definition": "Click_Do_Not_Notify()"
        },
        "verifyactionisonsuccessalert()": {
          "definition": "Verify_action_is__on_success_alert(string value)"
        },
        "verifyconfirmationpopoversaysnoemailsweresentto()": {
          "definition": "Verify_confirmation_popover_says_no_emails_were_sent_to__(string personName)"
        },
        "verifythattherearecompetencygroups()": {
          "definition": "Verify_that_there_are__competency_groups(int numberOfCompetencyGroups)"
        },
        "verifythatthelastsavedateisblank()": {
          "definition": "Verify_that_the_last_save_date_is_blank()"
        },
        "considerthecertificationonthesuccessalert()": {
          "definition": "Consider_the__certification_on_the_success_alert(string ordinal)"
        },
        "verifythatthestudentscountis()": {
          "definition": "Verify_that_the_students_count_is__(string count)"
        },
        "showapproveorrejectpopover()": {
          "definition": "ShowApproveOrRejectPopover()"
        },
        "verifywizardskiptofailuresbuttonisvisible()": {
          "definition": "Verify_Wizard_Skip_To_Failures_Button_is_visible()"
        },
        "clicktodeletefilewithdescriptiononcompetency()": {
          "definition": "Click_to_delete_file_with_description__on_competency__(string descr, string competencyName)"
        },
        "verifythatnotifyauthorcheckboxisenabled()": {
          "definition": "Verify_that_Notify_Author_checkbox_is_enabled()"
        },
        "markfileascontainingsensitivedata()": {
          "definition": "Mark_file_as_containing_sensitive_data()"
        },
        "verifyexpirationis()": {
          "definition": "Verify_expiration_is__(string value)"
        },
        "clickfinishlater()": {
          "definition": "Click_Finish_Later()"
        },
        "verifyeditarchetypewarningisvisible()": {
          "definition": "Verify_edit_archetype_warning_is_visible()"
        },
        "verifythatthereiscompetencygroup()": {
          "definition": "Verify_that_there_is__competency_group(int numberOfCompetencyGroups)"
        },
        "clicktoeditfilewithdescriptiononcompetency()": {
          "definition": "Click_to_edit_file_with_description__on_competency__(string descr, string competencyName)"
        },
        "wizardskiptofailures()": {
          "definition": "Wizard_Skip_To_Failures()"
        },
        "verifythatthecompetencyfilenamedcanbeviewed()": {
          "definition": "Verify_that_the__competency_file_named__can_be_viewed(string competencyName, string fileName)"
        },
        "verifythatthereporttemplateis()": {
          "definition": "Verify_that_the_report_template_is__(string reportTemplateName)"
        },
        "verifydescriptionis()": {
          "definition": "Verify_description_is__(string descr)"
        },
        "verifythatfileattachmentsareallowed()": {
          "definition": "Verify_that_file_attachments_are_allowed()"
        },
        "wizardnext()": {
          "definition": "Wizard_Next()"
        },
        "verifyqualitycontrolitemsarerequired()": {
          "definition": "Verify_Quality_Control_items_are_required()"
        },
        "verifythatanobservationperiodisnotcollected()": {
          "definition": "Verify_that_an_observation_period_is_not_collected()"
        },
        "verifythatthelastsavedateis()": {
          "definition": "Verify_that_the_last_save_date_is__(string lastSaveDate)"
        },
        "verifyqualitycontrolitemsarenotdisplayed()": {
          "definition": "Verify_Quality_Control_items_are_not_displayed()"
        },
        "showaddeditdocumentcontrol()": {
          "definition": "ShowAddEditDocumentControl()"
        },
        "verifytheemailnotificationpopoverisnotdisplayed()": {
          "definition": "Verify_the_email_notification_popover_is_not_displayed()"
        },
        "verifycertificationsshownonthesuccessalert()": {
          "definition": "Verify__certifications_shown_on_the_success_alert(int count)"
        },
        "verifythatthereportispassedarchetype()": {
          "definition": "Verify_that_the_report_is_passed_archetype()"
        },
        "verifyuserrenavigatedtostartinglocation()": {
          "definition": "Verify_User_Renavigated_to_Starting_Location()"
        },
        "verifyquicksetisnotshown()": {
          "definition": "Verify_quickset_is_not_shown()"
        },
        "verifywizardpreviousbuttonisnotvisible()": {
          "definition": "Verify_Wizard_Previous_Button_is_not_visible()"
        },
        "setperiodstartdateto()": {
          "definition": "Set_period_start_date_to__(DateTime startDate)"
        },
        "checkcheckboxfor()": {
          "definition": "Check_checkbox_for__(string competencyName)"
        },
        "verifyexpirationdateisonsuccessalert()": {
          "definition": "Verify_expiration_date_is__on_success_alert(string value)"
        },
        "uncheckcheckboxtoconfercert()": {
          "definition": "Uncheck_checkbox_to_confer_cert__(string name)"
        },
        "verifyfilenameis()": {
          "definition": "Verify_filename_is__(string fileName)"
        },
        "clicktoattachafilefor()": {
          "definition": "Click_to_attach_a_file_for__(string competencyName)"
        },
        "verifythatthereportisungradedarchetype()": {
          "definition": "Verify_that_the_report_is_ungraded_archetype()"
        },
        "verifyconfercheckboxchecked()": {
          "definition": "Verify_confer_checkbox__checked(string value)"
        },
        "verifythatthereportdateis()": {
          "definition": "Verify_that_the_report_date_is__(string reportDate)"
        },
        "showincompletewarningpopover()": {
          "definition": "ShowIncompleteWarningPopover(string warningText, bool linkVisible)"
        },
        "verifythatthecompetencyisinthegroup()": {
          "definition": "Verify_that_the__competency_is__in_the__group(string competencyName, string ordinal, string competencyGroupName)"
        },
        "verifyisanavailablerecipient()": {
          "definition": "Verify__is_an_available_recipient(string personName)"
        },
        "verifythatthereiscompetencyinthegroup()": {
          "definition": "Verify_that_there_is__competency_in_the__group(int numberOfCompetencies, string competencyGroupName)"
        },
        "showcertificationsrestrictedalert()": {
          "definition": "ShowCertificationsRestrictedAlert()"
        },
        "verifythatthereportdateisblank()": {
          "definition": "Verify_that_the_report_date_is_blank()"
        },
        "enterrejectioncomments()": {
          "definition": "Enter_rejection_comments__(string rejectionComments)"
        },
        "verifythatthefreeformanswerforreads()": {
          "definition": "Verify_that_the_freeform_answer_for__reads__(string competencyName, string answer)"
        },
        "verifywizardnextbuttonisnotvisible()": {
          "definition": "Verify_Wizard_Next_Button_is_not_visible()"
        },
        "showemailnotificationpopover()": {
          "definition": "ShowEmailNotificationPopover()"
        },
        "verifywizardwasredirectedtothesummarypage()": {
          "definition": "Verify_Wizard_Was_Redirected_To_The_Summary_Page()"
        },
        "checkcheckboxtoconfercert()": {
          "definition": "Check_checkbox_to_confer_cert__(string name)"
        },
        "redirecttostartinglocation()": {
          "definition": "RedirectToStartingLocation()"
        },
        "wizarddone()": {
          "definition": "Wizard_Done()"
        },
        "verifyissuerenewaldateis()": {
          "definition": "Verify_issue_renewal_date_is__(string value)"
        },
        "setperiodenddateto()": {
          "definition": "Set_period_end_date_to__(DateTime endDate)"
        },
        "browsetoaddmultipleperformancereportsoftypeforclass()": {
          "definition": "Browse_to_Add_Multiple_Performance_Reports_of_type__for_class__(string reportName, string className)"
        },
        "verifycertificationnameis()": {
          "definition": "Verify_certification_name_is_(string value)"
        },
        "verifythatnotifyauthorcheckboxisnotenabled()": {
          "definition": "Verify_that_Notify_Author_checkbox_is_not_enabled()"
        },
        "verifyfuturecertificationactionwarningshown()": {
          "definition": "Verify_future_certification_action_warning__shown(string isOrNot)"
        },
        "verifythattheacademyidisnotvisible()": {
          "definition": "Verify_that_the_academy_id_is_not_visible()"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "simulateautosave()": {
          "definition": "Simulate_auto_save()"
        },
        "browsetoaddperformancereportfororganizationoftype()": {
          "definition": "Browse_to_Add_Performance_Report_for_organization__of_type__(string orgName, string reportName)"
        },
        "verifyisnotapreselectedrecipient()": {
          "definition": "Verify__is_not_a_preselected_recipient(string personNameOrEmail)"
        },
        "verifycanchangeuploadedfile()": {
          "definition": "Verify_can_change_uploaded_file()"
        },
        "verifytheemailconfirmationpopoverisnotdisplayed()": {
          "definition": "Verify_the_email_confirmation_popover_is_not_displayed()"
        },
        "clickdoneforfileupload()": {
          "definition": "Click_done_for_file_upload()"
        },
        "verifyeffectivedateisonsuccessalert()": {
          "definition": "Verify_effective_date_is__on_success_alert(string value)"
        },
        "bindcertifications()": {
          "definition": "BindCertifications(List<PerformanceReportForReadAddEditDTO.Certification> certs)"
        },
        "verifythatnotifyauthorcheckboxisnotvisible()": {
          "definition": "Verify_that_Notify_Author_checkbox_is_not_visible()"
        },
        "considerthecertification()": {
          "definition": "Consider_the__certification(string ordinal)"
        },
        "verifythattherearecertificationslisted()": {
          "definition": "Verify_that_there_are__certifications_listed(int count)"
        },
        "setformcommentto()": {
          "definition": "Set_form_comment_to__(string comment)"
        },
        "verifywizardskipbuttonisnotvisible()": {
          "definition": "Verify_Wizard_Skip_Button_is_not_visible()"
        },
        "verifythatcommentsforcompetencyare()": {
          "definition": "Verify_that_comments_for_competency__are__(string competencyName, string comments)"
        },
        "verifysavewizardbuttonisnotvisible()": {
          "definition": "Verify_Save_Wizard_Button_is_not_visible()"
        },
        "cancelfileupload()": {
          "definition": "Cancel_file_upload()"
        },
        "verifycertificationnameisonsuccessalert()": {
          "definition": "Verify_certification_name_is__on_success_alert(string value)"
        },
        "verifyconfirmationpopoversaysemailsweresentandnotsent()": {
          "definition": "Verify_confirmation_popover_says__emails_were_sent_and__not_sent(int numSent, int numNotSent)"
        },
        "verifywizardnextbuttonisvisible()": {
          "definition": "Verify_Wizard_Next_Button_is_visible()"
        },
        "verifythatthestudentevaluationstatusissetto()": {
          "definition": "Verify_that_the_student_evaluation_status_is_set_to__(string status)"
        },
        "verifywizardskipbuttonisvisible()": {
          "definition": "Verify_Wizard_Skip_Button_is_visible()"
        },
        "browsetoaddperformancereportforpersonoftypeforclass()": {
          "definition": "Browse_to_Add_Performance_Report_for_Person__of_type__for_class__(string personName, string reportName, string className)"
        },
        "browsetoaddperformancereportforpersonoftype()": {
          "definition": "Browse_to_Add_Performance_Report_for_Person__of_type__(string personName, string reportName)"
        },
        "verifythatcompetencygroupis()": {
          "definition": "Verify_that_competency_group__is__(int rowNumber, string competencyGroupName)"
        },
        "verifythatthereportisfailedarchetype()": {
          "definition": "Verify_that_the_report_is_failed_archetype()"
        },
        "wizardskip()": {
          "definition": "Wizard_Skip()"
        },
        "verifythatthecompetencyhasfilenamedwithdescriptionandprotected()": {
          "definition": "Verify_that_the_competency__has_file_named__with_description__and__protected(string competencyName, string fileName, string description, string is_isNot)"
        },
        "verifytherearenopreselectedrecipients()": {
          "definition": "Verify_there_are_no_preselected_recipients()"
        },
        "verifysaveandapprovebuttonisnotvisible()": {
          "definition": "Verify_Save_And_Approve_Button_is_not_visible()"
        },
        "clicknotify()": {
          "definition": "Click_Notify()"
        },
        "removerecipient()": {
          "definition": "Remove_recipient__(string personNameOrEmail)"
        },
        "verifyquicksetisshown()": {
          "definition": "Verify_quickset_is_shown()"
        },
        "verifythatthepassingstudentscountis()": {
          "definition": "Verify_that_the_passing_students_count_is__(string count)"
        },
        "verifycertificationsrestrictedwarningshown()": {
          "definition": "Verify_certifications_restricted_warning__shown(string isOrNot)"
        },
        "savefileedit()": {
          "definition": "Save_file_edit()"
        },
        "verifyconfercheckboxlabelis()": {
          "definition": "Verify_confer_checkbox_label_is__(string value)"
        },
        "setresponseforto()": {
          "definition": "Set_response_for__to__(string competencyName, string ratingName)"
        },
        "checkqualitycontrolitem()": {
          "definition": "Check_quality_control_item(string itemLabel)"
        },
        "enterforfiledescription()": {
          "definition": "Enter__for_file_description(string fileDescr)"
        },
        "verifycanchangeprotectionlevel()": {
          "definition": "Verify_can_change_protection_level()"
        },
        "verifythatthecompetencyratingforreads()": {
          "definition": "Verify_that_the_competency_rating_for__reads__(string competencyName, string ratingText)"
        },
        "verifythatthefailingstudentscountis()": {
          "definition": "Verify_that_the_failing_students_count_is__(string count)"
        },
        "showsaveordiscarddraftpopover()": {
          "definition": "ShowSaveOrDiscardDraftPopover()"
        },
        "browsetoforwizard()": {
          "definition": "Browse_to_for_wizard()"
        },
        "clicktochangefile()": {
          "definition": "Click_to_change_file()"
        },
        "verifyisnotanavailablerecipient()": {
          "definition": "Verify__is_not_an_available_recipient(string personName)"
        },
        "redirecttosummarypage()": {
          "definition": "RedirectToSummaryPage()"
        },
        "unmarkfileascontainingsensitivedata()": {
          "definition": "Unmark_file_as_containing_sensitive_data()"
        },
        "verifythattheclassnameissetto()": {
          "definition": "Verify_that_the_class_name_is_set_to__(string className)"
        },
        "verifywizardskiptofailuresbuttonisnotvisible()": {
          "definition": "Verify_Wizard_Skip_To_Failures_Button_is_not_visible()"
        },
        "verifythatthecompetencyfilenamedcannotbeviewed()": {
          "definition": "Verify_that_the__competency_file_named__cannot_be_viewed(string competencyName, string fileName)"
        },
        "verifysavewizardbuttonisvisible()": {
          "definition": "Verify_Save_Wizard_Button_is_visible()"
        },
        "verifystatusisonsuccessalert()": {
          "definition": "Verify_status_is__on_success_alert(string value)"
        },
        "verifycertificationsuccessalertshown()": {
          "definition": "Verify_certification_success_alert__shown(string isOrNot)"
        },
        "verifyqualitycontrolitemsarenotrequired()": {
          "definition": "Verify_Quality_Control_items_are_not_required()"
        },
        "verifysaveandapprovebuttonisvisible()": {
          "definition": "Verify_Save_And_Approve_Button_is_visible()"
        },
        "rejectevaluationform()": {
          "definition": "Reject_Evaluation_Form()"
        },
        "verifythatnotifyauthorcheckboxisvisible()": {
          "definition": "Verify_that_Notify_Author_checkbox_is_visible()"
        },
        "verifythatfileattachmentsarenotallowed()": {
          "definition": "Verify_that_file_attachments_are_not_allowed()"
        },
        "verifythattherearecompetenciesnotinagroup()": {
          "definition": "Verify_that_there_are__competencies_not_in_a_group(int numberOfCompetencies)"
        },
        "setupcommentoptions()": {
          "definition": "SetupCommentOptions()"
        },
        "verifycurrentstatusis()": {
          "definition": "Verify_current_status_is__(string value)"
        },
        "verifynewexpirationis()": {
          "definition": "Verify_new_expiration_is__(string value)"
        },
        "wizardprevious()": {
          "definition": "Wizard_Previous()"
        },
        "verifythatthereiscompetencynotinagroup()": {
          "definition": "Verify_that_there_is__competency_not_in_a_group(int numberOfCompetencies)"
        },
        "upload()": {
          "definition": "Upload(string fileName)"
        },
        "showrenewaloverridewarning()": {
          "definition": "ShowRenewalOverrideWarning(IList<string> certsToWarnAbout)"
        },
        "browsetoeditperformancereportfororganizationoftype()": {
          "definition": "Browse_to_Edit_Performance_Report__for_organization__of_type__(int evaluationRowNumber, string orgName, string reportName)"
        },
        "verifythatthecompetencynotinagroupis()": {
          "definition": "Verify_that_the__competency_not_in_a_group_is__(string ordinal, string competencyName)"
        },
        "selectrecipient()": {
          "definition": "Select_recipient__(string personNameAcadIdOrEmail)"
        },
        "cancelfileedit()": {
          "definition": "Cancel_file_edit()"
        },
        "verifywizardwasredirectedwithaction()": {
          "definition": "Verify_Wizard_Was_Redirected_With_Action(ConductWizardActionType wizardAction)"
        },
        "verifyisapreselectedrecipient()": {
          "definition": "Verify__is_a_preselected_recipient(string personNameOrEmail)"
        },
        "verifyqualitycontrolitemsaredisplayed()": {
          "definition": "Verify_Quality_Control_items_are_displayed()"
        },
        "verifytheemailconfirmationpopoverisdisplayed()": {
          "definition": "Verify_the_email_confirmation_popover_is_displayed()"
        },
        "showcertificationsuccessalert()": {
          "definition": "ShowCertificationSuccessAlert(List<PerformanceReportSaveResultDTO.Certification> certifications)"
        },
        "approveevaluationform()": {
          "definition": "Approve_Evaluation_Form()"
        },
        "verifythatthecompetencycommentsare()": {
          "definition": "Verify_that_the_competency__comments_are__(string competencyName, string commentOption)"
        },
        "verifythattheformcommentis()": {
          "definition": "Verify_that_the_form_comment_is__(string comment)"
        },
        "verifytheemailnotificationpopoverisdisplayed()": {
          "definition": "Verify_the_email_notification_popover_is_displayed()"
        },
        "verifycannotchangeprotectionlevel()": {
          "definition": "Verify_cannot_change_protection_level()"
        },
        "verifywizardpreviousbuttonisvisible()": {
          "definition": "Verify_Wizard_Previous_Button_is_visible()"
        },
        "verifysavebuttonisvisible()": {
          "definition": "Verify_Save_Button_is_visible()"
        },
        "verifythattheperiodenddateis()": {
          "definition": "Verify_that_the_period_end_date_is__(string endDate)"
        },
        "refreshitemresponsesfromui()": {
          "definition": "RefreshItemResponsesFromUI()"
        },
        "verifycanuploadnewfile()": {
          "definition": "Verify_can_upload_new_file()"
        },
        "showemailconfirmation()": {
          "definition": "ShowEmailConfirmation(bool haveSendingFailures, IList<string> cannotSendNames, int numSent)"
        },
        "verifysavebuttonisnotvisible()": {
          "definition": "Verify_Save_Button_is_not_visible()"
        },
        "verifyfileuploadmodalisvisible()": {
          "definition": "Verify_file_upload_modal_is_visible()"
        },
        "redirectforwizard()": {
          "definition": "RedirectForWizard(ConductWizardActionType actionType)"
        },
        "verifythattheperiodstartdateis()": {
          "definition": "Verify_that_the_period_start_date_is__(string startDate)"
        },
        "wizardcancel()": {
          "definition": "Wizard_Cancel()"
        },
        "verifythattheacademyidissetto()": {
          "definition": "Verify_that_the_academy_id_is_set_to__(string academyId)"
        },
        "browsetoeditperformancereportforpersonoftype()": {
          "definition": "Browse_to_Edit_Performance_Report__for_Person__of_type__(int evaluationRowNumber, string personName, string reportName)"
        },
        "verifythatcommentsforcompetencyareempty()": {
          "definition": "Verify_that_comments_for_competency__are_empty(string competencyName)"
        },
        "verifytherearepreselectedrecipients()": {
          "definition": "Verify_there_are__preselected_recipients(int preselectedRecipientCount)"
        },
        "setcommentsforto()": {
          "definition": "Set_Comments_for__to__(string competencyName, string comments)"
        },
        "verifythattherearecompetenciesinthegroup()": {
          "definition": "Verify_that_there_are__competencies_in_the__group(int numberOfCompetencies, string competencyGroupName)"
        },
        "setreportdateto()": {
          "definition": "Set_report_date_to__(DateTime reportDate)"
        },
        "showeditarchetypewarning()": {
          "definition": "ShowEditArchetypeWarning()"
        },
        "verifythediscarddraftalertshown()": {
          "definition": "Verify_the_discard_draft_alert__shown(string isOrNot)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AddEditPerformanceReportWorkflow"
    },
    "trainingmonitor": {
      "namespace": "",
      "methods": {
        "oninstructorssidebarclickvisitingstaff()": {
          "definition": "On_instructors_sidebar_click__visiting_staff(string academyName)"
        },
        "verifyongoingclasseshasevents()": {
          "definition": "Verify_ongoing_classes_has_events(int numEvents)"
        },
        "verifyisshownwithevents()": {
          "definition": "Verify_is_shown_with_events(string dateString, int numEvents)"
        },
        "opentheprogramfiltertypeahead()": {
          "definition": "Open_the_program_filter_type_ahead()"
        },
        "verifythatinstructorssidebarincludeswithdedicatedstaff()": {
          "definition": "Verify_that_instructors_sidebar_includes__with__dedicated_staff(string academyName, int numDedicated)"
        },
        "verifythatpagenavigatedtopersonsearchresults()": {
          "definition": "Verify_that_page_navigated_to_person_search_results()"
        },
        "verifyanavailableprogramfilteroption()": {
          "definition": "Verify__an_available_program_filter_option(string programName, string isOrNot)"
        },
        "bindacademyinstructors()": {
          "definition": "BindAcademyInstructors(IEnumerable<OnSiteInstructorSidebarAcademyDTO> academyInstructorData)"
        },
        "verifythatinstructorssidebarincludeswithdedicatedstaffandawaystaffandvisitingstaff()": {
          "definition": "Verify_that_instructors_sidebar_includes__with__dedicated_staff_and__away_staff_and__visiting_staff(string academyName, int numDedicated, int numAway, int numVisiting)"
        },
        "selectinprogramfiltertypeahead()": {
          "definition": "Select__in_program_filter_type_ahead(string item)"
        },
        "bindmonitorevents()": {
          "definition": "BindMonitorEvents(TrainingMonitorDTO monitorData)"
        },
        "verifyhaswithstudentsgraduating()": {
          "definition": "Verify_has_with_students_graduating(string dateString, string eventName, int numStudents)"
        },
        "verifythatinstructorssidebarishidden()": {
          "definition": "Verify_that_instructors_sidebar_is_hidden()"
        },
        "verifythatinstructorssidebarshowsnondedicatedstaff()": {
          "definition": "Verify_that_instructors_sidebar_shows_non_dedicated_staff()"
        },
        "verifythatinstructorssidebarisvisible()": {
          "definition": "Verify_that_instructors_sidebar_is_visible()"
        },
        "verifyisshownwithnoevents()": {
          "definition": "Verify_is_shown_with_no_events(string dateString)"
        },
        "clickdoneonfilterpopover()": {
          "definition": "Click_done_on_filter_popover()"
        },
        "verifyhaswithstudentsstarting()": {
          "definition": "Verify_has_with_students_starting(string dateString, string eventName, int numStudents)"
        },
        "oninstructorssidebarclickdedicatedstaff()": {
          "definition": "On_instructors_sidebar_click__dedicated_staff(string academyName)"
        },
        "navigatetosearchresults()": {
          "definition": "NavigateToSearchResults(PersonSearchTerms searchTerms)"
        },
        "clearprogramfilter()": {
          "definition": "Clear_program_filter()"
        },
        "verifyongoingclasseshaswithstudents()": {
          "definition": "Verify_ongoing_classes_has_with_students(string eventName, int numStudents)"
        },
        "verifythatinstructorssidebarhidesnondedicatedstaff()": {
          "definition": "Verify_that_instructors_sidebar_hides_non_dedicated_staff()"
        },
        "verifythatinstructorssidebardoesnotinclude()": {
          "definition": "Verify_that_instructors_sidebar_does_not_include__(string academyName)"
        },
        "verifyongoingclasseshaswithstudentsandstatus()": {
          "definition": "Verify_ongoing_classes_has__with__students_and_status_(string eventName, int numStudents, string status)"
        },
        "enterintotheprogramfiltertypeahead()": {
          "definition": "Enter__into_the_program_filter_type_ahead(string prefixText)"
        },
        "oninstructorssidebarclickawaystaff()": {
          "definition": "On_instructors_sidebar_click__away_staff(string academyName)"
        },
        "verifyisnotshown()": {
          "definition": "Verify_is_not_shown(string dateString)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "TrainingMonitorWorkflow"
    },
    "surveyresponses": {
      "namespace": "",
      "methods": {
        "verifyfilteris()": {
          "definition": "Verify__filter_is__(string filterItem, string value)"
        },
        "beginverifyingemailedsurveyingroup()": {
          "definition": "Begin_verifying__emailed_survey__in_group__(string ordinal, string surveyName, string cohortName)"
        },
        "verifysubmittedis()": {
          "definition": "Verify_submitted_is__(DateTime expected)"
        },
        "beginverifyingresponseforstudentinclassandtestedition()": {
          "definition": "Begin_verifying_response_for_student__in_class__and_test_edition__(string studentName, string className, string testEditionName)"
        },
        "browsetopageforsurveyinclass()": {
          "definition": "Browse_to_page_for_survey__in_class__(string surveyName, string className)"
        },
        "verifysurveynameis()": {
          "definition": "Verify_survey_name_is__( string surveyName )"
        },
        "jumptopageofresults()": {
          "definition": "Jump_to__page_of_results(string resultsPage)"
        },
        "considerresponserow()": {
          "definition": "Consider_response_row__(int index)"
        },
        "binditemfilters()": {
          "definition": "BindItemFilters(List<SurveyItemDTO> items)"
        },
        "verifycurrentpageis()": {
          "definition": "Verify_current_page_is(int pageNum)"
        },
        "changepagesizeto()": {
          "definition": "Change_page_size_to__(int pageSize)"
        },
        "sortby()": {
          "definition": "Sort_by___(string columnName, string ascOrDesc)"
        },
        "clickdoneonfilterpopover()": {
          "definition": "Click_done_on_filter_popover()"
        },
        "verifythereareresponses()": {
          "definition": "Verify_there_are__responses(int count)"
        },
        "beginverifyingresponseforstudentinclass()": {
          "definition": "Begin_verifying_response_for_student__in_class__(string studentName, string className)"
        },
        "bindsurveyresults()": {
          "definition": "BindSurveyResults(SurveyResponsesDTO dto)"
        },
        "verifytherearetotalresults()": {
          "definition": "Verify_there_are_total_results(int count)"
        },
        "setsurveyname()": {
          "definition": "SetSurveyName( string surveyName )"
        },
        "setfilterto()": {
          "definition": "Set__filter_to__(string filterItem, string value)"
        },
        "verifycurrentpagesizeis()": {
          "definition": "Verify_current_page_size_is(int count)"
        },
        "verifydisplayeditemsare()": {
          "definition": "Verify_displayed_items_are_(List<string> items)"
        },
        "verifysubmittedison()": {
          "definition": "Verify_submitted_is_on__(DateTime expected)"
        },
        "verifyrespondentgroupis()": {
          "definition": "Verify_respondent_group_is__(string respondentGoup)"
        },
        "verifyresponseforis()": {
          "definition": "Verify_response_for__is__(string itemText, string response)"
        },
        "verifythereareitemsdisplayed()": {
          "definition": "Verify_there_are__items_displayed(int count)"
        },
        "setitemfilterto()": {
          "definition": "Set_item_filter_to__(List<string> itemNames)"
        },
        "browsetopageforsurvey()": {
          "definition": "Browse_to_page_for_survey__(string surveyName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "SurveyResponsesWorkflow"
    },
    "organizationmanagement": {
      "namespace": "",
      "methods": {
        "definedivision()": {
          "definition": "DefineDivision()"
        },
        "settypeto()": {
          "definition": "Set_Type_To__(string type)"
        },
        "setnameto()": {
          "definition": "Set_Name_To__(string name)"
        },
        "verifydisciplinecomesbefore()": {
          "definition": "Verify_discipline_comes_before_(string div1, string div2)"
        },
        "setabbreviationto()": {
          "definition": "Set_Abbreviation__To(string abbr)"
        },
        "findorganizationnamed()": {
          "definition": "Find_organization_named__(string name)"
        },
        "isemploying()": {
          "definition": "is_employing(string name)"
        },
        "disciplineforis()": {
          "definition": "Discipline_for__is__(string organizationName, List<string> disciplines)"
        },
        "setstatusto()": {
          "definition": "Set_Status_To__(string status)"
        },
        "retrievealldivisions()": {
          "definition": "Retrieve_All_Divisions()"
        },
        "addsuborganizationto()": {
          "definition": "AddSuborganizationTo(string suborgName, string orgName)"
        },
        "createdivisionswithnameprefix()": {
          "definition": "Create__Divisions_with_Name_Prefix__( int numberOf, string prefix )"
        },
        "verifyorganizationcannotbedeleted()": {
          "definition": "Verify_organization__cannot_be_deleted(string orgName)"
        },
        "verifyisnotduplicatename()": {
          "definition": "VerifyIsNotDuplicateName()"
        },
        "externalsystemisid()": {
          "definition": "External_system_is_id( string system, string id)"
        },
        "setparentto()": {
          "definition": "Set_Parent_To__(string parentName)"
        },
        "descriptionforis()": {
          "definition": "Description_for__is(string organizationName, string description)"
        },
        "setdivisionabbreviationto()": {
          "definition": "Set_Division_Abbreviation_To__(string abbr)"
        },
        "savedivision()": {
          "definition": "Save_Division()"
        },
        "retrievedisciplinesfor()": {
          "definition": "Retrieve_Disciplines_for(string org)"
        },
        "createcommentfor()": {
          "definition": "Create_comment_for__(string organizationName, string comment)"
        },
        "currentdivisionnameequals()": {
          "definition": "CurrentDivisionNameEquals( string divName )"
        },
        "createorganizationnamedunderparentgroupoftype()": {
          "definition": "Create_organization_named__under_parent_group__of_type__(string childName, string parentName, string orgTypeName)"
        },
        "createchildorganizationof()": {
          "definition": "CreateChildOrganizationOf( string childName, string parentName )"
        },
        "verifyisduplicatedivisionabbreviation()": {
          "definition": "Verify_is_duplicate_division_abbreviation()"
        },
        "setdivisionnameto()": {
          "definition": "Set_Division_Name_To__(string name)"
        },
        "setdivisionstatusto()": {
          "definition": "Set_Division_Status_To__(string status)"
        },
        "createorganizationnamedoftypeunderbaseparentgroup()": {
          "definition": "Create_organization_named__of_type__under_base_parent_group(string childName, string orgTypeName)"
        },
        "employingis()": {
          "definition": "employing_is(string enabled)"
        },
        "setorganizationudfto()": {
          "definition": "set_organization_udf__to__(string udfName, string value)"
        },
        "createacademynamedunderbaseparentgroupwithbaselicense()": {
          "definition": "Create_Academy_named__under_base_parent_group_with_base_license(string academyName)"
        },
        "verifythatorganizationhasnoauthority()": {
          "definition": "Verify_that_organization_has_no_authority( string orgName )"
        },
        "verifydivisioncomesbefore()": {
          "definition": "Verify_division_comes_before_(string div1, string div2)"
        },
        "verifyorganizationcanbedeleted()": {
          "definition": "Verify_organization__can_be_deleted(string orgName)"
        },
        "organizationreferenceforis()": {
          "definition": "Organization_Reference_For__Is_(string organizationName, string reference)"
        },
        "saveorganization()": {
          "definition": "Save_Organization()"
        },
        "renamebaseparentorganizationto()": {
          "definition": "Rename_Base_Parent_Organization_to__(string parentName)"
        },
        "verifythatorganizationhasauthority()": {
          "definition": "Verify_that_organization_has_authority( string orgName, string personName )"
        },
        "createdivisionforwithnameaswithabbreviation()": {
          "definition": "Create_division_for__with_name__as__with_abbreviation_( string organizationName, string divisionName, string status, string abbreviation )"
        },
        "setshowinportalto()": {
          "definition": "Set_show_in_portal_to__(bool show)"
        },
        "verifyisduplicatename()": {
          "definition": "VerifyIsDuplicateName()"
        },
        "addauthoritytousing()": {
          "definition": "AddAuthorityToUsing(string orgName, string personName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "OrganizationManagement"
    },
    "addeditreservation": {
      "namespace": "",
      "methods": {
        "verifyclassoptionsinclude()": {
          "definition": "Verify_class_options_include__(string className)"
        },
        "chooseforgender()": {
          "definition": "Choose__for_Gender(string genderDesc)"
        },
        "choosesameasclassstartdateforexpectedcheckin()": {
          "definition": "Choose_Same_as_Class_Start_Date_for_Expected_Check_In()"
        },
        "selectforguesthousing()": {
          "definition": "Select__for_Guest_Housing(string option)"
        },
        "browsetoeditreservationofnonclassevent()": {
          "definition": "Browse_to_edit_reservation_of_non_class_event__(string eventName)"
        },
        "verifydefaulthousingtypeis()": {
          "definition": "Verify_Default_Housing_Type_is__(string usageTypeName)"
        },
        "verifythattherearegroupsofstudentsprojected()": {
          "definition": "Verify_that_there_are__groups_of_students_projected(int numProjections)"
        },
        "showoffcenteralert()": {
          "definition": "ShowOffCenterAlert()"
        },
        "verifyusernavigatedtoreservationrecord()": {
          "definition": "Verify_user_navigated_to_reservation_record()"
        },
        "verifyroomtypeis()": {
          "definition": "Verify_Room_Type_is__(string roomTypeName)"
        },
        "verifyclassdetailsvisible()": {
          "definition": "Verify_class_details__visible(string areAreNotStr)"
        },
        "selectfordefaultpricelevel()": {
          "definition": "Select__for_Default_Price_Level(string priceLevelDescription)"
        },
        "verifyexpectedcheckoutissameasclassenddate()": {
          "definition": "Verify_Expected_Check_Out_is_Same_as_Class_End_Date()"
        },
        "dispose()": {
          "definition": "Dispose()"
        },
        "browsetopageforclasstemplate()": {
          "definition": "Browse_to_page_for_class_template__(string classTemplateName)"
        },
        "selectallowedhousingtypes()": {
          "definition": "SelectAllowedHousingTypes(IEnumerable<int> usageTypeIDs)"
        },
        "verifyeventis()": {
          "definition": "Verify_Event_is__(string eventName)"
        },
        "verifyeventenddateis()": {
          "definition": "Verify_Event_End_Date_is__(DateTime eventEndDate)"
        },
        "selectfordefaulthousingtype()": {
          "definition": "Select__for_Default_Housing_Type(string usageTypeName)"
        },
        "settextforexistingeventreservation()": {
          "definition": "SetTextForExistingEventReservation()"
        },
        "settextforeditclasshousingsettings()": {
          "definition": "SetTextForEditClassHousingSettings(string className)"
        },
        "verifyexpectedcheckoutisdaysclassenddate()": {
          "definition": "Verify_Expected_Check_Out_is__Days__Class_End_Date(int numDays, DateOffsetDirection direction)"
        },
        "verifyusernavigatedtoclasstemplaterecord()": {
          "definition": "Verify_user_navigated_to_class_template_record()"
        },
        "chooseforroomtype()": {
          "definition": "Choose__for_Room_Type(string roomTypeName)"
        },
        "verifyusernavigatedtoclassrecord()": {
          "definition": "Verify_user_navigated_to_class_record()"
        },
        "verifyhousingtypesare()": {
          "definition": "Verify_Housing_Types_are(List<string> usageTypeNames)"
        },
        "choosesameasclassenddateforexpectedcheckout()": {
          "definition": "Choose_Same_as_Class_End_Date_for_Expected_Check_Out()"
        },
        "verifyguesthousingis()": {
          "definition": "Verify_Guest_Housing_is__(string option)"
        },
        "verifyuserchangereservationtype()": {
          "definition": "Verify_user__change_reservation_type(string canCannotStr)"
        },
        "verifyspecialaccommodationsis()": {
          "definition": "Verify_Special_Accommodations_is__(string specialAccommodationsDesc)"
        },
        "verifyavailableoptionsforguesthousingare()": {
          "definition": "Verify_available_options_for_Guest_Housing_are__(List<string> options)"
        },
        "clickcancel()": {
          "definition": "Click_Cancel()"
        },
        "bindreservationrequirements()": {
          "definition": "BindReservationRequirements(IList<ReservationRequirementDTO> studentReqs, IList<ReservationRequirementDTO> nonStudentReqs)"
        },
        "innonstudentprojection()": {
          "definition": "In_non_student_projection__(int index)"
        },
        "verifydefaulthousingtypeisnohousingrequested()": {
          "definition": "Verify_Default_Housing_Type_is_No_Housing_Requested()"
        },
        "removenonstudentprojection()": {
          "definition": "Remove_non_student_projection__(int index)"
        },
        "verifyclassis()": {
          "definition": "Verify_Class_is__(string className)"
        },
        "verifysponsorisexistingorganization()": {
          "definition": "Verify_Sponsor_is_existing_organization__(string orgName)"
        },
        "removestudentprojection()": {
          "definition": "Remove_student_projection__(int index)"
        },
        "bindofferedhousingoptions()": {
          "definition": "BindOfferedHousingOptions(IList<HousingOptionUsage> options)"
        },
        "verifyreservationnumberautogenerated()": {
          "definition": "Verify_Reservation_Number__auto_generated(string isIsNotStr)"
        },
        "addanewstudentprojection()": {
          "definition": "Add_a_new_student_projection()"
        },
        "chooseforspecialaccommodations()": {
          "definition": "Choose__for_Special_Accommodations(string specialAccommodationsDesc)"
        },
        "clickaddareservationforaclass()": {
          "definition": "Click_Add_a_reservation_for_a_class()"
        },
        "verifyexpectedcheckinisdaysclassstartdate()": {
          "definition": "Verify_Expected_Check_In_is__Days__Class_Start_Date(int numDays, DateOffsetDirection direction)"
        },
        "selectexistingorganizationforsponsor()": {
          "definition": "Select_existing_organization__for_Sponsor(string orgName)"
        },
        "settextfornewreservation()": {
          "definition": "SetTextForNewReservation()"
        },
        "addanewnonstudentprojection()": {
          "definition": "Add_a_new_non_student_projection()"
        },
        "verifynonclasseventdetailsvisible()": {
          "definition": "Verify_non_class_event_details__visible(string areAreNotStr)"
        },
        "verifyresidentsis()": {
          "definition": "Verify_Residents_is__(int numResidents)"
        },
        "entertextforresidents()": {
          "definition": "Enter_text__for_Residents(int numResidents)"
        },
        "browsetoeditreservationofclass()": {
          "definition": "Browse_to_edit_reservation_of_class__(string className)"
        },
        "verifygenderis()": {
          "definition": "Verify_Gender_is__(string genderDesc)"
        },
        "verifyclassdatesare()": {
          "definition": "Verify_class_dates_are__(string expectedClassDates)"
        },
        "enterforevent()": {
          "definition": "Enter__for_Event(string eventName)"
        },
        "verifyeventstartdateis()": {
          "definition": "Verify_Event_Start_Date_is__(DateTime eventStartDate)"
        },
        "navigatetoreservation()": {
          "definition": "NavigateToReservation(int reservationID)"
        },
        "togglereservationtypelinks()": {
          "definition": "ToggleReservationTypeLinks(bool enableLinks)"
        },
        "verifyclassreadonly()": {
          "definition": "Verify_Class__read_only(string isIsNotStr)"
        },
        "verifyclassoptionsdonotinclude()": {
          "definition": "Verify_class_options_do_not_include__(string className)"
        },
        "verifythattherearegroupsofnonstudentsprojected()": {
          "definition": "Verify_that_there_are__groups_of_non_students_projected(int numProjections)"
        },
        "settextforexistingclassreservation()": {
          "definition": "SetTextForExistingClassReservation(string className)"
        },
        "choosedaysclassenddateforexpectedcheckout()": {
          "definition": "Choose__Days__Class_End_Date_for_Expected_Check_Out(int numDays, DateOffsetDirection direction)"
        },
        "selectnohousingrequestedfordefaulthousingtype()": {
          "definition": "Select_No_Housing_Requested_for_Default_Housing_Type()"
        },
        "shownotenoughbedsalert()": {
          "definition": "ShowNotEnoughBedsAlert()"
        },
        "enterforeventstartdate()": {
          "definition": "Enter__for_Event_Start_Date(DateTime eventStartDate)"
        },
        "verifysponsorisunknownorganizationnamed()": {
          "definition": "Verify_Sponsor_is_unknown_organization_named__(string orgName)"
        },
        "choosedaysclassstartdateforexpectedcheckin()": {
          "definition": "Choose__Days__Class_Start_Date_for_Expected_Check_In(int numDays, DateOffsetDirection direction)"
        },
        "instudentprojection()": {
          "definition": "In_student_projection__(int index)"
        },
        "verifyavailableusagetypesforhousingtypesare()": {
          "definition": "Verify_available_usage_types_for_Housing_Types_are__(List<string> usageTypeNames)"
        },
        "navigatetoclassdefinition()": {
          "definition": "NavigateToClassDefinition()"
        },
        "verifybillinginformationcollected()": {
          "definition": "Verify_billing_information__collected(string isIsNotStr)"
        },
        "selectforclass()": {
          "definition": "Select__for_Class(string className)"
        },
        "browsetopageforclass()": {
          "definition": "Browse_to_page_for_class__(string className)"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "selectforhousingtypes()": {
          "definition": "Select__for_Housing_Types(List<string> usageTypeNames)"
        },
        "verifyexpectedcheckinissameasclassstartdate()": {
          "definition": "Verify_Expected_Check_In_is_Same_as_Class_Start_Date()"
        },
        "clickaddareservationforanonclassevent()": {
          "definition": "Click_Add_a_reservation_for_a_non_class_event()"
        },
        "navigatetohousingsplashboard()": {
          "definition": "NavigateToHousingSplashboard()"
        },
        "verifyclassdatesareblank()": {
          "definition": "Verify_class_dates_are_blank()"
        },
        "selectdefaultusage()": {
          "definition": "SelectDefaultUsage(HousingDefaultUsageMode mode, int? usageTypeID)"
        },
        "verifydefaultpricelevelis()": {
          "definition": "Verify_Default_Price_Level_is__(string priceLevelDescription)"
        },
        "verifyresidentsisblank()": {
          "definition": "Verify_Residents_is_blank()"
        },
        "enterforeventenddate()": {
          "definition": "Enter__for_Event_End_Date(DateTime eventEndDate)"
        },
        "entertextforsponsorname()": {
          "definition": "Enter_text__for_Sponsor_name(string orgName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AddEditReservationWorkflow"
    },
    "eventrequestresources": {
      "namespace": "",
      "methods": {
        "verifyequipmentlistcontains()": {
          "definition": "Verify_equipment_list_contains__(string name)"
        },
        "clickedit()": {
          "definition": "Click_edit()"
        },
        "selectfacilityrequestnamed()": {
          "definition": "Select_facility_request_named__(string name)"
        },
        "verifyfacilitylistdoesnotcontain()": {
          "definition": "Verify_facility_list_does_not_contain__(string name)"
        },
        "verifynonstudentcountoutofrangealertisvisible()": {
          "definition": "Verify_Non_Student_count_out_of_range_alert_is_visible()"
        },
        "dispose()": {
          "definition": "Dispose()"
        },
        "verifynumberofguestsonlineis()": {
          "definition": "Verify_Number_of_Guests_on__line__is__(string housingType, int lineNum, int numGuests)"
        },
        "verifyinventoryperiodofuseselectedis()": {
          "definition": "Verify_inventory_period_of_use_selected_is__(string name)"
        },
        "clickaddequipment()": {
          "definition": "Click_add_equipment()"
        },
        "verifyinventoryeditpopovershown()": {
          "definition": "Verify_inventory_edit_popover__shown(string isIsNot)"
        },
        "verifystudentcountoutofrangealertisvisible()": {
          "definition": "Verify_Student_count_out_of_range_alert_is_visible()"
        },
        "enterforcheckoutoffset()": {
          "definition": "Enter__for_Check_Out_Offset(int checkOutOffset)"
        },
        "enterforcheckinoffset()": {
          "definition": "Enter__for_Check_In_Offset(int checkInOffset)"
        },
        "verifyinventoryresourceisnamed()": {
          "definition": "Verify_inventory_resource_is__named__(ResourceType inventoryType, string name)"
        },
        "verifygenderonlineis()": {
          "definition": "Verify_Gender_on__line__is__(string housingType, int lineNum, string gender)"
        },
        "enterininventoryresourcetypeahead()": {
          "definition": "Enter__in_inventory_resource_typeahead(string text)"
        },
        "verifynofacilityrequestlabelshown()": {
          "definition": "Verify_no_facility_request_label__shown(string isIsNot)"
        },
        "verifyhousingeditpopoverisvisible()": {
          "definition": "Verify_housing_edit_popover_is_visible()"
        },
        "selectgenderforline()": {
          "definition": "Select_Gender_for__line__(string gender, string housingType, int lineNum)"
        },
        "verifyinventoryperiodofuseresultsinclude()": {
          "definition": "Verify_inventory_period_of_use_results_include__(string name)"
        },
        "selectforspecialaccommodationsonline()": {
          "definition": "Select__for_Special_Accommodations_on__line__(string specialAccommodations, string housingType, int lineNum)"
        },
        "clickdeletenonstudentrow()": {
          "definition": "Click_Delete_Non_Student_Row__(int lineNum)"
        },
        "verifyinventoryresourcetypeaheadresultsdonotincludenamed()": {
          "definition": "Verify_inventory_resource_typeahead_results_do_not_include__named__(ResourceType inventoryType, string name)"
        },
        "selectequipmentrequestnamed()": {
          "definition": "Select_equipment_request_named__(string name)"
        },
        "clickdelete()": {
          "definition": "Click_delete()"
        },
        "verifymissinghousingdetailsalertisvisible()": {
          "definition": "Verify_Missing_Housing_Details_alert_is_visible()"
        },
        "clicksave()": {
          "definition": "Click_save()"
        },
        "verifyspecialaccommodationsonlineis()": {
          "definition": "Verify_Special_Accommodations_on__line__is__(string housingType, int lineNum, string specialAccommodations)"
        },
        "enterfornumberofperiodsofuse()": {
          "definition": "Enter__for_number_of_periods_of_use(int numUse)"
        },
        "verifyequipmentlistdoesnotcontain()": {
          "definition": "Verify_equipment_list_does_not_contain__(string name)"
        },
        "verifyinventoryavailable()": {
          "definition": "Verify_inventory__available(string isIsNot)"
        },
        "verifyinventoryresourcetypeaheadresultsincludenamed()": {
          "definition": "Verify_inventory_resource_typeahead_results_include__named__(ResourceType inventoryType, string name)"
        },
        "cancelhousingalert()": {
          "definition": "Cancel_housing_alert()"
        },
        "verifynoequipmentrequestlabelshown()": {
          "definition": "Verify_no_equipment_request_label__shown(string isIsNot)"
        },
        "verifyfacilitylistcontains()": {
          "definition": "Verify_facility_list_contains__(string name)"
        },
        "enterfornumberofguestsonline()": {
          "definition": "Enter__for_Number_of_Guests_on__line__(int numGuests, string housingType, int lineNum)"
        },
        "browsetoresourcepageforeventrequest()": {
          "definition": "Browse_to_resource_page_for_event_request(string eventRequestName)"
        },
        "selectininventoryperiodsofuse()": {
          "definition": "Select__in_inventory_periods_of_use(string name)"
        },
        "verifyroomtypeonlineis()": {
          "definition": "Verify_Room_Type_on__line__is__(string housingType, int lineNum, string usageTypeName)"
        },
        "clickaddfacility()": {
          "definition": "Click_add_facility()"
        },
        "clickdeletestudentrow()": {
          "definition": "Click_Delete_Student_Row__(int lineNum)"
        },
        "selectforroomtypeonline()": {
          "definition": "Select__for_Room_Type_on__line__(string usageTypeName, string housingType, int lineNum)"
        },
        "selectnamedasinventoryresource()": {
          "definition": "Select__named__as_inventory_resource(ResourceType inventoryType, string name)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EventRequestResourcesWorkflow"
    },
    "automatedemaillessonplanrequeststatuschange": {
      "namespace": "",
      "methods": {
        "verifythatthesubjectoftheemailsenttocontains()": {
          "definition": "Verify_that_the_subject_of_the_email_sent_to__contains__(string emailAddress, string subjectText)"
        },
        "clearsentmail()": {
          "definition": "Clear_sent_mail()"
        },
        "verifyemailmessagesweresent()": {
          "definition": "Verify__email_messages_were_sent(int num)"
        },
        "verifythattheemailsenttocontains()": {
          "definition": "Verify_that_the_email_sent_to__contains__(string emailAddress, string bodyText)"
        },
        "verifythatanemailmessagewassentto()": {
          "definition": "Verify_that_an_email_message_was_sent_to__(string emailAddress)"
        },
        "verifythattheemailsenttodoesnotcontain()": {
          "definition": "Verify_that_the_email_sent_to__does_not_contain__(string emailAddress, string bodyText)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "AutomatedEmailLessonPlanRequestStatusChange"
    },
    "trainingeventapproval": {
      "namespace": "",
      "methods": {
        "verifyeventnameis()": {
          "definition": "Verify_event_name_is__(string eventName)"
        },
        "verifytherearependingeventsforacademy()": {
          "definition": "Verify_there_are__pending_events_for_academy__(int pendingEventCount, string academyName)"
        },
        "approvedeferredenrollmentroster()": {
          "definition": "Approve_deferred_enrollment_roster()"
        },
        "verifytrainingcategoryis()": {
          "definition": "Verify_training_category_is__(string trainingCategory)"
        },
        "considerrowindeferredenrollmentreportinglist()": {
          "definition": "Consider_row__in_deferred_enrollment_reporting_list(int rowNum)"
        },
        "verifythereareeventsindeferredenrollmentreportinglist()": {
          "definition": "Verify_there_are__events_in_deferred_enrollment_reporting_list(int itemCount)"
        },
        "considerrowintrainingeventslistforacademy()": {
          "definition": "Consider_row__in_training_events_list_for_academy__(int rowNum, string academyName)"
        },
        "clickapproveselectedtrainingeventsforacademy()": {
          "definition": "Click_approve_selected_training_events_for_academy__(string academyName)"
        },
        "approverowintrainingeventslistforacademy()": {
          "definition": "Approve_row__in_training_events_list_for_academy__(int rowNum, string academyName)"
        },
        "databindpendingpersonattendeesperacademy()": {
          "definition": "DataBindPendingPersonAttendeesPerAcademy(IList<PendingPersonAttendeesPerAcademyDTO> attendees)"
        },
        "boxforrowintrainingeventslistforacademy()": {
          "definition": "__box_for_row__in_training_events_list_for_academy__(string checkUncheckString, int rowNum, string academyName)"
        },
        "databindsubmittedeventsperacademy()": {
          "definition": "DataBindSubmittedEventsPerAcademy(IList<SubmittedTrainingEventsPerAcademyDTO> eventsPerAcademy)"
        },
        "verifytherearesubmittedeventbandsshowing()": {
          "definition": "Verify_there_are__submitted_event_bands_showing(int acadmyCount)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "TrainingEventApprovalWorkflow"
    },
    "trainingeventattendeeaddedit": {
      "namespace": "",
      "methods": {
        "verifytrainingcategoryisnotselectable()": {
          "definition": "Verify_training_category__is_not_selectable(string trainingCategory)"
        },
        "bindtrainingcategories()": {
          "definition": "BindTrainingCategories(IEnumerable<TrainingCategoryDTO> trainingCategories)"
        },
        "verifyisinthetypeaheadresults()": {
          "definition": "Verify__is_in_the_type_ahead_results(string personNameAndAcademyId)"
        },
        "clickremoveattendee()": {
          "definition": "Click_Remove_Attendee()"
        },
        "verifythereispersoninthetypeaheadresults()": {
          "definition": "Verify_there_is__person_in_the_type_ahead_results(int expectedNumberOfResults)"
        },
        "verifytrainingcategoryisselectable()": {
          "definition": "Verify_training_category__is_selectable(string trainingCategory)"
        },
        "verifyattendeeberemoved()": {
          "definition": "Verify_attendee__be_removed(string canCanotString)"
        },
        "selectfromthetypeaheadresults()": {
          "definition": "Select__from_the_type_ahead_results(string personNameAndAcademyId)"
        },
        "verifytherearetrainingcategoriesinthelist()": {
          "definition": "Verify_there_are__training_categories_in_the_list(int numberOfTrainingCategories)"
        },
        "verifyattendeenameeditable()": {
          "definition": "Verify_attendee_name__editable(string isIsNotString)"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "enterintotheattendeetypeahead()": {
          "definition": "Enter__into_the_attendee_type_ahead(string searchString)"
        },
        "verifytherearepeopleinthetypeaheadresults()": {
          "definition": "Verify_there_are__people_in_the_type_ahead_results(int expectedNumberOfResults)"
        },
        "selecttrainingcategoryfromthedropdown()": {
          "definition": "Select_training_category__from_the_dropdown(string trainingCategory)"
        },
        "waitforpopuptopopup()": {
          "definition": "Wait_for_popup_to_pop_up()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "TrainingEventAttendeeAddEditWorkflow"
    },
    "fieldattribute": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "FieldAttribute"
    },
    "publicorganizationlist": {
      "namespace": "",
      "methods": {
        "verifynameis()": {
          "definition": "Verify_name_is__(string name)"
        },
        "bindorganizations()": {
          "definition": "BindOrganizations(List<PublicOrganizationDTO> orgs)"
        },
        "verifyprimaryaddressis()": {
          "definition": "Verify_primary_address_is__(string addr)"
        },
        "verifyprimarycontactis()": {
          "definition": "Verify_primary_contact_is__(string contact)"
        },
        "verifymailingaddressis()": {
          "definition": "Verify_mailing_address_is__(string addr)"
        },
        "fororganizationonrow()": {
          "definition": "For_organization_on_row__(int count)"
        },
        "verifythereareorganizations()": {
          "definition": "Verify_there_are__organizations(int count)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PublicOrganizationListWorkflow"
    },
    "emailprofessionalhistory": {
      "namespace": "",
      "methods": {
        "showreportdata()": {
          "definition": "ShowReportData(ReportSpawnDTO reportData)"
        },
        "finishedsendingemail()": {
          "definition": "FinishedSendingEmail()"
        },
        "verifyreportisvisible()": {
          "definition": "Verify_report_is_visible()"
        },
        "showinvalidemailaddressvalidation()": {
          "definition": "ShowInvalidEmailAddressValidation(IEnumerable<string> invalidEmails)"
        },
        "clickemailprofessionalhistory()": {
          "definition": "Click_email_professional_history()"
        },
        "bindemailsettings()": {
          "definition": "BindEmailSettings(ProfessionalHistoryReportEmailSettingsDTO dto)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EmailProfessionalHistoryWorkflow"
    },
    "classcertlist": {
      "namespace": "",
      "methods": {
        "openprintwindow()": {
          "definition": "OpenPrintWindow(ICertificateReport report, string reportKey)"
        },
        "storeprintconfirmationinfo()": {
          "definition": "StorePrintConfirmationInfo(IEnumerable<int> printedCertIDs, string reportKey)"
        },
        "bindcertdata()": {
          "definition": "BindCertData(IEnumerable<ClassCertDTO> certData)"
        },
        "bindprintablecertdata()": {
          "definition": "BindPrintableCertData(IEnumerable<ClassCertDTO> certData)"
        },
        "clickprint()": {
          "definition": "Click_Print()"
        },
        "verifytraininghoursare()": {
          "definition": "Verify_training_hours_are__(string hrs)"
        },
        "verifyprintwindowsopened()": {
          "definition": "Verify__print_windows_opened(int count)"
        },
        "setforcehtml()": {
          "definition": "SetForceHtml(bool forceHtml)"
        },
        "browsetoforclass()": {
          "definition": "Browse_to_for_class__(string className)"
        },
        "usingcertficatereportfor()": {
          "definition": "Using__certficate_report_for__(string certName, string recipientName)"
        },
        "verifymailingaddressis()": {
          "definition": "Verify_mailing_address_is__(string mailingAddr)"
        },
        "selectforprintingwithaddressof()": {
          "definition": "Select__for_printing_with_address_of(string cert, CertificateAddressType addressType)"
        },
        "verifygradeis()": {
          "definition": "Verify_grade_is__(string grade)"
        },
        "verifyprintwindowopenedwithissuedcertstoprint()": {
          "definition": "Verify_print_window_opened_with__issued_certs_to_print(int certCount)"
        },
        "verifyceucreditsare()": {
          "definition": "Verify_ceu_credits_are__(decimal credits)"
        },
        "verifyissuedateis()": {
          "definition": "Verify_issue_date_is__(DateTime issueDt)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ClassCertListWorkflow"
    },
    "addeditclassregistration": {
      "namespace": "",
      "methods": {
        "setregistrationtoendclassstart()": {
          "definition": "Set_registration_to_end__class_start(string beforeOrAfter)"
        },
        "createclassregistrationfortostartdaysbeforeandenddaysafterwithstudentsmax()": {
          "definition": "Create_class_registration_for__to_start__days_before_and_end__days_after_with__students_max(string className, int daysBefore, int daysAfter, int numStudents)"
        },
        "browsetoeditclassregistrationforclass()": {
          "definition": "Browse_to_edit_class_registration_for_class(string className)"
        },
        "selectautomaticallyenrollstudentsthatrequestenrollment()": {
          "definition": "Select_Automatically_enroll_students_that_request_enrollment()"
        },
        "setregisteringorganizationsto()": {
          "definition": "Set_registering_organizations_to__(List<string> orgNames)"
        },
        "browsetoaddclassregistrationfor()": {
          "definition": "Browse_to_add_class_registration_for__(string className)"
        },
        "browsetoaddclassregistrationforclasstemplate()": {
          "definition": "Browse_to_add_class_registration_for_class_template__(string templateName)"
        },
        "selectallowtrainingcoordinatorandselfregistration()": {
          "definition": "Select_Allow_Training_Coordinator_and_Self_Registration()"
        },
        "browsetoaddclassregistrationforclass()": {
          "definition": "Browse_to_add_class_registration_for_class__(string className)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AddEditClassRegistrationWorkflow"
    },
    "goalinformation": {
      "namespace": "",
      "methods": {
        "verifycriteriais()": {
          "definition": "Verify_criteria_is__(string criteria)"
        },
        "verifycapabilitiesinclude()": {
          "definition": "Verify_capabilities_include__(string name)"
        },
        "verifytherearecapabilities()": {
          "definition": "Verify_there_are__capabilities(int num)"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for(string goal)"
        },
        "verifydescriptionis()": {
          "definition": "Verify_description_is__(string description)"
        },
        "bindcapabilities()": {
          "definition": "BindCapabilities(IEnumerable<CapabilityListItemDTO> dtos)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "GoalInformationWorkflow"
    },
    "accountablepropertylist": {
      "namespace": "",
      "methods": {
        "verifylistcontainsanitemwithnonamenomodelandserialnumber()": {
          "definition": "Verify_list_contains_an__item_with_no_name_no_model_and_serial_number__(string status, string serialNumber)"
        },
        "verifyaccountablepropertynamedisassignedto()": {
          "definition": "Verify_accountable_property_named__is_assigned_to( string itemName, string assigneeName )"
        },
        "bindlist()": {
          "definition": "BindList(IEnumerable<AccountablePropertyListItemDto> items)"
        },
        "verifyinisunchecked()": {
          "definition": "Verify__in__is_unchecked( string itemName, string groupName )"
        },
        "checkin()": {
          "definition": "Check__in_( string itemName, string groupName )"
        },
        "showfilters()": {
          "definition": "Show_Filters()"
        },
        "verifyinischecked()": {
          "definition": "Verify__in__is_checked( string itemName, string groupName )"
        },
        "uncheckin()": {
          "definition": "Uncheck__in_( string itemName, string groupName )"
        },
        "verifylistcontainsitems()": {
          "definition": "Verify_list_contains__items(int count)"
        },
        "verifylistcontainsanitemnamedwithnomodelandnoserialnumber()": {
          "definition": "Verify_list_contains_an__item_named__with_no_model_and_no_serial_number(string status, string propertyName)"
        },
        "savefilters()": {
          "definition": "Save_filters()"
        },
        "browsetoaccountablepropertylistfororganization()": {
          "definition": "Browse_to_AccountableProperty_List_for_Organization__(string organizationName)"
        },
        "verifyaccountablepropertynamedislistedasstolen()": {
          "definition": "Verify_accountable_property_named__is_listed_as_stolen( string itemName )"
        },
        "setpermissions()": {
          "definition": "SetPermissions(bool canView, bool canEdit, bool canAdd, bool canViewAssignee)"
        },
        "verifylistcontainsanitemoftypemakeandmodelwithserialnumber()": {
          "definition": "Verify_list_contains_an__item_of_type__make__and_model__with_serial_number__(string status, string type, string make, string model, string serial)"
        },
        "verifyaccountablepropertynamedislistedaslost()": {
          "definition": "Verify_accountable_property_named__is_listed_as_lost( string itemName )"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AccountablePropertyList"
    },
    "testopiapostedfile": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "TestopiaPostedFile"
    },
    "purgepersoncomments": {
      "namespace": "",
      "methods": {
        "showconfimationdialog()": {
          "definition": "ShowConfimationDialog()"
        },
        "verifyconfirmationdialogclosed()": {
          "definition": "Verify_confirmation_dialog_closed()"
        },
        "redirecttodashboard()": {
          "definition": "RedirectToDashboard()"
        },
        "verifyconfirmationdialogshown()": {
          "definition": "Verify_confirmation_dialog_shown()"
        },
        "selectpersonwithacademyidof()": {
          "definition": "Select_person_with_academy_id_of_( string academyID )"
        },
        "clickcancel()": {
          "definition": "Click_cancel()"
        },
        "clickcancelonconfirmationdialog()": {
          "definition": "Click_cancel_on_confirmation_dialog()"
        },
        "verifyuserredirectedtoadmindashboard()": {
          "definition": "Verify_user_redirected_to_admin_dashboard()"
        },
        "enterinauthorizedbyfield()": {
          "definition": "Enter__in_authorized_by_field( string authorizedBy )"
        },
        "clickpurgeonconfirmationdialog()": {
          "definition": "Click_purge_on_confirmation_dialog()"
        },
        "enterpurgecommentof()": {
          "definition": "Enter_purge_comment_of_( string purgeComment )"
        },
        "clickpurge()": {
          "definition": "Click_purge()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PurgePersonCommentsWorkflow"
    },
    "inquiryresponserosterselectionlist": {
      "namespace": "",
      "methods": {
        "verifyemployeeisorisnotselected()": {
          "definition": "Verify_employee__is_or_is_not_selected(string employeeName, bool isSelected)"
        },
        "verifyemployeewithacademyidhascertifications()": {
          "definition": "Verify_employee__with_Academy_ID__has_certifications__(string employeeName, string academyID, string certNames)"
        },
        "selectemployeeforfulfillment()": {
          "definition": "Select_employee__for_fulfillment(string employeeName)"
        },
        "bindrepeater()": {
          "definition": "BindRepeater(IEnumerable<SelectableInquiriyRosterDto> existingDTOs)"
        },
        "verifytherearerosterrecords()": {
          "definition": "Verify_there_are__roster_records(int numRecs)"
        },
        "updatepagercontrol()": {
          "definition": "UpdatePagerControl()"
        },
        "initializecontrol()": {
          "definition": "InitializeControl()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "InquiryResponseRosterSelectionListWorkflow"
    },
    "usermanagementfnh": {
      "namespace": "",
      "methods": {
        "verifypersondoesnothaveauseraccount()": {
          "definition": "Verify_person__does_not_have_a_user_account(string personName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "UserManagementFNH"
    },
    "loquestiondetails": {
      "namespace": "",
      "methods": {
        "verifythatitemhasdisplaynameandnoabbreviation()": {
          "definition": "Verify_that_item__has_display_name__and_no_abbreviation(int index, string itemDisplayName)"
        },
        "verifythatthereareitems()": {
          "definition": "Verify_that_there_are__items(int numItems)"
        },
        "browsetopageforcurriculumandeloandtest()": {
          "definition": "Browse_to_page_for_curriculum__and_ELO__and_test__(string curriculumName, string eloName, string testName)"
        },
        "verifythatitemhasdisplaynameandabbreviation()": {
          "definition": "Verify_that_item__has_display_name__and_abbreviation__(int index, string itemDisplayName, string itemAbbreviation)"
        },
        "verifythatpagetitleis()": {
          "definition": "Verify_that_page_title_is__(string testName)"
        },
        "settestname()": {
          "definition": "SetTestName(string testName)"
        },
        "bindtestitems()": {
          "definition": "BindTestItems(IEnumerable<TestItemDetailDTO> itemDTOs)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "LOQuestionDetailsWorkflow"
    },
    "inquiryitemresponse": {
      "namespace": "",
      "methods": {
        "showvalidationerrormessage()": {
          "definition": "ShowValidationErrorMessage(string errorMessage)"
        },
        "verifytrainingclasshastrainingcategoryof()": {
          "definition": "Verify_training_class__has_training_category_of__(string className, string categoryName)"
        },
        "setdateofbirthto()": {
          "definition": "Set_date_of_birth_to__(DateTime dob)"
        },
        "checkthecheckbox()": {
          "definition": "Check_the_checkbox()"
        },
        "verifytrainingisselected()": {
          "definition": "Verify_training__is_selected(string trainingName)"
        },
        "saveitemasunfulfilled()": {
          "definition": "Save_item_as_unfulfilled()"
        },
        "verifydocumentsareattachedtothecertificationrequirement()": {
          "definition": "Verify_documents_are_attached_to_the_certification_requirement(int numAttached)"
        },
        "verifycanuploadnewdocument()": {
          "definition": "Verify_can_upload_new_document()"
        },
        "verifyemploymentisdisplayed()": {
          "definition": "Verify_employment_is_displayed()"
        },
        "verifyemploymentisnotselected()": {
          "definition": "Verify_employment__is_not_selected(string employmentOrgName)"
        },
        "verifytrainingclasshasgradeof()": {
          "definition": "Verify_training_class__has_grade_of__(string className, string gradeStr)"
        },
        "verifydateofbirthcanbeedited()": {
          "definition": "Verify_date_of_birth_can_be_edited()"
        },
        "verifyemploymentisselected()": {
          "definition": "Verify_employment__is_selected(string employmentOrgName)"
        },
        "clickcontinueonalerttosave()": {
          "definition": "Click_Continue_on_alert_to_save()"
        },
        "verifytrainingrecordsareloadedandtherearerecords()": {
          "definition": "Verify_training_records_are_loaded_and_there_are__records(int numRecs)"
        },
        "verifyemploymenthashiredateof()": {
          "definition": "Verify_employment__has_hire_date_of__(string employmentOrgName, string hireDate)"
        },
        "verifytrainingcannotbeselected()": {
          "definition": "Verify_training__cannot_be_selected(string className)"
        },
        "verifythereareoptionsdisplayed()": {
          "definition": "Verify_there_are__options_displayed(int numOptions)"
        },
        "verifyemploymentisnotindicatedasdeleted()": {
          "definition": "Verify_employment__is_not_indicated_as_deleted(string employmentOrgName)"
        },
        "verifytrainingclasshashoursofhm()": {
          "definition": "Verify_training_class__has_hours_of__h__m(string className, int hours, int mins)"
        },
        "verifydateofbirthcannotbeedited()": {
          "definition": "Verify_date_of_birth_cannot_be_edited()"
        },
        "verifycertificationalerticonhastextof()": {
          "definition": "Verify_certification__alert_icon_has_text_of__(string certName, string alertText)"
        },
        "uploadandselectnewfilewithdescriptionandclickdone()": {
          "definition": "Upload_and_select_new_file__with_description__and_click_Done(string fileName, string descr)"
        },
        "clicktoattachdocument()": {
          "definition": "Click_to_attach_document()"
        },
        "verifyvehiclewithvinmakemodelyearhascertifications()": {
          "definition": "Verify_vehicle_with_VIN__make__model__year__has_certifications__(string vehicleName, string vin, string make, string model, string year, string certNames)"
        },
        "verifymultipleresponsesallowed()": {
          "definition": "Verify_multiple_responses_allowed()"
        },
        "verifyvehicleisorisnotselected()": {
          "definition": "Verify_vehicle__is_or_is_not_selected(string vehicleName, bool isSelected)"
        },
        "verifyquestiontextis()": {
          "definition": "Verify_question_text_is__(string questionText)"
        },
        "selecttrainingforfulfillment()": {
          "definition": "Select_training__for_fulfillment(string trainingName)"
        },
        "verifyemployeeisorisnotselected()": {
          "definition": "Verify_employee__is_or_is_not_selected(string employeeName, bool isSelected)"
        },
        "verifyemploymentisprimary()": {
          "definition": "Verify_employment__is_primary(string employmentOrgName)"
        },
        "verifyemployeewithacademyidhascertifications()": {
          "definition": "Verify_employee__with_Academy_ID__has_certifications__(string employeeName, string academyID, string certNames)"
        },
        "verifyfreeformansweris()": {
          "definition": "Verify_freeform_answer_is__(string answer)"
        },
        "showquestioncontrols()": {
          "definition": "ShowQuestionControls(bool doShow, bool readOnly)"
        },
        "selectcertificationforfulfillment()": {
          "definition": "Select_certification__for_fulfillment(string certName)"
        },
        "selectemployeeforfulfillment()": {
          "definition": "Select_employee__for_fulfillment(string employeeName)"
        },
        "cancelitemupdate()": {
          "definition": "Cancel_item_update()"
        },
        "verifyoptionisnotselected()": {
          "definition": "Verify_option__is_not_selected(string optionText)"
        },
        "saveitemasfulfilled()": {
          "definition": "Save_item_as_fulfilled()"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "showyesnoquestion()": {
          "definition": "ShowYesNoQuestion(bool doShow)"
        },
        "verifytrainingclasshasstartdateof()": {
          "definition": "Verify_training_class__has_start_date_of__(string className, DateTime startDate)"
        },
        "verifycannotuploadnewdocument()": {
          "definition": "Verify_cannot_upload_new_document()"
        },
        "verifyrosterrecordsarenotloaded()": {
          "definition": "Verify_roster_records_are_not_loaded()"
        },
        "showcertificationrequirementcontrols()": {
          "definition": "ShowCertificationRequirementControls(bool doShow)"
        },
        "verifytrainingclasshasstudentstatusof()": {
          "definition": "Verify_training_class__has_student_status_of__(string className, string statusName)"
        },
        "verifyfreeformisdisplayed()": {
          "definition": "Verify_freeform_is_displayed()"
        },
        "verifyvalidationfaileddueto()": {
          "definition": "Verify_validation_failed_due_to__(string msg)"
        },
        "verifyoptionisselected()": {
          "definition": "Verify_option__is_selected(string optionText)"
        },
        "verifyvehiclesaredisplayed()": {
          "definition": "Verify_vehicles_are_displayed()"
        },
        "verifycertificationisnotindicatedasinactiveordeleted()": {
          "definition": "Verify_certification__is_not_indicated_as_inactive_or_deleted(string certName)"
        },
        "verifytrainingclasshasnotrainingcategory()": {
          "definition": "Verify_training_class__has_no_training_category(string className)"
        },
        "verifycertificationisindicatedasinactiveordeleted()": {
          "definition": "Verify_certification__is_indicated_as_inactive_or_deleted(string certName)"
        },
        "selectoption()": {
          "definition": "Select__option(string optionText)"
        },
        "verifyemployeerosterisdisplayed()": {
          "definition": "Verify_employee_roster_is_displayed()"
        },
        "verifytrainingclassalerticonhastextof()": {
          "definition": "Verify_training_class__alert_icon_has_text_of__(string className, string alertText)"
        },
        "doneviewingitem()": {
          "definition": "Done_viewing_item()"
        },
        "verifyemploymentisindicatedasdeleted()": {
          "definition": "Verify_employment__is_indicated_as_deleted(string employmentOrgName)"
        },
        "showfreeformquestion()": {
          "definition": "ShowFreeformQuestion(bool doShow)"
        },
        "verifytrainingisavailableforselection()": {
          "definition": "Verify_training__is_available_for_selection(string className)"
        },
        "verifyisavailabletoattach()": {
          "definition": "Verify__is_available_to_attach(string docFileName)"
        },
        "verifytrainingclasshasenddateof()": {
          "definition": "Verify_training_class__has_end_date_of__(string className, DateTime endDate)"
        },
        "selectvehicleforfulfillment()": {
          "definition": "Select_vehicle__for_fulfillment(string vehicleName)"
        },
        "verifymultipleresponsesnotallowed()": {
          "definition": "Verify_multiple_responses_not_allowed()"
        },
        "verifycertificationsaredisplayed()": {
          "definition": "Verify_certifications_are_displayed()"
        },
        "verifycertificationhasissueof()": {
          "definition": "Verify_certification__has_issue_of__(string certName, string issueDate)"
        },
        "verifyisattachedtothecertificationrequirement()": {
          "definition": "Verify_is_attached_to_the_certification_requirement(string docName)"
        },
        "showfulfillmentalert()": {
          "definition": "ShowFulfillmentAlert()"
        },
        "verifyresponseisrequired()": {
          "definition": "Verify_response_is_required()"
        },
        "verifyemploymenthasstatusof()": {
          "definition": "Verify_employment__has_status_of__(string employmentOrgName, string statusName)"
        },
        "resetvalidationmessage()": {
          "definition": "ResetValidationMessage()"
        },
        "verifytrainingclassisnotindicatedasinactiveordeleted()": {
          "definition": "Verify_training_class__is_not_indicated_as_inactive_or_deleted(string className)"
        },
        "enterfreeformanswerof()": {
          "definition": "Enter_freeform_answer_of__(string answer)"
        },
        "verifycertificationhasstatusof()": {
          "definition": "Verify_certification__has_status_of__(string certName, string statusName)"
        },
        "verifyvehiclerecordsareloadedandtherearerecords()": {
          "definition": "Verify_vehicle_records_are_loaded_and_there_are__records(int numRecs)"
        },
        "verifytherearedocumentstoattach()": {
          "definition": "Verify_there_are__documents_to_attach(int numDocs)"
        },
        "showtrainingrequirementcontrols()": {
          "definition": "ShowTrainingRequirementControls(bool doShow)"
        },
        "verifyisanoption()": {
          "definition": "Verify__is_an_option(string optionText)"
        },
        "verifyvehiclerecordsarenotloaded()": {
          "definition": "Verify_vehicle_records_are_not_loaded()"
        },
        "verifytrainingisdisplayed()": {
          "definition": "Verify_training_is_displayed()"
        },
        "verifyemploymentrecordsareloadedandtherearerecords()": {
          "definition": "Verify_employment_records_are_loaded_and_there_are__records(int numRecs)"
        },
        "showrosterrequirementcontrols()": {
          "definition": "ShowRosterRequirementControls(bool doShow)"
        },
        "verifyalertappearswarninguserthattheitemwillnotbeautofulfilled()": {
          "definition": "Verify_alert_appears_warning_user_that_the_item_will_not_be_autofulfilled()"
        },
        "verifycheckboxtextis()": {
          "definition": "Verify_checkbox_text_is__(string text)"
        },
        "verifycheckboxisdisplayed()": {
          "definition": "Verify_checkbox_is_displayed()"
        },
        "verifyemploymenthastitleof()": {
          "definition": "Verify_employment__has_title_of__(string employmentOrgName, string titleName)"
        },
        "selectfilewithdescriptionandfilename()": {
          "definition": "Select_file_with_description__and_filename__(string descr, string fileName)"
        },
        "verifycheckboxvalue()": {
          "definition": "Verify_checkbox_value(bool isChecked)"
        },
        "verifycertificationisselected()": {
          "definition": "Verify_certification__is_selected(string certName)"
        },
        "clickmarkunfulfilledrequirementsasfulfilled()": {
          "definition": "Click_Mark_unfulfilled_requirements_as_fulfilled()"
        },
        "selectemploymentforfulfillment()": {
          "definition": "Select_employment__for_fulfillment(string employmentOrgName)"
        },
        "reset()": {
          "definition": "ResetWorkflow()"
        },
        "verifytrainingclassisindicatedasinactiveordeleted()": {
          "definition": "Verify_training_class__is_indicated_as_inactive_or_deleted(string className)"
        },
        "removeoptionselection()": {
          "definition": "Remove__option_selection(string optionText)"
        },
        "verifytrainingrecordsarenotloaded()": {
          "definition": "Verify_training_records_are_not_loaded()"
        },
        "verifyrosterrecordsareloadedandtherearerecords()": {
          "definition": "Verify_roster_records_are_loaded_and_there_are__records(int numRecs)"
        },
        "showvehiclelistrequirementcontrols()": {
          "definition": "ShowVehicleListRequirementControls(bool doShow)"
        },
        "cancelalert()": {
          "definition": "Cancel_alert()"
        },
        "verifycertificationrecordsareloadedandtherearerecords()": {
          "definition": "Verify_certification_records_are_loaded_and_there_are__records(int numRecs)"
        },
        "showemploymentrequirementcontrols()": {
          "definition": "ShowEmploymentRequirementControls(bool doShow)"
        },
        "verifydateofbirthisnullandcanbeentered()": {
          "definition": "Verify_date_of_birth_is_null_and_can_be_entered()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "InquiryItemResponseWorkflow"
    },
    "employmentdata": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "EmploymentData"
    },
    "facilitypersistence": {
      "namespace": "",
      "methods": {
        "verifythatresultscontain()": {
          "definition": "Verify_that_results_contain__(List<string> facilityNames)"
        },
        "verifythatthereareresults()": {
          "definition": "Verify_that_there_are__results(int numResults)"
        },
        "getfacilitiesincategory()": {
          "definition": "Get_facilities_in_category__(string categoryName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "FacilityPersistence"
    },
    "editclass": {
      "namespace": "",
      "methods": {
        "selectstatus()": {
          "definition": "Select_status_(string status)"
        },
        "verifyinstructiontypeis()": {
          "definition": "Verify_instruction_type_is__(string instructionType)"
        },
        "verifyaddress2is()": {
          "definition": "Verify_address2_is__(string address2)"
        },
        "browsetopageforlastsavedclass()": {
          "definition": "Browse_to_page_for_last_saved_class()"
        },
        "createclassnamedfromstartingending()": {
          "definition": "Create_Class_named__from__starting__ending_(string className, string templateName, DateTime start, DateTime end)"
        },
        "verifyplanningcategoryisselected()": {
          "definition": "Verify_planning_category___is_selected(string categoryName)"
        },
        "verifyenddateis()": {
          "definition": "Verify_end_date_is__(DateTime endDate)"
        },
        "verifypageheaderis()": {
          "definition": "Verify_page_header_is(string header)"
        },
        "setpagemode()": {
          "definition": "SetPageMode(PageMode mode)"
        },
        "verifyaddress1is()": {
          "definition": "Verify_address1_is__(string address1)"
        },
        "verifyclassnameis()": {
          "definition": "Verify_class_name_is__(string name)"
        },
        "enterforstartdate()": {
          "definition": "Enter__for_start_date(DateTime startDate)"
        },
        "enterforprojectednumberofstudents()": {
          "definition": "Enter__for_projected_number_of_students(int number)"
        },
        "verifycancelclassverificationisshownwithtitle()": {
          "definition": "Verify_cancel_class_verification_is_shown_with_title__(string title)"
        },
        "verifystartdateis()": {
          "definition": "Verify_start_date_is__(DateTime startDate)"
        },
        "enterforname()": {
          "definition": "Enter__for_name(string name)"
        },
        "clickclasschangealertcontinuebutton()": {
          "definition": "Click_Class_Change_Alert_Continue_Button()"
        },
        "verifyclassnamereadonly()": {
          "definition": "Verify_class_name__read_only(string isIsNot)"
        },
        "verifyclasschangealertpopoverisvisible()": {
          "definition": "Verify_Class_Change_Alert_Popover_is_visible()"
        },
        "savechangetoautonamedclassname()": {
          "definition": "Save_change_to_auto_named_class_name()"
        },
        "verifyredirected()": {
          "definition": "Verify_redirected()"
        },
        "verifystatusis()": {
          "definition": "Verify_status_is__(string status)"
        },
        "changeautonamedclassnameto()": {
          "definition": "Change_auto_named_class_name_to__(string newName)"
        },
        "setremovehousingcheckboxto()": {
          "definition": "Set_remove_housing_checkbox_to__(bool value)"
        },
        "selectclasstemplate()": {
          "definition": "Select_classTemplate__(string classTemplate)"
        },
        "browsetopagefromtemplate()": {
          "definition": "Browse_to_page_from_template(string templateName)"
        },
        "verifycityis()": {
          "definition": "Verify_city_is__(string city)"
        },
        "setemailresourceownerscheckboxto()": {
          "definition": "Set_email_resource_owners_checkbox_to__(bool value)"
        },
        "verifyprojectednumberofstudentsis()": {
          "definition": "Verify_projected_number_of_students_is__(string numberOfStudents)"
        },
        "verifyacademyissetto()": {
          "definition": "Verify_academy_is_set_to__(string academy)"
        },
        "selectfortrainingcategory()": {
          "definition": "Select__for_training_category(string categoryName)"
        },
        "confirmclasscancellation()": {
          "definition": "Confirm_class_cancellation()"
        },
        "verifyprogramissetto()": {
          "definition": "Verify_program_is_set_to__(string program)"
        },
        "verifytrainingcategoryisnotselected()": {
          "definition": "Verify_training_category__is_not_selected(string categoryName)"
        },
        "browsetopagetoeditclass()": {
          "definition": "Browse_to_page_to_edit_class__(string className)"
        },
        "verifyzipis()": {
          "definition": "Verify_zip_is__(string zip)"
        },
        "verifytheinvaliddatealertwasshown()": {
          "definition": "Verify_the_invalid_date_alert_was_shown()"
        },
        "verifyclasstemplateissetto()": {
          "definition": "Verify_class_template_is_set_to(string templateName)"
        },
        "verifyavailablestatusoptionsare()": {
          "definition": "Verify_available_status_options_are__(string statusOptions)"
        },
        "unselectfortrainingcategory()": {
          "definition": "Unselect__for_training_category(string categoryName)"
        },
        "setemailpersonnelcheckboxto()": {
          "definition": "Set_email_personnel_checkbox_to__(bool value)"
        },
        "createtrainingclassnamedfromstartingonendingonwithstatus()": {
          "definition": "Create_training_class_named__from__starting_on__ending_on__with_status_(string className, string templateName, DateTime start, DateTime end, ClassStatus status )"
        },
        "setemailstudentscheckboxto()": {
          "definition": "Set_email_students_checkbox_to__(bool value)"
        },
        "selectforinstructiontype()": {
          "definition": "Select__for_instruction_type(string type)"
        },
        "enterforenddate()": {
          "definition": "Enter__for_end_date(DateTime endDate)"
        },
        "returntoclassortemplate()": {
          "definition": "ReturnToClassOrTemplate(string programId)"
        },
        "verifypageisinmode()": {
          "definition": "Verify_page_is_in__mode(PageMode mode)"
        },
        "saveclass()": {
          "definition": "Save_class()"
        },
        "selectforplanningcategory()": {
          "definition": "Select__for_planning_category(string categoryName)"
        },
        "enterforcost()": {
          "definition": "Enter__for_cost(decimal cost)"
        },
        "verifylocationis()": {
          "definition": "Verify_location_is__(string location)"
        },
        "selectacademy()": {
          "definition": "Select_academy__(string academy)"
        },
        "initializeaddresslocation()": {
          "definition": "InitializeAddressLocation(int? locationID, string locationName)"
        },
        "verifycostis()": {
          "definition": "Verify_cost_is__(decimal cost)"
        },
        "verifytrainingcategoryisselected()": {
          "definition": "Verify_training_category__is_selected( string categoryName)"
        },
        "verifytheduplicatenamealertwasshown()": {
          "definition": "Verify_the_duplicate_name_alert_was_shown()"
        },
        "enterforclassreference()": {
          "definition": "Enter__for_class_reference(string reference)"
        },
        "showclasschangealert()": {
          "definition": "ShowClassChangeAlert(ClassChangeDTO classChange)"
        },
        "createclassnamed()": {
          "definition": "Create_Class_named__(string className)"
        },
        "verifystateis()": {
          "definition": "Verify_state_is__(string state)"
        },
        "verifyavailabletrainingcategoriesinclude()": {
          "definition": "Verify_available_training_categories_include(string categoryName)"
        },
        "selectprogram()": {
          "definition": "Select_program__(string program)"
        },
        "enterforlocation()": {
          "definition": "Enter__for_location(string location)"
        },
        "enterforlocationaddress()": {
          "definition": "Enter__________for_location_address(string address1, string address2, string city, string state, string zip1, string zip2)"
        },
        "verifyclassreferenceis()": {
          "definition": "Verify_class_reference_is__(string reference)"
        },
        "bindplanningcategories()": {
          "definition": "BindPlanningCategories(IList<PlanningCategoryDTO> planningCategoryOptions)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EditClassWorkflow"
    },
    "autograduatertask": {
      "namespace": "",
      "methods": {
        "runautograduationtask()": {
          "definition": "Run_auto_graduation_task()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "AutoGraduaterTaskWorkflow"
    },
    "personsearchcriteria": {
      "namespace": "",
      "methods": {
        "withdutylocations()": {
          "definition": "With_duty_locations__(List<string> orgNames)"
        },
        "addrightparenthesistoexpression()": {
          "definition": "Add_right_parenthesis_to_expression()"
        },
        "withpayplanof()": {
          "definition": "with_pay_plan_of(string value)"
        },
        "withdutyassignmentdatesbetweenand()": {
          "definition": "With_duty_assignment_dates_between__and__(DateTime startDate, DateTime endDate)"
        },
        "enterinflagtypeahead()": {
          "definition": "Enter__in_flag_typeahead(string text)"
        },
        "addoperatorandtoexpression()": {
          "definition": "Add_operator_AND_to_expression()"
        },
        "binddisplayoptions()": {
          "definition": "BindDisplayOptions(IList<DisplayOptionDTO> displayOptions)"
        },
        "updatecriteriafromui()": {
          "definition": "UpdateCriteriaFromUI()"
        },
        "verifythatpagenavigatedtosearchresults()": {
          "definition": "Verify_that_page_navigated_to_search_results()"
        },
        "withorganizations()": {
          "definition": "With_organizations(List<string> orgNames)"
        },
        "withemploymentcriteriaeffectiveonaspecificdate()": {
          "definition": "With_employment_criteria_effective_on_a_specific_date()"
        },
        "withregulardutyassignments()": {
          "definition": "With_regular_duty_assignments()"
        },
        "withacademyid()": {
          "definition": "With_academy_id__(List<string> academyId)"
        },
        "withappointmenttypes()": {
          "definition": "With_appointment_types(List<string> appointmentTypeNames)"
        },
        "withdutyassignmentstatuses()": {
          "definition": "With_duty_assignment_statuses(List<string> statusNames)"
        },
        "withemploymentcriteriathatarecurrentlyeffective()": {
          "definition": "With_employment_criteria_that_are_currently_effective()"
        },
        "withundatedassignmentsonly()": {
          "definition": "With_undated_assignments_only()"
        },
        "enterintagtypeahead()": {
          "definition": "Enter__in_tag_typeahead(string text)"
        },
        "withpaygradeof()": {
          "definition": "with_pay_grade_of(string value)"
        },
        "addnewemploymentcriteriatoexpression()": {
          "definition": "Add_new_employment_criteria_to_expression()"
        },
        "withemploymentactions()": {
          "definition": "With_employment_actions(List<string> employmentActions)"
        },
        "withemploymentcriteriathatoccurredinarangeofdates()": {
          "definition": "With_employment_criteria_that_occurred_in_a_range_of_dates()"
        },
        "selectmatchingmode()": {
          "definition": "Select_matching_mode__(string mode)"
        },
        "browsetopageforcapability()": {
          "definition": "Browse_to_page_for_capability(string capability)"
        },
        "withsupervisorycodeof()": {
          "definition": "with_supervisory_code_of(string value)"
        },
        "withlastname()": {
          "definition": "With_last_name__(string lastName)"
        },
        "withemploymenteffectivedatestartingon()": {
          "definition": "With_employment_effective_date_starting_on__(DateTime date)"
        },
        "withemploymentstatuses()": {
          "definition": "With_employment_statuses(List<string> statusNames)"
        },
        "addleftparenthesistoexpression()": {
          "definition": "Add_left_parenthesis_to_expression()"
        },
        "withcomments()": {
          "definition": "With_comments__(string comments)"
        },
        "returntocapability()": {
          "definition": "ReturnToCapability()"
        },
        "browsetopage()": {
          "definition": "Browse_to_page()"
        },
        "navigatetosearchresults()": {
          "definition": "NavigateToSearchResults()"
        },
        "clickdoneinemploymentcriteriapopover()": {
          "definition": "Click_done_in_employment_criteria_popover()"
        },
        "selecttag()": {
          "definition": "Select_tag__(string tagName)"
        },
        "withdutyassignmentdatesbefore()": {
          "definition": "With_duty_assignment_dates_before__(DateTime endDate)"
        },
        "withundatedassignmentsexcluded()": {
          "definition": "With_undated_assignments_excluded()"
        },
        "withtitles()": {
          "definition": "With_titles(List<string> titleNames)"
        },
        "withemploymenttypes()": {
          "definition": "With_employment_types(List<string> employmentTypeNames)"
        },
        "withjobseriesof()": {
          "definition": "with_job_series_of(string value)"
        },
        "clicksearch()": {
          "definition": "Click_Search()"
        },
        "withemploymenteffectivedate()": {
          "definition": "With_employment_effective_date(DateTime date)"
        },
        "withsalaryincentiveof()": {
          "definition": "with_salary_incentive_of(string value)"
        },
        "withtemporarydutyassignments()": {
          "definition": "With_temporary_duty_assignments()"
        },
        "updateuifromcriteria()": {
          "definition": "UpdateUIFromCriteria()"
        },
        "selectflag()": {
          "definition": "Select_Flag__(string flagName)"
        },
        "addoperatorortoexpression()": {
          "definition": "Add_operator_OR_to_expression()"
        },
        "clicksave()": {
          "definition": "Click_Save()"
        },
        "withpaystepof()": {
          "definition": "with_pay_step_of(string value)"
        },
        "clickswitchtoadvancedmode()": {
          "definition": "Click_Switch_to_advanced_mode()"
        },
        "withdutyassignmentdatesafter()": {
          "definition": "With_duty_assignment_dates_after__(DateTime startDate)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PersonSearchCriteriaWorkflow"
    },
    "eventrequestinfoedit": {
      "namespace": "",
      "methods": {
        "selectforgrant()": {
          "definition": "Select__for_Grant(string grant)"
        },
        "enterforotherorganizationtypeahead()": {
          "definition": "Enter__for_Other_Organization_typeahead(string searchText)"
        },
        "browsetopageforeventrequest()": {
          "definition": "Browse_to_page_for_event_request(string eventRequestName)"
        },
        "savecomplete()": {
          "definition": "SaveComplete(int eventRequestID)"
        },
        "selectforbilltoparty()": {
          "definition": "Select__for_Bill_to_Party(string billToParty)"
        },
        "selectforotherorganization()": {
          "definition": "Select__for_Other_Organization(string organizationName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EventRequestInfoEditWorkflow"
    },
    "missedtrainingreportmanagement": {
      "namespace": "",
      "methods": {
        "checkthatreportsearchedtrainingwithdescriptionfromto()": {
          "definition": "Check_that_report_searched_training_with_description_from_to( string training, string description, DateTime fromDate, DateTime toDate )"
        },
        "checkthatsearchfoundnomissedtraining()": {
          "definition": "Check_that_search_found_no_missed_training()"
        },
        "searchtrainingfororganizationfromto()": {
          "definition": "Search_training_for_organization_from_to( string training, string orgName, DateTime fromDate, DateTime toDate )"
        },
        "checkthatsearchfoundwithacademyidandemploymentat()": {
          "definition": "Check_that_search_found_with_academy_id_and_employment_at( string personName, string academyID, string employmentStatus, string orgName )"
        },
        "searchtrainingforpersonwithlastnamefromto()": {
          "definition": "Search_training_for_person_with_last_name_from_to( string training, string personName, DateTime fromDate, DateTime toDate )"
        }
      },
      "parent-name": "Workflow",
      "class-name": "MissedTrainingReportManagement"
    },
    "acadislessonplanrequestlist": {
      "namespace": "",
      "methods": {
        "bindlessonplanrequests()": {
          "definition": "BindLessonPlanRequests(IList<AcadisLessonPlanListAcademyDTO> academies)"
        },
        "considerrowofthelistfor()": {
          "definition": "Consider_row__of_the_list_for__(int rowNumber, string academyName)"
        },
        "verifysubmittedis()": {
          "definition": "Verify_Submitted_is__(string submitted)"
        },
        "verifytherearelessonplanrequestsinthelistfor()": {
          "definition": "Verify_there_are__lesson_plan_requests_in_the_list_for__(int expectedNumberOfRequests, string academyName)"
        },
        "verifythedisplayedacademiesare()": {
          "definition": "Verify_the_displayed_academies_are__(List<string> academyNames)"
        },
        "verifyusernavigatedtothedashboard()": {
          "definition": "Verify_user__navigated_to_the_dashboard(string wasWasNotString)"
        },
        "browsetopagefromlessonplan()": {
          "definition": "Browse_to_page_from_lesson_plan__(string lessonPlanName)"
        },
        "verifynoacademiesaredisplayed()": {
          "definition": "Verify_no_academies_are_displayed()"
        },
        "verifynoacademiesareshown()": {
          "definition": "Verify_no_academies_are_shown()"
        },
        "clearfilters()": {
          "definition": "Clear_filters()"
        },
        "addrequestingorganizationfilterfor()": {
          "definition": "Add_requesting_organization_filter_for__(string orgName)"
        },
        "verifyrequestcommentsis()": {
          "definition": "Verify_Request_Comments_is__(string specialRequest)"
        },
        "savefilters()": {
          "definition": "Save_filters()"
        },
        "verifystatusis()": {
          "definition": "Verify_Status_is__(string status)"
        },
        "setfilterto()": {
          "definition": "Set_filter__to__(string filterName, string filterValue)"
        },
        "verifyrequestedforis()": {
          "definition": "Verify_Requested_For_is__(string requestedFor)"
        },
        "verifyusernavigatedtoviewlessonplan()": {
          "definition": "Verify_user__navigated_to_view_lesson_plan__(string wasWasNotString, string lessonPlanCourseTitle)"
        },
        "clearbaselinelessonplans()": {
          "definition": "Clear_baseline_lesson_plans()"
        },
        "navigatetoviewlessonplan()": {
          "definition": "NavigateToViewLessonPlan(int lessonPlanID)"
        },
        "navigatetodashboard()": {
          "definition": "NavigateToDashboard()"
        },
        "verifycoursetitleis()": {
          "definition": "Verify_Course_Title_is__(string courseTitle)"
        },
        "verifyrequestedbyis()": {
          "definition": "Verify_Requested_By_is__(string requestedBy)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AcadisLessonPlanRequestListWorkflow"
    },
    "portalcertificationrequest": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalCertificationRequest"
    },
    "attemplaterulesets": {
      "namespace": "",
      "methods": {
        "nextview()": {
          "definition": "NextView(bool showPrompt)"
        },
        "verifyandhavedifferentquestionspickedfrom()": {
          "definition": "Verify__and__have_different_questions_picked_from(string editionName1, string editionName2, string questions)"
        },
        "deleteexistingrules()": {
          "definition": "Delete_existing_rules()"
        },
        "bindrules()": {
          "definition": "BindRules(IList<TemplateRuleDto> rules)"
        },
        "chooseas()": {
          "definition": "Choose__as__(TestEditionCopyStyle copyStyle, string edition)"
        },
        "verifyselectededitionis()": {
          "definition": "Verify_selected_edition_is__(string editionName)"
        },
        "rulesubcategoryis()": {
          "definition": "Rule_Subcategory_is__(string subcategoryName)"
        },
        "browsetotemplaterulesetspagefortemplate()": {
          "definition": "Browse_to_Template_rulesets_page_for_template__(string templateName)"
        },
        "showrulesetcreator()": {
          "definition": "ShowRulesetCreator()"
        },
        "addelofromtlotorule()": {
          "definition": "Add_Elo__from_Tlo__to_rule(string eloName, string tloName)"
        },
        "showreferencechainwarning()": {
          "definition": "ShowReferenceChainWarning(IList<string> editions)"
        },
        "changeeditionnameto()": {
          "definition": "Change_edition_name_to__(string newEditionName)"
        },
        "verifyquestionspickedcontainsuniqueitemsfrom()": {
          "definition": "Verify_questions_picked_contains__unique_items_from__(int numQuestions, string questionList)"
        },
        "verifyduplicateeditionname()": {
          "definition": "Verify_duplicate_edition_name()"
        },
        "addspecificquestion()": {
          "definition": "Add_Specific_Question__(string questionText)"
        },
        "numberofquestionsis()": {
          "definition": "Number_of_Questions_is__(int n)"
        },
        "nevershowquestionsbeingselectedpromptagain()": {
          "definition": "Never_show_questions_being_selected_prompt_again()"
        },
        "addanedition()": {
          "definition": "Add_an_Edition()"
        },
        "verifyquestionspicked()": {
          "definition": "Verify__questions_picked(int numQuestions)"
        },
        "verifyquestionsbeingselectedpromptisshown()": {
          "definition": "Verify_questions_being_selected_prompt_is_shown()"
        },
        "showcopiededition()": {
          "definition": "ShowCopiedEdition(bool sameQuestionSet)"
        },
        "newcriteriarule()": {
          "definition": "New_Criteria_Rule()"
        },
        "selectedition()": {
          "definition": "Select_edition(string name)"
        },
        "rulepriorityis()": {
          "definition": "Rule_Priority_is__(string priority)"
        },
        "fixreferencesofreferringeditions()": {
          "definition": "Fix_references_of_referring_Editions()"
        },
        "verifyreferencechainwarningdisplaysandeditionisreferencedby()": {
          "definition": "Verify_Reference_Chain_Warning_displays_and_edition_is_referenced_by__(string editions)"
        },
        "rulecategoryis()": {
          "definition": "Rule_Category_is__(string categoryName)"
        },
        "verifyallquestionsownedby()": {
          "definition": "Verify_all_questions_owned_by(string organization)"
        },
        "refreshrules()": {
          "definition": "Refresh_Rules()"
        },
        "choosecreateanewruleset()": {
          "definition": "Choose_create_a_New_Ruleset()"
        },
        "edittheedition()": {
          "definition": "Edit_the_edition()"
        },
        "verifyuninitializedrulesetcreatorisshown()": {
          "definition": "Verify_uninitialized_ruleset_creator_is_shown()"
        },
        "verifyeditionusingsamequestionsetas()": {
          "definition": "Verify_Edition_using_same_question_set_as__(string name)"
        },
        "verifyquestionsbeingselectedpromptisnotshown()": {
          "definition": "Verify_questions_being_selected_prompt_is_not_shown()"
        },
        "continuetoquestionreview()": {
          "definition": "Continue_to_Question_Review()"
        },
        "verifyrulesetcreatorisvisiblewithoptionselectedusingedition()": {
          "definition": "Verify_ruleset_creator_is_visible_with__option_selected_using_edition__(TestEditionCopyStyle style, string editionToCopyFromName)"
        },
        "saverule()": {
          "definition": "Save_Rule()"
        },
        "verifyquestionshavepriority()": {
          "definition": "Verify__questions_have__priority(int numQuestions, string priorityName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ATTemplateRulesetsWorkflow"
    },
    "approvedcoursetitlerecords": {
      "namespace": "",
      "methods": {
        "verifycoursetitlecanbeedited()": {
          "definition": "Verify_course_title_can_be_edited()"
        },
        "bindlist()": {
          "definition": "BindList(IEnumerable<ApprovedCourseDisplayItem> courses)"
        },
        "clickdeletebuttoninpopup()": {
          "definition": "Click_delete_button_in_popup()"
        },
        "verifylistcontaincoursetitle()": {
          "definition": "Verify_list__contain_course_title__(string containsFlag, string courseTitle)"
        },
        "verifyuseraddnewtitles()": {
          "definition": "Verify_user__add_new_titles(string canAdd)"
        },
        "verifycoursetitlecanbedeleted()": {
          "definition": "Verify_course_title_can_be_deleted()"
        },
        "verifycoursetitlestatusis()": {
          "definition": "Verify_course_title_status_is(string status)"
        },
        "selectdeletelinkforcoursetitle()": {
          "definition": "Select_delete_link_for_course_title__(string courseTitle)"
        },
        "verifycoursetitleisassignedto()": {
          "definition": "Verify_course_title_is_assigned_to__(string assignment)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ApprovedCourseTitleRecords"
    },
    "trainingeventdetailacadis": {
      "namespace": "",
      "methods": {
        "loaddetailforeventwithhours()": {
          "definition": "Load_detail_for_event__with__hours(string trainingEventName, decimal hours)"
        },
        "setattendeetrainingcategorytoandsave()": {
          "definition": "Set_attendee_training_category_to__and_save(string trainingCategory)"
        },
        "clickedittrainingevent()": {
          "definition": "Click_Edit_Training_Event()"
        },
        "verifythatattendeesareshown()": {
          "definition": "Verify_that__attendees_are_shown(int attendeeCount)"
        },
        "clickeditforattendee()": {
          "definition": "Click_Edit_for_Attendee__(string attendeeName)"
        },
        "verifythattrackingstatusesareshown()": {
          "definition": "Verify_that__tracking_statuses_are_shown(int trackingStatusCount)"
        },
        "clickaddattendee()": {
          "definition": "Click_Add_Attendee()"
        },
        "verifythatthetrackingstatusisandreads()": {
          "definition": "Verify_that_the__tracking_status_is__and_reads__(string trackingStatusOrdinal, string statusName, string statusDetails)"
        },
        "verifythattheattendeeiswithacademyidandhoursandtrainingcategory()": {
          "definition": "Verify_that_the__attendee_is__with_academy_id__and__hours_and_training_category__(string attendeeOrdinal, string attendeeName, string academyId, string hours, string trainingCategory)"
        },
        "clickapproveevent()": {
          "definition": "Click_Approve_Event()"
        },
        "clickrejectevent()": {
          "definition": "Click_Reject_Event()"
        },
        "verifynoattendeesarelisted()": {
          "definition": "Verify_no_attendees_are_listed()"
        },
        "verifythatthetrackingstatusisandreadswithcomments()": {
          "definition": "Verify_that_the__tracking_status_is__and_reads__with_comments__(string trackingStatusOrdinal, string statusName, string statusDetails, string statusComments)"
        },
        "bindtrackingstatuses()": {
          "definition": "BindTrackingStatuses(IList<TrainingEventTrackingStatusDTO> trackingStatuses)"
        },
        "verifythattheattendeeiswithacademyidandtrainingcategory()": {
          "definition": "Verify_that_the__attendee_is__with_academy_id__and_training_category__(string attendeeOrdinal, string attendeeName, string academyId, string trainingCategory)"
        },
        "loaddetailforevent()": {
          "definition": "Load_detail_for_event__(string trainingEventName)"
        },
        "verifythattheattendeeiswithacademyidandhoursandnotrainingcategory()": {
          "definition": "Verify_that_the__attendee_is__with_academy_id__and__hours_and_no_training_category(string attendeeOrdinal, string attendeeName, string academyId, string hours)"
        },
        "bindattendeesummaries()": {
          "definition": "BindAttendeeSummaries(IList<TrainingEventAttendeeSummaryDTO> attendeeSummaries, bool showComments)"
        },
        "waitforpagetoload()": {
          "definition": "Wait_for_page_to_load()"
        },
        "verifythattheattendeeiswithacademyidandnotrainingcategory()": {
          "definition": "Verify_that_the__attendee_is__with_academy_id__and_no_training_category(string attendeeOrdinal, string attendeeName, string academyId)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "TrainingEventDetailAcadisWorkflow"
    },
    "setup": {
      "namespace": "",
      "methods": {
        "preventfromseeingclasses()": {
          "definition": "Prevent__from_seeing__classes(string username, string activeOrHistorical)"
        },
        "allowtoonlyseestudents()": {
          "definition": "Allow__to_only_see_students(string username)"
        },
        "allowtoviewrecords()": {
          "definition": "Allow__to_view__records(string username, string permission)"
        },
        "preventfromviewingrecords()": {
          "definition": "Prevent__from_viewing__records(string username, string permission)"
        },
        "enabledatapartitioning()": {
          "definition": "Enable_data_partitioning()"
        },
        "disabledatapartitioning()": {
          "definition": "Disable_data_partitioning()"
        },
        "allowtoseeclasses()": {
          "definition": "Allow__to_see__classes(string username, string activeOrHistorical)"
        },
        "createpersonwithusername()": {
          "definition": "Create_person__with_user_name__(string name, string username)"
        },
        "createorganization()": {
          "definition": "Create_organization__(string name)"
        },
        "allowtoseeorganization()": {
          "definition": "Allow__to_see_organization__(string username, string organization)"
        },
        "allowtoeditrecords()": {
          "definition": "Allow__to_edit__records(string username, string permission)"
        },
        "setgraceperiodtodays()": {
          "definition": "Set_grace_period_to__days(int days)"
        }
      },
      "parent-name": null,
      "class-name": "SetupWorkflow"
    },
    "humanresourceimportmanagement": {
      "namespace": "",
      "methods": {
        "verifyhumanresourceimportsareuse()": {
          "definition": "Verify_Human_Resource_Imports_are__use(string inUse)"
        },
        "verifyparentofneworgis()": {
          "definition": "Verify_parent_of_new_org_is__(string orgName)"
        },
        "sethumanresourcesystemnameto()": {
          "definition": "Set_human_resource_system_name_to__(string name)"
        },
        "verifyfilecontenttypeis()": {
          "definition": "Verify_file_content_type_is__(ExternalHRImportMode contentType)"
        },
        "verifyhumanresourcesystemnameis()": {
          "definition": "Verify_human_resource_system_name_is__(string name)"
        },
        "setparentorgofneworgsto()": {
          "definition": "Set_parent_org_of_new_orgs_to(string orgName)"
        },
        "setfilecontenttypeto()": {
          "definition": "Set_file_content_type_to__(ExternalHRImportMode contentType)"
        },
        "whenimportfileincludesonlyadutyassignmentemploythemwiththefirstemployingorgupthetree()": {
          "definition": "When_import_file_includes_only_a_duty_assignment_employ_them_with_the_first_employing_org_up_the_tree()"
        },
        "verifydutyassignmentswithoutorginfileemployswith()": {
          "definition": "Verify_duty_assignments_without_org_in_file_employs_with__(string orgName)"
        },
        "sethumanresourceimportstouse()": {
          "definition": "Set_Human_Resource_Imports_to__use(string inUse)"
        },
        "whenimportfileincludesonlyadutyassignmentemploythemwith()": {
          "definition": "When_import_file_includes_only_a_duty_assignment_employ_them_with(string orgName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "HumanResourceImportManagement"
    },
    "duplicatesearch": {
      "namespace": "",
      "methods": {
        "thereareduplicatesoffirstnamelastname()": {
          "definition": "There_are__duplicates_of_first_name__last_name__(int numExpectedResults, string firstName, string lastName)"
        },
        "thereareduplicatesoflastnamebirthdate()": {
          "definition": "There_are__duplicates_of_last_name__birthdate__( int numExpectedResults, string lastName, DateTime bithdate )"
        },
        "searchforduplicateswithcriteria()": {
          "definition": "Search_for_duplicates_with_criteria__(List<string> criteria)"
        },
        "thereareduplicatesoffirstnamebirthdate()": {
          "definition": "There_are_duplicates_of_first_name_birthdate( int numExpectedResults, string firstName, DateTime bithdate )"
        },
        "thereareduplicatesofdriverslicense()": {
          "definition": "There_are__duplicates_of_drivers_license__( int numExpectedResults, string driversLicense )"
        }
      },
      "parent-name": "Workflow",
      "class-name": "DuplicateSearch"
    },
    "addeditdeparture": {
      "namespace": "",
      "methods": {
        "verifydeleteungradedtestsisavailable()": {
          "definition": "Verify_delete_ungraded_tests_is_available()"
        },
        "verifydeleteungradedtestsisnotavailable()": {
          "definition": "Verify_delete_ungraded_tests_is_not_available()"
        },
        "verifyisnotanavailablereasondetail()": {
          "definition": "Verify__is_not_an_available_reason_detail(string reasonDetail)"
        },
        "selectforstudent()": {
          "definition": "Select__for_Student(string studentName)"
        },
        "browsetopageforclass()": {
          "definition": "Browse_to_page_for_class__(string className)"
        },
        "browsetopageforclassandstudent()": {
          "definition": "Browse_to_page_for_class__and_student_(string className, string studentName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AddEditDeparture"
    },
    "classtemplateaddedit": {
      "namespace": "",
      "methods": {
        "setcancreateonlineevent()": {
          "definition": "SetCanCreateOnlineEvent(bool hasPermission)"
        },
        "clickbuttonsave()": {
          "definition": "Click_button_Save()"
        },
        "verifyuserwasnavigatedtoadditionalclasstemplateinfo()": {
          "definition": "Verify_user_was_navigated_to_additional_class_template_info()"
        },
        "selectforcontent()": {
          "definition": "Select__for_Content(string contentName)"
        },
        "createclasstemplatenamedinprogramfororganization()": {
          "definition": "Create_class_template_named__in_program__for_organization__(string name, string programName, string academyName)"
        },
        "browsetopagefornewclasstemplatewithlessonplan()": {
          "definition": "Browse_to_page_for_new_Class_Template_with_lesson_plan__(string lessonPlanCourseTitle)"
        },
        "navigatetoclasstemplaterecord()": {
          "definition": "NavigateToClassTemplateRecord(int templateID)"
        },
        "verifycompletionrequirementis()": {
          "definition": "Verify_completion_requirement_is__(CompletionRequirement requirement)"
        },
        "setonlineeventavailabilitytobeavailablebeginningtodayandhasnoenddate()": {
          "definition": "Set_online_event_availability_to_be_available_beginning_today_and_has_no_end_date()"
        },
        "browsetopageforonlineevent()": {
          "definition": "Browse_to_page_for_Online_Event__(string eventName)"
        },
        "browsetopagefornewonlineevent()": {
          "definition": "Browse_to_page_for_new_Online_Event()"
        },
        "dismisslessonplanprefilledpopoverpermanently()": {
          "definition": "Dismiss_lesson_plan_pre_filled_popover_permanently()"
        },
        "sethashousingreservation()": {
          "definition": "SetHasHousingReservation(bool hasReservation)"
        },
        "verifylessonplanprefilledpopoverdisplayed()": {
          "definition": "Verify_lesson_plan_pre_filled_popover__displayed(string wasOrWasNotStr)"
        },
        "selectforowner()": {
          "definition": "Select__for_Owner(string ownerName)"
        },
        "verifyoptionsfortrainingcategoryare()": {
          "definition": "Verify_options_for_Training_Category_are__(string options)"
        },
        "createclasstemplatenamedundertrainingacademyusingprogram()": {
          "definition": "Create__Class_Template_named__under_Training_Academy__using_Program__(string status, string name, string academyName, string programName)"
        },
        "browsetopageforclasstemplate()": {
          "definition": "Browse_to_page_for_Class_Template__(string templateName)"
        },
        "navigatetoonlineeventrecord()": {
          "definition": "NavigateToOnlineEventRecord(int eventID)"
        },
        "createonlineeventnamedundertrainingacademyusingprogram()": {
          "definition": "Create__Online_Event_named__under_Training_Academy__using_Program__(string status, string name, string academyName, string programName)"
        },
        "verifycontentis()": {
          "definition": "Verify_content_is__(string contentName)"
        },
        "enterhmfortraininghours()": {
          "definition": "Enter__h__m_for_Training_Hours(int hours, int minutes)"
        },
        "verifystudentregistrationoptionsvisible()": {
          "definition": "Verify_student_registration_options__visible(string visible)"
        },
        "verifylabelforprogramcategoryisempty()": {
          "definition": "Verify_Label_for_Program_Category_is_empty()"
        },
        "verifyeventavailableinportal()": {
          "definition": "Verify_event__available_in_portal(string availableText)"
        },
        "showsavewarning()": {
          "definition": "ShowSaveWarning(string message)"
        },
        "selectfortrainingcategory()": {
          "definition": "Select__for_Training_Category(string optionSelection)"
        },
        "selectforprogram()": {
          "definition": "Select__for_Program(string programName)"
        },
        "selectavailableinportal()": {
          "definition": "Select__available_in_portal(string availableText)"
        },
        "showduplicatenamewarning()": {
          "definition": "ShowDuplicateNameWarning()"
        },
        "entertextforceucredits()": {
          "definition": "Enter_text__for_CEU_Credits(decimal ceuCredits)"
        },
        "browsetopagefornewclasstemplate()": {
          "definition": "Browse_to_page_for_new_Class_Template()"
        },
        "verifycontentisownedby()": {
          "definition": "Verify_content_is_owned_by__(string ownerName)"
        },
        "verifytraininghoursarehm()": {
          "definition": "Verify_Training_Hours_are__h__m(int hours, int minutes)"
        },
        "navigatetoadditionalclasstemplateinfo()": {
          "definition": "NavigateToAdditionalClassTemplateInfo(int templateID)"
        },
        "createclasstemplatenamedusingprogram()": {
          "definition": "Create__Class_Template_named__using_Program__(string status, string name, string programName)"
        },
        "verifysavesuccessful()": {
          "definition": "Verify_save_successful()"
        },
        "verifyselectedtrainingcategoriesare()": {
          "definition": "Verify_selected_Training_Categories_are__(string options)"
        },
        "verifyuserwasnavigatedtoonlineevent()": {
          "definition": "Verify_user_was_navigated_to_online_event__(string eventName)"
        },
        "setprogramcategory()": {
          "definition": "SetProgramCategory(string categoryName)"
        },
        "selectrequestedenrollmentforenrollmentprocessing()": {
          "definition": "Select_requested_enrollment_for_enrollment_processing()"
        },
        "selectnoenrollmenttrackedpriortoclass()": {
          "definition": "Select_no_enrollment_tracked_prior_to_class()"
        },
        "clickbuttoncontinue()": {
          "definition": "Click_Button_Continue()"
        },
        "createclasstemplatenamed()": {
          "definition": "Create_class_template_named__(string name)"
        },
        "setheadertext()": {
          "definition": "SetHeaderText(string headerText)"
        },
        "showprefilledfromlessonplanpopover()": {
          "definition": "ShowPreFilledFromLessonPlanPopover()"
        },
        "verifycontentreportpassorfail()": {
          "definition": "Verify_content__report_pass_or_fail(string condition)"
        },
        "createclasstemplatenamedinprogram()": {
          "definition": "Create_class_template_named__in_Program__(string name, string programName)"
        },
        "createclasstemplatenamedin()": {
          "definition": "Create_Class_Template_named__in__(string name, string programName)"
        },
        "setcontentdetails()": {
          "definition": "SetContentDetails(string contentName, string orgName, bool hasPassFail, bool hasGrade)"
        },
        "verifycontentreportgrade()": {
          "definition": "Verify_content__report_grade(string condition)"
        },
        "verifyselectedtrainingcategoriesareempty()": {
          "definition": "Verify_selected_training_categories_are_empty()"
        },
        "bindplanningcategories()": {
          "definition": "BindPlanningCategories(IList<PlanningCategoryDTO> planningCategoryOptions)"
        },
        "verifyonlineeventcontrolsvisible()": {
          "definition": "Verify_Online_Event_controls_visible(string condition)"
        },
        "selectforcompletionrequirement()": {
          "definition": "Select__for_Completion_Requirement(CompletionRequirement requirement)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ClassTemplateAddEditWorkflow"
    },
    "documentattacher": {
      "namespace": "",
      "methods": {
        "preservenewselections()": {
          "definition": "PreserveNewSelections(List<int> newSelectedIDs)"
        },
        "verifytherearedocumentstoattach()": {
          "definition": "Verify_there_are__documents_to_attach(int numDocs)"
        },
        "teardown()": {
          "definition": "TearDown()"
        },
        "clearnewdocumentvalidationwarnings()": {
          "definition": "ClearNewDocumentValidationWarnings()"
        },
        "managemissingfiledescriptionwarning()": {
          "definition": "ManageMissingFileDescriptionWarning(bool showWarning)"
        },
        "verifycanuploadnewdocument()": {
          "definition": "Verify_can_upload_new_document()"
        },
        "showlistofdocuments()": {
          "definition": "ShowListOfDocuments(List<DocumentDTO> documents)"
        },
        "verifyisavailabletoattach()": {
          "definition": "Verify__is_available_to_attach(string docFileName)"
        },
        "allowuploads()": {
          "definition": "AllowUploads()"
        },
        "selectfilewithdescriptionandfilename()": {
          "definition": "Select_file_with_description__and_filename__(string descr, string fileName)"
        },
        "managefilesizewarning()": {
          "definition": "ManageFileSizeWarning(bool showWarning)"
        },
        "verifytherearedocumentsattached()": {
          "definition": "Verify_there_are__documents_attached(int numDocs)"
        },
        "verifycannotuploadnewdocument()": {
          "definition": "Verify_cannot_upload_new_document()"
        },
        "documentsuccessfullyattached()": {
          "definition": "DocumentSuccessfullyAttached()"
        },
        "clicktoattachdocument()": {
          "definition": "Click_to_attach_document()"
        },
        "uploadandselectnewfilewithdescriptionandclickdone()": {
          "definition": "Upload_and_select_new_file__with_description__and_click_Done(string filename, string description)"
        },
        "uploadandselectnewfilewithdescriptionandclickaddanother()": {
          "definition": "Upload_and_select_new_file__with_description__and_click_Add_Another(string filename, string description)"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "showattachmentpopover()": {
          "definition": "ShowAttachmentPopover()"
        },
        "displayattacheddocuments()": {
          "definition": "DisplayAttachedDocuments(List<DocumentDTO> documents)"
        },
        "managemissingfilenamewarning()": {
          "definition": "ManageMissingFileNameWarning(bool showWarning)"
        },
        "showrequireddocumentvalidation()": {
          "definition": "ShowRequiredDocumentValidation(bool showWarning)"
        },
        "managefileextensionwarning()": {
          "definition": "ManageFileExtensionWarning(bool showWarning)"
        },
        "verifyisattached()": {
          "definition": "Verify__is_attached(string docName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "DocumentAttacherWorkflow"
    },
    "xadrinvokegetusertests": {
      "namespace": "",
      "methods": {
        "testxadrinvokealiases()": {
          "definition": "TestXadrInvokeAliases()"
        },
        "testexecspxmlwitharrayxmlxpath()": {
          "definition": "TestExecSPXmlWithArrayXmlXpath()"
        },
        "testexecspxmlwithxmlxpath()": {
          "definition": "TestExecSPXmlWithXmlXpath()"
        },
        "testexecspxml()": {
          "definition": "TestExecSPXml()"
        },
        "testexecspxmlwitharray()": {
          "definition": "TestExecSPXmlWithArray()"
        },
        "testinvoke()": {
          "definition": "TestInvoke()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "XadrInvokeGetUserTests"
    },
    "studenteditionassignments": {
      "namespace": "",
      "methods": {
        "assigneditionto()": {
          "definition": "Assign_edition__to__(string editionName, string personName)"
        },
        "bindinitialassignments()": {
          "definition": "BindInitialAssignments(List<StudentInitialEditionAssignmentDTO> initialAssignments)"
        },
        "leavepage()": {
          "definition": "Leave_Page()"
        },
        "clickprepare()": {
          "definition": "Click_Prepare()"
        },
        "clickstudentswillbeassignedmanually()": {
          "definition": "Click_Students_will_be_assigned_manually()"
        },
        "browsetofortest()": {
          "definition": "Browse_To_For_Test(string testName)"
        },
        "allstudentswilluse()": {
          "definition": "All_students_will_use__(string editionName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "StudentEditionAssignmentsWorkflow"
    },
    "personflaglistcompact": {
      "namespace": "",
      "methods": {
        "verifynameis()": {
          "definition": "Verify_name_is__(string name)"
        },
        "browsetopageforperson()": {
          "definition": "Browse_to_Page_For_Person__(string name)"
        },
        "considerflag()": {
          "definition": "Consider_flag__(int rowNumber)"
        },
        "verifysymbolis()": {
          "definition": "Verify_symbol_is__(string symbolDescription)"
        },
        "bindpersonflags()": {
          "definition": "BindPersonFlags(IList<FlagTypeCompactDTO> personFlags)"
        },
        "verifydescriptionis()": {
          "definition": "Verify_description_is__(string description)"
        },
        "verifythereareflagsinthelist()": {
          "definition": "Verify_there_are__flags_in_the_list(int numberOfFlags)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PersonFlagListCompactWorkflow"
    },
    "onlineeventassignment": {
      "namespace": "",
      "methods": {
        "verifyisacandidate()": {
          "definition": "Verify__is_a_candidate(string personName)"
        },
        "requestassignment()": {
          "definition": "Request_assignment()"
        },
        "askuseriftheywanttostarttraining()": {
          "definition": "AskUserIfTheyWantToStartTraining(int id)"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for__(string eventName)"
        },
        "bind()": {
          "definition": "Bind()"
        },
        "verifycandidatesareavailable()": {
          "definition": "Verify__candidates_are_available(int number)"
        },
        "returntotraininglist()": {
          "definition": "ReturnToTrainingList()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "OnlineEventAssignmentWorkflow"
    },
    "employmentlist": {
      "namespace": "",
      "methods": {
        "verifyassignmentstatusis()": {
          "definition": "Verify_assignment_status_is__(string status)"
        },
        "verifylistcontainsemploymentrecords()": {
          "definition": "Verify_list_contains__employment_records(int numItems)"
        },
        "clicktoshowhistory()": {
          "definition": "Click_to_show_history()"
        },
        "verifysecuritymessageisshown()": {
          "definition": "Verify_security_message_is_shown()"
        },
        "verifyistemporary()": {
          "definition": "Verify_is_temporary()"
        },
        "verifyaddemploymentbuttonishidden()": {
          "definition": "Verify_add_employment_button_is_hidden()"
        },
        "showlinktohidehistory()": {
          "definition": "ShowLinkToHideHistory()"
        },
        "verifyenddateis()": {
          "definition": "Verify_end_date_is__(DateTime end)"
        },
        "verifysecuritymessageishidden()": {
          "definition": "Verify_security_message_is_hidden()"
        },
        "verifyappointmenttypeis()": {
          "definition": "Verify_appointment_type_is__(string appoinmentType)"
        },
        "browsetoemploymentfor()": {
          "definition": "Browse_to_employment_for__(string personName)"
        },
        "findrowwithorganizationandhiredate()": {
          "definition": "Find_row_with_organization__and_hire_date__(string organizationName, DateTime hireDate)"
        },
        "verifydutylocationsarehidden()": {
          "definition": "Verify_duty_locations_are_hidden()"
        },
        "setsupervisedemployeeslinkvisibility()": {
          "definition": "SetSupervisedEmployeesLinkVisibility(bool visible)"
        },
        "finddutyassignmentwithlocationandstartdate()": {
          "definition": "Find_duty_assignment_with_location__and_start_date__(string location, DateTime start)"
        },
        "displayemployment()": {
          "definition": "DisplayEmployment(IList<EmploymentDTO> employments)"
        },
        "verifyisnottemporary()": {
          "definition": "Verify_is_not_temporary()"
        },
        "verifyaddemploymentbuttonisshown()": {
          "definition": "Verify_add_employment_button_is_shown()"
        },
        "verifynodatamessageisshown()": {
          "definition": "Verify_no_data_message_is_shown()"
        },
        "verifysupervisoris()": {
          "definition": "Verify_supervisor_is__(string supervisorName)"
        },
        "verifytitlerankis()": {
          "definition": "Verify_title_rank_is__(string title)"
        },
        "clicktohidehistory()": {
          "definition": "Click_to_hide_history()"
        },
        "verifystatusis()": {
          "definition": "Verify_status_is__(string status)"
        },
        "verifyemploymenttypeis()": {
          "definition": "Verify_employment_type_is__(string employmentType)"
        },
        "verifyorganizationlinkishidden()": {
          "definition": "Verify_organization_link_is_hidden()"
        },
        "verifydutylocationsareshown()": {
          "definition": "Verify_duty_locations_are_shown()"
        },
        "showhistorylinks()": {
          "definition": "ShowHistoryLinks()"
        },
        "verifynodatamessageishidden()": {
          "definition": "Verify_no_data_message_is_hidden()"
        },
        "verifyorganizationlinkisshown()": {
          "definition": "Verify_organization_link_is_shown()"
        },
        "verifyrecordcontainsdutyassignments()": {
          "definition": "Verify_record_contains__duty_assignments(int numItems)"
        },
        "verifyhaspotentialgapmessageishidden()": {
          "definition": "Verify_has_potential_gap_message_is_hidden()"
        },
        "verifyhaspotentialgapmessageisshown()": {
          "definition": "Verify_has_potential_gap_message_is_shown()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EmploymentListWorkflow"
    },
    "addeditattendance": {
      "namespace": "",
      "methods": {
        "setallstudentspresent()": {
          "definition": "Set_all_students_present()"
        },
        "setexcusereason()": {
          "definition": "Set_excuse_reason(string reason)"
        },
        "setallstudentsabsent()": {
          "definition": "Set_all_students_absent()"
        },
        "considerrowforstudent()": {
          "definition": "Consider_row_for_student__(string studentName)"
        },
        "verifydoesnotappearinlist()": {
          "definition": "Verify__does_not_appear_in_list(string studentName)"
        },
        "bindstudents()": {
          "definition": "BindStudents(List<PersonAttendanceDTO> students)"
        },
        "setasexcused()": {
          "definition": "Set_as_excused()"
        },
        "verifysaveandaddanotheris()": {
          "definition": "Verify_save_and_add_another_is__(string enabledDisabled)"
        },
        "setasunexcused()": {
          "definition": "Set_as_unexcused()"
        },
        "setaspresent()": {
          "definition": "Set_as_present()"
        },
        "setasabsent()": {
          "definition": "Set_as_absent()"
        },
        "verifytherearestudents()": {
          "definition": "Verify_there_are__students(int studentCount)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AddEditAttendanceWorkflow"
    },
    "verifyresourceassignment": {
      "namespace": "",
      "methods": {
        "enterverificationdateinfuture()": {
          "definition": "Enter_verification_date_in_future()"
        },
        "selectihaveverifiedassignment()": {
          "definition": "Select_I_have_verified_assignment()"
        },
        "enterverificationdate()": {
          "definition": "Enter_verification_date__(DateTime value)"
        },
        "browsetoverifyassignmentforvehiclefromorganization()": {
          "definition": "Browse_to_verify_assignment_for_vehicle__from_organization__(string name, string organization)"
        },
        "verifyassignmentisfor()": {
          "definition": "Verify_assignment_is_for__(string text)"
        },
        "verifyinvalidverificationdatebeforeassignmentdate()": {
          "definition": "Verify_invalid_verification_date_before_assignment_date()"
        },
        "verifyihaveverifiedassignment()": {
          "definition": "Verify_I_have_verified_Assignment()"
        },
        "browsetoverifyassignmentforfirearmfromorganization()": {
          "definition": "Browse_to_verify_assignment_for_firearm__from_organization__(string firearmName, string organization)"
        },
        "setupdatevalidator()": {
          "definition": "SetupDateValidator(DateTime today, DateTime minimum)"
        },
        "verifyisanemployeeoption()": {
          "definition": "Verify__is_an_employee_option(string name)"
        },
        "verifyinvalidverificationdateinfuture()": {
          "definition": "Verify_invalid_verification_date_in_future()"
        },
        "verifythereareemployeeoptions()": {
          "definition": "Verify_there_are__employee_options(int count)"
        },
        "verifyverificationdateis()": {
          "definition": "Verify_verification_date_is__( DateTime expectedDate )"
        },
        "browsetoverifyassignmentforaccountablepropertyfromorganization()": {
          "definition": "Browse_to_verify_assignment_for_accountable_property__from_organization__(string acctPropName, string organization)"
        },
        "selecthasverifiedassignment()": {
          "definition": "Select_has_verified_assignment(string person)"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "verifyverificationcommentsare()": {
          "definition": "Verify_verification_comments_are__( string expectedComments )"
        },
        "browsetoverifyassignmentforanimalfromorganization()": {
          "definition": "Browse_to_verify_assignment_for_animal__from_organization__(string name, string organization)"
        },
        "enterverificationcomments()": {
          "definition": "Enter_verification_comments__(string comments)"
        },
        "setupassignmentdetails()": {
          "definition": "SetupAssignmentDetails(int inventoryItemId, ResourceType type, string inventoryItemName, string assignee)"
        },
        "waitforclicktolandusonverifypage()": {
          "definition": "Wait_for_click_to_land_us_on_verify_page()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "VerifyResourceAssignmentWorkflow"
    },
    "gradingscalemanagement": {
      "namespace": "",
      "methods": {
        "savescale()": {
          "definition": "Save_Scale()"
        },
        "ahighscoreisthanalowscore()": {
          "definition": "A_high_score_is_than_a_low_score(string betterOrWorse)"
        },
        "addscalerangeformattedfromtois()": {
          "definition": "Add_Scale_range_formatted__from__to__is__(TimeEntryFormat format, string min, string max, decimal grade)"
        },
        "verifytimedscalehasminimum()": {
          "definition": "Verify_Timed_Scale_has_Minimum()"
        },
        "verifyscalehasranges()": {
          "definition": "Verify_Scale_has_ranges( int expected )"
        },
        "timedscalehightimeisthanlowtime()": {
          "definition": "Timed_Scale_high_time_is_than_low_time(string betterOrWorse)"
        },
        "verifyrangewithgradeisfromto()": {
          "definition": "Verify_range_with_grade_is_from_to(decimal grade, string min, string max)"
        },
        "validatingscalefortestreturnsoverlapvalidation()": {
          "definition": "Validating_scale_for_test_returns_overlap_validation(string testName)"
        },
        "timedscaledoesnothavemaximum()": {
          "definition": "Timed_Scale_does_not_have_Maximum()"
        },
        "addscalerangefromtowithgradeisrated()": {
          "definition": "Add_Scale_range_from_to_with_grade_is_rated(string min, string max, decimal grade, string rated)"
        },
        "verifytimedscaledoesnothavemaximum()": {
          "definition": "Verify_Timed_Scale_does_not_have_Maximum()"
        },
        "timedscaledoesnothaveminimum()": {
          "definition": "Timed_Scale_does_not_have_Minimum()"
        },
        "verifyhightimeisthanlowtime()": {
          "definition": "Verify_high_time_is_than_low_time( string betterOrWorse )"
        },
        "definenumericscale()": {
          "definition": "Define_numeric_scale(string scaleName)"
        },
        "retrievelistofscales()": {
          "definition": "Retrieve_List_of_Scales()"
        },
        "removerangewithgrade()": {
          "definition": "Remove_Range_with_Grade( int grade )"
        },
        "addscalerangefromtois()": {
          "definition": "Add_Scale_range_from_to_is(string min, string max, decimal grade)"
        },
        "validatingscalefortestreturnsgapvalidation()": {
          "definition": "Validating_scale_for_test_returns_gap_validation(string testName)"
        },
        "makeretrievedscalenamedthetopic()": {
          "definition": "Make_retrieved_scale_named_the_topic( string scaleName )"
        },
        "loadscalenamed()": {
          "definition": "Load_scale_named(string scaleName)"
        },
        "definetimedscale()": {
          "definition": "Define_Timed_Scale( string scaleName )"
        }
      },
      "parent-name": "Workflow",
      "class-name": "GradingScaleManagement"
    },
    "accountablepropertyrecord": {
      "namespace": "",
      "methods": {
        "verifyredirectedtoorganizationpage()": {
          "definition": "Verify_redirected_to_organization_page()"
        },
        "verifymakemodelis()": {
          "definition": "Verify_makemodel_is__(string makeModel)"
        },
        "redirecttoincidentpage()": {
          "definition": "RedirectToIncidentPage(int inventoryItemID)"
        },
        "verifydocumentsbandisvisible()": {
          "definition": "Verify_documents_band_is_visible()"
        },
        "verifyfullsizeimageis()": {
          "definition": "Verify_fullsize_image_is__(string fileName)"
        },
        "confirmdeletewithcomment()": {
          "definition": "Confirm_Delete_with_comment( string deleteComment )"
        },
        "redirecttocompliancesearchresults()": {
          "definition": "RedirectToComplianceSearchResults()"
        },
        "verifyredirectedtoassignmentpage()": {
          "definition": "Verify_redirected_to_assignment_page()"
        },
        "verifyserialnumberis()": {
          "definition": "Verify_serial_number_is__(string serial)"
        },
        "redirecttoorganization()": {
          "definition": "RedirectToOrganization(int organizationID)"
        },
        "redirecttosearchresults()": {
          "definition": "RedirectToSearchResults()"
        },
        "verifyowneris()": {
          "definition": "Verify_owner_is__(string owner)"
        },
        "redirecttoresourceoverview()": {
          "definition": "RedirectToResourceOverview(string resourceId)"
        },
        "redirecttolistpage()": {
          "definition": "RedirectToListPage(int organizationID)"
        },
        "verifycertificationsbandishidden()": {
          "definition": "Verify_certifications_band_is_hidden()"
        },
        "verifystatusis()": {
          "definition": "Verify_status_is__(string status)"
        },
        "verifyredirectedtolistpage()": {
          "definition": "Verify_redirected_to_list_page()"
        },
        "verifydescriptionis()": {
          "definition": "Verify_description_is__(string descr)"
        },
        "verifydisplaynameis()": {
          "definition": "Verify_display_name_is__( string name )"
        },
        "initdocuments()": {
          "definition": "InitDocuments()"
        },
        "verifyredirectedtopersonpage()": {
          "definition": "Verify_redirected_to_person_page()"
        },
        "verifyredirectedtocompliancemonitor()": {
          "definition": "Verify_redirected_to_compliance_monitor()"
        },
        "redirecttoperson()": {
          "definition": "RedirectToPerson(int personID)"
        },
        "verifydeleteisdenied()": {
          "definition": "Verify_Delete_is_denied()"
        },
        "initcertifications()": {
          "definition": "InitCertifications()"
        },
        "verifyuserpromptedwithdeleteconfirmation()": {
          "definition": "Verify_user_prompted_with_delete_confirmation()"
        },
        "showassignedinformation()": {
          "definition": "ShowAssignedInformation(string assigneeName, string statusChangeName, string statusChangeDate)"
        },
        "verifyuserpromtedwithdeletealternativesbecauseaccountablepropertyinuse()": {
          "definition": "Verify_user_promted_with_delete_alternatives_because_accountable_property_in_use()"
        },
        "verifyaccessoriesis()": {
          "definition": "Verify_accessories_is__(string accessories)"
        },
        "clickmakeinactive()": {
          "definition": "Click_Make_Inactive()"
        },
        "verifyredirectedtoincidentpage()": {
          "definition": "Verify_redirected_to_incident_page()"
        },
        "verifyredirectedtocompliancesearchresults()": {
          "definition": "Verify_redirected_to_compliance_search_results()"
        },
        "requestdelete()": {
          "definition": "Request_Delete()"
        },
        "verifyassetnumberis()": {
          "definition": "Verify_asset_number_is__(string asset)"
        },
        "redirecttoresourcesearch()": {
          "definition": "RedirectToResourceSearch()"
        },
        "verifydocumentsbandishidden()": {
          "definition": "Verify_documents_band_is_hidden()"
        },
        "verifycertificationsbandisvisible()": {
          "definition": "Verify_certifications_band_is_visible()"
        },
        "showloststoleninformation()": {
          "definition": "ShowLostStolenInformation(string status, string statusChangeName, string statusChangeDate)"
        },
        "verifyredirectedtosplashboard()": {
          "definition": "Verify_redirected_to_splashboard()"
        },
        "verifypurchasedateis()": {
          "definition": "Verify_purchase_date_is__(string date)"
        },
        "browsetoaccountablepropertyrecordfor()": {
          "definition": "Browse_to__accountable_property_record_for__(string orgName, string propertyDisplayName)"
        },
        "redirecttosplashboard()": {
          "definition": "RedirectToSplashboard()"
        },
        "promptuserwithdeleteconfirmation()": {
          "definition": "PromptUserWithDeleteConfirmation()"
        },
        "redirecttoresourcecompliancemonitor()": {
          "definition": "RedirectToResourceComplianceMonitor()"
        },
        "redirecttoresourcelist()": {
          "definition": "RedirectToResourceList()"
        },
        "verifytypeis()": {
          "definition": "Verify_type_is__(string propType)"
        },
        "redirecttocompliancemonitor()": {
          "definition": "RedirectToComplianceMonitor()"
        },
        "redirecttoassignmentpage()": {
          "definition": "RedirectToAssignmentPage(int inventoryItemID)"
        },
        "verifyredirectedtosearchresults()": {
          "definition": "Verify_redirected_to_search_results()"
        },
        "verifypurchasepriceis()": {
          "definition": "Verify_purchase_price_is__(string price)"
        },
        "promptuserwithdeletealternatives()": {
          "definition": "PromptUserWithDeleteAlternatives(InventoryUsageDTO usageDTO)"
        },
        "verifyexpirationdateis()": {
          "definition": "Verify_expiration_date_is__(string expirationDate)"
        },
        "verifyredirectedtoresourcecompliancemonitor()": {
          "definition": "Verify_redirected_to_Resource_Compliance_Monitor()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AccountablePropertyRecord"
    },
    "assessmenttestpersistence": {
      "namespace": "",
      "methods": {
        "canroundtripscoredassessmenttestproperties()": {
          "definition": "Can_roundtrip_ScoredAssessmentTest_properties()"
        },
        "canroundtripassessmenttestproperties()": {
          "definition": "Can_roundtrip_AssessmentTest_properties()"
        },
        "canroundtripautomatedtestingtestproperties()": {
          "definition": "Can_roundtrip_AutomatedTestingTest_properties()"
        },
        "canroundtriptimedtestproperties()": {
          "definition": "Can_roundtrip_TimedTest_properties()"
        },
        "canroundtripfirearmstestproperties()": {
          "definition": "Can_roundtrip_FirearmsTest_properties()"
        },
        "canroundtrippassfailtestproperties()": {
          "definition": "Can_roundtrip_PassFailTest_properties()"
        },
        "canroundtripmultiparttestproperties()": {
          "definition": "Can_roundtrip_MultiPartTest_properties()"
        },
        "canroundtrippassfailchecklisttestproperties()": {
          "definition": "Can_roundtrip_PassFailChecklistTest_properties()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "AssessmentTestPersistence"
    },
    "classsetup": {
      "namespace": "",
      "methods": {
        "settitleto()": {
          "definition": "set_title_to__(string title)"
        },
        "verifyemergencycontactrelationshipis()": {
          "definition": "Verify_emergency_contact_relationship_is(string value)"
        },
        "addcontacttype()": {
          "definition": "Add_contact_type__(string contactTypeName)"
        },
        "setdateofbirthto()": {
          "definition": "set_date_of_birth_to__(DateTime dob)"
        },
        "setceucreditsto()": {
          "definition": "set_ceu_credits_to__(decimal credits)"
        },
        "createpersonwithacademyid()": {
          "definition": "create_person__with_academy_id__(string personName, string academyId)"
        },
        "addprimaryemploymentatusingtitle()": {
          "definition": "add_primary_employment_at__using_title__(string orgName, string titleName)"
        },
        "addactivitytoclassnamed()": {
          "definition": "add_activity_to_class_named__(string activityName)"
        },
        "saveclass()": {
          "definition": "Save_class()"
        },
        "addactivitytoclassnamedthatstudentsmustpasstograduate()": {
          "definition": "add_activity_to_class_named__that_students_must_pass_to_graduate(string activityName)"
        },
        "saveperson()": {
          "definition": "save_person()"
        },
        "addnewprimaryemailaddress()": {
          "definition": "add_new_primary_email_address__(string email)"
        },
        "setemergencycontactphone2totypewithnumberext()": {
          "definition": "Set_emergency_contact_Phone_2_to_type_with_number_ext(string phoneType, string phoneNumber, string phoneExt)"
        },
        "createprogramcategory()": {
          "definition": "Create_program_category(string categoryName)"
        },
        "createclasstemplatenamedinprogram()": {
          "definition": "create_class_template_named__in_program__(string templateName, string programType)"
        },
        "seteeoccategoryto()": {
          "definition": "set_eeoc_category_to__(string category)"
        },
        "setsendingorganizationto()": {
          "definition": "set_sending_organization_to__(string orgName)"
        },
        "enterscoreofforontest()": {
          "definition": "enter_score_of__for__on_test__(string percent, string personName, string testName)"
        },
        "setsuffixto()": {
          "definition": "set_suffix_to__(string suffix)"
        },
        "createorganizationnamedunderparentgroupoftype()": {
          "definition": "Create_Organization_named__under_parent_group__of_type__(string orgName, string parentGroup, string type)"
        },
        "setemergencycontactto()": {
          "definition": "Set_emergency_contact_to(string emergencyContact)"
        },
        "setemergencycontactrelationshipto()": {
          "definition": "Set_emergency_contact_relationship_to(string contactRelationship)"
        },
        "addasprimaryauthoritytoorganizationusingcontacttype()": {
          "definition": "add__as_primary_authority_to_organization__using_contact_type__(string person, string orgName, string contactType)"
        },
        "setcommentto()": {
          "definition": "set_comment_to__(string comment)"
        },
        "createorganizationnamedoftypeunderbaseparentgroup()": {
          "definition": "Create_organization_named__of_type__under_base_parent_group(string orgName, string type)"
        },
        "setenrollmentgenderto()": {
          "definition": "set_enrollment_gender_to__(Gender gender)"
        },
        "addnewprimaryphonewithtypetoperson()": {
          "definition": "add_new_primary_phone__with_type__to_person__(string phoneNbr, string type, string personName)"
        },
        "setemergencycontactphone1totypewithnumberext()": {
          "definition": "Set_emergency_contact_Phone_1_to_type_with_number_ext(string phoneType, string phoneNumber, string phoneExt)"
        },
        "enrollin()": {
          "definition": "enroll__in__(string personName, string className)"
        },
        "setssnto()": {
          "definition": "set_ssn_to__(string ssn)"
        },
        "saveenrollment()": {
          "definition": "save_enrollment()"
        },
        "addnewtesttonamed()": {
          "definition": "add_new__test_to__named__(TestType testType, string activityName, string testName)"
        },
        "addnewtesttonamedthatstudentsmustpasstograduate()": {
          "definition": "add_new_test_to__named__that_students_must_pass_to_graduate(TestType testType, string activityName, string testName)"
        },
        "setmiddlenameto()": {
          "definition": "set_middle_name_to__(string middleName)"
        },
        "addnewprimaryphonewithtypetoorganization()": {
          "definition": "add_new_primary_phone__with_type__to_organization__(string phoneNbr, string type, string orgName)"
        },
        "verifyemergencycontactis()": {
          "definition": "Verify_emergency_contact_is(string emergencyContact)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "ClassSetup"
    },
    "recommendedassignments": {
      "namespace": "",
      "methods": {
        "verifytherearerows()": {
          "definition": "Verify_there_are__rows(int num)"
        },
        "inchangepopoverselectforpricelevel()": {
          "definition": "In_change_popover_Select__for_price_level(string levelName)"
        },
        "inchangepopoververifyisanonrecommendedalterateroom()": {
          "definition": "In_change_popover_Verify__is_a_non_recommended_alterate_room(string name)"
        },
        "dispose()": {
          "definition": "Dispose()"
        },
        "inchangepopoverselectforusage()": {
          "definition": "In_change_popover_Select__for_usage(string usageName)"
        },
        "inchangepopoververifyisarecommendedalterateroom()": {
          "definition": "In_change_popover_Verify__is_a_recommended_alterate_room(string name)"
        },
        "inchangepopoververifyisnotanalternateroom()": {
          "definition": "In_change_popover_Verify__is_not_an_alternate_Room(string name)"
        },
        "inchangepopoverclickchangerecommendation()": {
          "definition": "In_change_popover_Click_change_recommendation()"
        },
        "verifydonotassignfor()": {
          "definition": "Verify_do_not_assign_for__(string name)"
        },
        "checkshowassignedinfilters()": {
          "definition": "Check_show_assigned_in_filters()"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_Page_for_(string reservationName)"
        },
        "inchangepopoververifypricelevelscontain()": {
          "definition": "In_change_popover_Verify_price_levels_contain__(string pricelevel)"
        },
        "browsetopageforclass()": {
          "definition": "Browse_to_Page_for_class(string className)"
        },
        "savefilters()": {
          "definition": "Save_filters()"
        },
        "verifynorecommendationforwithmessage()": {
          "definition": "Verify_no_recommendation_for_with_message( string name, string message)"
        },
        "browsetopageforstartingonfloor()": {
          "definition": "Browse_to_Page_for__starting_on_floor__(string reservationName, string floorName)"
        },
        "inchangepopoverselectforalternateroom()": {
          "definition": "In_change_popover_Select__for_alternate_room(string roomName)"
        },
        "uncheckshowassignedinfilters()": {
          "definition": "Uncheck_show_assigned_in_filters()"
        },
        "inchangepopoververifyisacomparablealterateroom()": {
          "definition": "In_change_popover_Verify__is_a_comparable_alterate_room(string name)"
        },
        "browsetopageforresident()": {
          "definition": "Browse_to_page_for_resident(string residentName)"
        },
        "verifyrecommendationforis()": {
          "definition": "Verify_recommendation_for__is__(string name, string room)"
        },
        "clickdonotassignfor()": {
          "definition": "Click_do_not_assign_for__(string personName)"
        },
        "clickchangefor()": {
          "definition": "Click_Change_for__(string residentName)"
        },
        "bindrecommendations()": {
          "definition": "BindRecommendations(List<RoomRecommendationDTO> recommendations)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "RecommendedAssignmentsWorkflow"
    },
    "editadhocfilter": {
      "namespace": "",
      "methods": {
        "verifyfilteris()": {
          "definition": "Verify_filter_is__(string query)"
        },
        "navigatetoreturnurl()": {
          "definition": "NavigateToReturnUrl()"
        },
        "verifythatfiltervalid()": {
          "definition": "Verify_that_filter__valid(string isIsNot)"
        },
        "bindfilterfield()": {
          "definition": "BindFilterField(AdHocFieldDTO fields)"
        },
        "clearfilter()": {
          "definition": "Clear_filter()"
        },
        "and()": {
          "definition": "And(string field, string op, string arg)"
        },
        "enterasquery()": {
          "definition": "Enter__as_query(string query)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "browsetopageforadhocexport()": {
          "definition": "Browse_to_page_for_adhoc_export__(string exportName)"
        },
        "or()": {
          "definition": "Or(string field, string op, string arg)"
        },
        "query()": {
          "definition": "Query(string field, string op, string arg)"
        },
        "navigatetopage()": {
          "definition": "NavigateToPage(AdHocWizardPage page)"
        },
        "queryand()": {
          "definition": "Query______and__(string field, string op, string arg1, string arg2)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EditAdHocFilterWorkflow"
    },
    "enrollmentexport": {
      "namespace": "",
      "methods": {
        "exportallstudentsfor()": {
          "definition": "Export_all_students_for__(string className)"
        },
        "thereshouldbenocolumnnamed()": {
          "definition": "there_should_be_no_column_named__(string column)"
        },
        "findexportrowfor()": {
          "definition": "Find_export_row_for__(string personName)"
        },
        "shouldbe()": {
          "definition": "__should_be__(string field, string value)"
        },
        "exportallstudentsforwithsensitivedata()": {
          "definition": "Export_all_students_for__with_sensitive_data(string className)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "EnrollmentExport"
    },
    "workforceportal": {
      "namespace": "",
      "methods": {
        "clickpreviouspagelink()": {
          "definition": "Click_previous_page_link()"
        },
        "setsortcolumnto()": {
          "definition": "Set_Sort_Column_to__(string column)"
        },
        "verifyexporthasrows()": {
          "definition": "Verify_export_has__rows(int rowCount)"
        },
        "verifythatthesupervisorfortheselectedrecordis()": {
          "definition": "Verify_that_the_supervisor_for_the_selected_record_is_(string name)"
        },
        "clicktoupdateselectedemploymentrecord()": {
          "definition": "Click_to_update_selected_employment_record()"
        },
        "dispose()": {
          "definition": "Dispose()"
        },
        "verifynextexportcolumnis()": {
          "definition": "Verify_next_export_column_is__(string name)"
        },
        "verifythatinactiveemployeesshow()": {
          "definition": "Verify_that_inactive_employees__show(string doDoNot)"
        },
        "verifythatemploymentstatusactivefortheselectedrecord()": {
          "definition": "Verify_that_employment_status__active_for_the_selected_record(string isIsNot)"
        },
        "clickexport()": {
          "definition": "Click_export()"
        },
        "verifythatthetitlerankfortheselectedrecordis()": {
          "definition": "Verify_that_the_title_rank_for_the_selected_record_is__(string titleRank)"
        },
        "verifythattheselectedrecordbeupdatedbythecurrentuser()": {
          "definition": "Verify_that_the_selected_record__be_updated_by_the_current_user(string canCanNot)"
        },
        "clicklastpagelink()": {
          "definition": "Click_last_page_link()"
        },
        "updatepagercontrols()": {
          "definition": "UpdatePagerControls()"
        },
        "verifyexportvalueisfor()": {
          "definition": "Verify_export_value_is__for__(string value, string colName)"
        },
        "verifythattheactionmenutoevaluateperformanceisnotvisible()": {
          "definition": "Verify_that_the_action_menu_to_evaluate_performance_is_not_visible()"
        },
        "verifythattherearenopersonnelchangerequestsdisplayed()": {
          "definition": "Verify_that_there_are_no_personnel_change_requests_displayed()"
        },
        "verifythattheappointmenttypefortheselectedrecordis()": {
          "definition": "Verify_that_the_appointment_type_for_the_selected_record_is__(string appointmentType)"
        },
        "clicktoshowallemployments()": {
          "definition": "Click_to_show_all_employments()"
        },
        "verifytheemployeeinthepersonnellistishassupervisor()": {
          "definition": "Verify_the__employee_in_the_personnel_list_is__has_supervisor__(string ordinal, string personName, string supervisorName)"
        },
        "verifythattheactionmenutoevaluateperformanceisvisible()": {
          "definition": "Verify_that_the_action_menu_to_evaluate_performance_is_visible()"
        },
        "setpagesizeto()": {
          "definition": "Set_Page_Size_to__(string pageSize)"
        },
        "verifythattherequestbecleared()": {
          "definition": "Verify_that_the_request_be_cleared(string ordinal, string canCannot)"
        },
        "verifythatthereareemployeesinthepersonnellist()": {
          "definition": "Verify_that_there_are__employees_in_the_personnel_list(int personnelCount)"
        },
        "clicknextpagelink()": {
          "definition": "Click_next_page_link()"
        },
        "cleartherequest()": {
          "definition": "Clear_the_request(string ordinal)"
        },
        "verifythattheemploymenttypefortheselectedrecordis()": {
          "definition": "Verify_that_the_employment_type_for_the_selected_record_is__(string employmentType)"
        },
        "considertheemploymentrecordoffororganizationwiththemostrecenthiredateoffromthepersonnellist()": {
          "definition": "Consider_the_employment_record_of__for_organization__with_the_most_recent_hire_date_of__from_the_personnel_list(string personName, string organizationName, DateTime mostRecentHireDate)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifythatthelinktoincompleteperformanceevaluationsisvisible()": {
          "definition": "Verify_that_the_link_to_incomplete_performance_evaluations_is_visible()"
        },
        "clicktoshowallactiveemploymentsonly()": {
          "definition": "Click_to_show_all_active_employments_only()"
        },
        "bindpendingpersonnelchanges()": {
          "definition": "BindPendingPersonnelChanges(IList<PendingPersonnelChangePortalDTO> personnelChanges)"
        },
        "verifyexportcolumnis()": {
          "definition": "Verify_export_column__is__(int colNum, string name)"
        },
        "clickfirstpagelink()": {
          "definition": "Click_first_page_link()"
        },
        "verifythatthecurrentpageis()": {
          "definition": "Verify_that_the_current_page_is__(int pageIndex)"
        },
        "clickpagelink()": {
          "definition": "Click_page__link(int pageIndex)"
        },
        "verifythattheselectedrecordbeupdated()": {
          "definition": "Verify_that_the_selected_record__be_updated(string canCannot)"
        },
        "verifythattheemploymentstatusfortheselectedrecordis()": {
          "definition": "Verify_that_the_employment_status_for_the_selected_record_is__(string employmentStatus)"
        },
        "verifytheemployeeinthepersonnellistishastitle()": {
          "definition": "Verify_the__employee_in_the_personnel_list_is__has_title__(string ordinal, string personName, string title)"
        },
        "verifythatthechangelistisnotvisible()": {
          "definition": "Verify_that_the_change_list_is_not_visible()"
        },
        "verifythatisincludedinlistofavailableperformancereports()": {
          "definition": "Verify_that__is_included_in_list_of_available_performance_reports(string reportName)"
        },
        "forexportrow()": {
          "definition": "For_export_row__(int rowNum)"
        },
        "verifythatthelinktoapproveperformanceevaluationsisvisible()": {
          "definition": "Verify_that_the_link_to_approve_performance_evaluations_is_visible()"
        },
        "verifythatthelinktoapproveperformanceevaluationsisnotvisible()": {
          "definition": "Verify_that_the_link_to_approve_performance_evaluations_is_not_visible()"
        },
        "verifythatthelinktoincompleteperformanceevaluationsisnotvisible()": {
          "definition": "Verify_that_the_link_to_incomplete_performance_evaluations_is_not_visible()"
        },
        "verifythattherearepersonnelchangerequestsinthelist()": {
          "definition": "Verify_that_there_are__personnel_change_requests_in_the_list(int changeRequestCount)"
        },
        "bindpersonnel()": {
          "definition": "BindPersonnel(IList<PersonnelDTO> personnel)"
        },
        "considertheemploymentrecordofwiththemostrecenthiredateoffromthepersonnellist()": {
          "definition": "Consider_the_employment_record_of__with_the_most_recent_hire_date_of__from_the_personnel_list(string personName, DateTime mostRecentHireDate)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "WorkforcePortalWorkflow"
    },
    "addeditcapability": {
      "namespace": "",
      "methods": {
        "browsetopagetoaddnewcapabilityfor()": {
          "definition": "Browse_to_page_to_add_new_capability_for__(string goal)"
        },
        "browsetopagetoeditcapabilityfor()": {
          "definition": "Browse_to_page_to_edit_capability__for__(string capability, string goal)"
        },
        "showpersonsearch()": {
          "definition": "ShowPersonSearch(int capabilityID)"
        },
        "selectscheduletemplate()": {
          "definition": "Select_schedule_template(string scheduleTemplate)"
        },
        "selecttoprojecttheseclassesinadditiontoalreadyscheduledevents()": {
          "definition": "Select_to_project_these_classes_in_addition_to_already_scheduled_events()"
        },
        "showinventorysearch()": {
          "definition": "ShowInventorySearch(int capabilityID)"
        },
        "selectclasstemplate()": {
          "definition": "Select_class_template(string templateName)"
        },
        "clicksave()": {
          "definition": "Click_save()"
        },
        "selecttoprojectonlytheseclasses()": {
          "definition": "Select_to_project_only_these_classes()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AddEditCapabilityWorkflow"
    },
    "studentregistrationupdateverification": {
      "namespace": "",
      "methods": {
        "transferregisteredstudentsfromto()": {
          "definition": "Transfer_registered_students__from__to__(List<string> studentNames, string fromClass, string toClass)"
        },
        "initialize()": {
          "definition": "Initialize(List<int> studentRegistrationIDs, string action, int? classID)"
        },
        "bindstudentfailures()": {
          "definition": "BindStudentFailures(List<StudentRegistrationUpdateVerificationDTO> verificationDTOs)"
        },
        "bindstudents()": {
          "definition": "BindStudents(List<StudentRegistrationUpdateVerificationDTO> verificationDTOs)"
        },
        "verifynoerrorsareshown()": {
          "definition": "Verify_no_errors_are_shown()"
        },
        "show()": {
          "definition": "Show()"
        },
        "raiseinitializecontrol()": {
          "definition": "Raise_InitializeControl()"
        },
        "enrollregisteredstudentsin()": {
          "definition": "Enroll_registered_students__in_(List<string> studentNames, string className)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "StudentRegistrationUpdateVerificationWorkflow"
    },
    "hoovervalidation": {
      "namespace": "",
      "methods": {
        "correctlistmismatchforwith()": {
          "definition": "Correct_list_mismatch__for__with__(string error, string column, string correction)"
        },
        "resolvevalidationissuewith()": {
          "definition": "Resolve_validation_issue__with__(string column, ValidationResolution resolution)"
        },
        "navigatetoreturnurl()": {
          "definition": "NavigateToReturnUrl()"
        },
        "verifythatcolumnhasvalidationerrors()": {
          "definition": "Verify_that_column__has__validation_errors(string column, int count)"
        },
        "verifythatcolumnhasnovalidationerrors()": {
          "definition": "Verify_that_column__has_no_validation_errors(string column)"
        },
        "clickcontinue()": {
          "definition": "Click_continue()"
        },
        "showcanceldialog()": {
          "definition": "ShowCancelDialog()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifylistmismatchforis()": {
          "definition": "Verify_list_mismatch__for__is__(string error, string column, string correction)"
        },
        "verifythattherearevalidationerrors()": {
          "definition": "Verify_that_there_are__validation_errors(int count)"
        },
        "verifythatvalidationispercentcomplete()": {
          "definition": "Verify_that_validation_is__percent_complete(int percent)"
        },
        "navigatetopage()": {
          "definition": "NavigateToPage(ImportWizardPage page)"
        },
        "showimportjobreallocated()": {
          "definition": "ShowImportJobReallocated()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "HooverValidationWorkflow"
    },
    "listofemployees": {
      "namespace": "",
      "methods": {
        "bindemployees()": {
          "definition": "BindEmployees(IEnumerable<SubordinateDto> employees)"
        },
        "setpersonname()": {
          "definition": "SetPersonName(string name)"
        },
        "verifytherearesupervisedemployees()": {
          "definition": "Verify_there_are__supervised_employees(int number)"
        },
        "verifyemployeenameisat()": {
          "definition": "Verify__employee_name_is__at_(string ordinal, string subordinateName, string orgName)"
        },
        "verifyemployeenameis()": {
          "definition": "Verify__employee_name_is_(string ordinal, string subordinateName)"
        },
        "verifysupervisoris()": {
          "definition": "Verify_supervisor_is_(string name)"
        },
        "browsetolistofemployeessupervisedby()": {
          "definition": "Browse_to_list_of_employees_supervised_by_(string personName)"
        },
        "browsetolistofemployeessupervisedbyat()": {
          "definition": "Browse_to_list_of_employees_supervised_by__at_(string personName, string orgName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ListOfEmployeesWorkflow"
    },
    "portallessonplanrequestreadonly": {
      "namespace": "",
      "methods": {
        "verifyhistoryitemreasonisblank()": {
          "definition": "Verify_history_item_Reason_is_blank()"
        },
        "verifyhistoryitemstatusis()": {
          "definition": "Verify_history_item_Status_is__(string statusDesc)"
        },
        "verifyislistedasaninstructorwithacademyidandprimaryorganizationandroleandhours()": {
          "definition": "Verify__is_listed_as_an_instructor_with_Academy_ID__and_Primary_Organization__and_role__and__hours(string personName, string academyId, string orgName, string roleName, decimal hours)"
        },
        "browsetopageforlessonplan()": {
          "definition": "Browse_to_Page_for_Lesson_Plan__(string lessonPlanCourseTitle)"
        },
        "bindrequesthistoryitems()": {
          "definition": "BindRequestHistoryItems(IList<LessonPlanRequestHistoryItemDTO> items)"
        },
        "verifyexistsinlistwithdescription()": {
          "definition": "Verify__exists_in_list_with_description__( string fileName, string fileDescription )"
        },
        "verifycandeletedocuments()": {
          "definition": "Verify_can_delete_documents()"
        },
        "verifycannotdeletedocuments()": {
          "definition": "Verify_cannot_delete_documents()"
        },
        "verifyuserwasnavigatedtothelessonplanlisthighlighting()": {
          "definition": "Verify_user_was_navigated_to_the_lesson_plan_list_highlighting__(string lessonPlanCourseTitle)"
        },
        "verifyisnotprotected()": {
          "definition": "Verify__is_not_protected( string fileName )"
        },
        "verifycanbeedited()": {
          "definition": "Verify__can_be_edited( string fileName )"
        },
        "verifycannotadddocument()": {
          "definition": "Verify_cannot_add_document()"
        },
        "verifyhistoryitemversionis()": {
          "definition": "Verify_history_item_Version_is__(int version)"
        },
        "verifycannotbeedited()": {
          "definition": "Verify__cannot_be_edited( string fileName )"
        },
        "verifyhistorycontainsitems()": {
          "definition": "Verify_history_contains__items(int numItems)"
        },
        "verifycanbeopenedforviewing()": {
          "definition": "Verify__can_be_opened_for_viewing( string fileName )"
        },
        "verifyhistoryitemuseris()": {
          "definition": "Verify_history_item_User_is__(string user)"
        },
        "verifythereareinstructorslisted()": {
          "definition": "Verify_there_are__instructors_listed(int count)"
        },
        "bindversionhistoryitems()": {
          "definition": "BindVersionHistoryItems(IList<LessonPlanVersionHistoryItemDTO> items)"
        },
        "verifyhistoryitemdateis()": {
          "definition": "Verify_history_item_Date_is__(DateTime date)"
        },
        "showdeletedlessonplanmessage()": {
          "definition": "ShowDeletedLessonPlanMessage()"
        },
        "verifycanadddocument()": {
          "definition": "Verify_can_add_document()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "considerrowofthehistory()": {
          "definition": "Consider_row__of_the_history(int rowNum)"
        },
        "verifytherearedocumentsinthelist()": {
          "definition": "Verify_there_are__documents_in_the_list( int count )"
        },
        "navigatetolistoflessonplans()": {
          "definition": "NavigateToListOfLessonPlans(int lessonPlanID)"
        },
        "verifyhistoryitemreasonis()": {
          "definition": "Verify_history_item_Reason_is__(string reason)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalLessonPlanRequestReadonlyWorkflow"
    },
    "approvedcoursetitleedit": {
      "namespace": "",
      "methods": {
        "clickdonebuttonfailsduetomissingcoursetitle()": {
          "definition": "Click_Done_button_fails_due_to_missing_course_title()"
        },
        "enterfortrainingenddate()": {
          "definition": "Enter__for_training_end_date(string endDate)"
        },
        "verifytrainingdescriptionis()": {
          "definition": "Verify_training_description_is__(string description)"
        },
        "clickdonebuttonfailsduetomissingorganizationselection()": {
          "definition": "Click_Done_button_fails_due_to_missing_organization_selection()"
        },
        "enterfortrainingstartdate()": {
          "definition": "Enter__for_training_start_date(string startDate)"
        },
        "enterfortrainingdescription()": {
          "definition": "Enter__for_training_description(string description)"
        },
        "clickpagedeletebutton()": {
          "definition": "Click_page_delete_button()"
        },
        "verifytrainingenddateis()": {
          "definition": "Verify_training_end_date_is__(string endDate)"
        },
        "verifytrainingcategoriesare()": {
          "definition": "Verify_training_categories_are(string courseTitle, string cats)"
        },
        "verifytrainingstartdateis()": {
          "definition": "Verify_training_start_date_is__(string startDate)"
        },
        "verifyselectedorganizationsare()": {
          "definition": "Verify_selected_organizations_are(string selectedOrgs)"
        },
        "verifypagetitleis()": {
          "definition": "Verify_page_title_is__(string pageTitle)"
        },
        "clickdonebutton()": {
          "definition": "Click_Done_button()"
        },
        "clickdonebuttonfailsduetoduplicatecoursetitle()": {
          "definition": "Click_Done_button_fails_due_to_duplicate_course_title()"
        },
        "verifytrainingcategoriesareavailable()": {
          "definition": "Verify__training_categories_are_available( int count)"
        },
        "clickpopupdeletebutton()": {
          "definition": "Click_popup_delete_button()"
        },
        "verifytitleis()": {
          "definition": "Verify_title_is__(string courseTitle)"
        },
        "verifyallorganizationsareselected()": {
          "definition": "Verify_all_organizations_are_selected()"
        },
        "clicklinkandclickselectedorganizationsradiobuttonwithnoorganizationsselected()": {
          "definition": "Click__link_and_click_Selected_Organizations_radio_button_with_no_organizations_selected(string linkName)"
        },
        "selecttrainingcategory()": {
          "definition": "Select_training_category__(string cat)"
        },
        "clicklinkandselectorganizationsnamed()": {
          "definition": "Click__link_and_select_organizations_named__(string linkName, string selectedOrganizations)"
        },
        "enterfortraininghours()": {
          "definition": "Enter__for_training_hours(int hours)"
        },
        "uncheckactivecheckbox()": {
          "definition": "Uncheck_active_checkbox()"
        },
        "verifydelete()": {
          "definition": "Verify__delete(string canDelete)"
        },
        "verifyactivecheckboxchecked()": {
          "definition": "Verify_active_checkbox__checked(string checkboxFlag)"
        },
        "verifytraininghoursis()": {
          "definition": "Verify_training_hours_is__(string hours)"
        },
        "selectcoursetitled()": {
          "definition": "Select_course_titled__(string courseTitle)"
        },
        "enterforcoursetitle()": {
          "definition": "Enter__for_course_title(string courseTitle)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ApprovedCourseTitleEdit"
    },
    "buttonattribute": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "ButtonAttribute"
    },
    "classtemplatecopy": {
      "namespace": "",
      "methods": {
        "selectforstatus()": {
          "definition": "Select__for_Status(string status)"
        },
        "navigatetotemplate()": {
          "definition": "NavigateToTemplate(int templateID)"
        },
        "verifyoriginalprogramtypeis()": {
          "definition": "Verify_original_program_type_is__(string programType)"
        },
        "verifyoriginalprogramcategoryis()": {
          "definition": "Verify_original_program_category_is__(string programCategory)"
        },
        "verifyoriginalreferenceis()": {
          "definition": "Verify_original_reference_is__(string reference)"
        },
        "clickbuttoncancel()": {
          "definition": "Click_Button_Cancel()"
        },
        "enterforschedulename()": {
          "definition": "Enter__for_Schedule_Name(string scheduleName)"
        },
        "clickbuttoncopy()": {
          "definition": "Click_Button_Copy()"
        },
        "verifypagenavigatedtoclasstemplate()": {
          "definition": "Verify_page_navigated_to_class_template__(string templateName)"
        },
        "browsetopageforclasstemplate()": {
          "definition": "Browse_to_page_for_class_template__(string templateName)"
        },
        "navigatetotrainingstructure()": {
          "definition": "NavigateToTrainingStructure(int templateID)"
        },
        "enterforname()": {
          "definition": "Enter__for_Name(string name)"
        },
        "verifyoriginalreferenceisblank()": {
          "definition": "Verify_original_reference_is_blank()"
        },
        "browsetopageforclass()": {
          "definition": "Browse_to_page_for_class__(string className)"
        },
        "checkcopystaffassignments()": {
          "definition": "Check_Copy_Staff_Assignments()"
        },
        "checkcopyinstructorauthorizations()": {
          "definition": "Check_Copy_Instructor_Authorizations()"
        },
        "bindclasstemplate()": {
          "definition": "BindClassTemplate(ClassTemplateCopyDTO templateDTO)"
        },
        "verifyoriginalstatusis()": {
          "definition": "Verify_original_status_is__(string status)"
        },
        "enterforreference()": {
          "definition": "Enter__for_Reference(string reference)"
        },
        "verifyoriginaltrainingcategoriesare()": {
          "definition": "Verify_original_training_categories_are__(string categories)"
        },
        "bindplanningcategories()": {
          "definition": "BindPlanningCategories(IList<PlanningCategoryDTO> planningCategoryOptions)"
        },
        "verifyoriginalnameis()": {
          "definition": "Verify_original_name_is__(string name)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ClassTemplateCopyWorkflow"
    },
    "personcompliancemonitor": {
      "namespace": "",
      "methods": {
        "viewperson()": {
          "definition": "ViewPerson(int personID)"
        },
        "writeexport()": {
          "definition": "WriteExport(IList<string> certs)"
        },
        "verifythattherearenoexpiringcerts()": {
          "definition": "Verify_that_there_are_no_expiring_certs()"
        },
        "viewrecipient()": {
          "definition": "View__recipient__(string recipientTypeString, string recipientName)"
        },
        "showresultsperpage()": {
          "definition": "Show___results_per_page(int resultsPerPage)"
        },
        "verifyis()": {
          "definition": "Verify__is__(string fieldName, string value)"
        },
        "checkshowexpired()": {
          "definition": "Check_show_expired()"
        },
        "verifyresultisforexpiringon()": {
          "definition": "Verify_result__is__for__expiring_on__(int position, string recipient, string cert, DateTime date)"
        },
        "selectexpiresinthenextdays()": {
          "definition": "Select_expires_in_the_next__days(string days)"
        },
        "verifycanfilteronactiveemployment()": {
          "definition": "Verify_can_filter_on_active_employment()"
        },
        "selectcertificationtype()": {
          "definition": "Select_certification_type(string type)"
        },
        "savefilters()": {
          "definition": "Save_filters()"
        },
        "selectexpiredinthelastdays()": {
          "definition": "Select_expired_in_the_last__days(string days)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifycannotfilteronactiveemployment()": {
          "definition": "Verify_cannot_filter_on_active_employment()"
        },
        "uncheckshowexpired()": {
          "definition": "Uncheck_show_expired()"
        },
        "uncheckcertificationstatus()": {
          "definition": "Uncheck_certification_status_(string status)"
        },
        "verifythatthereareexpiringcertsdisplayedonpage()": {
          "definition": "Verify_that_there_are__expiring_certs_displayed_on_page(int num)"
        },
        "doexport()": {
          "definition": "Do_export()"
        },
        "showpage()": {
          "definition": "Show_page___(int page)"
        },
        "verifycanfilteroncertificationstatus()": {
          "definition": "Verify_can_filter_on_certification_status()"
        },
        "verifythatthereareexpiringcerts()": {
          "definition": "Verify_that_there_are__expiring_certs(int num)"
        },
        "considerexportrow()": {
          "definition": "Consider_export_row__(int row)"
        },
        "clickbuttontorefreshdata()": {
          "definition": "Click_button_to_refresh_data()"
        },
        "verifyexportcolumnheadersare()": {
          "definition": "Verify_export_column_headers_are__(List<string> expectedHeaders)"
        },
        "verifycannotfilteroncertificationstatus()": {
          "definition": "Verify_cannot_filter_on_certification_status()"
        },
        "bindpaging()": {
          "definition": "BindPaging(int currentPage, int pageSize, int pageCount, int totalCount)"
        },
        "checkcertificationstatus()": {
          "definition": "Check_certification_status_(string status)"
        },
        "bindfiltercertificationmasters()": {
          "definition": "BindFilterCertificationMasters(List<CertMasterListItemDTO> masters)"
        },
        "sortby()": {
          "definition": "sort_by_(ComplianceMonitorSortColumn column)"
        },
        "checkactiveemploymentonly()": {
          "definition": "Check_active_employment_only()"
        },
        "verifythereareexportrows()": {
          "definition": "Verify_there_are__export_rows(int count)"
        },
        "uncheckactiveemploymentonly()": {
          "definition": "Uncheck_active_employment_only()"
        },
        "verifyresultis()": {
          "definition": "Verify_result__is__(int position, List<string> expectedRow)"
        },
        "verifyresultisforwithprimaryorganizationofexpiringon()": {
          "definition": "Verify_result__is__for__with_primary_organization_of__expiring_on__(int position, string recipient, string cert, string orgName, DateTime date)"
        },
        "checkcertification()": {
          "definition": "Check_certification_(string certName)"
        },
        "bindcertifications()": {
          "definition": "BindCertifications(IEnumerable<ExpiringCertificationDTO> certs)"
        },
        "uncheckcertification()": {
          "definition": "Uncheck_certification_(string certName)"
        },
        "bindexpirationdaterange()": {
          "definition": "BindExpirationDateRange()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PersonComplianceMonitorWorkflow"
    },
    "manualscheduleconflictsettings": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ManualScheduleConflictSettingsWorkflow"
    },
    "testopiausercontext": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "TestopiaUserContext"
    },
    "navigatedattribute": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "NavigatedAttribute"
    },
    "emailmanagement": {
      "namespace": "",
      "methods": {
        "getnewportalaccountpasswordfromautoemail()": {
          "definition": "Get_new_portal_account_password_from__auto_email(string ordinal)"
        },
        "verifythatthesentemailcontainsattachments()": {
          "definition": "Verify_that_the__sent_email_contains__attachments(string ordinal, int numberOfAttachments)"
        },
        "verifythatanemailwassentfromwithsubject()": {
          "definition": "Verify_that_an_email_was_sent_from__with_subject__(string fromAddress, string emailSubject)"
        },
        "verifythatemailhadasubject()": {
          "definition": "Verify_that_email_had_a_subject_(string subject)"
        },
        "verifythatemailhadamessagebodyof()": {
          "definition": "Verify_that_email_had_a_message_body_of_(string messageBody)"
        },
        "verifythatemailhadamessagebodystartingwith()": {
          "definition": "Verify_that_email_had_a_message_body_starting_with_(string messageBody)"
        },
        "verifythatemailwasblindcarboncopiedto()": {
          "definition": "Verify_that_email_was_blind_carbon_copied_to_(string bccAddress)"
        },
        "verifythatemailcontentdoesnotcontain()": {
          "definition": "Verify_that_email_content_does_not_contain__(string partialContent)"
        },
        "verifythatemailcontentcontains()": {
          "definition": "Verify_that_email_content_contains__(string partialContent)"
        },
        "verifythatemailhadrecipient()": {
          "definition": "Verify_that_email_had_recipient(string address)"
        },
        "verifythatthesentautoemailisaportalwelcomemessageandcontainsanewpassword()": {
          "definition": "Verify_that_the__sent_auto_email_is_a_portal_welcome_message_and_contains_a_new_password(string ordinal)"
        },
        "verifyemailshavebeensent()": {
          "definition": "Verify__emails_have_been_sent(int numberOfEmails)"
        },
        "verifythatthesentemailhassubjectof()": {
          "definition": "Verify_that_the__sent_email_has_subject_of__(string ordinal, string emailSubject)"
        },
        "verifythatthesentemailwassenttorecipients()": {
          "definition": "Verify_that_the__sent_email_was_sent_to__recipients(string ordinal, int numRecipients)"
        },
        "verifythatthesentemailcontentcontains()": {
          "definition": "Verify_that_the__sent_email_content_contains__(string ordinal, string contentSnippet)"
        },
        "verifythatanemailwassentto()": {
          "definition": "Verify_that_an_email_was_sent_to__(string recipient)"
        },
        "verifythatemailhadnoblindcarboncopiedrecipients()": {
          "definition": "Verify_that_email_had_no_blind_carbon_copied_recipients()"
        },
        "emptyinbox()": {
          "definition": "Empty_inbox()"
        },
        "verifythatthesentautoemailisaportalwelcomeemailanddoesnotcontainapassword()": {
          "definition": "Verify_that_the__sent_auto_email_is_a_portal_welcome_email_and_does_not_contain_a_password(string ordinal)"
        },
        "verifythatemailwascarboncopiedto()": {
          "definition": "Verify_that_email_was_carbon_copied_to_(string ccAddress)"
        },
        "verifythatemailhadareplytoaddress()": {
          "definition": "Verify_that_email_had_a_reply_to_address(string replyToAddress)"
        },
        "verifythatemailhadnorecipients()": {
          "definition": "Verify_that_email_had_no_recipients()"
        },
        "verifyemailhasbeensenttofromat()": {
          "definition": "Verify_email_has_been_sent_to__from__at_(string recipientAddress, string senderName, string senderAddress)"
        },
        "verifythatemailhadnocarboncopiedrecipients()": {
          "definition": "Verify_that_email_had_no_carbon_copied_recipients()"
        },
        "verifythatthesentemailwassentby()": {
          "definition": "Verify_that_the__sent_email_was_sent_by__(string ordinal, string from)"
        },
        "verifythatthesentemailwassentto()": {
          "definition": "Verify_that_the__sent_email_was_sent_to__(string ordinal, string to)"
        },
        "verifythatnoemailwassentto()": {
          "definition": "Verify_that_no_email_was_sent_to__(string recipient)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "EmailManagement"
    },
    "portaluser": {
      "namespace": "",
      "methods": {
        "verifypagelinkedinemailshowspersonasunknown()": {
          "definition": "Verify_page_linked_in_email_shows_person_as_unknown()"
        },
        "verifyportalaccessfordoesnothavetype()": {
          "definition": "Verify_portal_access_for_does_not_have_type(string fullName, string typeName)"
        },
        "verifythatportalsignupentryexistsforperson()": {
          "definition": "Verify_that_portal_signup_entry_exists_for_person()"
        },
        "portaladministrativecontactis()": {
          "definition": "Portal_administrative_contact_is(string param1)"
        },
        "allowpubliccertificationrequests()": {
          "definition": "Allow_public_certification_requests()"
        },
        "portalaffirmationtextis()": {
          "definition": "Portal_affirmation_text_is(string param1)"
        },
        "verifypagelinkedinemaildisplaysdataforforperson()": {
          "definition": "Verify_page_linked_in_email_displays_data_for__for_person__(string certName, string personName)"
        },
        "identificationquestionunderanswerisnot()": {
          "definition": "identification_question_under_answer_is_NOT(string strQuestionType, string strAnswer)"
        },
        "found()": {
          "definition": "found(string personName)"
        },
        "allowportallessonplanrequests()": {
          "definition": "Allow_portal_lesson_plan_requests()"
        },
        "getagencyroster()": {
          "definition": "get_agency_roster()"
        },
        "verifypagelinkedinemailshowsnocertdata()": {
          "definition": "Verify_page_linked_in_email_shows_no_cert_data()"
        },
        "identificationquestionunderansweris()": {
          "definition": "identification_question_under_answer_is(string strQuestionType, string strAnswer)"
        },
        "portalbodytext()": {
          "definition": "Portal_Body_Text(string param1)"
        },
        "verifythatanswersarecorrect()": {
          "definition": "Verify_that_answers_are_correct()"
        },
        "allowportalselfsignup()": {
          "definition": "Allow_portal_self_signup()"
        },
        "createportalaccountforwithacademyidandemailisandpassword()": {
          "definition": "Create_Portal_Account_For_With_Academyid_And_Email_Is_And_Password_(string fullName, string academyId, string email, string strPassword)"
        },
        "verifypagelinkedinemailshowsnameassociatedwith()": {
          "definition": "Verify_page_linked_in_email_shows_name_associated_with(string personName)"
        },
        "addportalaccessforwithtype()": {
          "definition": "Add_portal_access_for_with_type(string fullName, PortalPermissionType type)"
        },
        "portalorganizationnicknameis()": {
          "definition": "Portal_Organization_Nickname_is(string param1)"
        },
        "sendcopyofcertificationsforlastnameacademyidtowithmyemailas()": {
          "definition": "Send_copy_of_certifications_for_last_name__academy_id__to__with_my_email_as__(string lastName, string academyID, string recipientEmail, string requestorEmail)"
        },
        "verifytheidandlastnamematchaperson()": {
          "definition": "Verify_The_Id_And_Last_Name_Match_A_Person()"
        },
        "getansweroptions()": {
          "definition": "Get_answer_options()"
        },
        "saveportalsettings()": {
          "definition": "Save_portal_settings()"
        },
        "generateguidwebaddress()": {
          "definition": "generate_GUID_web_address()"
        },
        "verifyportalaccessforisandhastype()": {
          "definition": "Verify_portal_access_for__is__and_has_type(string fullName, PortalStatus accountStatus, string typeName)"
        },
        "portaltechsupporttextis()": {
          "definition": "Portal_Tech_Support_Text_is(string param1)"
        },
        "verifytherecipientswereandmyemail()": {
          "definition": "Verify_the_recipients_were__and_my_email__(string recipientEmail, string requestorEmail)"
        },
        "createportalaccountforwithpassword()": {
          "definition": "Create_Portal_Account_For_With_Password_(string fullName, string strPassword)"
        },
        "allowproxysignup()": {
          "definition": "Allow_proxy_signup()"
        },
        "registrantacademyidisandlastnameisandemailis()": {
          "definition": "Registrant_Academy_Id_Is_And_Last_Name_Is_And_Email_Is(string acadId, string lastName, string emailAddress)"
        },
        "portalnameis()": {
          "definition": "Portal_Name_is(string param1)"
        },
        "verifyportalaccessforis()": {
          "definition": "Verify_portal_access_for_is(string fullName, PortalStatus accountStatus)"
        }
      },
      "parent-name": null,
      "class-name": "PortalUser"
    },
    "waitforinvoicesmodal": {
      "namespace": "",
      "methods": {
        "showmodal()": {
          "definition": "ShowModal()"
        },
        "raisecontinuewithoutpayment()": {
          "definition": "RaiseContinueWithoutPayment()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "WaitForInvoicesModalWorkflow"
    },
    "dynamiclabeling": {
      "namespace": "",
      "methods": {
        "setdynamiclabelforto()": {
          "definition": "Set_dynamic_label_for__to__(DynamicLabelType dynamicLabelType, string dynamicLabelValue)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "DynamicLabeling"
    },
    "scheduleresource": {
      "namespace": "",
      "methods": {
        "browsetoscheduleresourcepageforresourceandeventrequest()": {
          "definition": "Browse_to_schedule_resource_page_for_resource__and_event_request__(string resourceName, string eventName)"
        },
        "verifyeventisnamed()": {
          "definition": "Verify_event__is_named__(int index, string expectedName)"
        },
        "verifyeventends()": {
          "definition": "Verify_event__ends__(int index, string expectedEnd)"
        },
        "deleteevent()": {
          "definition": "Delete_event__(int index)"
        },
        "verifythereareeventsscheduled()": {
          "definition": "Verify_there_are__events_scheduled(int expectedCount)"
        },
        "browsetoscheduleresourcepageforresource()": {
          "definition": "Browse_to_schedule_resource_page_for_resource__(string resourceName)"
        },
        "verifyeventstarts()": {
          "definition": "Verify_event__starts__(int index, string expectedStart)"
        },
        "verifybacktoeventrequstlinkvisible()": {
          "definition": "Verify_back_to_event_requst_link__visible(string isIsNot)"
        },
        "bindevents()": {
          "definition": "BindEvents(List<ResourceEventDTO> events)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ScheduleResourceWorkflow"
    },
    "exportinstructorassignments": {
      "namespace": "",
      "methods": {
        "verifytherearerows()": {
          "definition": "Verify_there_are__rows(int n)"
        },
        "export()": {
          "definition": "Export()"
        },
        "verifyis()": {
          "definition": "Verify__is__(string column, string value)"
        },
        "beginverifyingrowfor()": {
          "definition": "Begin_verifying_row_for__(string instructorName)"
        },
        "filterforprogram()": {
          "definition": "Filter_for_program__(string programName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "ExportInstructorAssignmentsWorkflow"
    },
    "acadislessonplanrequestreadonly": {
      "namespace": "",
      "methods": {
        "verifyhistoryitemreasonisblank()": {
          "definition": "Verify_history_item_Reason_is_blank()"
        },
        "verifyhistoryitemstatusis()": {
          "definition": "Verify_history_item_Status_is__(string statusDesc)"
        },
        "verifyislistedasaninstructorwithacademyidandprimaryorganizationandroleandhours()": {
          "definition": "Verify__is_listed_as_an_instructor_with_Academy_ID__and_Primary_Organization__and_role__and__hours(string personName, string academyId, string orgName, string roleName, decimal hours)"
        },
        "browsetopageforlessonplan()": {
          "definition": "Browse_to_Page_for_Lesson_Plan__(string lessonPlanCourseTitle)"
        },
        "verifyexistsinlistwithdescription()": {
          "definition": "Verify__exists_in_list_with_description__( string fileName, string fileDescription )"
        },
        "verifycandeletedocuments()": {
          "definition": "Verify_can_delete_documents()"
        },
        "verifycannotdeletedocuments()": {
          "definition": "Verify_cannot_delete_documents()"
        },
        "clickapprovebuttonwithoutoptions()": {
          "definition": "Click_Approve_button_without_options()"
        },
        "clickapprovebuttoninapprovalmodal()": {
          "definition": "Click_Approve_button_in_approval_modal()"
        },
        "verifyuserwasnavigatedtothelessonplanrequestlisthighlighting()": {
          "definition": "Verify_user_was_navigated_to_the_lesson_plan_request_list_highlighting__(string lessonPlanCourseTitle)"
        },
        "verifyisnotprotected()": {
          "definition": "Verify__is_not_protected( string fileName )"
        },
        "verifycanbeedited()": {
          "definition": "Verify__can_be_edited( string fileName )"
        },
        "verifycannotadddocument()": {
          "definition": "Verify_cannot_add_document()"
        },
        "clicksendbackbuttonandconfirmwithreason()": {
          "definition": "Click_Send_Back_button_and_confirm_with_reason__(string reason)"
        },
        "verifyapprovebuttonvisible()": {
          "definition": "Verify_Approve_button__visible(string isIsNotStr)"
        },
        "verifyhistoryitemversionis()": {
          "definition": "Verify_history_item_Version_is__(int version)"
        },
        "verifycannotbeedited()": {
          "definition": "Verify__cannot_be_edited( string fileName )"
        },
        "verifyhistorycontainsitems()": {
          "definition": "Verify_history_contains__items(int numItems)"
        },
        "verifycanbeopenedforviewing()": {
          "definition": "Verify__can_be_opened_for_viewing( string fileName )"
        },
        "verifyhistoryitemuseris()": {
          "definition": "Verify_history_item_User_is__(string user)"
        },
        "verifythereareinstructorslisted()": {
          "definition": "Verify_there_are__instructors_listed(int count)"
        },
        "navigatetolistoflessonplanrequests()": {
          "definition": "NavigateToListOfLessonPlanRequests(int lessonPlanID)"
        },
        "selectapprovethelessonplanonly()": {
          "definition": "Select_Approve_the_lesson_plan_only()"
        },
        "bindversionhistoryitems()": {
          "definition": "BindVersionHistoryItems(IList<LessonPlanVersionHistoryItemDTO> items)"
        },
        "verifyhistoryitemdateis()": {
          "definition": "Verify_history_item_Date_is__(DateTime date)"
        },
        "bindhistoryitems()": {
          "definition": "BindHistoryItems(IList<LessonPlanRequestHistoryItemDTO> items)"
        },
        "selectapproveandcreateclasstemplate()": {
          "definition": "Select_Approve_and_create_class_template()"
        },
        "navigatetoaddclasstemplate()": {
          "definition": "NavigateToAddClassTemplate(int lessonPlanID)"
        },
        "showdeletedlessonplanmessage()": {
          "definition": "ShowDeletedLessonPlanMessage()"
        },
        "verifysendbackbuttonvisible()": {
          "definition": "Verify_Send_Back_button__visible(string isIsNotStr)"
        },
        "verifycanadddocument()": {
          "definition": "Verify_can_add_document()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "considerrowofthehistory()": {
          "definition": "Consider_row__of_the_history(int rowNum)"
        },
        "verifyuserwasnavigatedtocreateaclasstemplatefromthelessonplan()": {
          "definition": "Verify_user_was_navigated_to_create_a_class_template_from_the_lesson_plan()"
        },
        "verifytherearedocumentsinthelist()": {
          "definition": "Verify_there_are__documents_in_the_list( int count )"
        },
        "verifyuserallowedtocreateaclasstemplate()": {
          "definition": "Verify_user__allowed_to_create_a_class_template(string isOrIsNotStr)"
        },
        "verifyhistoryitemreasonis()": {
          "definition": "Verify_history_item_Reason_is__(string reason)"
        },
        "verifyeffectivedatewarningisshown()": {
          "definition": "Verify_effective_date_warning_is_shown()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AcadisLessonPlanRequestReadonlyWorkflow"
    },
    "checkhousingavailability": {
      "namespace": "",
      "methods": {
        "clickmakereservationinoffcenterhousingpopover()": {
          "definition": "Click_Make_Reservation_in_off_center_housing_popover()"
        },
        "verifyresidentsis()": {
          "definition": "Verify_Residents_is__(int numResidents)"
        },
        "verifythatnotenoughbedspopovervisible()": {
          "definition": "Verify_that_not_enough_beds_popover__visible(string isIsNotVisible)"
        },
        "addanewnonstudentprojection()": {
          "definition": "Add_a_new_non_student_projection()"
        },
        "chooseforgender()": {
          "definition": "Choose__for_Gender(string genderDesc)"
        },
        "verifythattherearegroupsofstudentsprojected()": {
          "definition": "Verify_that_there_are__groups_of_students_projected(int numProjections)"
        },
        "showoffcenteralert()": {
          "definition": "ShowOffCenterAlert()"
        },
        "entertextforresidents()": {
          "definition": "Enter_text__for_Residents(int numResidents)"
        },
        "verifyroomtypeis()": {
          "definition": "Verify_Room_Type_is__(string roomTypeName)"
        },
        "verifygenderis()": {
          "definition": "Verify_Gender_is__(string genderDesc)"
        },
        "verifyoffcenterhousingpopovervisible()": {
          "definition": "Verify_off_center_housing_popover__visible(string isIsNotVisible)"
        },
        "chooseforroomtype()": {
          "definition": "Choose__for_Room_Type(string roomTypeName)"
        },
        "clickaddreservation()": {
          "definition": "Click_Add_Reservation()"
        },
        "bindcapacityinfo()": {
          "definition": "BindCapacityInfo(CapacityPlannerInfoDTO capacityInfo)"
        },
        "browsetopageforeventrequest()": {
          "definition": "Browse_to_page_for_event_request__(string requestedEventName)"
        },
        "verifycheckindateis()": {
          "definition": "Verify_check_in_date_is__(DateTime checkInDate)"
        },
        "verifythattherearegroupsofnonstudentsprojected()": {
          "definition": "Verify_that_there_are__groups_of_non_students_projected(int numProjections)"
        },
        "shownotenoughbedsalert()": {
          "definition": "ShowNotEnoughBedsAlert()"
        },
        "instudentprojection()": {
          "definition": "In_student_projection__(int index)"
        },
        "verifyspecialaccommodationsis()": {
          "definition": "Verify_Special_Accommodations_is__(string specialAccommodationsDesc)"
        },
        "verifycheckoutdateis()": {
          "definition": "Verify_check_out_date_is__(DateTime checkOutDate)"
        },
        "removenonstudentprojection()": {
          "definition": "Remove_non_student_projection__(int index)"
        },
        "innonstudentprojection()": {
          "definition": "In_non_student_projection__(int index)"
        },
        "addanewstudentprojection()": {
          "definition": "Add_a_new_student_projection()"
        },
        "removestudentprojection()": {
          "definition": "Remove_student_projection__(int index)"
        },
        "navigatetoeventrequest()": {
          "definition": "NavigateToEventRequest()"
        },
        "verifyresidentsisblank()": {
          "definition": "Verify_Residents_is_blank()"
        },
        "verifyusernavigatedtoeventrequestdetails()": {
          "definition": "Verify_user_navigated_to_event_request_details()"
        },
        "chooseforspecialaccommodations()": {
          "definition": "Choose__for_Special_Accommodations(string specialAccommodationsDesc)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "CheckHousingAvailabilityWorkflow"
    },
    "trainingsearchresultsview": {
      "namespace": "",
      "methods": {
        "verifyresultistrainingwithattendees()": {
          "definition": "Verify_result_is_training__with_attendees(int resultNumber, string trainingName, string trainingNumber, string activityName, int numberOfAttendees)"
        },
        "writeexport()": {
          "definition": "WriteExport(string export)"
        },
        "verifyresulthasnoeventlink()": {
          "definition": "Verify_result__has_no_event_link(int resultNumber)"
        },
        "setsearchheaders()": {
          "definition": "SetSearchHeaders()"
        },
        "verifyresultispersonin()": {
          "definition": "Verify_result__is_person__in__(int resultNumber, string personName, string trainingName, string trainingNumber, string activityName)"
        },
        "setresultsperpageto()": {
          "definition": "Set_results_per_page_to__(int resultsPerPage)"
        },
        "unchecksearchinservice()": {
          "definition": "Uncheck_search_inservice()"
        },
        "verifyresulthasnopersonlink()": {
          "definition": "Verify_result__has_no_person_link(int resultNumber)"
        },
        "clicktogglemode()": {
          "definition": "Click_toggle_mode()"
        },
        "changepage()": {
          "definition": "Change_page(int page)"
        },
        "unchecksearchclasses()": {
          "definition": "Uncheck_search_classes()"
        },
        "verifyresulthaseventlink()": {
          "definition": "Verify_result__has_event_link(int resultNumber)"
        },
        "bindsearchresults()": {
          "definition": "BindSearchResults(PagedResult<TrainingSearchResultDTO> searchResults)"
        },
        "verifythatexportcolumnsare()": {
          "definition": "Verify_that_export_columns_are_(List<string> headers)"
        },
        "changeresultsperpageto()": {
          "definition": "Change_results_per_page_to(int results)"
        },
        "verifythatthereareexportrows()": {
          "definition": "Verify_that_there_are__export_rows(int number)"
        },
        "unchecksearchonline()": {
          "definition": "Uncheck_search_online()"
        },
        "verifyresulthaspersonlink()": {
          "definition": "Verify_result__has_person_link(int resultNumber)"
        },
        "verifythatcolumnofrowis()": {
          "definition": "Verify_that_column__of_row__is_(string columnName, int rowNum, string expected)"
        },
        "searchcomparisonis()": {
          "definition": "Search_comparison_is__(SearchComparison comparison)"
        },
        "setpageto()": {
          "definition": "Set_page_to__(int page)"
        },
        "searchtitletext()": {
          "definition": "Search_title_text__(string text)"
        },
        "checksearchactivities()": {
          "definition": "Check_search_activities()"
        },
        "resortby()": {
          "definition": "Resort_by(TrainingSearchSortColumn column)"
        },
        "exportall()": {
          "definition": "Export_all()"
        },
        "verifyresultsreturned()": {
          "definition": "Verify__results_returned(int numResults)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "TrainingSearchResultsView"
    },
    "performancereporttemplate": {
      "namespace": "",
      "methods": {
        "verifyauthornamedisplayedis()": {
          "definition": "Verify_Author_Name_Displayed_is(bool displayed)"
        },
        "verifynameis()": {
          "definition": "Verify_name_is(string name)"
        },
        "verifyapprovernamedisplayedis()": {
          "definition": "Verify_Approver_Name_Displayed_is(bool displayed)"
        },
        "setscopeto()": {
          "definition": "Set_scope_to__(string subjectTypeDescr)"
        },
        "verifyapproversignaturelinestodisplaylinktextis()": {
          "definition": "Verify_Approver_Signature_Lines_To_Display_Link_Text_is(string linkText)"
        },
        "verifycertificationsarehidden()": {
          "definition": "Verify_certifications_are_hidden()"
        },
        "setusageto()": {
          "definition": "Set_usage_to(AcadisListEntryUsage usage)"
        },
        "donotrequireapproval()": {
          "definition": "Do_not_require_approval()"
        },
        "verifysubjectsignaturelinestodisplaylinktextis()": {
          "definition": "Verify_Subject_Signature_Lines_To_Display_Link_Text_is(string linkText)"
        },
        "verifysubjectsignaturelineshownis()": {
          "definition": "Verify_Subject_Signature_Line_Shown_is(bool displayed)"
        },
        "verifyinstructionsare()": {
          "definition": "Verify_instructions_are(string instructions)"
        },
        "verifyapprovalisrequired()": {
          "definition": "Verify_approval_is_required()"
        },
        "verifyowneris()": {
          "definition": "Verify_owner_is(string ownerLabel)"
        },
        "requireapproval()": {
          "definition": "Require_approval()"
        },
        "verifyapprovalisnotrequired()": {
          "definition": "Verify_approval_is_not_required()"
        },
        "quicksetisnotallowed()": {
          "definition": "QuickSet_is_not_allowed()"
        },
        "verifyotherpageswatermarkdisplaytextis()": {
          "definition": "Verify_other_pages_watermark_display_text_is( string displayText )"
        },
        "verifyinstructionsareblank()": {
          "definition": "Verify_instructions_are_blank()"
        },
        "verifysubjectofreportcanviewinportal()": {
          "definition": "Verify_subject_of_report_can_view_in_portal()"
        },
        "browsetoperformancereportforanewreport()": {
          "definition": "Browse_to_Performance_Report_for_a_new_report()"
        },
        "verifysubjectsignatureandprintlineshiddenis()": {
          "definition": "Verify_Subject_Signature_And_Print_Lines_Hidden_is(bool hidden)"
        },
        "verifysubjectofreportcannotviewinportal()": {
          "definition": "Verify_subject_of_report_cannot_view_in_portal()"
        },
        "verifyfirstpagecontentwillbeginhundredthsofaninchfromthetop()": {
          "definition": "Verify_first_page_content_will_begin_hundredths_of_an_inch_from_the_top( string displayText )"
        },
        "verifyauthorsignaturelineshownis()": {
          "definition": "Verify_Author_Signature_Line_Shown_is(bool displayed)"
        },
        "verifyfirstpagewatermarkdisplaytextis()": {
          "definition": "Verify_first_page_watermark_display_text_is( string displayText )"
        },
        "verifydescriptionis()": {
          "definition": "Verify_description_is(string description)"
        },
        "allowsubjectofreporttoviewinportal()": {
          "definition": "Allow_subject_of_report_to_view_in_portal()"
        },
        "verifyotherpagescontentwillbeginhundredthsofaninchfromthetop()": {
          "definition": "Verify_other_pages_content_will_begin_hundredths_of_an_inch_from_the_top( string displayText )"
        },
        "setownerto()": {
          "definition": "Set_owner_to(string owner)"
        },
        "verifyusageis()": {
          "definition": "Verify_usage_is(AcadisListEntryUsage usage)"
        },
        "verifyapproversignaturelabellinktextis()": {
          "definition": "Verify_Approver_Signature_Label_Link_Text_is(string linkText)"
        },
        "verifyauthorsignatureandprintlineshiddenis()": {
          "definition": "Verify_Author_Signature_And_Print_Lines_Hidden_is(bool hidden)"
        },
        "disallowsubjectofreporttoviewinportal()": {
          "definition": "Disallow_subject_of_report_to_view_in_portal()"
        },
        "observationperiodisnotcollected()": {
          "definition": "Observation_period_is_not_collected()"
        },
        "verifyscopeis()": {
          "definition": "Verify_scope_is__(string scopeDescrip)"
        },
        "verifyapprovernamedisplayedlinktextis()": {
          "definition": "Verify_Approver_Name_Displayed_Link_Text_is(string linkText)"
        },
        "verifythisversionisactive()": {
          "definition": "Verify_this_version_is_active()"
        },
        "verifyauthornamedisplayedlinktextis()": {
          "definition": "Verify_Author_Name_Displayed_Link_Text_is(string linkText)"
        },
        "verifydescriptionisblank()": {
          "definition": "Verify_description_is_blank()"
        },
        "browsetoperformancereportfor()": {
          "definition": "Browse_to_Performance_Report_for(string reportLabel)"
        },
        "verifyauthorsignaturelabellinktextis()": {
          "definition": "Verify_Author_Signature_Label_Link_Text_is(string linkText)"
        },
        "bindversions()": {
          "definition": "BindVersions(List<PerformanceReportVersionDTO> versions)"
        },
        "verifycertificationsarevisible()": {
          "definition": "Verify_certifications_are_visible()"
        },
        "verifyquicksetisnotallowed()": {
          "definition": "Verify_quickset_is_not_allowed()"
        },
        "verifyapproversignatureandprintlineshiddenis()": {
          "definition": "Verify_Approver_Signature_And_Print_Lines_Hidden_is(bool hidden)"
        },
        "verifyisincertificationlist()": {
          "definition": "Verify__is_in_certification_list(string certName)"
        },
        "setnameto()": {
          "definition": "Set_name_to(string name)"
        },
        "verifyisnotincertificationlist()": {
          "definition": "Verify__is_not_in_certification_list(string certName)"
        },
        "verifyitemsinqualitycontrolblocktextis()": {
          "definition": "Verify_items_in_quality_control_block_text_is( string linkText )"
        },
        "verifyqualitycontrolblocklinktextis()": {
          "definition": "Verify_quality_control_block_link_text_is(string linkText)"
        },
        "observationperiodisoptional()": {
          "definition": "Observation_period_is_optional()"
        },
        "recordeddateismanuallyentered()": {
          "definition": "Recorded_date_is_manually_entered()"
        },
        "observationperiodisrequired()": {
          "definition": "Observation_period_is_required()"
        },
        "quicksetisallowed()": {
          "definition": "QuickSet_is_allowed()"
        },
        "verifycansubjectofreportviewinportaloptionisnotvisible()": {
          "definition": "Verify_can_subject_of_report_view_in_portal_option_is_not_visible()"
        },
        "verifycansubjectofreportviewinportaloptionisvisible()": {
          "definition": "Verify_can_subject_of_report_view_in_portal_option_is_visible()"
        },
        "savereportas()": {
          "definition": "Save_report_as(string reportLabel)"
        },
        "verifyquicksetisallowed()": {
          "definition": "Verify_quickset_is_allowed()"
        },
        "verifysubjectnamedisplayedlinktextis()": {
          "definition": "Verify_Subject_Name_Displayed_Link_Text_is(string linkText)"
        },
        "showconfirmactivation()": {
          "definition": "ShowConfirmActivation(object sender, EventArgs e)"
        },
        "deletecertification()": {
          "definition": "Delete_certification__(string certName)"
        },
        "recordeddateisautomaticallygenerated()": {
          "definition": "Recorded_date_is_automatically_generated()"
        },
        "setinstructionsto()": {
          "definition": "Set_instructions_to(string instructions)"
        },
        "verifyscopeisblank()": {
          "definition": "Verify_scope_is_blank()"
        },
        "verifyapproversignaturelineshownis()": {
          "definition": "Verify_Approver_Signature_Line_Shown_is(bool displayed)"
        },
        "verifynameisblank()": {
          "definition": "Verify_name_is_blank()"
        },
        "verifyownerisblank()": {
          "definition": "Verify_owner_is_blank()"
        },
        "clicktoeditreport()": {
          "definition": "Click_to_edit_report()"
        },
        "activatethisversion()": {
          "definition": "Activate_this_version()"
        },
        "verifycertificationsareshown()": {
          "definition": "Verify__certifications_are_shown(int certCount)"
        },
        "bindcertifications()": {
          "definition": "BindCertifications(List<PerformanceReportCertDTO> certs)"
        },
        "verifysubjectnamedisplayedis()": {
          "definition": "Verify_Subject_Name_Displayed_is(bool displayed)"
        },
        "verifysubjectsignaturelabellinktextis()": {
          "definition": "Verify_Subject_Signature_Label_Link_Text_is(string linkText)"
        },
        "verifyreportisversion()": {
          "definition": "Verify_report_is_version__(int versionNum)"
        },
        "verifyauthorsignaturelinestodisplaylinktextis()": {
          "definition": "Verify_Author_Signature_Lines_To_Display_Link_Text_is(string linkText)"
        },
        "setdescriptionto()": {
          "definition": "Set_description_to(string description)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PerformanceReportTemplateWorkflow"
    },
    "testopiaemailsender": {
      "namespace": "",
      "methods": {
        "sendbulksame()": {
          "definition": "SendBulkSame(IEnumerable<string> recipients, IAutoEmail email)"
        },
        "sendautoemail()": {
          "definition": "SendAutoEmail(string recipient, IAutoEmail email)"
        },
        "send()": {
          "definition": "Send(SendParams sendParams)"
        }
      },
      "parent-name": null,
      "class-name": "TestopiaEmailSender"
    },
    "textattribute": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "TextAttribute"
    },
    "loginpreferences": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "LoginPreferencesWorkflow"
    },
    "instructorsearch": {
      "namespace": "",
      "methods": {
        "withpersonudflessthanorequalto()": {
          "definition": "with_person_udf__less_than_or_equal_to__(string udfField, int endVal)"
        },
        "withpersonudflessthanorequaltodate()": {
          "definition": "with_person_udf__less_than_or_equal_to_date__(string udfField, DateTime endVal)"
        },
        "withpersonudfgreaterthanorequalto()": {
          "definition": "with_person_udf__greater_than_or_equal_to__(string udfField, int startVal)"
        },
        "verifythatresulthasaliasshown()": {
          "definition": "Verify_that_result_has_alias__shown(string aliasName)"
        },
        "considersearchresultfor()": {
          "definition": "Consider_search_result_for__(string personName)"
        },
        "withexpirationdatebetweenand()": {
          "definition": "with_expiration_date_between__and__(DateTime startDate, DateTime endDate)"
        },
        "withpersonudfbetweendatesand()": {
          "definition": "with_person_udf__between_dates__and__(string udfField, DateTime startVal, DateTime endVal)"
        },
        "withpersonudfbetweenand()": {
          "definition": "with_person_udf__between__and__(string udfField, int startVal, int endVal)"
        },
        "withdropdownpersonudfmatching()": {
          "definition": "with_dropdown_person_udf__matching__(string udfField, string udfValue)"
        },
        "verifythatresultsdonotinclude()": {
          "definition": "Verify_that_results_do_not_include__(string personName)"
        },
        "withpersonudfgreaterthanorequaltodate()": {
          "definition": "with_person_udf__greater_than_or_equal_to_date__(string udfField, DateTime startVal)"
        },
        "bindsearchresults()": {
          "definition": "BindSearchResults(PagedResultDTO<InstructorSearchResultDto> results)"
        },
        "searchwithcriteria()": {
          "definition": "Search_with_criteria()"
        },
        "withcertificationactionsbetweenand()": {
          "definition": "with_certification_actions_between_and(DateTime startDate, DateTime endDate)"
        },
        "createsearchcriteria()": {
          "definition": "Create_search_criteria()"
        },
        "verifythatthereareresults()": {
          "definition": "Verify_that_there_are__results(int numResults)"
        },
        "withcertificationactions()": {
          "definition": "with_certification_actions(List<string> actionTypeNames)"
        },
        "verifythatthereareresultsdisplayed()": {
          "definition": "Verify_that_there_are__results_displayed(int numResults)"
        },
        "withresultsperpage()": {
          "definition": "with__results_per_page(int num)"
        },
        "withlastname()": {
          "definition": "with_last_name(string lastName)"
        },
        "withfirstname()": {
          "definition": "with_first_name(string firstName)"
        },
        "withdivisions()": {
          "definition": "with_divisions__(List<string> divisionNames)"
        },
        "dosearch()": {
          "definition": "Do_search()"
        },
        "clicksearchinactive()": {
          "definition": "Click_search_inactive()"
        },
        "verifythataliasesareshown()": {
          "definition": "Verify_that__aliases_are_shown(int aliasCount)"
        },
        "withcertificationstatuses()": {
          "definition": "with_certification_statuses__(List<string> statusNames)"
        },
        "selectonlyinstructors()": {
          "definition": "select_only_instructors()"
        },
        "verifythatresultsinclude()": {
          "definition": "Verify_that_results_include__(string personName)"
        },
        "withissuedatebetweenand()": {
          "definition": "with_issue_date_between__and__(DateTime startDate, DateTime endDate)"
        },
        "deselectonlyinstructors()": {
          "definition": "deselect_only_instructors()"
        },
        "withquicksearch()": {
          "definition": "with_quicksearch__(string quicksearchParam)"
        },
        "withpersonudfmatching()": {
          "definition": "with_person_udf__matching__(string udfField, string udfValue)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "InstructorSearch"
    },
    "registerstudent": {
      "namespace": "",
      "methods": {
        "enterforrelationship()": {
          "definition": "Enter_for_Relationship(string relationship)"
        },
        "selectfortuitionbilltoparty()": {
          "definition": "Select__for_Tuition_Bill_to_Party(string g)"
        },
        "verifysetselectionofferswithclasseslisted()": {
          "definition": "Verify_set_selection_offers__with__classes_listed(string setName, int numClasses)"
        },
        "entertextforadditionalcomments()": {
          "definition": "Enter_text__for_additional_comments(string commentText)"
        },
        "verifysetselectionsareoffered()": {
          "definition": "Verify__set_selections_are_offered(int num)"
        },
        "clicksaveandregisteranother()": {
          "definition": "Click_save_and_register_another()"
        },
        "verifycapacityalertisnotvisible()": {
          "definition": "Verify_capacity_alert_is_not_visible()"
        },
        "verifynosendingorganizationisselected()": {
          "definition": "Verify_no_sending_organization_is_selected()"
        },
        "changesendingorganizationtonone()": {
          "definition": "Change_sending_organization_to_none()"
        },
        "verifydateofbirthis()": {
          "definition": "Verify_date_of_birth_is__(string dob)"
        },
        "clickregister()": {
          "definition": "Click_register()"
        },
        "verifythereisnorestrictedalert()": {
          "definition": "Verify_there_is_no_restricted_alert()"
        },
        "verifyphysicaladdressiswithtype()": {
          "definition": "Verify_Physical_Address_is___with_type_(string addressLine1, string addressLine2, string city, string state, string zip, string addressType)"
        },
        "verifyemergencycontactisempty()": {
          "definition": "Verify_Emergency_Contact_is_empty()"
        },
        "verifymailingaddressisempty()": {
          "definition": "Verify_Mailing_Address_is_empty()"
        },
        "verifyredirectedtoaddnewpersonpage()": {
          "definition": "Verify_redirected_to_Add_New_Person_page()"
        },
        "clickaddtowaitlist()": {
          "definition": "Click_add_to_waitlist()"
        },
        "browsetopagefromavailabletraininglistwaitlistingfor()": {
          "definition": "Browse_to_page_from_available_training_list_waitlisting_for__(string className)"
        },
        "verifyrequestedstatusis()": {
          "definition": "Verify_requested_status_is__(StudentRegistrationStatus status)"
        },
        "browsetopagefromavailabletraininglistregisteringpersonfor()": {
          "definition": "Browse_to_page_from_available_training_list_registering_person_for(string name, string className)"
        },
        "selectforhousingbilltoparty()": {
          "definition": "Select__for_housing_bill_to_party(string type)"
        },
        "verifyemergencycontactprimaryphoneis()": {
          "definition": "Verify_Emergency_Contact_primary_phone_is_(string val)"
        },
        "selectaddnewperson()": {
          "definition": "Select_add_new_person()"
        },
        "selectset()": {
          "definition": "Select_set__(string setName)"
        },
        "registeranother()": {
          "definition": "RegisterAnother()"
        },
        "browsetopagefromclassrosterfor()": {
          "definition": "Browse_to_page_from_class_roster_for__(string className)"
        },
        "entertextforspecialinstructions()": {
          "definition": "Enter_text__for_Special_Instructions(string s)"
        },
        "verifyisselectedfortrainingcategory()": {
          "definition": "Verify__is_selected_for_training_category(string catName)"
        },
        "enterfortuitionotherorganizationtypeahead()": {
          "definition": "Enter__for_Tuition_Other_Organization_typeahead(string t)"
        },
        "enterwithtypeformailingaddress()": {
          "definition": "Enter___with_type_for_Mailing_address(string addressLine1, string addressLine2, string city, string state, string zip, string addressType)"
        },
        "selectfortuitionotherorganization()": {
          "definition": "Select__for_Tuition_Other_Organization(string o)"
        },
        "browsetopagefromavailabletraininglistregisteringfor()": {
          "definition": "Browse_to_page_from_available_training_list_registering_for__(string className)"
        },
        "reprioritizeselectedsetclasses()": {
          "definition": "Reprioritize_selected_set_classes__(List<string> classes)"
        },
        "selectfortrainingcategory()": {
          "definition": "Select__for_training_category(string catName)"
        },
        "verifypersonisselected()": {
          "definition": "Verify_person__is_selected(string name)"
        },
        "changesendingorganizationtowithnotitle()": {
          "definition": "Change_sending_organization_to__with_no_title(string orgName)"
        },
        "selectforgender()": {
          "definition": "Select__for_gender(string gender)"
        },
        "verifysendingorganizationiswithtitle()": {
          "definition": "Verify_sending_organization_is__with_title__(string org, string title)"
        },
        "browsetopagetoregisterfor()": {
          "definition": "Browse_to_page_to_register_for__(string className)"
        },
        "selectforspecialaccommodation()": {
          "definition": "Select__for_special_accommodation(string acc)"
        },
        "enterforcontactname()": {
          "definition": "Enter_for_Contact_Name(string name)"
        },
        "verifyemergencycontactnameis()": {
          "definition": "Verify_Emergency_Contact_Name_is_(string val)"
        },
        "enterfordateofbirth()": {
          "definition": "Enter__for_date_of_birth(string dob)"
        },
        "verifyemergencycontactrelationshipis()": {
          "definition": "Verify_Emergency_Contact_relationship_is_(string val)"
        },
        "verifyemergencycontactrequired()": {
          "definition": "Verify_Emergency_Contact__required(string status)"
        },
        "verifycapacityalertisvisible()": {
          "definition": "Verify_capacity_alert_is_visible()"
        },
        "verifygenderis()": {
          "definition": "Verify_gender_is__(string gender)"
        },
        "returntopagewithnewpersonforclass()": {
          "definition": "Return_to_page_with_new_person__for_class__(string personName, string className)"
        },
        "verifytrainingcategoriesavailableare()": {
          "definition": "Verify_training_categories_available_are__(string cats)"
        },
        "selectforpricelevel()": {
          "definition": "Select__for_price_level(string type)"
        },
        "verifyrestrictedmessageshows()": {
          "definition": "Verify_restricted_message_shows(string msg)"
        },
        "leavepage()": {
          "definition": "LeavePage()"
        },
        "enterdateforexpectedcheckout()": {
          "definition": "Enter_date__for_Expected_Checkout(DateTime d)"
        },
        "changesendingorganizationtowithtitle()": {
          "definition": "Change_sending_organization_to__with_title__(string orgName, string titleName)"
        },
        "enterforemergencycontactaddress()": {
          "definition": "Enter___for_Emergency_Contact_Address(string addressLine1, string addressLine2, string city, string state, string zip)"
        },
        "verifysetselectionisnotoffered()": {
          "definition": "Verify_set_selection_is_not_offered()"
        },
        "setallowsubmit()": {
          "definition": "SetAllowSubmit(bool allow)"
        },
        "browsetopageforcontinuingfrom()": {
          "definition": "Browse_to_page_for__continuing_from__(string className, string name)"
        },
        "verifyemergencycontactaddressis()": {
          "definition": "Verify_Emergency_Contact_Address_is_(string addressLine1, string addressLine2, string city, string state, string zip)"
        },
        "enterwithtypeforphysicaladdress()": {
          "definition": "Enter___with_type_for_Physical_address(string addressLine1, string addressLine2, string city, string state, string zip, string addressType)"
        },
        "choosetoregisterasastandaloneclass()": {
          "definition": "Choose_to_register_as_a_standalone_class()"
        },
        "enterforemergencycontactprimaryphone()": {
          "definition": "Enter___for_Emergency_Contact_Primary_Phone(string number, string extension)"
        },
        "selectstudent()": {
          "definition": "Select_student__(string name)"
        },
        "enterdateforexpectedcheckin()": {
          "definition": "Enter_date__for_Expected_Checkin(DateTime d)"
        },
        "renamesetto()": {
          "definition": "Rename_set_to__(string name)"
        },
        "verifymailingaddressiswithtype()": {
          "definition": "Verify_Mailing_Address_is___with_type_(string addressLine1, string addressLine2, string city, string state, string zip, string addressType)"
        },
        "verifyemergencycontactalternatephoneis()": {
          "definition": "Verify_Emergency_Contact_alternate_phone_is_(string val)"
        },
        "verifyphysicaladdressisempty()": {
          "definition": "Verify_Physical_Address_is_empty()"
        },
        "selectforhousinggrant()": {
          "definition": "Select__for_Housing_Grant(string g)"
        },
        "verifyemergencycontactalternatephoneextensionis()": {
          "definition": "Verify_Emergency_Contact_alternate_phone_extension_is_(string val)"
        },
        "enterforemergencycontactalternatephone()": {
          "definition": "Enter___for_Emergency_Contact_Alternate_Phone(string number, string extension)"
        },
        "selectforusagetype()": {
          "definition": "Select__for_usage_type(string type)"
        },
        "verifythereisrestrictedalertwithreason()": {
          "definition": "Verify_there_is_restricted_alert_with_reason(string reason)"
        },
        "verifystudentdataisnotvisible()": {
          "definition": "Verify_student_data_is_not_visible()"
        },
        "verifyemergencycontactprimaryphoneextensionis()": {
          "definition": "Verify_Emergency_Contact_primary_phone_extension_is_(string val)"
        },
        "verifynopersonisselected()": {
          "definition": "Verify_no_person_is_selected()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "RegisterStudentWorkflow"
    },
    "adhocexport": {
      "namespace": "",
      "methods": {
        "verifyexportdoesnotcontainsystemusers()": {
          "definition": "Verify_export_does_not_contain_system_users()"
        },
        "exportadhocnamed()": {
          "definition": "Export_AdHoc_named__(string exportName)"
        }
      },
      "parent-name": "MVBaseExportHandlerWorkflow",
      "class-name": "AdHocExportWorkflow"
    },
    "statisticsdto": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "StatisticsDto"
    },
    "questionandanswerimportmanagement": {
      "namespace": "",
      "methods": {
        "verifythereareanswersforthequestion()": {
          "definition": "Verify_there_are__answers_for_the_question(int numberOfAnswers)"
        },
        "verifyquestioncontainstloforelo()": {
          "definition": "Verify_question_contains_TLO_for_ELO(string tloName, string eloName)"
        },
        "usingquestionwithimportkey()": {
          "definition": "Using_question_with_import_key__(string importKey)"
        },
        "verifyquestionversionnumberis()": {
          "definition": "Verify_question_version_number_is__(int versionNumber)"
        },
        "verifyowneris()": {
          "definition": "Verify_Owner_is__(string ownerName)"
        },
        "verifyquestioncommentsare()": {
          "definition": "Verify_question_comments_are__(string comments)"
        },
        "verifyquestionstatusis()": {
          "definition": "Verify_Question_Status_is(string questionStatus)"
        },
        "verifyquestiontypeis()": {
          "definition": "Verify_Question_Type_is__(string questionType)"
        },
        "verifyprogramis()": {
          "definition": "Verify_Program_is__(string programName)"
        },
        "verifyquestionpriorityis()": {
          "definition": "Verify_Question_Priority_is__(string questionPriority)"
        },
        "verifycategoryis()": {
          "definition": "Verify_Category_is__(string categoryName)"
        },
        "verifyquestiontextis()": {
          "definition": "Verify_Question_Text_is__(string questionText)"
        },
        "verifysubcategoryis()": {
          "definition": "Verify_Subcategory_is__(string subcategoryName)"
        },
        "verifyanswertextisandfeedbackisandcorrect()": {
          "definition": "Verify_answer__text_is__and_feedback_is__and__correct(string answerLetter, string answerText, string answerFeedback, string isCorrect)"
        },
        "usingquestionwhichstartswithowner()": {
          "definition": "Using_question_which_starts__with_owner__(string textContainedByQuestionText, string ownerName)"
        },
        "verifyquestioncontainstlosandelos()": {
          "definition": "Verify_question_contains__TLOs_and_ELOs(int loCount)"
        },
        "usingquestionwhichstarts()": {
          "definition": "Using_question_which_starts_(string textContainedByQuestionText)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "QuestionAndAnswerImportManagement"
    },
    "exportstaffassignments": {
      "namespace": "",
      "methods": {
        "exportstaffassignmentsforclasstemplate()": {
          "definition": "Export_staff_assignments_for_class_template__(string classTemplateName)"
        },
        "writeexport()": {
          "definition": "WriteExport(string filename, IList<string> exportData)"
        },
        "verifyvalueinrowcolumnistoday()": {
          "definition": "Verify_value_in_row__column__is_today(int row, int column)"
        },
        "exportstaffassignmentsforclassactivity()": {
          "definition": "Export_staff_assignments_for_class__activity__(string className, string activityName)"
        },
        "verifyheaderis()": {
          "definition": "Verify_header___is__(int column, string header)"
        },
        "exportstaffassignmentsforclass()": {
          "definition": "Export_staff_assignments_for_class__(string className)"
        },
        "verifyvalueinrowcolumnis()": {
          "definition": "Verify_value_in__row__column__is__(int row, int column, string value)"
        },
        "verifythereareexportrows()": {
          "definition": "Verify_there_are__export_rows(int rows)"
        }
      },
      "parent-name": "MVBaseExportHandlerWorkflow",
      "class-name": "ExportStaffAssignmentsWorkflow"
    },
    "surveyresponsesexport": {
      "namespace": "",
      "methods": {
        "writeexport()": {
          "definition": "WriteExport(string filename, IList<string> exportData)"
        },
        "verifyvalueinrowcolumnistoday()": {
          "definition": "Verify_value_in_row__column__is_today(int row, int column)"
        },
        "verifyheaderis()": {
          "definition": "Verify_header__is__(int column, string header)"
        },
        "verifyvalueinrowcolumnisempty()": {
          "definition": "Verify_value_in_row__column__is_empty(int row, int column)"
        },
        "exportsurveyresponsesfor()": {
          "definition": "Export_survey_responses_for__(string surveyName)"
        },
        "verifyvalueinrowcolumnis()": {
          "definition": "Verify_value_in__row__column__is__(int row, int column, string value)"
        },
        "verifythereareexportrows()": {
          "definition": "Verify_there_are__export_rows(int rows)"
        },
        "exportsurveyresponsesforinclass()": {
          "definition": "Export_survey_responses_for__in_class__(string surveyName, string className)"
        }
      },
      "parent-name": "MVBaseExportHandlerWorkflow",
      "class-name": "SurveyResponsesExportWorkflow"
    },
    "registrationtraininglist": {
      "namespace": "",
      "methods": {
        "verifyhasregistrationdatesstartingindaysandendingindays()": {
          "definition": "Verify__has_registration_dates_starting_in__days_and_ending_in__days(string classTypeAndName, int trainingStartOffset, int trainingEndOffset)"
        },
        "unselectpublished()": {
          "definition": "Unselect_published()"
        },
        "verifylistdoesnotcontain()": {
          "definition": "Verify_list_does_not_contain__(string classTypeAndName)"
        },
        "selectstatus()": {
          "definition": "Select_status__(string status)"
        },
        "verifytherearenoresults()": {
          "definition": "Verify_there_are_no_results()"
        },
        "verifyhasnoregistrationdatesspecified()": {
          "definition": "Verify__has_no_registration_dates_specified(string classTypeAndName)"
        },
        "verifydatefilterisselected()": {
          "definition": "Verify__date_filter_is_selected(string date)"
        },
        "verifydatefilterisnotselected()": {
          "definition": "Verify__date_filter_is_not_selected(string date)"
        },
        "verifyhasstatusof()": {
          "definition": "Verify__has_status_of__(string classTypeAndName, string status)"
        },
        "verifylocationfilterlistneedsshowmorefunctionality()": {
          "definition": "Verify_location_filter_list_needs_show_more_functionality()"
        },
        "bindtrainingevents()": {
          "definition": "BindTrainingEvents(IList<RegistrationTrainingEventDTO> events)"
        },
        "verifystatusfilterisnotselected()": {
          "definition": "Verify__status_filter_is_not_selected(string status)"
        },
        "verifystatusfilterisselected()": {
          "definition": "Verify__status_filter_is_selected(string status)"
        },
        "selectunpublished()": {
          "definition": "Select_unpublished()"
        },
        "verifyhastrainingdatesstartingindaysandendingindays()": {
          "definition": "Verify__has_training_dates_starting_in__days_and_ending_in__days(string classTypeAndName, int trainingStartOffset, int trainingEndOffset)"
        },
        "bindmorelocations()": {
          "definition": "BindMoreLocations(IList<string> locations)"
        },
        "verifyhasavailableseats()": {
          "definition": "Verify__has__available_seats(string classTypeAndName, int numAvail)"
        },
        "bindlocations()": {
          "definition": "BindLocations(IList<string> locations)"
        },
        "verifyhasnotrainingdatesspecified()": {
          "definition": "Verify__has_no_training_dates_specified(string classTypeAndName)"
        },
        "verifyallowswaitlist()": {
          "definition": "Verify__allows_waitlist(string classTypeAndName)"
        },
        "showrestrictedalert()": {
          "definition": "ShowRestrictedAlert(string reason)"
        },
        "setselectedprogramtypes()": {
          "definition": "SetSelectedProgramTypes(IList<int> types)"
        },
        "verifyallowsregistration()": {
          "definition": "Verify__allows_registration(string classTypeAndName)"
        },
        "verifyisalocationfilterandisselected()": {
          "definition": "Verify__is_a_location_filter_and_is_selected(string locationName)"
        },
        "selectlocation()": {
          "definition": "Select_location__(string locationName)"
        },
        "verifyportalpublishingstatusfilterisvisible()": {
          "definition": "Verify_portal_publishing_status_filter_is_visible()"
        },
        "unselectunpublished()": {
          "definition": "Unselect_unpublished()"
        },
        "verifydoesnothaveprerequisites()": {
          "definition": "Verify__does_not_have_prerequisites(string classTypeAndName)"
        },
        "unselectdate()": {
          "definition": "Unselect_date__(string date)"
        },
        "verifyisalocationfilterandisnotselected()": {
          "definition": "Verify__is_a_location_filter_and_is_not_selected(string locationName)"
        },
        "showeventassignedalert()": {
          "definition": "ShowEventAssignedAlert(int enrollmentId)"
        },
        "unselectprogram()": {
          "definition": "Unselect_program__(string programTypeName)"
        },
        "verifylistcontains()": {
          "definition": "Verify_list_contains__(string classTypeAndName)"
        },
        "verifydoesnotallowwaitlist()": {
          "definition": "Verify__does_not_allow_waitlist(string classTypeAndName)"
        },
        "verifyprogramfilterlistdoesnotneedshowmorefunctionality()": {
          "definition": "Verify_program_filter_list_does_not_need_show_more_functionality()"
        },
        "verifyportalpublishingstatusfilterisnotvisible()": {
          "definition": "Verify_portal_publishing_status_filter_is_not_visible()"
        },
        "unselectlocation()": {
          "definition": "Unselect_location__(string locationName)"
        },
        "verifyprogramfilterlistneedsshowmorefunctionality()": {
          "definition": "Verify_program_filter_list_needs_show_more_functionality()"
        },
        "verifyhasnoavailableseatsspecified()": {
          "definition": "Verify__has_no_available_seats_specified(string classTypeAndName)"
        },
        "verifydoesnotallowregistration()": {
          "definition": "Verify__does_not_allow_registration(string classTypeAndName)"
        },
        "verifyhaslocationof()": {
          "definition": "Verify__has_location_of__(string classTypeAndName, string locationName)"
        },
        "verifyhasprerequisites()": {
          "definition": "Verify__has_prerequisites(string classTypeAndName)"
        },
        "selectpublished()": {
          "definition": "Select_published()"
        },
        "verifycanbeassigned()": {
          "definition": "Verify__can_be_assigned(string classTypeAndName)"
        },
        "verifyhasregistrationdatesof()": {
          "definition": "Verify__has_registration_dates_of__(string classTypeAndName, string regDates)"
        },
        "verifyisnotalocationfilter()": {
          "definition": "Verify__is_not_a_location_filter(string locationName)"
        },
        "verifylocationfilterlistdoesnotneedshowmorefunctionality()": {
          "definition": "Verify_location_filter_list_does_not_need_show_more_functionality()"
        },
        "verifyisaprogramfilterandisnotselected()": {
          "definition": "Verify__is_a_program_filter_and_is_not_selected(string programTypeName)"
        },
        "browsetopageforregistrationtraininglist()": {
          "definition": "Browse_to_page_for_Registration_Training_List()"
        },
        "verifyallowsrostermodifications()": {
          "definition": "Verify__allows_roster_modifications(string classTypeAndName)"
        },
        "verifyhasnolocationspecified()": {
          "definition": "Verify__has_no_location_specified(string classTypeAndName)"
        },
        "unselectstatus()": {
          "definition": "Unselect_status__(string status)"
        },
        "verifyhastrainingdatesof()": {
          "definition": "Verify__has_training_dates_of__(string classTypeAndName, string trainingDates)"
        },
        "verifyisnotaprogramfilter()": {
          "definition": "Verify__is_not_a_program_filter(string programTypeName)"
        },
        "verifycannotbeassigned()": {
          "definition": "Verify__cannot_be_assigned(string classTypeAndName)"
        },
        "verifyisaprogramfilterandisselected()": {
          "definition": "Verify__is_a_program_filter_and_is_selected(string programTypeName)"
        },
        "persistfilters()": {
          "definition": "PersistFilters(IList<RegistrationFilterDTO> filters)"
        },
        "selectdate()": {
          "definition": "Select_date__(string date)"
        },
        "setselectedlocations()": {
          "definition": "SetSelectedLocations(IList<string> locations)"
        },
        "selectprogram()": {
          "definition": "Select_program__(string programTypeName)"
        },
        "verifydoesnotallowrostermodifications()": {
          "definition": "Verify__does_not_allow_roster_modifications(string classTypeAndName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "RegistrationTrainingListWorkflow"
    },
    "certapplicationspendingaudit": {
      "namespace": "",
      "methods": {
        "browsetocertapplicationspendingaudit()": {
          "definition": "BrowseTo__CertApplicationsPendingAudit(string recipientType)"
        },
        "verifyforisnotinpendingauditlist()": {
          "definition": "Verify__for____is_not_in_pending_audit_list(string certVersionName, string recipientType, string recipientName)"
        },
        "bindpendingcerts()": {
          "definition": "BindPendingCerts(IEnumerable<CertApplicationPendingAuditDTO> pendingCerts)"
        },
        "verifyforisinpendingauditlist()": {
          "definition": "Verify__for____is_in_pending_audit_list(string certVersionName, string recipientType, string recipientName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "CertApplicationsPendingAudit"
    },
    "classenrollmentprocessingfields": {
      "namespace": "",
      "methods": {
        "removeorganizationtoreportroster()": {
          "definition": "Remove_organization_to_report_roster()"
        },
        "browsetopageforclasstemplate()": {
          "definition": "Browse_to_page_for_class_template__(string name)"
        },
        "selectorganizationtoreportroster()": {
          "definition": "Select_organization__to_report_roster(string name)"
        },
        "verifyorganizationtoreportrosteris()": {
          "definition": "Verify_organization_to_report_roster_is__(string orgName)"
        },
        "browsetopageforclass()": {
          "definition": "Browse_to_page_for_class__(string name)"
        },
        "browsetocontrolforclasstemplate()": {
          "definition": "Browse_to_control_for_class_template__(string name)"
        },
        "verifyreportrosterorganizationrequired()": {
          "definition": "Verify_report_roster_organization__required(string isRequired)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ClassEnrollmentProcessingFieldsWorkflow"
    },
    "viewudfs": {
      "namespace": "",
      "methods": {
        "viewudfsforclassdefinition()": {
          "definition": "View_udfs_for_class_definition__(string classDefinitionName)"
        },
        "verifyis()": {
          "definition": "Verify__is__(string udfName, string expectedValue)"
        },
        "verifyclassudfison()": {
          "definition": "Verify_class_udf__is__on__(string udfName, string value, string classDefinitionName)"
        },
        "verifyactivityudfisonin()": {
          "definition": "Verify_activity_udf__is__on__in__(string udfName, string value, string activityName, string classDefinitionName)"
        },
        "viewudfsforactivityin()": {
          "definition": "View_udfs_for_activity__in__(string activityName, string classDefinitionName)"
        },
        "shownodata()": {
          "definition": "ShowNoData()"
        },
        "createudflist()": {
          "definition": "CreateUdfList(List<UdfDTO> udfs)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ViewUdfsWorkflow"
    },
    "duplicatetrainingsearchresults": {
      "namespace": "",
      "methods": {
        "inspecttrainingrecordinduplicate()": {
          "definition": "Inspect__training_record_in_duplicate(string ordinal)"
        },
        "verifyreportingorganizationnameis()": {
          "definition": "Verify_reporting_organization_name_is__(string reportingOrganizationName)"
        },
        "includetrainingwithmorethanhoursinasingleday()": {
          "definition": "Include_training_with_more_than__hours_in_a_single_day(int hours)"
        },
        "verifyapiconsumerdescriptionis()": {
          "definition": "Verify_API_consumer_description_is__(string apiDescription)"
        },
        "verifyduplicatehasduplicatetypes()": {
          "definition": "Verify_duplicate_has__duplicate_types(int count )"
        },
        "bindsearchresults()": {
          "definition": "BindSearchResults(IEnumerable<PossibleDuplicateTrainingDTO> results)"
        },
        "verifytrainingcategoryisempthy()": {
          "definition": "Verify_training_category_is_empthy()"
        },
        "verifybandtitleis()": {
          "definition": "Verify_band_title_is(string title)"
        },
        "verifyresultsincludeduplicategroups()": {
          "definition": "Verify_results_include__duplicate_groups(int count)"
        },
        "verifyhoursis()": {
          "definition": "Verify_hours_is__(string hours)"
        },
        "verifyreportingorganizationnameisempty()": {
          "definition": "Verify_reporting_organization_name_is_empty()"
        },
        "verifytrainingcategoryis()": {
          "definition": "Verify_training_category_is__(string trainingCategory)"
        },
        "verifytrainingeventis()": {
          "definition": "Verify_training_event_is__(string trainingEvent)"
        },
        "fordaterangeto()": {
          "definition": "For_date_range_to( DateTime beginDate, DateTime endDate)"
        },
        "verifyduplicatecontainsduplicatetype()": {
          "definition": "Verify_duplicate_contains_duplicate_type__(PossibleDuplicateTrainingType duplicateType)"
        },
        "includeonlytrainingwithequalhours()": {
          "definition": "Include_only_training_with_equal_hours()"
        },
        "inspectduplicate()": {
          "definition": "Inspect__duplicate(string ordinal)"
        },
        "verifyapiconsumerdescriptionisempty()": {
          "definition": "Verify_API_consumer_description_is_empty()"
        },
        "includetrainingonthesameday()": {
          "definition": "Include_training_on_the_same_day()"
        },
        "verifyduplicateincludestrainingrecords()": {
          "definition": "Verify_duplicate_includes__training_records(int count)"
        },
        "includetrainingthathasthesamenamewithinthesameyear()": {
          "definition": "Include_training_that_has_the_same_name_within_the_same_year()"
        },
        "verifypersonnameis()": {
          "definition": "Verify_person_name_is__(string name)"
        },
        "verifytrainingdateis()": {
          "definition": "Verify_training_date_is__(string trainingDate)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "DuplicateTrainingSearchResultsWorkflow"
    },
    "lookupmanagement": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": "Workflow",
      "class-name": "LookupManagement"
    },
    "missedlearningobjectivereport": {
      "namespace": "",
      "methods": {
        "verifypartofreportisnamed()": {
          "definition": "Verify_part__of_report_is_named__(int partNum, string name)"
        },
        "verifytestnameis()": {
          "definition": "Verify_Test_Name_is__(string expectedTestName)"
        },
        "verifyclassnameis()": {
          "definition": "Verify_Class_Name_is__(string expectedClassName)"
        },
        "verifyglobalreportheaderis()": {
          "definition": "Verify_Global_Report_Header_is__(string expectedHeader)"
        },
        "browsetomissedlearningobjectivereportfor()": {
          "definition": "Browse_to_Missed_Learning_Objective_Report_for__(string testName)"
        },
        "verifyreporthasrows()": {
          "definition": "Verify_report_has__rows(int numRows)"
        },
        "setdatasource()": {
          "definition": "SetDataSource(MissedLearningObjectiveReportByTestDTO data)"
        },
        "verifypartofreporthasrows()": {
          "definition": "Verify_part__of_report_has__rows(int partNum, int numRows)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "MissedLearningObjectiveReportWorkflow"
    },
    "housingusagetypelist": {
      "namespace": "",
      "methods": {
        "clickedit()": {
          "definition": "Click_Edit()"
        },
        "verifyavailablefornewrecordschecked()": {
          "definition": "Verify_available_for_new_records__checked(string isIsNotString)"
        },
        "verifynameis()": {
          "definition": "Verify_name_is(string val)"
        },
        "startsequencing()": {
          "definition": "Start_sequencing()"
        },
        "verifyoccupancyreadonlyandissetto()": {
          "definition": "Verify_occupancy__readonly_and_is_set_to__(string isIsNotString, string selectedOccupancy)"
        },
        "verifyinusewarningsshowing()": {
          "definition": "Verify_in_use_warnings__showing(string areAreNotString)"
        },
        "verifyeditdescriptionis()": {
          "definition": "Verify_edit_description_is__(string descriptionValue)"
        },
        "verifyinuseis()": {
          "definition": "Verify_in_use_is(string val)"
        },
        "enterforlabel()": {
          "definition": "Enter__for_label(string val)"
        },
        "selectunavailable()": {
          "definition": "Select_unavailable()"
        },
        "verifythereareitems()": {
          "definition": "Verify_there_are_items(int num)"
        },
        "savesequence()": {
          "definition": "Save_sequence()"
        },
        "foritem()": {
          "definition": "For_item(int num)"
        },
        "bindusages()": {
          "definition": "BindUsages(List<UsageTypeDTO> usages)"
        },
        "moveitemtoposition()": {
          "definition": "Move_item_to_position(string item, int pos)"
        },
        "enterfordescription()": {
          "definition": "Enter__for_description(string val)"
        },
        "verifysharedis()": {
          "definition": "Verify_shared_is(string val)"
        },
        "verifydescriptionis()": {
          "definition": "Verify_description_is(string val)"
        },
        "selectprivate()": {
          "definition": "Select_private()"
        },
        "selectavailablefornewrecords()": {
          "definition": "Select_available_for_new_records()"
        },
        "verifytypeis()": {
          "definition": "Verify_type_is(string val)"
        },
        "clickdone()": {
          "definition": "Click_done()"
        },
        "verifyinthelist()": {
          "definition": "Verify___in_the_list(string usageName, string isIsNotString)"
        },
        "clickdoneoneditdialog()": {
          "definition": "Click_Done_on_Edit_dialog()"
        },
        "selectshared()": {
          "definition": "Select_shared()"
        },
        "verifyusageis()": {
          "definition": "Verify_usage_is(string val)"
        },
        "verifyeditlabelis()": {
          "definition": "Verify_edit_label_is__(string labelValue)"
        },
        "clickdelete()": {
          "definition": "Click_Delete()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "HousingUsageTypeListWorkflow"
    },
    "updateemployment": {
      "namespace": "",
      "methods": {
        "selectfromthetitlerankdropdown()": {
          "definition": "Select__from_the_title_rank_dropdown(string title)"
        },
        "verifythatudfwithlabelhasvalue()": {
          "definition": "Verify_that_UDF_with__label__has_value__(string label, string value)"
        },
        "verifytherearesupervisedemployeesinthereassignmentmodal()": {
          "definition": "Verify_there_are__supervised_employees_in_the_reassignment_modal(int number)"
        },
        "verifythatthesubmitbuttontextis()": {
          "definition": "Verify_that_the_submit_button_text_is__(string value)"
        },
        "setsupervisortoentryof()": {
          "definition": "Set_Supervisor_to__entry_of_(string ordinal, string personName)"
        },
        "verifythatnoupdateactionisselected()": {
          "definition": "Verify_that_no_update_action_is_selected()"
        },
        "browsetoupdateemploymentforatwithmostrecenthiredateof()": {
          "definition": "Browse_to_update_employment_for__at__with_most_recent_hire_date_of__(string employeeName, string organziationName, DateTime mostRecentHireDate)"
        },
        "searchfornewsupervisor()": {
          "definition": "Search_for_new_supervisor()"
        },
        "verifythattheitemintheemploymenttypedropdownis()": {
          "definition": "Verify_that_the__item_in_the_employment_type_dropdown_is__(string ordinal, string employmentType)"
        },
        "bindemploymentstatuses()": {
          "definition": "BindEmploymentStatuses(IList<NamedItem> employmentStatuses)"
        },
        "bindappointmenttypes()": {
          "definition": "BindAppointmentTypes(IList<NamedItem> appointmentTypes)"
        },
        "verifythatnoappointmenttypeisselected()": {
          "definition": "Verify_that_no_appointment_type_is_selected()"
        },
        "clickcancel()": {
          "definition": "Click_Cancel()"
        },
        "clickupdateassignments()": {
          "definition": "Click_Update_Assignments()"
        },
        "verifythatthehiredateis()": {
          "definition": "Verify_that_the_hire_date_is__(DateTime hireDate)"
        },
        "populatereplacementsupervisor()": {
          "definition": "PopulateReplacementSupervisor(int id, string name)"
        },
        "verifywewentbacktotheworkforcepage()": {
          "definition": "Verify_we_went_back_to_the_workforce_page()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "browsetopageforfromtheportalpersonnelpage()": {
          "definition": "Browse_to_page_for__from_the_Portal_Personnel_page(string personName)"
        },
        "searchforsupervisors()": {
          "definition": "Search_for_supervisors()"
        },
        "verifythatsupervisoris()": {
          "definition": "Verify_that_supervisor_is_(string name)"
        },
        "verifythatisinthetitlerankdropdown()": {
          "definition": "Verify_that__is_in_the_title_rank_dropdown(string titleRank)"
        },
        "verifythatthereceivingorganizationtextis()": {
          "definition": "Verify_that_the_receiving_organization_text_is__(string receivingOrganizationText)"
        },
        "clicksubmit()": {
          "definition": "Click_Submit()"
        },
        "verifythatisthecurrentselectedtitlerank()": {
          "definition": "Verify_that__is_the_current_selected_title_rank(string titleRank)"
        },
        "verifythattheemployingorganizationnamevisible()": {
          "definition": "Verify_that_the_employing_organization_name__visible(string isIsNot)"
        },
        "verifythatisintheemploymenttypedropdown()": {
          "definition": "Verify_that__is_in_the_employment_type_dropdown(string employmentType)"
        },
        "verifythatisthecurrentselectedemploymenttype()": {
          "definition": "Verify_that__is_the_current_selected_employment_type(string employmentType)"
        },
        "verifythatthestatusintheemploymentstatusdropdownis()": {
          "definition": "Verify_that_the__status_in_the_employment_status_dropdown_is__(string ordinal, string statusDescription)"
        },
        "setsupervisorto()": {
          "definition": "Set_Supervisor_to_(string personName)"
        },
        "setvalueofudfwithlabelto()": {
          "definition": "Set_value_of_UDF_with_label__to__(string label, string value)"
        },
        "verifythatsupervisorisempty()": {
          "definition": "Verify_that_supervisor_is_empty()"
        },
        "verifythatnoemploymenttypeisselected()": {
          "definition": "Verify_that_no_employment_type_is_selected()"
        },
        "selectfromtheemploymentstatusdropdown()": {
          "definition": "Select__from_the_employment_status_dropdown(string employmentStatus)"
        },
        "selectfromtheupdateactiondropdown()": {
          "definition": "Select__from_the_update_action_dropdown(string action)"
        },
        "clearsupervisor()": {
          "definition": "Clear_Supervisor()"
        },
        "verifythatisintheemploymentstatusdropdown()": {
          "definition": "Verify_that__is_in_the_employment_status_dropdown(string statusDescription)"
        },
        "verifythattheemployeenameis()": {
          "definition": "Verify_that_the_employee_name_is__(string employeeName)"
        },
        "bindemploymenttypes()": {
          "definition": "BindEmploymentTypes(IList<NamedItem> employmentTypes)"
        },
        "verifythattheactionintheupdateactiondropdownis()": {
          "definition": "Verify_that_the__action_in_the_update_action_dropdown_is__(string ordinal, string actionDescription)"
        },
        "setcommentsto()": {
          "definition": "Set_comments_to__(string comments)"
        },
        "returntoworkforcepersonnelpage()": {
          "definition": "ReturnToWorkforcePersonnelPage(RequestPersonnelChangeResultsDTO requestResultsDTO)"
        },
        "verifythattheiteminthetitlerankdropdownis()": {
          "definition": "Verify_that_the__item_in_the_title_rank_dropdown_is__(string ordinal, string titleRank)"
        },
        "verifythatisthecurrentselectedappointmenttype()": {
          "definition": "Verify_that__is_the_current_selected_appointment_type(string appointmentType)"
        },
        "bindupdateactions()": {
          "definition": "BindUpdateActions(IList<NamedItem> updateActions)"
        },
        "verifythattheeffectivedateis()": {
          "definition": "Verify_that_the_effective_date_is__(DateTime effectiveDate)"
        },
        "verifythattheemployingorganizationnameis()": {
          "definition": "Verify_that_the_employing_organization_name_is__(string employingOrganizationName)"
        },
        "verifythatudfwithlabelexist()": {
          "definition": "Verify_that_UDF_with__label__exist(string label, string doesDoesNot)"
        },
        "seteffectivedateto()": {
          "definition": "Set_effective_date_to__(DateTime effectiveDate)"
        },
        "verifythatthelastactioneffectivedateis()": {
          "definition": "Verify_that_the_last_action_effective_date_is__(DateTime lastActionEffectiveDate)"
        },
        "verifythattheitemintheappointmenttypedropdownis()": {
          "definition": "Verify_that_the__item_in_the_appointment_type_dropdown_is__(string ordinal, string appointmentType)"
        },
        "clickremoveassignments()": {
          "definition": "Click_Remove_Assignments()"
        },
        "verifythatthereareemploymentudfs()": {
          "definition": "Verify_that_there_are__employment_UDFs(int count)"
        },
        "bindtitleranks()": {
          "definition": "BindTitleRanks(IList<NamedItem> titleRanks)"
        },
        "verifythatisthecurrentselectedemploymentstatus()": {
          "definition": "Verify_that__is_the_current_selected_employment_status(string employmentStatus)"
        },
        "setnewsupervisorto()": {
          "definition": "Set_new_supervisor_to_(string name)"
        },
        "verifythatisintheappointmenttypedropdown()": {
          "definition": "Verify_that__is_in_the_appointment_type_dropdown(string appointmentType)"
        },
        "clickdonotreassign()": {
          "definition": "Click_Do_Not_Reassign()"
        },
        "verifythatisintheupdateactiondropdown()": {
          "definition": "Verify_that__is_in_the_update_action_dropdown(string actionDescription)"
        },
        "verifythatthepagesubtitleis()": {
          "definition": "Verify_that_the_page_sub_title_is__(string pageSubTitle)"
        },
        "selectfromtheappointmenttypedropdown()": {
          "definition": "Select__from_the_appointment_type_dropdown(string appointmentType)"
        },
        "selectfromtheemploymenttypedropdown()": {
          "definition": "Select__from_the_employment_type_dropdown(string employmentType)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "UpdateEmploymentWorkflow"
    },
    "portaluseranswers": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "PortalUserAnswers"
    },
    "writtentestmanagement": {
      "namespace": "",
      "methods": {
        "createsubcategoryofnamed()": {
          "definition": "Create_subcategory_of__named__(string categoryName, string subcategoryName)"
        },
        "createnewversionofquestionwithanswercorrect()": {
          "definition": "Create_new_version_of_question_with_answer_correct( string questionName, string correctAnswerLetter )"
        },
        "createtlo()": {
          "definition": "Create_TLO(string tlo)"
        },
        "createcategorynamedownedby()": {
          "definition": "Create_category_named__owned_by__(string categoryName, string ownerName)"
        },
        "setownerid()": {
          "definition": "Set_OwnerId_(int ownerId)"
        },
        "verifyquestionforstudentontestflagged()": {
          "definition": "Verify_question__for_student__on_test__flagged(string questionText, string studentName, string testName, string isFlagged)"
        },
        "selectyesascorrectanswer()": {
          "definition": "SelectYesAsCorrectAnswer()"
        },
        "addcorrectanswer()": {
          "definition": "AddCorrectAnswer( string answerText )"
        },
        "createquestionascopyof()": {
          "definition": "CreateQuestionAsCopyOf(string questionIdentifier)"
        },
        "createquestionwithname()": {
          "definition": "CreateQuestionWithName( string questionName )"
        },
        "addelo()": {
          "definition": "Add_ELO(string eloName)"
        },
        "createcategorynamed()": {
          "definition": "Create_category_named(string categoryName)"
        },
        "selectfalseascorrectanswer()": {
          "definition": "SelectFalseAsCorrectAnswer()"
        },
        "addincorrectanswer()": {
          "definition": "AddIncorrectAnswer( string answerText )"
        },
        "createquestion()": {
          "definition": "CreateQuestion()"
        },
        "savequestion()": {
          "definition": "SaveQuestion()"
        },
        "questioncategoryis()": {
          "definition": "Question_Category_is__(string category)"
        },
        "createelofortlo()": {
          "definition": "Create_ELO_for_TLO(string elo, string tlo)"
        },
        "selecttrueascorrectanswer()": {
          "definition": "SelectTrueAsCorrectAnswer()"
        },
        "selectnoascorrectanswer()": {
          "definition": "SelectNoAsCorrectAnswer()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "WrittenTestManagement"
    },
    "importfinish": {
      "namespace": "",
      "methods": {
        "verifywarningthatacadisserviceisunavailableisshown()": {
          "definition": "Verify_warning_that_acadis_service_is_unavailable_is_shown()"
        },
        "verifythatworkitemsfailed()": {
          "definition": "Verify_that__work_items_failed(int numFailures)"
        },
        "setacadisserviceisrunningto()": {
          "definition": "Set_acadis_service_is_running_to__(bool isRunning)"
        },
        "verifythatstatusis()": {
          "definition": "Verify_that_status_is_(string status)"
        },
        "selecttosaveprevalidationcorrections()": {
          "definition": "Select_to_save_prevalidation_corrections()"
        },
        "verifyerrorlistcontains()": {
          "definition": "Verify_Error_list_contains__(string expectedError)"
        },
        "showtemplatesaveoptions()": {
          "definition": "ShowTemplateSaveOptions()"
        },
        "verifyheaderis()": {
          "definition": "Verify_Header_is( string headerText )"
        },
        "showcopypublictemplatemessage()": {
          "definition": "ShowCopyPublicTemplateMessage()"
        },
        "verifythatworkitemssucceeded()": {
          "definition": "Verify_that__work_items_succeeded(int numSucceeded)"
        },
        "selecttokeeptemplateprivate()": {
          "definition": "Select_to_keep_template_private()"
        },
        "proceedtoimportmonitor()": {
          "definition": "Proceed_to_import_monitor()"
        },
        "choosesavetemplateoption()": {
          "definition": "Choose_save_template_option()"
        },
        "verifyuserisshownmessageaboutuniquenameviolation()": {
          "definition": "verify_user_is_shown_message_about_unique_name_violation()"
        },
        "clickdone()": {
          "definition": "Click_done()"
        },
        "waitforworkitemprocessingtocomplete()": {
          "definition": "Wait_for_work_item_processing_to_complete()"
        },
        "nametemplate()": {
          "definition": "Name_template( string templateName )"
        },
        "clickexporterrors()": {
          "definition": "Click_ExportErrors()"
        },
        "navigatetopage()": {
          "definition": "NavigateToPage(ImportWizardPage page)"
        },
        "showuniquenameviolation()": {
          "definition": "ShowUniqueNameViolation()"
        },
        "verifyuserisshownoptionstosavetemplate()": {
          "definition": "verify_user_is_shown_options_to_save_template()"
        },
        "showimportjobreallocated()": {
          "definition": "ShowImportJobReallocated()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ImportFinishWorkflow"
    },
    "automatedtestingsetup": {
      "namespace": "",
      "methods": {
        "correctansweris()": {
          "definition": "Correct_answer__is__(string letter, string text)"
        },
        "forchangeresponseforquestiononexamtoanswer()": {
          "definition": "For__change_response_for_question__on_exam__to_answer__(string studentName, string questionText, string testName, string answerLetter)"
        },
        "createclassunder()": {
          "definition": "Create_class_under(string className, string programName)"
        },
        "begineditionassignmentsfor()": {
          "definition": "Begin_edition_assignments_for(string testName)"
        },
        "recordgradeforforofon()": {
          "definition": "Record_grade_for_for_of_on_(string studentName, string testName, string grade, DateTime date)"
        },
        "createquestionwithtextownedby()": {
          "definition": "Create__question_with_text__owned_by__(QuestionType questionType, string questionText, string owner)"
        },
        "assignrole()": {
          "definition": "Assign_Role__(string roleName)"
        },
        "addautomatedtestnamedtoactivityforclassfromexamtemplatewithminimumpassinggrade()": {
          "definition": "Add_automated_test_named__to_activity__for_class__from_exam_template__with_minimum_passing_grade__(string testName, string activityName, string className, string templateName, decimal minimumPassingGrade)"
        },
        "enrollstudentin()": {
          "definition": "Enroll_student_in_(string studentName, string className)"
        },
        "importanswersforforwithvalueson()": {
          "definition": "Import_answers_for__for__with_values__on__(string studentName, string testName, string answerImportString, DateTime date)"
        },
        "createausernamedwithlogin()": {
          "definition": "Create_a_user_named__with_login__(string name, string login)"
        },
        "createtesttemplateforwitheditions()": {
          "definition": "Create_test_template__for__with__editions(string templateName, string programName, int editions)"
        },
        "renameeditiontofor()": {
          "definition": "Rename_edition_to_for(string oldEditionName, string newEditionName, string templateName)"
        },
        "asrespondtoquestiononexamwithanswer()": {
          "definition": "As__respond_to_question__on_exam__with_answer__(string studentName, string questionText, string testName, string answerLetter)"
        },
        "addspecificquestion()": {
          "definition": "Add_specific_question__(string question)"
        },
        "prepareeditionassignments()": {
          "definition": "Prepare_edition_assignments()"
        },
        "answeris()": {
          "definition": "Answer__is__(string letter, string text)"
        },
        "createstudentinwithacademyidandacadisid()": {
          "definition": "Create_student_in_with_academy_id__and_acadis_id__(string studentName, string className, string academyID, int? acadisID)"
        },
        "createstudentinwithacademyid()": {
          "definition": "Create_student_in_with_academy_id(string studentName, string className, string academyID)"
        },
        "asrespondonexamtoquestionwithanswer()": {
          "definition": "As__respond_on_exam__to_question__with_answer__(string studentName, string testName, int questionNumber, string answerLetter)"
        },
        "createrole()": {
          "definition": "Create_role__(string roleName)"
        },
        "allowon()": {
          "definition": "Allow__on__(string permission, string bizFunc)"
        },
        "gradeexamforon()": {
          "definition": "Grade_exam__for__on__(string testName, string studentName, DateTime date)"
        },
        "completetestwizardwithdefaultsforedition()": {
          "definition": "Complete_test_wizard_with_defaults_for_edition__(string edition)"
        },
        "settesttemplateeditiontoinactive()": {
          "definition": "Set_test_template__edition__to_inactive(string templateName, string edition)"
        },
        "savequestion()": {
          "definition": "Save_Question()"
        },
        "changeanswersforforwithvalueswithreason()": {
          "definition": "Change_answers_for__for__with_values__with_reason__(string studentName, string testName, string answerChangeString, string reason)"
        },
        "clearflagonalltestsindballowingproctors()": {
          "definition": "Clear_flag_on_all_tests_in_db_allowing_proctors()"
        },
        "addnewrulesettoeditionof()": {
          "definition": "Add_new_ruleset_to_edition__of__(string edition, string testTemplateName)"
        },
        "createautomatedtestforusingwithpassfail()": {
          "definition": "Create_automated_test_for_using_with_passfail(string testName, string className, string templateName, decimal passFail)"
        },
        "assigntoeditionfor()": {
          "definition": "Assign_to_edition_for(string studentName, string editionName, string testName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "AutomatedTestingSetup"
    },
    "accessdeniedexception": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "AccessDeniedException"
    },
    "workflow": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "Workflow"
    },
    "emailinstructorassignmentsview": {
      "namespace": "",
      "methods": {
        "verifythereareinstructorswhocanbenotified()": {
          "definition": "Verify_there_are__instructors_who_can_be_notified(int instructorCount)"
        },
        "bindinstructorassignments()": {
          "definition": "BindInstructorAssignments(EmailInstructorAssignmentsDTO assignmentsDto)"
        },
        "verifytherearenoinstructorswhocanbenotified()": {
          "definition": "Verify_there_are_no_instructors_who_can_be_notified()"
        },
        "verifyinstructornumberwithnoemailaddressisnamed()": {
          "definition": "Verify_instructor_number__with_no_email_address_is_named__(int instructorIndex, string instructorName)"
        },
        "browsetoviewforclassnamed()": {
          "definition": "Browse_to_view_for_class_named__(string className)"
        },
        "verifythereareinstructorswhocannotbenotified()": {
          "definition": "Verify_there_are__instructors_who_can_not_be_notified(int instructorCount)"
        },
        "verifyclasscurrentlyhasnoinstructorsassignedtoit()": {
          "definition": "Verify_class_currently_has_no_instructors_assigned_to_it()"
        },
        "verifytherearenoinstructorswhocannotbenotified()": {
          "definition": "Verify_there_are_no_instructors_who_can_not_be_notified()"
        },
        "clickemailbutton()": {
          "definition": "Click_Email_button()"
        },
        "verifyinstructornumberwithanemailaddressisnamed()": {
          "definition": "Verify_instructor_number_with_an_email_address_is_named(int instructorIndex, string instructorName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EmailInstructorAssignmentsView"
    },
    "studentresponseexportmonitor": {
      "namespace": "",
      "methods": {
        "browsetopagefrom()": {
          "definition": "Browse_to_Page_from__(StudentResponseExportReturnTo returnTo)"
        },
        "clickback()": {
          "definition": "Click_Back()"
        },
        "verifyexportsareshowing()": {
          "definition": "Verify_exports_are_showing()"
        },
        "verifynoexportshavebeencreatedmessageisshowing()": {
          "definition": "Verify_no_exports_have_been_created_message_is_showing()"
        },
        "clickstartanewexport()": {
          "definition": "Click_Start_a_New_Export()"
        },
        "bindexportfiledetails()": {
          "definition": "BindExportFileDetails(IList<ExportFileDetailDTO> monitorRows)"
        },
        "verifyusernavigatedtothetestingdashboard()": {
          "definition": "Verify_user__navigated_to_the_testing_dashboard(string wasWasNotString)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifyusernavigatedtotheexportparameterspage()": {
          "definition": "Verify_user__navigated_to_the_export_parameters_page(string wasWasNotString)"
        },
        "verifythelistcontainsfiles()": {
          "definition": "Verify_the_list_contains__files(int expectedRowCount)"
        },
        "navigatetodashboard()": {
          "definition": "NavigateToDashboard()"
        },
        "navigatetoexportparameters()": {
          "definition": "NavigateToExportParameters()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "StudentResponseExportMonitorWorkflow"
    },
    "addressdata": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "AddressData"
    },
    "portalcertificationresponse": {
      "namespace": "",
      "methods": {
        "verifypagelinkedinemailshowspersonasunknown()": {
          "definition": "Verify_page_linked_in_email_shows_person_as_unknown()"
        },
        "verifypagelinkedinemaildisplaysdataforforperson()": {
          "definition": "Verify_page_linked_in_email_displays_data_for__for_person__(string certName, string personName)"
        },
        "verifypagelinkedinemailshowsnocertdata()": {
          "definition": "Verify_page_linked_in_email_shows_no_cert_data()"
        },
        "verifypagelinkedinemailshowsnameassociatedwith()": {
          "definition": "Verify_page_linked_in_email_shows_name_associated_with(string personName)"
        },
        "bindresponse()": {
          "definition": "BindResponse(CertificationResponseDTO dto)"
        },
        "browsetopagegeneratedforlastnameandacademyid()": {
          "definition": "Browse_to_page_generated_for_last_name__and_academy_id__(string lastName, string academyId)"
        },
        "verifyredirectedtoinvalidrequestpage()": {
          "definition": "Verify_redirected_to_invalid_request_page()"
        },
        "verifytherecipientswereandmyemail()": {
          "definition": "Verify_the_recipients_were__and_my_email__(string recipientEmail, string requestorEmail)"
        },
        "redirecttoinvalidpage()": {
          "definition": "RedirectToInvalidPage()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalCertificationResponse"
    },
    "organizationcompliancemonitor": {
      "namespace": "",
      "methods": {
        "writeexport()": {
          "definition": "WriteExport(IList<string> certs)"
        },
        "verifythattherearenoexpiringcerts()": {
          "definition": "Verify_that_there_are_no_expiring_certs()"
        },
        "viewrecipient()": {
          "definition": "View__recipient__(string recipientTypeString, string recipientName)"
        },
        "considerexportrow()": {
          "definition": "Consider_export_row__(int row)"
        },
        "checkshowexpired()": {
          "definition": "Check_show_expired()"
        },
        "verifyis()": {
          "definition": "Verify__is__(string fieldName, string value)"
        },
        "verifyexportcolumnheadersare()": {
          "definition": "Verify_export_column_headers_are__(List<string> expectedHeaders)"
        },
        "verifyresultisforexpiringon()": {
          "definition": "Verify_result__is__for__expiring_on__(int position, string recipient, string cert, DateTime date)"
        },
        "checkcertificationstatus()": {
          "definition": "Check_certification_status_(string status)"
        },
        "verifycannotfilteroncertificationstatus()": {
          "definition": "Verify_cannot_filter_on_certification_status()"
        },
        "selectexpiresinthenextdays()": {
          "definition": "Select_expires_in_the_next__days(string days)"
        },
        "verifycanfilteronactiveemployment()": {
          "definition": "Verify_can_filter_on_active_employment()"
        },
        "sortby()": {
          "definition": "sort_by_(ComplianceMonitorSortColumn column)"
        },
        "bindfiltercertificationmasters()": {
          "definition": "BindFilterCertificationMasters(List<CertMasterListItemDTO> masters)"
        },
        "selectcertificationtype()": {
          "definition": "Select_certification_type(string type)"
        },
        "savefilters()": {
          "definition": "Save_filters()"
        },
        "doexport()": {
          "definition": "Do_export()"
        },
        "uncheckcertificationstatus()": {
          "definition": "Uncheck_certification_status_(string status)"
        },
        "uncheckshowexpired()": {
          "definition": "Uncheck_show_expired()"
        },
        "verifycannotfilteronactiveemployment()": {
          "definition": "Verify_cannot_filter_on_active_employment()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifythereareexportrows()": {
          "definition": "Verify_there_are__export_rows(int count)"
        },
        "selectexpiredinthelastdays()": {
          "definition": "Select_expired_in_the_last__days(string days)"
        },
        "verifyresultisforwithprimaryorganizationofexpiringon()": {
          "definition": "Verify_result__is__for__with_primary_organization_of__expiring_on__(int position, string recipient, string cert, string orgName, DateTime date)"
        },
        "verifyresultis()": {
          "definition": "Verify_result__is__(int position, List<string> expectedRow)"
        },
        "vieworganization()": {
          "definition": "ViewOrganization(int organizationID)"
        },
        "bindexpirationdaterange()": {
          "definition": "BindExpirationDateRange()"
        },
        "uncheckcertification()": {
          "definition": "Uncheck_certification_(string certName)"
        },
        "bindcertifications()": {
          "definition": "BindCertifications(IEnumerable<ExpiringCertificationDTO> certs)"
        },
        "verifythatthereareexpiringcerts()": {
          "definition": "Verify_that_there_are__expiring_certs(int num)"
        },
        "verifycanfilteroncertificationstatus()": {
          "definition": "Verify_can_filter_on_certification_status()"
        },
        "checkcertification()": {
          "definition": "Check_certification_(string certName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "OrganizationComplianceMonitorWorkflow"
    },
    "divisionmanagement": {
      "namespace": "",
      "methods": {
        "createanactivedivisionnamedforacademy()": {
          "definition": "Create_an_active_division_named__for_academy__(string divisionName, string academyName)"
        },
        "setdivisionactive()": {
          "definition": "Set_division__active(string divisionName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "DivisionManagement"
    },
    "departuremonitor": {
      "namespace": "",
      "methods": {
        "selectfiscalyearbutton()": {
          "definition": "SelectFiscalYearButton()"
        },
        "selectprograms()": {
          "definition": "Select_programs__(List<string> programNames)"
        },
        "verifyfiscalyeartimeframefilteroptionsgofromto()": {
          "definition": "Verify_fiscal_year_timeframe_filter_options_go_from_to(int start, int end)"
        },
        "sortresultsby()": {
          "definition": "Sort_results_by____(DepartureMonitorColumn column, string direction)"
        },
        "selectintimeframe()": {
          "definition": "Select___in_timeframe(DateRangeFilterMode timeFrameMode)"
        },
        "addfiscalenditem()": {
          "definition": "AddFiscalEndItem(string text, string value)"
        },
        "setupprogramfilters()": {
          "definition": "SetupProgramFilters(List<ProgramTypeDTO> programDTOs)"
        },
        "setcustomenddateto()": {
          "definition": "Set_custom_end_date_to_(DateTime endDate)"
        },
        "verifydisplayswithstartandendandstudents()": {
          "definition": "Verify__displays_with_start__and_end__and__students(string className, string start, string end, string numStudents)"
        },
        "selectcustomtimeframebutton()": {
          "definition": "Select_Custom_Timeframe_Button()"
        },
        "setpagesizeto()": {
          "definition": "Set_page_size_to__(int pageSize)"
        },
        "verifydoesnotdisplay()": {
          "definition": "Verify__does_not_display(string className)"
        },
        "verifythatthereareresultsdisplayed()": {
          "definition": "Verify_that_there_are__results_displayed(int numResults)"
        },
        "verifyfiscalyeartimeframefilterisselectedandsettointo()": {
          "definition": "Verify_fiscal_year_timeframe_filter_is_selected_and_set_to_in_to(DateRangeFilterMode timeframeMode, int start, int end)"
        },
        "applyfilters()": {
          "definition": "Apply_Filters()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifynomatchingdeparturesshowsmessageandhidesdata()": {
          "definition": "Verify_No_Matching_Departures_Shows_Message_and_hides_data()"
        },
        "verifyresultis()": {
          "definition": "Verify_result__is__(int index, string className)"
        },
        "navigatetopage()": {
          "definition": "Navigate_to_page__(int page)"
        },
        "shownomatchingdepartures()": {
          "definition": "ShowNoMatchingDepartures()"
        },
        "setcustomstartdateto()": {
          "definition": "Set_custom_start_date_to_(DateTime startDate)"
        },
        "addfiscalstartitem()": {
          "definition": "AddFiscalStartItem(string text, string value)"
        },
        "bindselectedfilters()": {
          "definition": "BindSelectedFilters(DepartureMonitorFilterDTO filters)"
        },
        "binddeparturemonitorfooter()": {
          "definition": "BindDepartureMonitorFooter(DepartureMonitorRowDto dto)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "DepartureMonitorWorkflow"
    },
    "firearmedit": {
      "namespace": "",
      "methods": {
        "markasinactive()": {
          "definition": "Mark_as_inactive()"
        },
        "verifycaliberis()": {
          "definition": "Verify_caliber_is_(string caliber)"
        },
        "verifyaccessoriesis()": {
          "definition": "Verify_accessories_is_(string accessories)"
        },
        "savefirearm()": {
          "definition": "Save_firearm()"
        },
        "enterforaccessories()": {
          "definition": "Enter_for_accessories(string accessories)"
        },
        "selectmodel()": {
          "definition": "Select_model(string model)"
        },
        "verifyactiveis()": {
          "definition": "Verify_active_is(bool active)"
        },
        "enterforcaliber()": {
          "definition": "Enter_for_caliber(string caliber)"
        },
        "verifyserialnumberis()": {
          "definition": "Verify_serial_number_is_(string serialNumber)"
        },
        "addfirearmofmodelwithserialnumbertoorganization()": {
          "definition": "Add_firearm_of_model__with_serial_number___to_organization__(string firearmModel, string serialNumber, string orgName)"
        },
        "verifyassetnumberis()": {
          "definition": "Verify_asset_number_is_(string assetNumber)"
        },
        "verifyowneris()": {
          "definition": "Verify_owner_is_(string owner)"
        },
        "verifypurchasedateis()": {
          "definition": "Verify_purchase_date_is_(string purchaseDate)"
        },
        "enterforowner()": {
          "definition": "Enter__for_owner(string owner)"
        },
        "enterforserialnumber()": {
          "definition": "Enter__for_serial_number(string serial)"
        },
        "enterforpurchaseprice()": {
          "definition": "Enter_for_purchase_price(string purchasePrice)"
        },
        "verifypagetitleis()": {
          "definition": "Verify_page_title_is(string title)"
        },
        "enterforcomments()": {
          "definition": "Enter_for_comments(string comments)"
        },
        "enterforpurchasedate()": {
          "definition": "Enter_for_purchase_date(string purchaseDate)"
        },
        "enterfordescription()": {
          "definition": "Enter__for_Description(string value)"
        },
        "returntorecord()": {
          "definition": "ReturnToRecord(int firearmID)"
        },
        "verifyitemisnotanavailablefirearmtype()": {
          "definition": "Verify_item_is_not_an_available_firearm_type(string type)"
        },
        "markasactive()": {
          "definition": "Mark_as_active()"
        },
        "verifypurchasepriceis()": {
          "definition": "Verify_purchase_price_is_(string purchasePrice)"
        },
        "selectforresourceimage()": {
          "definition": "Select__for_resource_image(string fileName)"
        },
        "enterforassetnumber()": {
          "definition": "Enter_for_asset_number(string assetNumber)"
        },
        "verifyselectedtypeis()": {
          "definition": "Verify_selected_type_is(string type)"
        },
        "verifycommentsis()": {
          "definition": "Verify_comments_is_(string comments)"
        },
        "verifyresourceidis()": {
          "definition": "Verify_resourceid_is(string resourceid)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "FirearmEdit"
    },
    "audittrailmanagement": {
      "namespace": "",
      "methods": {
        "verifyanauditrecordcontainingfromdoesnotexist()": {
          "definition": "Verify_an_audit_record_containing__from__does_not_exist(string what, string login)"
        },
        "verifyexportauditimpacted()": {
          "definition": "Verify_export_audit_impacted__(string impactedPerson)"
        },
        "verifyanauditrecordcontainingfromexists()": {
          "definition": "Verify_an_audit_record_containing__from__exists(string what, string login)"
        },
        "verifyexportauditimpactedtotalpeople()": {
          "definition": "Verify_export_audit_impacted__total_people(int count)"
        },
        "considerexportauditrecordforfrom()": {
          "definition": "Consider_export_audit_record_for__from__(string what, string login)"
        },
        "verifyanauditrecordforfromexists()": {
          "definition": "Verify_an_audit_record_for__from__exists(string what, string login)"
        },
        "addauditrecordforactivity()": {
          "definition": "AddAuditRecordForActivity(ActivityAuditRecordType modificationType, string activityName, string className)"
        },
        "verifyexportauditdidnotimpactanypeople()": {
          "definition": "Verify_export_audit_did_not_impact_any_people()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "AuditTrailManagement"
    },
    "testmanagement": {
      "namespace": "",
      "methods": {
        "definenumerictestnamedwithattemptslabeled()": {
          "definition": "Define_numeric_test_named__with__attempts_labeled__(string testName, int numberOfAttempts, string attemptLabel)"
        },
        "setminimumnumberofpartsrequiredtopassto()": {
          "definition": "Set_Minimum_Number_Of_Parts_Required_To_Pass_To(int minPassingParts)"
        },
        "definemultiparttestnamed()": {
          "definition": "define_multipart_test_named__(string testName)"
        },
        "testisnotgraded()": {
          "definition": "test_is_not_graded()"
        },
        "defineautomatedtestingpercentagetestnamed()": {
          "definition": "define_automated_testing_percentage_test_named(string testName)"
        },
        "scoreswillbecomparedtoapassingtimeofandnogradewillberecorded()": {
          "definition": "scores_will_be_compared_to_a_passing_time_of_and_no_grade_will_be_recorded(string time)"
        },
        "collectweaponmakeandmodel()": {
          "definition": "collect_weapon_make_and_model()"
        },
        "theattemptpassinggradeis()": {
          "definition": "the_attempt_passing_grade_is(decimal grade)"
        },
        "assignacopyoftesttoactivityinclasswithname()": {
          "definition": "Assign_a_copy_of_test__to_activity__in_class__with_name__(string testTemplateName, string activityName, string classDefinitionName, string newTestName)"
        },
        "addtheeloto()": {
          "definition": "add_the_elo_to(string eloName, string itemName)"
        },
        "assignscaletotest()": {
          "definition": "Assign_scale_to_test(string scaleName)"
        },
        "theoverallpassinggradeis()": {
          "definition": "The_overall_passing_grade_is(decimal passing)"
        },
        "verifytesthasversionof()": {
          "definition": "Verify_test_has_version_of(string testName, int version, string certMaster)"
        },
        "requirestudentstopassattemptstopassthetest()": {
          "definition": "require_students_to_pass_attempts_to_pass_the_test(int minimumPassingAttempts)"
        },
        "setnumerictestscoringmethodto()": {
          "definition": "set_numeric_test_scoring_method_to(string scoringMethod)"
        },
        "duplicatewithname()": {
          "definition": "Duplicate__with_name__(string testToCopy, string newTestName)"
        },
        "addanumericitemnamedpassingatandrangingbetweenand()": {
          "definition": "add_a_numeric_item_named__passing_at__and_ranging_between__and__(string itemName, decimal passingScore, decimal minPossible, decimal maxPossible)"
        },
        "settestallowsproctoraccessto()": {
          "definition": "set_test_allows_proctor_access_to__(bool allowProctorAccess)"
        },
        "withapositiveresultofandanegativeresultof()": {
          "definition": "With_a_positive_result_of_and_a_negative_result_of(string positive, string negative)"
        },
        "savetest()": {
          "definition": "Save_test()"
        },
        "defineapassfailchecklisttestnamed()": {
          "definition": "define_a_pass_fail_checklist_test_named( string testName )"
        },
        "createtimedtestnamedusing()": {
          "definition": "Create_Timed_Test_named_using( string testName, string scaleName )"
        },
        "definepercentagetestnamedwithminimumpassinggrade()": {
          "definition": "Define_percentage_test_named_with_minimum_passing_grade(string testName, decimal minPassingGrade)"
        },
        "retestsarenotallowed()": {
          "definition": "Retests_are_not_allowed()"
        },
        "allowretakes()": {
          "definition": "Allow_retakes(int numberOfRetakes)"
        },
        "definetimedtestnamed()": {
          "definition": "Define_Timed_Test_named(string testName)"
        },
        "allowretakesforembeddedtestonactivity()": {
          "definition": "Allow__retakes_for_embedded_test_on_activity__(int numberOfRetakes, string activityName)"
        },
        "assigntoofclassintestgroup()": {
          "definition": "assign__to___of_class__in_Test_Group__(string testName, string activityName, string className, string groupName)"
        },
        "scaleontestwillcopywhensaved()": {
          "definition": "Scale_on_test_will_copy_when_saved(string scaleName, string testName)"
        },
        "waivedgradeis()": {
          "definition": "waived_grade_is(decimal score)"
        },
        "noscoreorgradewillberecordedstudentmustpasstherequirednumberofpartstopass()": {
          "definition": "no_score_or_grade_will_be_recorded_student_must_pass_the_required_number_of_parts_to_pass()"
        },
        "addacriticalnumericitemnamedpassingatandrangingbetweenand()": {
          "definition": "add_a_critical_numeric_item_named__passing_at__and_ranging_between__and__(string itemName, decimal passingScore, decimal minPossible, decimal maxPossible)"
        },
        "addrawscoresfromalltestpartsand()": {
          "definition": "Add_raw_scores_from_all_test_parts_and(string useScaleForGrading)"
        },
        "donotrecordagrade()": {
          "definition": "do_not_record_a_grade()"
        },
        "definenumerictestnamedwithmaximumscoreofandminimumpassinggradeof()": {
          "definition": "Define_numeric_test_named__with_maximum_score_of___and_minimum_passing_grade_of__(string testName, decimal maximumScore, decimal minPassingGrade)"
        },
        "assignembeddedtesttoactivityin()": {
          "definition": "Assign_embedded_test_to_activity__in__(string activityName, string classDefName)"
        },
        "setpassfailscoringmethodto()": {
          "definition": "set_pass_fail_scoring_method_to(string scoringMethod)"
        },
        "assigntesttoactivityin()": {
          "definition": "Assign_test__to_activity__in__(string testName, string activityName, string classDefName)"
        },
        "scaleontestwillnotcopywhensaved()": {
          "definition": "Scale_on_test_will_not_copy_when_saved(string scaleName, string testName)"
        },
        "scoretestasofattempts()": {
          "definition": "Score_test_as_of__attempts(string scoringMethod, string topOrBottom, int numAttempts)"
        },
        "definenumerictestnamedwithattempts()": {
          "definition": "Define_numeric_test_named__with__attempts(string testName, int numberOfAttempts)"
        },
        "mustpass()": {
          "definition": "must_pass()"
        },
        "defineascoredchecklisttestnamed()": {
          "definition": "define_a_scored_checklist_test_named( string testName )"
        },
        "addanumericitemnamedwithabbreviationpassingatandrangingbetweenand()": {
          "definition": "add_a_numeric_item_named__with_abbreviation__passing_at__and_ranging_between__and__(string itemName, string itemAbbreviation, decimal passingScore, decimal minPossible, decimal maxPossible)"
        },
        "verifystudentsareinprogress()": {
          "definition": "Verify__students_are_in_progress(int inProgress)"
        },
        "addacriticalnumericitemnamedwithabbreviationpassingatandrangingbetweenand()": {
          "definition": "add_a_critical_numeric_item_named__with_abbreviation__passing_at__and_ranging_between__and__(string itemName, string itemAbbreviation, decimal passingScore, decimal minPossible, decimal maxPossible)"
        },
        "verifymultiparttesthastests()": {
          "definition": "Verify_multipart_test__has_tests__(string testName, List<string> testParts)"
        },
        "turntestpartsintoindividualpercentpartsand()": {
          "definition": "Turn_test_parts_into_individual_percent_parts_and(string useScaleForGrading)"
        },
        "setpassingretakepolicyto()": {
          "definition": "set_passing_retake_policy_to(string policy)"
        },
        "saveobservedtest()": {
          "definition": "Save_Observed_Test( string testName )"
        },
        "setfailingretakepolicyto()": {
          "definition": "set_failing_retake_policy_to(string policy)"
        },
        "retestsandwaiversarenotallowed()": {
          "definition": "retests_and_waivers_are_not_allowed()"
        },
        "defineatimedtestnamedwithmaximumscoreofandminimumpassinggradeof()": {
          "definition": "Define_a_timed_Test_named__with_maximum_score_of___and_minimum_passing_grade_of__(string testName, decimal maximumScore, decimal minPassingGrade)"
        },
        "verifystudentshavepassed()": {
          "definition": "Verify__students_have_passed(int passing)"
        },
        "addtestaspartwithheader()": {
          "definition": "Add_test__as_part_with_header__(string testName, string partName)"
        },
        "decimalsallowedonnumerictestis()": {
          "definition": "decimals_allowed_on_numeric_test_is(int numberofDecimals)"
        },
        "assignautomatedtesttemplate()": {
          "definition": "Assign_automated_test__template__(string testName, string templateName)"
        },
        "setallowedvaluesforitemto()": {
          "definition": "set_allowed_values_for_item__to__(string itemName, string allowedValues)"
        },
        "allowattemptslabeled()": {
          "definition": "Allow_attempts_labeled( int numAttempts, string attemptLabel )"
        },
        "collectweaponserialnumber()": {
          "definition": "collect_weapon_serial_number()"
        },
        "overridethegradewith0or100()": {
          "definition": "override_the_grade_with_0_or_100()"
        },
        "defineasfirearmstest()": {
          "definition": "Define_as_Firearms_Test( string testName )"
        },
        "timedtestscoredby()": {
          "definition": "Timed_Test_scored_by(string scaleName)"
        },
        "calculateapercentagegrade()": {
          "definition": "calculate_a_percentage_grade()"
        },
        "usescaletoassignrating()": {
          "definition": "Use_scale_to_assign_rating()"
        },
        "setminimumoverallpassingscoretopercent()": {
          "definition": "Set_Minimum_Overall_Passing_Score_To__Percent(decimal minPassing)"
        },
        "marktestasatrisk()": {
          "definition": "mark_test_as_at_risk()"
        },
        "usingtestnamed()": {
          "definition": "Using_test_named__(string testName)"
        },
        "eachattemptcanrangefromto()": {
          "definition": "Each_attempt_can_range_from_to( decimal min, decimal max )"
        },
        "requirestudentstopassitemstopassthetest()": {
          "definition": "require_students_to_pass_items_to_pass_the_test(int minimumPassingItems)"
        },
        "allowwaiversbasedonagradeof()": {
          "definition": "Allow_waivers_based_on_a_grade_of( decimal score )"
        },
        "verifystudentshavecompleted()": {
          "definition": "Verify__students_have_completed(int completed)"
        },
        "defineapassfailchecklisttestnamedwithitems()": {
          "definition": "define_a_pass_fail_checklist_test_named_with_items(string testName, int itemCount)"
        },
        "verifytestdoesnotexist()": {
          "definition": "Verify_test__does_not_exist( string testName )"
        },
        "addapassfailitemnamed()": {
          "definition": "add_a_pass_fail_item_named( string itemName )"
        },
        "defineapassfailtestnamedwithminimumpassinggrade()": {
          "definition": "Define_a_pass_fail_test_named_with_minimum_passing_grade(string testName, decimal minPassingGrade)"
        },
        "waiversarenotallowed()": {
          "definition": "Waivers_are_not_allowed()"
        },
        "setweightto()": {
          "definition": "set_weight_to(string testName, decimal weight)"
        },
        "defineafirearmstestnamedwithmaximumscoreofandminimumpassinggradeof()": {
          "definition": "Define_a_Firearms_Test_named__with_maximum_score_of___and_minimum_passing_grade_of__(string testName, decimal maximumScore, decimal minPassingGrade)"
        },
        "highscoresarethanlowscores()": {
          "definition": "high_scores_are_than_low_scores(string worseOrBetter)"
        },
        "allowwaivers()": {
          "definition": "Allow_waivers()"
        },
        "calculatethegradeaseither0or100()": {
          "definition": "calculate_the_grade_as_either_0_or_100()"
        },
        "timedtestismeasuredas()": {
          "definition": "Timed_Test_is_measured_as( string timePattern )"
        },
        "verifytestexists()": {
          "definition": "Verify_test__exists( string testName )"
        },
        "addtheelototest()": {
          "definition": "add_the_elo_to_test_(string eloName, string testName)"
        },
        "setwaiverpolicyto()": {
          "definition": "set_waiver_policy_to(string policy)"
        },
        "addinstructions()": {
          "definition": "Add_instructions( string instructions )"
        },
        "verifystudentshavefailed()": {
          "definition": "Verify__students_have_failed(int failing)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "TestManagement"
    },
    "agencyrosterreport": {
      "namespace": "",
      "methods": {
        "verifyhiredateisblank()": {
          "definition": "Verify_hire_date_is_blank()"
        },
        "verifyappointmenttypeis()": {
          "definition": "Verify_appointment_type_is__(string appointmentType)"
        },
        "verifyhiredateis()": {
          "definition": "Verify_hire_date_is__(DateTime hireDate)"
        },
        "verifypersonhasrows()": {
          "definition": "Verify_person_has__rows(int rowCount)"
        },
        "considerrowsforperson()": {
          "definition": "Consider_rows_for_person__(string personName)"
        },
        "verifycertificationisblank()": {
          "definition": "Verify_certification_is_blank()"
        },
        "verifycertificationis()": {
          "definition": "Verify_certification_is__(string certName)"
        },
        "openreportfororganization()": {
          "definition": "Open_report_for_organization__(string orgName)"
        },
        "bindreportinfo()": {
          "definition": "BindReportInfo(AgencyRosterReportDTO reportDto)"
        },
        "setheaderinfo()": {
          "definition": "SetHeaderInfo(ReportHeaderDTO dto)"
        },
        "verifyappointmenttypeisblank()": {
          "definition": "Verify_appointment_type_is_blank()"
        },
        "verifyemploymenttypeisblank()": {
          "definition": "Verify_employment_type_is_blank()"
        },
        "verifytitleis()": {
          "definition": "Verify_title_is__(string title)"
        },
        "verifyemploymenttypeis()": {
          "definition": "Verify_employment_type_is__(string employmentType)"
        },
        "verifydoesnotappearinreport()": {
          "definition": "Verify__does_not_appear_in_report(string personName)"
        },
        "verifytitleisblank()": {
          "definition": "Verify_title_is_blank()"
        },
        "considerrow()": {
          "definition": "Consider_row__(int rowNum)"
        },
        "verifynameisblank()": {
          "definition": "Verify_name_is_blank()"
        },
        "verifyreportnameis()": {
          "definition": "Verify_report_name_is__(string reportName)"
        },
        "verifynameisnotblank()": {
          "definition": "Verify_name_is_not_blank()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AgencyRosterReportWorkflow"
    },
    "testopiamonitor": {
      "namespace": "",
      "methods": {
        "onsuitecompleted()": {
          "definition": "OnSuiteCompleted()"
        },
        "onscenariostarted()": {
          "definition": "OnScenarioStarted(TestopiaAPI.ScenarioContext context)"
        },
        "onscenariocompleted()": {
          "definition": "OnScenarioCompleted(ScenarioRunResults results)"
        },
        "onsuitestarted()": {
          "definition": "OnSuiteStarted(Arguments testopiaArguments)"
        },
        "onstarted()": {
          "definition": "OnWorkflowStarted(IWorkflowBlock workflow)"
        }
      },
      "parent-name": null,
      "class-name": "TestopiaMonitor"
    },
    "rolemanagement": {
      "namespace": "",
      "methods": {
        "assignroletouser()": {
          "definition": "Assign_role_to_user(string roleName, string userName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "RoleManagement"
    },
    "viewinquiryitem": {
      "namespace": "",
      "methods": {
        "verifyresponseisnotrequired()": {
          "definition": "Verify_response_is_not_required()"
        },
        "verifycomparabletrainingcannotbesubstituted()": {
          "definition": "Verify_comparable_training_cannot_be_substituted()"
        },
        "bindresponseoptions()": {
          "definition": "BindResponseOptions(List<ResponseOptionEditDTO> options)"
        },
        "verifyitemisusedbyotherobjects()": {
          "definition": "Verify_item_is_used_by_other_objects()"
        },
        "verifyitemcanbereused()": {
          "definition": "Verify_item_can_be_reused()"
        },
        "verifycommentsforoptionare()": {
          "definition": "Verify_comments_for_option__are__(int optionNum, string comments)"
        },
        "verifyautofulfillingclasstemplateis()": {
          "definition": "Verify_autofulfilling_class_template_is__(string classTemplateName)"
        },
        "verifyitemcannotbereused()": {
          "definition": "Verify_item_cannot_be_reused()"
        },
        "verifyitemrequiresnewfulfillmentinformation()": {
          "definition": "Verify_item_requires_new_fulfillment_information()"
        },
        "verifynumericvaluesaredisplayedforresponseset()": {
          "definition": "Verify_numeric_values_are_displayed_for_response_set()"
        },
        "verifyitemisnotusedbyotherobjects()": {
          "definition": "Verify_item_is_not_used_by_other_objects()"
        },
        "verifytextforoptionis()": {
          "definition": "Verify_text_for_option__is__(int optionNum, string text)"
        },
        "verifynumericvaluesarenotdisplayedforresponseset()": {
          "definition": "Verify_numeric_values_are_not_displayed_for_response_set()"
        },
        "verifynumericvalueforoptionis()": {
          "definition": "Verify_numeric_value_for_option__is__(int optionNum, int numericVal)"
        },
        "verifytrainingcanoccuratanytimepriortothekeyevent()": {
          "definition": "Verify_training_can_occur_at_any_time_prior_to_the_key_event()"
        },
        "verifytitleis()": {
          "definition": "Verify_title_is__(string title)"
        },
        "browsetoviewitemonperformancereport()": {
          "definition": "Browse_to_view_item__on_performance_report__(string itemText, string reportName)"
        },
        "verifyitemisautofulfilled()": {
          "definition": "Verify_item_is_autofulfilled()"
        },
        "verifyresponseisrequired()": {
          "definition": "Verify_response_is_required()"
        },
        "verifyitemwillreusefulfillmentinformation()": {
          "definition": "Verify_item_will_reuse_fulfillment_information()"
        },
        "browsetoviewrequirementoncertificationtemplate()": {
          "definition": "Browse_to_view__requirement__on_certification_template__(CertRequirementContext context, string itemText, string masterName)"
        },
        "verifyitemisnotselectedbydefault()": {
          "definition": "Verify_item_is_not_selected_by_default()"
        },
        "verifyitemisnotautofulfilled()": {
          "definition": "Verify_item_is_not_autofulfilled()"
        },
        "browsetoviewprerequisiteonclassregistrationfor()": {
          "definition": "Browse_to_view_prerequisite__on_class_registration_for__(string itemText, string classTemplName)"
        },
        "verifyitemisselectedbydefault()": {
          "definition": "Verify_item_is_selected_by_default()"
        },
        "verifycommentsare()": {
          "definition": "Verify_comments_are__(string commentOptionStr)"
        },
        "verifythereareresponseoptions()": {
          "definition": "Verify_there_are__response_options(int numOptions)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ViewInquiryItemWorkflow"
    },
    "organizationview": {
      "namespace": "",
      "methods": {
        "verifyorganizationnameis()": {
          "definition": "Verify_organization_name_is__(string orgName)"
        },
        "verifycertificationlistisvisible()": {
          "definition": "Verify_certification_list_is_visible()"
        },
        "verifythatlistcontainscertifications()": {
          "definition": "Verify_that_list_contains__certifications(int numCerts)"
        },
        "verifyvehiclesdonotcontain()": {
          "definition": "Verify_vehicles_do_not_contain_( string name)"
        },
        "verifyphoneis()": {
          "definition": "Verify_phone_is__(string phone)"
        },
        "verifythatisnotprintable()": {
          "definition": "Verify_that__is_not_printable(string certName)"
        },
        "hideorgcerts()": {
          "definition": "HideOrgCerts()"
        },
        "verifyusereditcontactinformation()": {
          "definition": "Verify_user__edit_contact_information(string canCannot)"
        },
        "browsetoportalorganizationtab()": {
          "definition": "Browse_to_portal_organization_tab()"
        },
        "verifythatisnotviewable()": {
          "definition": "Verify_that__is_not_viewable(string certName)"
        },
        "verifythatisrenewable()": {
          "definition": "Verify_that__is_renewable(string certName)"
        },
        "verifythereisnophone()": {
          "definition": "Verify_there_is_no_phone()"
        },
        "verifyvehicletabisnotvisible()": {
          "definition": "Verify_vehicle_tab_is_not_visible()"
        },
        "verifythatcertificationsrestricted()": {
          "definition": "Verify_that_certifications__restricted(string certsAreRestrictedString)"
        },
        "verifycertificationlistisnotvisible()": {
          "definition": "Verify_certification_list_is_not_visible()"
        },
        "verifythatlistcontains()": {
          "definition": "Verify_that_list_contains__(string certName)"
        },
        "verifythatnoprintpreferencesarerequestedandreportwindowisvisible()": {
          "definition": "Verify_that_no_print_preferences_are_requested_and_report_window_is_visible()"
        },
        "verifythereisnomailingaddress()": {
          "definition": "Verify_there_is_no_mailing_address()"
        },
        "loadmailingaddress()": {
          "definition": "LoadMailingAddress(AddressDto addr, PhoneDto phone, string portalAccountEmail)"
        },
        "hidevehicles()": {
          "definition": "HideVehicles()"
        },
        "verifyvehiclescontainnametypestatus()": {
          "definition": "Verify_vehicles_contain_Name_Type_Status( string name, string type, string status)"
        },
        "verifymailingaddressis()": {
          "definition": "Verify_mailing_address_is__(string address1, string address2, string city, string state, string zip)"
        },
        "verifythatisnotrenewable()": {
          "definition": "Verify_that__is_not_renewable(string certName)"
        },
        "verifythatisprintable()": {
          "definition": "Verify_that__is_printable(string certName)"
        },
        "verifythatuserissuecertifications()": {
          "definition": "Verify_that_user__issue_certifications(string canIssueCertsString)"
        },
        "bindvehicles()": {
          "definition": "BindVehicles(List<VehicleListItemDto> dtos)"
        },
        "verifyvehicletabisvisible()": {
          "definition": "Verify_vehicle_tab_is_visible()"
        },
        "bindcertifications()": {
          "definition": "BindCertifications()"
        },
        "print()": {
          "definition": "Print(string certName)"
        },
        "verifythatisnotemailable()": {
          "definition": "Verify_that__is_not_emailable(string certName)"
        },
        "verifyemailis()": {
          "definition": "Verify_email_is__(string email)"
        },
        "verifythereisnoemail()": {
          "definition": "Verify_there_is_no_email()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "OrganizationViewWorkflow"
    },
    "studentdistributionreport": {
      "namespace": "",
      "methods": {
        "bindsendingorganizations()": {
          "definition": "BindSendingOrganizations(IList<StudentDistributionReportSendingOrgDto> sendingOrgs)"
        },
        "verifysendingorganizationfooterhasstudentsandtext()": {
          "definition": "Verify_Sending_Organization_footer_has__Students_and_text__(int numStudents, string dummy)"
        },
        "browsetoreportfor()": {
          "definition": "Browse_to_report_for__(string className)"
        },
        "verifyacademyheaderis()": {
          "definition": "Verify_Academy_Header_is__(string expected)"
        },
        "verifydatesheaderis()": {
          "definition": "Verify_Dates_Header_is__(string expected)"
        },
        "setsendingorganizationfooter()": {
          "definition": "SetSendingOrganizationFooter(int totalStudents)"
        },
        "setheaderinfo()": {
          "definition": "SetHeaderInfo(ReportHeaderDTO dto)"
        },
        "verifysendingorganizationhasrows()": {
          "definition": "Verify_Sending_Organization_has__Rows(int number)"
        },
        "verifysendingorganizationrowis()": {
          "definition": "Verify_Sending_Organization_row__is___(int index, int numStudents, string orgName)"
        },
        "verifyclassheaderis()": {
          "definition": "Verify_Class_Header_is__(string expected)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "StudentDistributionReportWorkflow"
    },
    "exceptionthrowingassertlistener": {
      "namespace": "",
      "methods": {
        "writeline()": {
          "definition": "WriteLine(string message)"
        },
        "fail()": {
          "definition": "Fail(string message, string detailMessage)"
        },
        "write()": {
          "definition": "Write(string message)"
        }
      },
      "parent-name": null,
      "class-name": "ExceptionThrowingAssertListener"
    },
    "surveyaddeditwizardfinish": {
      "namespace": "",
      "methods": {
        "clickback()": {
          "definition": "Click_Back()"
        },
        "navigateback()": {
          "definition": "NavigateBack()"
        },
        "verifysurveyavailable()": {
          "definition": "Verify_survey__available(string isIsNotCheckedStr)"
        },
        "uncheckcheckboxtomakethissurveyavailable()": {
          "definition": "Uncheck_checkbox_to_make_this_survey_available()"
        },
        "browsetopagetosurvey()": {
          "definition": "Browse_to_page_to__survey__(AddEditMode addEditMode, string formName)"
        },
        "enterforconfirmationtext()": {
          "definition": "Enter__for_Confirmation_Text(string text)"
        },
        "verifyconfirmationtextis()": {
          "definition": "Verify_Confirmation_Text_is__(string text)"
        },
        "verifyusernavigatedtothesurveylist()": {
          "definition": "Verify_user_navigated_to_the_Survey_list()"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "checkcheckboxtomakethissurveyavailable()": {
          "definition": "Check_checkbox_to_make_this_survey_available()"
        },
        "verifyusernavigatedtopreviouspage()": {
          "definition": "Verify_user_navigated_to_previous_page()"
        },
        "navigatetosurveylist()": {
          "definition": "NavigateToSurveyList()"
        },
        "browsetopageforsurvey()": {
          "definition": "Browse_to_page_for_survey(string formName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "SurveyAddEditWizardFinishWorkflow"
    },
    "displaysettingsview": {
      "namespace": "",
      "methods": {
        "loaduserdisplaysettings()": {
          "definition": "LoadUserDisplaySettings(int userID)"
        },
        "saveuserdisplaysettings()": {
          "definition": "SaveUserDisplaySettings()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "DisplaySettingsViewWorkflow"
    },
    "auditcertapplications": {
      "namespace": "",
      "methods": {
        "verifyapplicantnameis()": {
          "definition": "Verify_applicant_name_is__(string applicantName)"
        },
        "showinactiveapprovalconfirmation()": {
          "definition": "ShowInactiveApprovalConfirmation()"
        },
        "verifysavecompleteandredirectedtopendingapplicationlist()": {
          "definition": "Verify_save_complete_and_redirected_to_pending_application_list()"
        },
        "setnewcertificationstatusto()": {
          "definition": "Set_new_certification_status_to__(string statusName)"
        },
        "verifythereisnoreasonforrejection()": {
          "definition": "Verify_there_is_no_reason_for_rejection()"
        },
        "setothernumberto()": {
          "definition": "Set_other_number_to(string otherNumber)"
        },
        "verifynewcertificationstatusis()": {
          "definition": "Verify_new_certification_status_is__(string newCertStatus)"
        },
        "clickcontinuetosaveinactivestatus()": {
          "definition": "Click_Continue_to_save_inactive_status()"
        },
        "verifycertexpirationupdatecontrolisnotvisible()": {
          "definition": "Verify_cert_expiration_update_control_is_not_visible()"
        },
        "restorestate()": {
          "definition": "RestoreState()"
        },
        "verifyeffectivedateistoday()": {
          "definition": "Verify_effective_date_is_today()"
        },
        "verifythereisnoothercertificationnumber()": {
          "definition": "Verify_there_is_no_other_certification_number()"
        },
        "browsetopendingcertapplicationforcertificationfor()": {
          "definition": "Browse_to_pending_cert_application_for__certification_for____(string certVersionName, string recipientType, string recipientName)"
        },
        "verifytherearenoauditcomments()": {
          "definition": "Verify_there_are_no_audit_comments()"
        },
        "verifyinactivestatusconfirmationisvisible()": {
          "definition": "Verify_inactive_status_confirmation_is_visible()"
        },
        "selectrejectedoption()": {
          "definition": "Select_rejected_option()"
        },
        "verifyrecipientnameis()": {
          "definition": "Verify_recipient_name_is__(string recipientName)"
        },
        "verifycertexpirationupdatecontrolisvisible()": {
          "definition": "Verify_cert_expiration_update_control_is_visible()"
        },
        "setauditcommentsto()": {
          "definition": "Set_audit_comments_to__(string auditComments)"
        },
        "verifycurrentexpirationistoday()": {
          "definition": "Verify_current_expiration_is_today()"
        },
        "verifyrenewalexpirationistodayplus()": {
          "definition": "Verify_renewal_expiration_is_today_plus____(int interval, string calendarTimeUnit)"
        },
        "verifyapplicationdateistoday()": {
          "definition": "Verify_application_date_is_today()"
        },
        "verifyapprovedoptionisselected()": {
          "definition": "Verify_approved_option_is_selected()"
        },
        "showstatuschangeconfirmation()": {
          "definition": "ShowStatusChangeConfirmation()"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "setrejectionreasonto()": {
          "definition": "Set_rejection_reason_to(string rejectionReason)"
        },
        "navigatetolistofapplicationspendingaudit()": {
          "definition": "NavigateToListOfApplicationsPendingAudit()"
        },
        "shouldshowexpirationcontrol()": {
          "definition": "ShouldShowExpirationControl(bool visible, int? issuedCertId)"
        },
        "verifyapplicationisfor()": {
          "definition": "Verify_application_is_for__(string applicationType)"
        },
        "verifyapplicationstatusis()": {
          "definition": "Verify_application_status_is__(string appStatus)"
        },
        "navigatetoapplication()": {
          "definition": "NavigateToApplication()"
        },
        "approvalsuccessful()": {
          "definition": "ApprovalSuccessful()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AuditCertApplications"
    },
    "missedlearningobjectivebystudentreport": {
      "namespace": "",
      "methods": {
        "verifytakeshowserrormessage()": {
          "definition": "Verify_take__shows_error_message__(int takeNumber, string errorMessage)"
        },
        "browsetomissedlearningobjectivebystudentreportfor()": {
          "definition": "Browse_to_Missed_Learning_Objective_by_Student_Report_for__(string testName)"
        },
        "verifytakeforpartshowserrormessage()": {
          "definition": "Verify_take__for_part__shows_error_message__(int takeNumber, string partName, string errorMessage)"
        },
        "verifytakeisforandhasmissedelos()": {
          "definition": "Verify_take__is_for__and_has__missed_ELOs(int takeNumber, string personNameAndTakeDescription, int numberOfMissedElos)"
        },
        "verifytakeisforandshowstestparts()": {
          "definition": "Verify_take__is_for__and_shows__test_parts(int takeNumber, string student, int numParts)"
        },
        "verifytestnameis()": {
          "definition": "Verify_Test_Name_is__(string expectedTestName)"
        },
        "verifyclassnameis()": {
          "definition": "Verify_Class_Name_is__(string expectedClassName)"
        },
        "verifytakeforpartrowhasmissedpercenteloidanddescription()": {
          "definition": "Verify_take__for_part__row__has__missed__percent__ELO_ID_and_description__(int takeNumber, string partName, int eloRowNumber, string missed, string percent, string eloId, string eloDescription)"
        },
        "verifyreporthastakes()": {
          "definition": "Verify_report_has__takes(int numPages)"
        },
        "verifyglobalreportheaderis()": {
          "definition": "Verify_Global_Report_Header_is__(string expectedHeader)"
        },
        "verifytakeforparthasmissedelo()": {
          "definition": "Verify_take__for_part__has__missed_ELO(int takeNumber, string partName, int numELOs)"
        },
        "setdatasource()": {
          "definition": "SetDataSource(MissedLearningObjectiveReportByStudentDTO  data)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "MissedLearningObjectiveByStudentReportWorkflow"
    },
    "imageservice": {
      "namespace": "",
      "methods": {
        "uploadnewimageofcontenttypewithsizebytes()": {
          "definition": "Upload_new_image__of_content_type__with_size__bytes(string fileName, string contentType, int contentLength)"
        },
        "verifynewcroppedfullsizeimagewassuccessfullycreated()": {
          "definition": "Verify_new_cropped_fullsize_image_was_successfully_created()"
        },
        "verifynewcroppedthumbnailimagewassuccessfullycreated()": {
          "definition": "Verify_new_cropped_thumbnail_image_was_successfully_created()"
        },
        "verifynewimagewassuccessfullyuploaded()": {
          "definition": "Verify_new_image__was_successfully_uploaded(string fileName)"
        },
        "uploadnewimageofcontenttype()": {
          "definition": "Upload_new_image__of_content_type__(string fileName, string contentType)"
        },
        "verifycontenttypeisnotsupported()": {
          "definition": "Verify_content_type__is_not_supported(string contentType)"
        },
        "verifysizebytesexceedsmaximumallowed()": {
          "definition": "Verify_size__bytes_exceeds_maximum_allowed(int contentLength)"
        },
        "cropimagewithcoords()": {
          "definition": "Crop_image__with_coords__(string fileName, int x, int y, int width, int height)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "ImageServiceWorkflow"
    },
    "editdependentfundinformation": {
      "namespace": "",
      "methods": {
        "bindfiscalofficers()": {
          "definition": "BindFiscalOfficers(IEnumerable<EditDependentFundInformationDTO.Employee> choices)"
        },
        "bindsecretaries()": {
          "definition": "BindSecretaries(IEnumerable<EditDependentFundInformationDTO.Employee> choices)"
        },
        "managedependentfundinformationfor()": {
          "definition": "Manage_dependent_fund_information_for__(string organizationName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EditDependentFundInformationWorkflow"
    },
    "nontrainingdaymanagement": {
      "namespace": "",
      "methods": {
        "createanontrainingdaynamedonwithdisplaytextforprograms()": {
          "definition": "Create_a_non_training_day_named_on_with_display_text_for_programs_( string name, DateTime date, string displayName, List<string> programNames )"
        },
        "validatethatnontrainingdaynamedisonandhasprograms()": {
          "definition": "Validate_that_non_training_day_named_is_on_and_has_programs(string name, DateTime date, List<string> programNames)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "NonTrainingDayManagement"
    },
    "documentaddedit": {
      "namespace": "",
      "methods": {
        "verifyfilenameis()": {
          "definition": "Verify_filename_is__(string filename)"
        },
        "verifyuploadfailedbecauseoffilelargerthanmb()": {
          "definition": "Verify_upload_failed_because_of_file_larger_than__MB(int maxSize)"
        },
        "verifyuploadfailedbecauseofinvalidfileextension()": {
          "definition": "Verify_upload_failed_because_of_invalid_file_extension()"
        },
        "browsetoeditdocumentfor()": {
          "definition": "Browse_to_edit_document__for__(string filename, string ownerType, string ownerName)"
        },
        "verifycannotchangeuploadedfile()": {
          "definition": "Verify_cannot_change_uploaded_file()"
        },
        "preparecurriculumpage()": {
          "definition": "PrepareCurriculumPage(CurriculumPageDTO dto)"
        },
        "verifyportalviewingoptionsarenotvisible()": {
          "definition": "Verify_portal_viewing_options_are_not_visible()"
        },
        "browsetouploaddocumentfor()": {
          "definition": "Browse_to_upload_document_for__(string ownerType, string ownerName)"
        },
        "markfileascontainingsensitivedata()": {
          "definition": "Mark_file_as_containing_sensitive_data()"
        },
        "verifycannotchangeprotectionlevel()": {
          "definition": "Verify_cannot_change_protection_level()"
        },
        "verifyaddingadocumentfor()": {
          "definition": "Verify_adding_a_document_for__(string ownerName)"
        },
        "enterdescription()": {
          "definition": "Enter_description__(string fileDescription)"
        },
        "select()": {
          "definition": "Select__(string filename)"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "viewablebycurrentstudentsinportaloptionisnotvisible()": {
          "definition": "Viewable_by_current_students_in_portal_option_is_not_visible()"
        },
        "verifyportalviewingoptionsarevisible()": {
          "definition": "Verify_portal_viewing_options_are_visible()"
        },
        "viewablebyprospectivestudentsinportaloptionisnotvisible()": {
          "definition": "Viewable_by_prospective_students_in_portal_option_is_not_visible()"
        },
        "verifysavecompletedandredirectedtopreviouspage()": {
          "definition": "Verify_save_completed_and_redirected_to_previous_page()"
        },
        "verifycanchangeprotectionlevel()": {
          "definition": "Verify_can_change_protection_level()"
        },
        "viewablebyprospectivestudentsinportaloptionisvisible()": {
          "definition": "Viewable_by_prospective_students_in_portal_option_is_visible()"
        },
        "unmarkfileascontainingsensitivedata()": {
          "definition": "Unmark_file_as_containing_sensitive_data()"
        },
        "verifyeditingadocumentfor()": {
          "definition": "Verify_editing_a_document_for__(string ownerName)"
        },
        "verifyuploadfailedbecauseofmissingfile()": {
          "definition": "Verify_upload_failed_because_of_missing_file()"
        },
        "viewablebycurrentstudentsinportaloptionisvisible()": {
          "definition": "Viewable_by_current_students_in_portal_option_is_visible()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "DocumentAddEditWorkflow"
    },
    "addenrollment": {
      "namespace": "",
      "methods": {
        "selectforspecialaccommodation()": {
          "definition": "Select_for_Special_Accommodation(string specialAccommodation)"
        },
        "verifyduplicateenrollmentwarningisdisplayed()": {
          "definition": "Verify_duplicate_enrollment_warning_is_displayed()"
        },
        "selectforhousingotherorganization()": {
          "definition": "Select__for_Housing_Other_Organization(string organizationName)"
        },
        "verifyindicationofnontransferrableclass()": {
          "definition": "Verify_indication_of_non_transferrable_class()"
        },
        "verifyclassiseligiblefortransfer()": {
          "definition": "Verify_class__is_eligible_for_transfer(string className)"
        },
        "verifyduplicateenrollmentwarningisnotdisplayed()": {
          "definition": "Verify_duplicate_enrollment_warning_is_not_displayed()"
        },
        "selectfortuitionbilltoparty()": {
          "definition": "Select__for_Tuition_Bill_to_Party(string billToParty)"
        },
        "verifycanaddnewperson()": {
          "definition": "Verify_can_add_new_person()"
        },
        "enrollnewpersonwithgenderanddateofbirthandsendingorganization()": {
          "definition": "Enroll_new_person__with_gender__and_date_of_birth__and_sending_organization__(string personName, string gender, string dateOfBirth, string organizationName)"
        },
        "verifytestinisnottransferrable()": {
          "definition": "Verify_test__in__is_not_transferrable(string testName, string className)"
        },
        "changesendingorganizationtonone()": {
          "definition": "Change_sending_organization_to_none()"
        },
        "alloweditdateofbirth()": {
          "definition": "AllowEditDateOfBirth(bool allow)"
        },
        "selectforpricelevel()": {
          "definition": "Select__for_price_level(string pricelevel)"
        },
        "returntopagewithnewpersonforclass()": {
          "definition": "Return_to_page_with_new_person__for_class__(string personName, string className)"
        },
        "verifynosendingorganizationisselected()": {
          "definition": "Verify_no_sending_organization_is_selected()"
        },
        "verifytestinhasgradeandpassfail()": {
          "definition": "Verify_test__in__has_grade__and_passfail__(string testName, string className, string grade, string passFail)"
        },
        "enterdateforexpectedcheckout()": {
          "definition": "Enter_date__for_Expected_Checkout(DateTime expectedCheckOut)"
        },
        "changesendingorganizationtowithtitle()": {
          "definition": "Change_sending_organization_to__with_title__(string orgName, string titleName)"
        },
        "redirecttoaddperson()": {
          "definition": "RedirectToAddPerson()"
        },
        "toggletransferinfo()": {
          "definition": "ToggleTransferInfo(bool show)"
        },
        "clicksaveandenrollanother()": {
          "definition": "Click_Save_and_Enroll_Another()"
        },
        "verifytuitionbillingvisible()": {
          "definition": "Verify_Tuition_Billing__Visible(string isIsNotString)"
        },
        "proceedtoenrollanother()": {
          "definition": "ProceedToEnrollAnother()"
        },
        "proceedtoenrollment()": {
          "definition": "ProceedToEnrollment(int enrollmentID)"
        },
        "selectforhousingbilltoparty()": {
          "definition": "Select__for_Housing_Bill_to_Party(string billToParty)"
        },
        "clickcontinue()": {
          "definition": "Click_Continue()"
        },
        "verifydateofbirthisemptyandcanbeedited()": {
          "definition": "Verify_date_of_birth_is_empty_and_can_be_edited()"
        },
        "verifyredirectedtoaddnewpersonpage()": {
          "definition": "Verify_redirected_to_Add_New_Person_page()"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for__(string className)"
        },
        "verifydateofbirthisandcannotbeedited()": {
          "definition": "Verify_date_of_birth_is__and_cannot_be_edited(string dob)"
        },
        "verifynotransferavailable()": {
          "definition": "Verify_no_transfer_available()"
        },
        "selectaddnewperson()": {
          "definition": "Select_add_new_person()"
        },
        "enterdateforexpectedcheckin()": {
          "definition": "Enter_date__for_Expected_Checkin(DateTime expectedCheckIn)"
        },
        "enterfortuitionotherorganizationtypeahead()": {
          "definition": "Enter__for_Tuition_Other_Organization_typeahead(string searchText)"
        },
        "enrollgroupinwithtrainingcategory()": {
          "definition": "Enroll_group_in_with_training_category__(string groupName, string className, string category)"
        },
        "selectfortuitiongrant()": {
          "definition": "Select__for_Tuition_Grant(string grant)"
        },
        "enrollinwithcategory()": {
          "definition": "Enroll__in__with_category__(string name, string cls, string category)"
        },
        "verifyredirectedtoeditenrollmentforin()": {
          "definition": "Verify_redirected_to_edit_enrollment_for__in__(string personName, string className)"
        },
        "verifyclassisnoteligiblefortransfer()": {
          "definition": "Verify_class__is_not_eligible_for_transfer(string className)"
        },
        "setstudent()": {
          "definition": "SetStudent(int? id, string value)"
        },
        "selectfortuitionotherorganization()": {
          "definition": "Select__for_Tuition_Other_Organization(string organizationName)"
        },
        "togglestudentdata()": {
          "definition": "ToggleStudentData(bool show)"
        },
        "bindtransfers()": {
          "definition": "BindTransfers(IEnumerable<TransferEnrollmentDTO> dtos)"
        },
        "changesendingorganizationtowithnotitle()": {
          "definition": "Change_sending_organization_to__with_no_title(string orgName)"
        },
        "enterforhousingotherorganizationtypeahead()": {
          "definition": "Enter__for_Housing_Other_Organization_typeahead(string searchText)"
        },
        "verifynogenderisselected()": {
          "definition": "Verify_no_gender_is_selected()"
        },
        "enrollin()": {
          "definition": "Enroll__in__(string name, string cls)"
        },
        "verifycannotaddnewperson()": {
          "definition": "Verify_can_not_add_new_person()"
        },
        "selectforhousinggrant()": {
          "definition": "Select__for_Housing_Grant(string grant)"
        },
        "verifynopersonisselected()": {
          "definition": "Verify_no_person_is_selected()"
        },
        "warnduplicateenrollment()": {
          "definition": "WarnDuplicateEnrollment(string personName)"
        },
        "changesendingorganizationtoemploymentwith()": {
          "definition": "Change_sending_organization_to_employment_with__(string employerName)"
        },
        "selectclassfortransfer()": {
          "definition": "Select_class__for_transfer(string className)"
        },
        "selecttoenroll()": {
          "definition": "Select__to_enroll(string personName)"
        },
        "selectforusagetype()": {
          "definition": "Select__for_usage_type(string usage)"
        },
        "verifysendingorganizationiswithtitle()": {
          "definition": "Verify_sending_organization_is__with_title__(string sendingOrgName, string titleName)"
        },
        "verifythereisnoselectedtrainingcategory()": {
          "definition": "Verify_there_is_no_selected_training_category()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AddEnrollmentWorkflow"
    },
    "emailcertificatepreferences": {
      "namespace": "",
      "methods": {
        "setemailtoto()": {
          "definition": "Set_email_To_to__(string fieldValue)"
        },
        "verifythattofieldis()": {
          "definition": "Verify_that_To_field_is__(string expected)"
        },
        "sendemail()": {
          "definition": "Send_email()"
        },
        "setemailbccto()": {
          "definition": "Set_email_BCC_to__(string fieldValue)"
        },
        "setemailreplytoto()": {
          "definition": "Set_email_ReplyTo_to__(string fieldValue)"
        },
        "verifythatreplytofieldis()": {
          "definition": "Verify_that_Reply_to_field_is__(string expected)"
        },
        "setemailfromto()": {
          "definition": "Set_email_From_to__(string fieldValue)"
        },
        "hidepopover()": {
          "definition": "HidePopover()"
        },
        "verifythatemaildialogisnotvisible()": {
          "definition": "Verify_that_email_dialog_is_not_visible()"
        },
        "verifythatfromfieldis()": {
          "definition": "Verify_that_From_field_is__(string expected)"
        },
        "verifythatemaildialogisvisible()": {
          "definition": "Verify_that_email_dialog_is_visible()"
        },
        "verifythatemailwassent()": {
          "definition": "Verify_that_email_was_sent()"
        },
        "sendcertificates()": {
          "definition": "SendCertificates(CertificatePrintCriteriaDTO criteria)"
        },
        "setemailccto()": {
          "definition": "Set_email_CC_to__(string fieldValue)"
        },
        "showdialogforcertofrecipient()": {
          "definition": "Show_dialog_for__cert_of__recipient__(string certName, string recipientType, string recipientName)"
        },
        "showpopover()": {
          "definition": "ShowPopover()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EmailCertificatePreferences"
    },
    "uapview": {
      "namespace": "",
      "methods": {
        "verifyredirecttohomepagewasnotcalled()": {
          "definition": "Verify_Redirect_to_home_page_was_not_called()"
        },
        "loaduserdisplaysettings()": {
          "definition": "LoadUserDisplaySettings(int userID)"
        },
        "verifyredirecttohomepagewascalled()": {
          "definition": "Verify_Redirect_to_home_page_was_called()"
        },
        "verifyaccessibilitysettingforuseris()": {
          "definition": "Verify_Accessibility_setting_for_user_is__(bool setting)"
        },
        "signintoacadis()": {
          "definition": "SignIntoAcadis(int userID, SSOMode ssoMode)"
        },
        "redirecttonextpage()": {
          "definition": "RedirectToNextPage()"
        },
        "verifyacceptancepolicytextis()": {
          "definition": "Verify_acceptance_policy_text_is_(string text)"
        },
        "verifysavedisplaysettingswascalled()": {
          "definition": "Verify_Save_Display_Settings_was_called()"
        },
        "verifyloaddisplaysettingswascalled()": {
          "definition": "Verify_Load_Display_Settings_was_called()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "saveuserdisplaysettings()": {
          "definition": "SaveUserDisplaySettings()"
        },
        "signoutofacadis()": {
          "definition": "SignOutOfAcadis()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "UAPViewWorkflow"
    },
    "inquirydisplaytextitem": {
      "namespace": "",
      "methods": {
        "verifydisplaymodeis()": {
          "definition": "Verify_display_mode_is__(InquiryDisplayTextType displayMode)"
        },
        "verifytextis()": {
          "definition": "Verify_text_is__(string text)"
        },
        "initializecontrol()": {
          "definition": "InitializeControl()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "InquiryDisplayTextItemWorkflow"
    },
    "dropdownattribute": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "DropdownAttribute"
    },
    "publicprofessionalhistoryreport": {
      "namespace": "",
      "methods": {
        "showreportdata()": {
          "definition": "ShowReportData(ReportSpawnDTO reportData)"
        },
        "verifyreportisavailable()": {
          "definition": "Verify_report_is_available()"
        },
        "setunavailablereason()": {
          "definition": "SetUnavailableReason(string reason)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifyreportvisible()": {
          "definition": "Verify_report__visible(string isIsNot)"
        },
        "verifyreportisunavailablebecause()": {
          "definition": "Verify_report_is_unavailable_because(string reason)"
        },
        "followthelinktotheprofessionalhistoryreport()": {
          "definition": "Follow_the_link_to_the_professional_history_report()"
        },
        "verifyreportexpired()": {
          "definition": "Verify_report__expired(string isIsNot)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PublicProfessionalHistoryReportWorkflow"
    },
    "radiogroupoptionattribute": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "RadioGroupOptionAttribute"
    },
    "resourcecalendar": {
      "namespace": "",
      "methods": {
        "verifyconflictsexist()": {
          "definition": "Verify__conflicts_exist(int totalConflicts)"
        },
        "browsetopageforforweekof()": {
          "definition": "Browse_to_page_for__for_week_of__(string resourceName, DateTime weekOf)"
        },
        "verifythereareitemsscheduled()": {
          "definition": "Verify_there_are__items_scheduled(int count)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "ResourceCalendarWorkflow"
    },
    "mvcbase": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "MvcBaseWorkflow"
    },
    "importmapfields": {
      "namespace": "",
      "methods": {
        "verifywarningthatacadisserviceisunavailableisshown()": {
          "definition": "Verify_warning_that_acadis_service_is_unavailable_is_shown()"
        },
        "binddomainfields()": {
          "definition": "BindDomainFields(IEnumerable<Mapping_FieldGroupDTO> groups)"
        },
        "verifyprompttochoosetemplateisshown()": {
          "definition": "Verify_prompt_to_choose_template_is_shown()"
        },
        "setacadisserviceisrunningto()": {
          "definition": "Set_acadis_service_is_running_to__(bool isRunning)"
        },
        "mapfieldtoconstantvalue()": {
          "definition": "Map_field__to_constant_value__(string fieldName, string value)"
        },
        "verifyheaderis()": {
          "definition": "Verify_Header_is( string headerText )"
        },
        "clickcontinueontemplatedialog()": {
          "definition": "Click_continue_on_template_dialog()"
        },
        "clickcontinue()": {
          "definition": "Click_continue()"
        },
        "proceedtomapping()": {
          "definition": "Proceed_to_mapping()"
        },
        "unmapfield()": {
          "definition": "Unmap_field__(string fieldName)"
        },
        "verifyfieldismappedtofilecolumn()": {
          "definition": "Verify_field_is_mapped_to_file_column( string fieldName, string columnName )"
        },
        "choosetemplatenamed()": {
          "definition": "Choose_template_named( string templateName )"
        },
        "mapfieldtofilecolumn()": {
          "definition": "Map_field__to_file_column__(string fieldName, string columnName)"
        },
        "showmappingtemplatedialog()": {
          "definition": "ShowMappingTemplateDialog()"
        },
        "navigatetopage()": {
          "definition": "NavigateToPage(ImportWizardPage page)"
        },
        "showimportjobreallocated()": {
          "definition": "ShowImportJobReallocated()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ImportMapFieldsWorkflow"
    },
    "personemploymentfnhmanagement": {
      "namespace": "",
      "methods": {
        "consideremploymentatstarting()": {
          "definition": "Consider__employment_at__starting__(string personName, string organizationName, DateTime hireDate)"
        },
        "saveemploymentfails()": {
          "definition": "SaveEmploymentFails()"
        },
        "verifyactionappointmenttypeis()": {
          "definition": "Verify_action_appointment_type_is(string appointmentType)"
        },
        "verifyhassupervisorycodeat()": {
          "definition": "Verify__has_supervisory_code__at__(string personName, string supervisoryCode, string orgName)"
        },
        "verifyhasasaprimaryemploymenteffective()": {
          "definition": "Verify__has__as_a_primary_employment_effective_(string employeeName, string companyName, string effectiveDate)"
        },
        "verifyprimaryemploymentis()": {
          "definition": "VerifyPrimaryEmploymentIs(string employmentName)"
        },
        "verifycommentis()": {
          "definition": "Verify_comment_is__(string commentText)"
        },
        "verifywasneveremployedby()": {
          "definition": "Verify__was_never_employed_by__(string personName, string orgName)"
        },
        "addemploymentforatorganizationaswithtitleandhiredate()": {
          "definition": "Add_employment_for_at_organization_as_with_Title_and_hire_date( string personName, string orgName, string empName, string title, DateTime hireDate )"
        },
        "defineemploymentinformationforsetorganizationtowithaneffectivedateofandtitleof()": {
          "definition": "Define_employment_information_for__set_organization_to__with_an_effective_date_of__and_title_of_(string employeeName, string organizationName, string effectiveDate, string title)"
        },
        "setpaygradeto()": {
          "definition": "set_pay_grade_to(string value)"
        },
        "verifyhasemploymenttypeat()": {
          "definition": "Verify__has_employment_type__at__(string personName, string employmentType, string orgName)"
        },
        "setemploymentstatusto()": {
          "definition": "SetEmploymentStatusTo(string status, string subStatus)"
        },
        "verifyactionstatusis()": {
          "definition": "Verify_action_status_is__(string status)"
        },
        "verifyhassalaryat()": {
          "definition": "Verify__has_salary__at__(string personName, string salary, string orgName)"
        },
        "setemploymentorganization()": {
          "definition": "SetEmploymentOrganization(string employmentName, string organization)"
        },
        "consideractioneffectiveon()": {
          "definition": "Consider_action_effective_on__(DateTime effectiveDate)"
        },
        "hireatstatus()": {
          "definition": "HireAtStatus(string person, string organizationName, string status)"
        },
        "setsalaryincentivesto()": {
          "definition": "set_salary_incentives_to(string value)"
        },
        "setemploymenteffectivedate()": {
          "definition": "SetEmploymentEffectiveDate(string employmentName, string startDate)"
        },
        "verifyisnotemployedat()": {
          "definition": "Verify__is_not_employed_at__(string personName, string orgName)"
        },
        "verifyhaspaygradeat()": {
          "definition": "Verify__has_pay_grade__at__(string personName, string payGrade, string orgName)"
        },
        "setstatustofordutyassignmentat()": {
          "definition": "Set_status_to__for_duty_assignment_at__(AssignmentStatus status, string dutyLocation)"
        },
        "verifyhaspayplanat()": {
          "definition": "Verify__has_pay_plan__at__(string personName, string payPlan, string orgName)"
        },
        "verifyassignmentstatusis()": {
          "definition": "Verify_assignment_status_is__(AssignmentStatus status)"
        },
        "verifyemploymentisprimary()": {
          "definition": "VerifyEmploymentIsPrimary()"
        },
        "addtemporarydutyassignmentatstartingwithstatus()": {
          "definition": "Add_temporary_duty_assignment_at__starting__with_status__(string orgName, DateTime startDate, AssignmentStatus status)"
        },
        "beginverifyingtheemploymentactionforatthattookeffecton()": {
          "definition": "Begin_verifying_the_employment_action_for__at__that_took_effect_on__(string personName, string orgName, DateTime effectiveDate)"
        },
        "verifyactionchangetypeisahireaction()": {
          "definition": "Verify_action_change_type_is_a_hire_action()"
        },
        "setemploymentasprimary()": {
          "definition": "SetEmploymentAsPrimary(string employmentName)"
        },
        "usingemployment()": {
          "definition": "Using_employment__(string employmentName)"
        },
        "verifyactionisbefore()": {
          "definition": "VerifyActionIsBefore(string action_1, string action_2)"
        },
        "verifypaygradeis()": {
          "definition": "Verify_pay_grade_is__(string payGrade)"
        },
        "usingemploymentofat()": {
          "definition": "Using_employment_of__at__(string personName, string orgName)"
        },
        "statusis()": {
          "definition": "StatusIs(string str)"
        },
        "verifyhasemploymentactionfor()": {
          "definition": "Verify__has__employment_action_for__(string personName, int count, string orgName)"
        },
        "verifyactionchangetypeis()": {
          "definition": "Verify_action_change_type_is__(string changeType)"
        },
        "verifypaystepis()": {
          "definition": "Verify_pay_step_is__(string payStep)"
        },
        "verifyemploymentgapsexist()": {
          "definition": "VerifyEmploymentGapsExist()"
        },
        "verifyhasdutyassignments()": {
          "definition": "Verify_has__duty_assignments(int count)"
        },
        "saveemployment()": {
          "definition": "SaveEmployment()"
        },
        "saveaction()": {
          "definition": "SaveAction()"
        },
        "setpaystepto()": {
          "definition": "set_pay_step_to(string value)"
        },
        "verifyhasappointmenttypeat()": {
          "definition": "Verify__has_appointment_type__at__(string personName, string appointmentType, string orgName)"
        },
        "setemploymentudftoforat()": {
          "definition": "Set_employment_udf__to__for__at__(string udfName, string value, string personName, string employerName)"
        },
        "titleis()": {
          "definition": "TitleIs(string title)"
        },
        "addemploymentascopyof()": {
          "definition": "AddEmploymentAsCopyOf(string employmentName)"
        },
        "verifyemploymenttypeis()": {
          "definition": "Verify_employment_type_is__(string employmentType)"
        },
        "addemploymentwithname()": {
          "definition": "AddEmploymentWithName(string employmentName)"
        },
        "verifyemploymentwithhasdutyassignmentwiththatis()": {
          "definition": "Verify_employment_with_has_duty_assignment_with_that_is(string companyName, string divisionName, string status)"
        },
        "adddutyassignmentatfromtowithstatus()": {
          "definition": "Add_duty_assignment_at__from__to__with_status__(string orgName, DateTime startDate, DateTime endDate, AssignmentStatus status)"
        },
        "verifyactiontitleis()": {
          "definition": "Verify_action_title_is__(string title)"
        },
        "addemploymenttousingorganizationwithtitleandemploymenttypeandstatus()": {
          "definition": "AddEmploymentTo_UsingOrganization_WithTitle_AndEmploymentType_AndStatus_(string personName, string orgaName, string title, string type, string status)"
        },
        "verifytemporary()": {
          "definition": "Verify__temporary(string isIsNot)"
        },
        "verifyisemployedby()": {
          "definition": "Verify_is_employed_by(string name, string employer)"
        },
        "addemploymentstatus()": {
          "definition": "AddEmploymentStatus(string status)"
        },
        "verifypayplanis()": {
          "definition": "Verify_pay_plan_is__(string payPlan)"
        },
        "deleteemploymentforeffectivefor()": {
          "definition": "Delete_employment_for__effective__for_(string companyName, string effectiveDate, string employeeName)"
        },
        "addemploymentforatorganizationas()": {
          "definition": "Add_employment_for__at_organization__as__(string personName, string orgName, string empName)"
        },
        "organizationis()": {
          "definition": "OrganizationIs(string name)"
        },
        "verifyemploymentwithaswithstartingdate()": {
          "definition": "Verify_employment_with_as_with_starting_date(string companyName, string title, DateTime effectiveDate)"
        },
        "verifyhasemploymenteffective()": {
          "definition": "Verify__has__employment_effective_(string employeeName, string companyName, string effectiveDate)"
        },
        "verifyassignmentstartis()": {
          "definition": "Verify_assignment_start_is__(DateTime date)"
        },
        "verifysalaryincentivesis()": {
          "definition": "Verify_salary_incentives_is__(string salaryIncentives)"
        },
        "actionis()": {
          "definition": "ActionIs(string action)"
        },
        "verifyhasanactiveemploymentat()": {
          "definition": "Verify_has_an_active_employment_at(string personName, string employer)"
        },
        "verifyactioneffectivedateis()": {
          "definition": "VerifyActionEffectiveDateIs(string actionName, string effectiveDate)"
        },
        "verifyemploymentatstarting()": {
          "definition": "Verify__employment_at__starting__(string personName, string hasDoesNotHave, string organizationName, DateTime hireDate)"
        },
        "effectivedateis()": {
          "definition": "EffectiveDateIs(DateTime date)"
        },
        "employmentdutylocationiswithstatus()": {
          "definition": "Employment_duty_location_is_with_status(string divisionOrOrganization, string status)"
        },
        "verifyhastitleat()": {
          "definition": "Verify__has_title__at__(string personName, string title, string orgName)"
        },
        "setsupervisorycodeto()": {
          "definition": "set_supervisory_code_to(string value)"
        },
        "verifyhaschangecommentat()": {
          "definition": "Verify__has_change_comment__at__(string personName, string comment, string orgName)"
        },
        "setcomments()": {
          "definition": "SetComments(string comments)"
        },
        "setemploymentasnotprimary()": {
          "definition": "SetEmploymentAsNotPrimary(string employmentName)"
        },
        "defineemploymentinformationforsetemploymenttofororganizationwithaneffectivedateofandtitleof()": {
          "definition": "Define_employment_information_for__set_employment_to__for_organization__with_an_effective_date_of__and_title_of_(string employeeName, string employmentStatus, string organizationName, string effectiveDate, string title)"
        },
        "verifyhasaninactiveemploymentat()": {
          "definition": "Verify_has_an_inactive_employment_at(string personName, string employer)"
        },
        "setjobseriesto()": {
          "definition": "set_job_series_to(string value)"
        },
        "verifyhaspaystepat()": {
          "definition": "Verify__has_pay_step__at__(string personName, string payStep, string orgName)"
        },
        "adddutyassignmentatstartingwithstatus()": {
          "definition": "Add_duty_assignment_at__starting__with_status__(string orgName, DateTime startDate, AssignmentStatus status)"
        },
        "setasprimary()": {
          "definition": "SetAsPrimary()"
        },
        "verifytitleis()": {
          "definition": "Verify_title_is__(string title)"
        },
        "adddutyassignmentatwithstatus()": {
          "definition": "Add_duty_assignment_at__with_status__(string orgName, AssignmentStatus status)"
        },
        "appointmenttypeis()": {
          "definition": "AppointmentTypeIs(string appointmentType)"
        },
        "addemploymentcommentforat()": {
          "definition": "Add_employment_comment__for__at__(string commentText, string personName, string orgName)"
        },
        "verifyhasactions()": {
          "definition": "Verify_has__actions(int count)"
        },
        "hireallatstatus()": {
          "definition": "HireAllAtStatus(string organizationName, string status)"
        },
        "setemploymenttypeto()": {
          "definition": "Set_Employment_Type_to_(string employmentType)"
        },
        "createemploymentactionforofwithstatusandtitleandeffectivedate()": {
          "definition": "Create_employment_action_for__of__with_status__and_title__and_effective_date__(string employmentKey, string reason, string status, string title, DateTime effectiveDate)"
        },
        "verifyactiontypeis()": {
          "definition": "VerifyActionTypeIs(string actionName, string typeName)"
        },
        "verifyhasahiredateofat()": {
          "definition": "Verify_has_a_hire_date_of_at(string personName, DateTime hireDate, string employer)"
        },
        "deleteaction()": {
          "definition": "DeleteAction(string actionName)"
        },
        "verifyhassalaryincentivesat()": {
          "definition": "Verify__has_salary_incentives__at__(string personName, string salaryIncentives, string orgName)"
        },
        "verifysupervisorycodeis()": {
          "definition": "Verify_supervisory_code_is__(string supervisoryCode)"
        },
        "createemploymentforatorganizationaswithtitleandhiredate()": {
          "definition": "Create_employment_for__at_organization__as__with_Title__and_hire_date__(string personLabel, string orgLabel, string employmentLabel, string titleName, DateTime hireDate)"
        },
        "addseparationactiontocurrentemploymentwithstatuseffective()": {
          "definition": "Add_separation_action_to_current_employment_with_status__effective__(string status, DateTime effectiveDate)"
        },
        "verifyprimary()": {
          "definition": "Verify__primary(string isIsNot)"
        },
        "deleteemploymentforat()": {
          "definition": "Delete_employment_for__at__(string personName, string orgName)"
        },
        "setappointmenttypeto()": {
          "definition": "Set_Appointment_Type_to_(string appointmentType)"
        },
        "verifyappointmenttypeis()": {
          "definition": "Verify_appointment_type_is__(string appointmentType)"
        },
        "addemploymentwithnameascopyof()": {
          "definition": "AddEmploymentWithNameAsCopyOf(string newName, string copyName)"
        },
        "verifysalaryis()": {
          "definition": "Verify_salary_is__(string salary)"
        },
        "addtemporarydutyassignmentatfromtowithstatus()": {
          "definition": "Add_temporary_duty_assignment_at__from__to__with_status__(string orgName, DateTime startDate, DateTime endDate, AssignmentStatus status)"
        },
        "verifyhascommentat()": {
          "definition": "Verify__has_comment__at__(string personName, string commentText, string orgName)"
        },
        "verifyactioncommentis()": {
          "definition": "Verify_action_comment_is__(string comment)"
        },
        "deleteemployment()": {
          "definition": "DeleteEmployment(string employmentName)"
        },
        "hireallat()": {
          "definition": "HireAllAt(string organizationName)"
        },
        "createemploymentactionforofwithtitleandeffectivedate()": {
          "definition": "Create_employment_action_for__of__with_title__and_effective_date__(string employmentKey, string reason, string title, DateTime effectiveDate)"
        },
        "verifyassignmentendis()": {
          "definition": "Verify_assignment_end_is__(DateTime date)"
        },
        "assignmentstartiswithassignmentend()": {
          "definition": "Assignment_start_is_with_assignment_end(DateTime start, DateTime end)"
        },
        "setemploymentcomments()": {
          "definition": "SetEmploymentComments(string employmentName, string comments)"
        },
        "verifyjobseriesis()": {
          "definition": "Verify_job_series_is__(string jobSeries)"
        },
        "verifyhasactioneffectivewithstatusandcomment()": {
          "definition": "Verify_has_action__effective__with_status__and_comment__(string action, string effectiveDate, string status, string comment)"
        },
        "setemploymenttitle()": {
          "definition": "SetEmploymentTitle(string employmentName, string employmentTitle)"
        },
        "setpayplanto()": {
          "definition": "set_pay_plan_to(string value)"
        },
        "considerdutyassignmentat()": {
          "definition": "Consider__duty_assignment_at__(AssignmentStatus status, string dutyLocation)"
        },
        "primaryemploymentequals()": {
          "definition": "PrimaryEmploymentEquals(string organizationName)"
        },
        "verifyhasjobseriesat()": {
          "definition": "Verify__has_job_series__at__(string personName, string jobSeries, string orgName)"
        },
        "verifyactionemploymenttypeis()": {
          "definition": "Verify_action_employment_type_is__(string employmentType)"
        },
        "verifyhasactioneffectivewithstatusandcommentat()": {
          "definition": "Verify__has_action__effective__with_status__and_comment__at__(string personName, string action, string effectiveDate, string status, string comment, string orgName)"
        },
        "employmenttypeis()": {
          "definition": "EmploymentTypeIs(string employmentType)"
        },
        "hireat()": {
          "definition": "HireAt( string person, string organizationName)"
        },
        "verifyhasudfofat()": {
          "definition": "Verify__has_udf__of__at__(string personName, string udf, string value, string orgName)"
        },
        "addtemporarydutyassignmentatwithstatus()": {
          "definition": "Add_temporary_duty_assignment_at__with_status__(string orgName, AssignmentStatus status)"
        },
        "verifyemploymentgapsdonotexist()": {
          "definition": "VerifyEmploymentGapsDoNotExist()"
        },
        "addemploymenttousingorganization()": {
          "definition": "AddEmploymentToUsingOrganization(string personName, string orgaName)"
        },
        "verifyemploymentisnotprimary()": {
          "definition": "VerifyEmploymentIsNotPrimary(string employmentName)"
        },
        "deleteactionfails()": {
          "definition": "DeleteActionFails(string actionName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "PersonEmploymentFNHManagement"
    },
    "adminshortcuts": {
      "namespace": "",
      "methods": {
        "deleteudffieldsfor()": {
          "definition": "Delete_udf_fields_for__(string entityType)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "AdminShortcuts"
    },
    "classregistrationrecord": {
      "namespace": "",
      "methods": {
        "addudf()": {
          "definition": "Add__udf__(string entityType, string udf)"
        },
        "bindrequestedenrollmentinfo()": {
          "definition": "BindRequestedEnrollmentInfo(List<UdfDTO> udfs)"
        },
        "bindoldprerequisites()": {
          "definition": "BindOldPrerequisites(List<string> preReqs)"
        },
        "bindrequestedreginfo()": {
          "definition": "BindRequestedRegInfo(List<UdfDTO> udfs)"
        },
        "requireallprerequisitesbefulfilledforenrollmentrequests()": {
          "definition": "Require_all_prerequisites_be_fulfilled_for_enrollment_requests()"
        },
        "allowunfulfilledprerequisitesforenrollmentrequests()": {
          "definition": "Allow_unfulfilled_prerequisites_for_enrollment_requests()"
        },
        "sethasstudentsalert()": {
          "definition": "SetHasStudentsAlert(bool onlyDrafts)"
        },
        "verifyallprerequisitesmustbefulfilledforenrollmentrequests()": {
          "definition": "Verify_all_prerequisites_must_be_fulfilled_for_enrollment_requests()"
        },
        "bindprerequisites()": {
          "definition": "BindPrerequisites()"
        },
        "returntoreferrer()": {
          "definition": "ReturnToReferrer()"
        },
        "browsetoregistrationrecordforclass()": {
          "definition": "Browse_to_registration_record_for_class__(string className)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ClassRegistrationRecordWorkflow"
    },
    "trainingeventroster": {
      "namespace": "",
      "methods": {
        "addattendeewithnotrainingcategory()": {
          "definition": "Add_attendee__with_no_training_category(string personName)"
        },
        "entertextforstartdate()": {
          "definition": "Enter_text__for_Start_Date(string date)"
        },
        "verifyattendeehastrainingcategory()": {
          "definition": "Verify_attendee__has_training_category(string personName, string categoryName)"
        },
        "verifyislistedasaninstructorwithacademyidandprimaryorganizationandroleandhours()": {
          "definition": "Verify__is_listed_as_an_instructor_with_Academy_ID__and_Primary_Organization__and_role__and__hours(string personName, string academyId, string orgName, string roleName, decimal hours)"
        },
        "clickconfirmremovebutton()": {
          "definition": "Click_Confirm_Remove_Button()"
        },
        "verifyislistedasaninstructor()": {
          "definition": "Verify__is_listed_as_an_instructor(string personName)"
        },
        "removeallattendees()": {
          "definition": "Remove_all_attendees()"
        },
        "setcommentsto()": {
          "definition": "Set_comments_to__(string comments)"
        },
        "updateattendeewithnotrainingcategory()": {
          "definition": "Update_attendee__with_no_training_category(string personName)"
        },
        "bindinstructors()": {
          "definition": "BindInstructors(IList<TrainingEventInstructorDTO> dtos)"
        },
        "verifyclasslocationaddress1is()": {
          "definition": "verify_class_location_address1_is__(string address)"
        },
        "verifythereareinstructorslisted()": {
          "definition": "Verify_there_are__instructors_listed(int count)"
        },
        "verifynumberofattendeesis()": {
          "definition": "Verify_number_of_attendees_is__(int count)"
        },
        "verifyexistsindocumentlistwithdescription()": {
          "definition": "Verify__exists_in_document_list_with_description__(string fileName, string description)"
        },
        "verifyremoveconfirmationshown()": {
          "definition": "Verify_remove_confirmation__shown(string isIsNot)"
        },
        "showremoveconfirmation()": {
          "definition": "ShowRemoveConfirmation(int? attendeeId)"
        },
        "selectinstructorforrolewithhours()": {
          "definition": "Select_instructor__for_role__with__hours(string personName, string roleName, decimal hours)"
        },
        "verifyclasslocationeditfieldsarevisible()": {
          "definition": "verify_class_location_edit_fields_are_visible()"
        },
        "verifyattendeehasnotrainingcategory()": {
          "definition": "Verify_attendee__has_no_training_category(string personName)"
        },
        "updateallattendeeswithtrainingcategory()": {
          "definition": "Update_all_attendees_with_training_category__(string categoryName)"
        },
        "verifyformattedlocationaddressis()": {
          "definition": "Verify_formatted_Location_address_is__(string locationName)"
        },
        "verifyclasslocationaddress2is()": {
          "definition": "verify_class_location_address2_is__(string address)"
        },
        "verifyclasslocationstateis()": {
          "definition": "verify_class_location_state_is__(string address)"
        },
        "browsetopageforlessonplantemplate()": {
          "definition": "Browse_to_page_for_lessonplan_template_(string eventName)"
        },
        "bindenrollments()": {
          "definition": "BindEnrollments(IEnumerable<TrainingEventAttendeeDTO> dtos)"
        },
        "verifyclassdateeditfieldsarevisible()": {
          "definition": "verify_class_date_edit_fields_are_visible()"
        },
        "bindremoveconfirmation()": {
          "definition": "BindRemoveConfirmation(IEnumerable<string> items)"
        },
        "verifynewclassnameis()": {
          "definition": "Verify_new_class_name_is__(string newClassName)"
        },
        "updateattendeewithtrainingcategory()": {
          "definition": "Update_attendee__with_training_category__(string personName, string categoryName)"
        },
        "verifyclasslocationzipplusis()": {
          "definition": "verify_class_location_zipPlus_is__(string address)"
        },
        "removeattendee()": {
          "definition": "Remove_attendee__(string personName)"
        },
        "browsetopageforclass()": {
          "definition": "Browse_to_page_for_class_(string eventName)"
        },
        "updateclassdatesro()": {
          "definition": "UpdateClassDatesRO(string startDate, string endDate)"
        },
        "verifyclasslocationzipis()": {
          "definition": "verify_class_location_zip_is__(string address)"
        },
        "verifythedocumentlistcontainsdocuments()": {
          "definition": "Verify_the_document_list_contains__documents(int numDocs)"
        },
        "verifyclassdateeditfieldsarenotvisible()": {
          "definition": "Verify_class_date_edit_fields_are_not_visible()"
        },
        "updateallattendeeswithnotrainingcategory()": {
          "definition": "Update_all_attendees_with_no_training_category()"
        },
        "verifytextforstartdateis()": {
          "definition": "Verify_text_for_Start_Date_is__(string date)"
        },
        "verifylocationorganizationis()": {
          "definition": "Verify_Location_organization_is__(string locationName)"
        },
        "updateroclasslocation()": {
          "definition": "UpdateRoClassLocation(string locationFormatted)"
        },
        "verifyclasslocationcityis()": {
          "definition": "verify_class_location_city_is__(string address)"
        },
        "addattendeewithtrainingcategory()": {
          "definition": "Add_attendee__with_training_category__(string personName, string categoryName)"
        },
        "browsetopagetocreatedraftfromclasstemplatestartingending()": {
          "definition": "Browse_to_page_to_create_draft_from_class_template__starting__ending__(string classTemplateName, DateTime startDate, DateTime endDate)"
        },
        "assumeuserwasnavigatedtotrainingandeventspagebypreviousstepfordeferredclass()": {
          "definition": "Assume_user_was_navigated_to_Training_and_events_page_by_previous_step_for_deferred_class__(string eventName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "TrainingEventRosterWorkflow"
    },
    "sanitychecking": {
      "namespace": "",
      "methods": {
        "dispose()": {
          "definition": "Dispose()"
        },
        "validatesanityofclassstatus()": {
          "definition": "Validate_sanity_of_class_status()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "SanityChecking"
    },
    "lessonplanreport": {
      "namespace": "",
      "methods": {
        "verifythattherearedocuments()": {
          "definition": "Verify_that_there_are__documents(int numberOfDocuments)"
        },
        "bindheaders()": {
          "definition": "BindHeaders(ReportHeaderDTO reportHeader)"
        },
        "setfootnotedisplay()": {
          "definition": "SetFootnoteDisplay(bool hasUnapproved, bool hasInProgress)"
        },
        "verifyis()": {
          "definition": "Verify__is__(string itemName, string itemValue)"
        },
        "verifyinreportheaderis()": {
          "definition": "Verify__in_report_header_is__(string headerItem, string itemValue)"
        },
        "showlessonplanreportfor()": {
          "definition": "Show_Lessonplan_Report_for__(string lessonplanName)"
        },
        "setemptydatamessagevisibility()": {
          "definition": "SetEmptyDataMessageVisibility(bool visible)"
        },
        "bindlessonplan()": {
          "definition": "BindLessonPlan(LessonPlanReadonlyDTO dto)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifythatthedocumentisin()": {
          "definition": "Verify_that_the__document_is__in__(string sequenceIdentifier, string documentDescription, string fileName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "LessonPlanReportWorkflow"
    },
    "maintenanceticketbaselinehelper": {
      "namespace": "",
      "methods": {
        "deletebaselinedata()": {
          "definition": "Delete_baseline_data()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "MaintenanceTicketBaselineHelper"
    },
    "exporthelper": {
      "namespace": "",
      "methods": {
        "considerrowwhereis()": {
          "definition": "Consider_row_where__is__(string field, string fieldValue)"
        },
        "verifyfilenameis()": {
          "definition": "Verify_file_name_is__(string fileName)"
        },
        "verifytherearerows()": {
          "definition": "Verify_there_are__rows(int count)"
        },
        "verifythatresultsdoesnotcontainrowwhereisandis()": {
          "definition": "Verify_that_results_does_not_contain_row_where__is__and__is__(string field1, string field1Value, string field2, string field2Value)"
        },
        "verifytherearecolumns()": {
          "definition": "Verify_there_are__columns(int count)"
        },
        "verifythatrowwhereisandisappearsbeforerowwhereisandis()": {
          "definition": "Verify_that_row_where__is__and__is__appears_before_row_where__is__and__is__(string row1Field1, string row1Field1Value, string row1Field2, string row1Field2Value, string row2Field1, string row2Field1Value, string row2Field2, string row2Field2Value)"
        },
        "verifyis()": {
          "definition": "Verify__is__(string fieldName, string value)"
        },
        "verifythereareinstancesofcolumn()": {
          "definition": "Verify_there_are__instances_of_column__(int totalInstances, string columnName)"
        },
        "considerrowwhereisandis()": {
          "definition": "Consider_row_where__is__and__is__(string field1, string field1Value, string field2, string field2Value)"
        },
        "verifyinstanceofcolumnis()": {
          "definition": "Verify__instance_of_column__is__(string ordinal, string fieldName, string value)"
        },
        "verifyisnotnull()": {
          "definition": "Verify__is_not_null(string fieldName)"
        },
        "verifythatresultscontainsrowwhereisandis()": {
          "definition": "Verify_that_results_contains_row_where__is__and__is__(string field1, string field1Value, string field2, string field2Value)"
        },
        "verifyexportcontainsdata()": {
          "definition": "Verify_export_contains_data()"
        },
        "considerrow()": {
          "definition": "Consider_row__(int row)"
        },
        "verifycolumnheadersare()": {
          "definition": "Verify_column_headers_are__(List<string> expectedHeaders)"
        }
      },
      "parent-name": null,
      "class-name": "ExportWorkflowHelper"
    },
    "learningobjectivemanagement": {
      "namespace": "",
      "methods": {
        "verifyelohascategory()": {
          "definition": "Verify_ELO_has_category__(string category)"
        },
        "verifytlohascategory()": {
          "definition": "Verify_TLO_has_category__(string category)"
        },
        "createtlowithidinprogramundercategoryandsubcategory()": {
          "definition": "Create__TLO_with_ID__in_Program__under_Category__and_Subcategory__(string status, string id, string program, string category, string subcategory)"
        },
        "createelowithidfortloinprogramundercategoryandsubcategorywithdescription()": {
          "definition": "Create__ELO_with_ID__for_TLO__in_Program__under_Category__and_Subcategory__with_description__(string status, string id, string tloId, string program, string category, string subcategory, string description)"
        },
        "verifytlohaslessonplanid()": {
          "definition": "Verify_TLO_has_LessonPlanID__(string lessonPlanID)"
        },
        "verifytlohasobjectivetext()": {
          "definition": "Verify_TLO_has_objective_text__(string description)"
        },
        "verifyeloactive()": {
          "definition": "Verify_ELO__active(string isIsNot)"
        },
        "createelowithidfortloinprogramundercategoryandsubcategory()": {
          "definition": "Create__ELO_with_ID__for_TLO__in_Program__under_Category__and_Subcategory__(string status, string id, string tloId, string program, string category, string subcategory)"
        },
        "createelowithidfortloinprogramundercategory()": {
          "definition": "Create__ELO_with_ID__for_TLO__in_Program__under_Category__(string status, string id, string tloId, string program, string category)"
        },
        "createelowithidfortloinprogramundercategorywithdescription()": {
          "definition": "Create__ELO_with_ID__for_TLO__in_Program__under_Category__with_description__(string status, string id, string tloId, string program, string category, string description)"
        },
        "verifyelohassubcategory()": {
          "definition": "Verify_ELO_has_subcategory__(string subcategory)"
        },
        "createtlowithidinprogramundercategory()": {
          "definition": "Create__TLO_with_ID__in_Program__under_Category__(string status, string id, string program, string category)"
        },
        "considertlowithidinprogram()": {
          "definition": "Consider_TLO_with_ID__in_program__(string tloID, string program)"
        },
        "verifysubcategoryincategoryhasdescriptionandactive()": {
          "definition": "Verify_SubCategory__in_Category__has_description__and__active(string subname, string catname, string description, string isIsNot)"
        },
        "verifytlohassubcategory()": {
          "definition": "Verify_TLO_has_subcategory__(string subcategory)"
        },
        "verifyelohasjobtaskid()": {
          "definition": "Verify_ELO_has_JobTaskID__(string jobTaskID)"
        },
        "considerelowithid()": {
          "definition": "Consider_ELO_with_ID__(string eloID)"
        },
        "setdescriptionofelowithidto()": {
          "definition": "Set_description_of_ELO_with_ID__to__(string eloId, string eloDesc)"
        },
        "createcategorywithdescription()": {
          "definition": "Create_Category__with_description__(string name, string description)"
        },
        "verifyelohaslessongplanid()": {
          "definition": "Verify_ELO_has_LessongPlanID__(string lessonPlanID)"
        },
        "createsubcategorywithdescriptionundercategory()": {
          "definition": "Create_SubCategory__with_description__under_category__(string name, string description, string category)"
        },
        "verifytlohasjobtaskid()": {
          "definition": "Verify_TLO_has_JobTaskID__(string jobTaskID)"
        },
        "verifyelohasobjectivetext()": {
          "definition": "Verify_ELO_has_objective_text__(string description)"
        },
        "createtlowithidinprogramundercategorywithdescription()": {
          "definition": "Create__TLO_with_ID__in_Program__under_Category__with_description__(string status, string id, string program, string category, string description)"
        },
        "verifycategoryhasdescriptionandactive()": {
          "definition": "Verify_Category__has_description__and__active(string name, string description, string isIsNot)"
        },
        "verifytloactive()": {
          "definition": "Verify_TLO__active(string isIsNot)"
        },
        "createtlowithidinprogramundercategoryandsubcategorywithdescription()": {
          "definition": "Create__TLO_with_ID__in_Program__under_Category__and_Subcategory__with_description__(string status, string id, string program, string category, string subcategory, string description)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "LearningObjectiveManagement"
    },
    "testopiamessagequeue": {
      "namespace": "",
      "methods": {
        "sendbatch()": {
          "definition": "SendBatch(IEnumerable<IMessage> messages)"
        },
        "remove()": {
          "definition": "Remove(Guid id)"
        },
        "purgeall()": {
          "definition": "PurgeAll()"
        },
        "send()": {
          "definition": "Send(IMessage message)"
        }
      },
      "parent-name": null,
      "class-name": "TestopiaMessageQueue"
    },
    "crossclasstestanalysisparameters": {
      "namespace": "",
      "methods": {
        "verifytherearetestsinthetypeaheadresults()": {
          "definition": "Verify_there_are__tests_in_the_type_ahead_results(int expectedNumberOfResults)"
        },
        "typeintotesttemplatestypeahead()": {
          "definition": "Type__into_test_templates_type_ahead(string searchText)"
        },
        "verifytestisinthetypeaheadresults()": {
          "definition": "Verify_test__is_in_the_type_ahead_results(string testName)"
        },
        "verifyisintheprogramtypeaheadresults()": {
          "definition": "Verify__is_in_the_program_type_ahead_results(string programName)"
        },
        "verifyselecttestsisfilteringbytest()": {
          "definition": "Verify_select_tests_is_filtering_by_test()"
        },
        "verifythereisclassinthetypeaheadresults()": {
          "definition": "Verify_there_is__class_in_the_type_ahead_results(int expectedNumberOfResults, string classTemplateName)"
        },
        "ticktheradiobuttontoselecttestsbyclass()": {
          "definition": "Tick_the_radio_button_to_select_tests_by_class()"
        },
        "setfiscalyearrangestartto()": {
          "definition": "Set_fiscal_year_range_start_to__(int startYear)"
        },
        "setcustomtimeframerangestartto()": {
          "definition": "Set_custom_timeframe_range_start_to__(DateTime startDate)"
        },
        "verifyistheselectedoptioninthetimeframerangedropdown()": {
          "definition": "Verify__is_the_selected_option_in_the_timeframe_range_dropdown(string filterOption)"
        },
        "removefromthetesttemplatetypeaheadselections()": {
          "definition": "Remove__from_the_test_template_type_ahead_selections(string testTemplateName)"
        },
        "selectfromtheprogramtypeaheadresults()": {
          "definition": "Select__from_the_program_type_ahead_results(string programName)"
        },
        "verifyfiscalyearrangeendis()": {
          "definition": "Verify_fiscal_year_range_end_is__(string endYearString)"
        },
        "verifyisanoptioninthetimeframerangedropdown()": {
          "definition": "Verify__is_an_option_in_the_timeframe_range_dropdown(string filterModeDescription)"
        },
        "verifythereisclasstemplategroupinthetypeaheadresults()": {
          "definition": "Verify_there_is__class_template_group_in_the_type_ahead_results(int expectedNumberOfResults)"
        },
        "selectfromthetimeframetypedropdown()": {
          "definition": "Select__from_the_timeframe_type_dropdown(string typeOption)"
        },
        "removefromtheclasstemplatetypeaheadselections()": {
          "definition": "Remove__from_the_class_template_type_ahead_selections(string classTemplateName)"
        },
        "setfiscalyearrangeendto()": {
          "definition": "Set_fiscal_year_range_end_to__(int endYear)"
        },
        "verifycustomtimeframerangestartis()": {
          "definition": "Verify_custom_timeframe_range_start_is__(DateTime startDate)"
        },
        "verifyclassisintheclasstemplategroupinthetypeaheadresults()": {
          "definition": "Verify_class__is_in_the__class_template_group_in_the_type_ahead_results(string className, string classTemplateName)"
        },
        "clickcontinue()": {
          "definition": "Click_Continue()"
        },
        "removefromtheclasstypeaheadselections()": {
          "definition": "Remove__from_the_class_type_ahead_selections(string className)"
        },
        "verifyclassisselectedinthetypeahead()": {
          "definition": "Verify_class__is_selected_in_the_type_ahead(string className)"
        },
        "verifythereareclassesintheclasstemplategroupinthetypeaheadresults()": {
          "definition": "Verify_there_are__classes_in_the__class_template_group_in_the_type_ahead_results(int expectedNumberOfResults, string classTemplateName)"
        },
        "verifythereareselectedprogramsinthetypeahead()": {
          "definition": "Verify_there_are__selected_programs_in_the_type_ahead(int expectedNumberOfResults)"
        },
        "verifythereisselectedclasstemplateinthetypeahead()": {
          "definition": "Verify_there_is__selected_class_template_in_the_type_ahead(int expectedNumberOfResults)"
        },
        "clickcancel()": {
          "definition": "Click_Cancel()"
        },
        "typeintoteststypeahead()": {
          "definition": "Type__into_tests_type_ahead(string searchText)"
        },
        "typeintoprogramtypeahead()": {
          "definition": "Type__into_program_type_ahead(string programSearchText)"
        },
        "navigatetocrossclasstestanalysislist()": {
          "definition": "NavigateToCrossClassTestAnalysisList()"
        },
        "verifyistheselectedoptioninthetimeframetypedropdown()": {
          "definition": "Verify__is_the_selected_option_in_the_timeframe_type_dropdown(string typeOption)"
        },
        "verifyusernavigatedtothetestanalysislist()": {
          "definition": "Verify_user__navigated_to_the_test_analysis_list(string wasWasNotString)"
        },
        "removefromtheprogramtypeaheadselections()": {
          "definition": "Remove__from_the_program_type_ahead_selections(string programName)"
        },
        "verifyclasstemplategroupisinthetypeaheadresults()": {
          "definition": "Verify_class_template_group__is_in_the_type_ahead_results(string classTemplateName)"
        },
        "verifyfiscalyearrangestartis()": {
          "definition": "Verify_fiscal_year_range_start_is__(string startYearString)"
        },
        "selectfromthetimeframerangedropdown()": {
          "definition": "Select__from_the_timeframe_range_dropdown(string filterOption)"
        },
        "verifythereisselectedprograminthetypeahead()": {
          "definition": "Verify_there_is__selected_program_in_the_type_ahead(int expectedNumberOfResults)"
        },
        "verifythereistesttemplateinthetypeaheadresults()": {
          "definition": "Verify_there_is__test_template_in_the_type_ahead_results(int expectedNumberOfResults)"
        },
        "verifyselecttestsisfilteringbyclass()": {
          "definition": "Verify_select_tests_is_filtering_by_class()"
        },
        "verifytesttemplateisinthetypeaheadresults()": {
          "definition": "Verify_test_template__is_in_the_type_ahead_results(string testTemplateName)"
        },
        "verifythereareselectedclasstemplatesinthetypeahead()": {
          "definition": "Verify_there_are__selected_class_templates_in_the_type_ahead(int expectedNumberOfResults)"
        },
        "verifytherearetimeframetypeoptions()": {
          "definition": "Verify_there_are__timeframe_type_options(int numberOfOptions)"
        },
        "verifythereisselectedtestinthetypeahead()": {
          "definition": "Verify_there_is__selected_test_in_the_type_ahead(int expectedNumberOfResults)"
        },
        "verifythereareselectedclassesinthetypeahead()": {
          "definition": "Verify_there_are__selected_classes_in_the_type_ahead(int expectedNumberOfResults)"
        },
        "verifyisselectedintheprogramtypeahead()": {
          "definition": "Verify__is_selected_in_the_program_type_ahead(string programName)"
        },
        "verifyclasstemplateisselectedinthetypeahead()": {
          "definition": "Verify_class_template__is_selected_in_the_type_ahead(string classTemplateName)"
        },
        "ticktheradiobuttontoselecttestsbytest()": {
          "definition": "Tick_the_radio_button_to_select_tests_by_test()"
        },
        "verifytesttemplateisselectedinthetypeahead()": {
          "definition": "Verify_test_template__is_selected_in_the_type_ahead(string testTemplateName)"
        },
        "verifytestisselectedinthetypeahead()": {
          "definition": "Verify_test__is_selected_in_the_type_ahead(string testName)"
        },
        "verifytherearetesttemplatesinthetypeaheadresults()": {
          "definition": "Verify_there_are__test_templates_in_the_type_ahead_results(int expectedNumberOfResults)"
        },
        "verifyisanoptioninthetimeframetypedropdown()": {
          "definition": "Verify__is_an_option_in_the_timeframe_type_dropdown(string timeframeTypeDescription)"
        },
        "verifyusernavigatedtothetestingdashboard()": {
          "definition": "Verify_user__navigated_to_the_testing_dashboard(string wasWasNotString)"
        },
        "verifythereisprograminthetypeaheadresults()": {
          "definition": "Verify_there_is__program_in_the_type_ahead_results(int expectedNumberOfResults)"
        },
        "verifythereareclasstemplategroupsinthetypeaheadresults()": {
          "definition": "Verify_there_are__class_template_groups_in_the_type_ahead_results(int expectedNumberOfResults)"
        },
        "verifythereareselectedtesttemplatesinthetypeahead()": {
          "definition": "Verify_there_are__selected_test_templates_in_the_type_ahead(int expectedNumberOfResults)"
        },
        "selectfromthetesttemplatetypeaheadresults()": {
          "definition": "Select__from_the_test_template_type_ahead_results(string testTemplateName)"
        },
        "verifythereistestinthetypeaheadresults()": {
          "definition": "Verify_there_is__test_in_the_type_ahead_results(int expectedNumberOfResults)"
        },
        "selectfromthetesttypeaheadresults()": {
          "definition": "Select__from_the_test_type_ahead_results(string testTemplateName)"
        },
        "verifythereareselectedtestsinthetypeahead()": {
          "definition": "Verify_there_are__selected_tests_in_the_type_ahead(int expectedNumberOfResults)"
        },
        "verifycustomtimeframerangeendis()": {
          "definition": "Verify_custom_timeframe_range_end_is__(DateTime endDate)"
        },
        "verifythereareprogramsinthetypeaheadresults()": {
          "definition": "Verify_there_are__programs_in_the_type_ahead_results(int expectedNumberOfResults)"
        },
        "navigatetodashboard()": {
          "definition": "NavigateToDashboard()"
        },
        "verifytherearetimeframerangeoptions()": {
          "definition": "Verify_there_are__timeframe_range_options(int numberOfOptions)"
        },
        "typeintoclassandclasstemplatetypeahead()": {
          "definition": "Type__into_class_and_class_template_type_ahead(string searchText)"
        },
        "setcustomtimeframerangeendto()": {
          "definition": "Set_custom_timeframe_range_end_to__(DateTime endDate)"
        },
        "verifythereisselectedclassinthetypeahead()": {
          "definition": "Verify_there_is__selected_class_in_the_type_ahead(int expectedNumberOfResults)"
        },
        "selectfromtheclassandclasstemplatetypeaheadresults()": {
          "definition": "Select__from_the_class_and_class_template_type_ahead_results(string classOrClassTemplateName)"
        },
        "removefromthetesttypeaheadselections()": {
          "definition": "Remove__from_the_test_type_ahead_selections(string testName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "CrossClassTestAnalysisParametersWorkflow"
    },
    "planningcategorylist": {
      "namespace": "",
      "methods": {
        "verifylisthascategories()": {
          "definition": "Verify_list_has__categories(int numCategories)"
        },
        "verifylistcategoriesare()": {
          "definition": "Verify_list_categories_are__(List<string> categoryNames)"
        },
        "verifymodalwasclearedandredisplayed()": {
          "definition": "Verify_modal_was_cleared_and_redisplayed()"
        },
        "considerrowforcategory()": {
          "definition": "Consider_row_for_category__(string categoryName)"
        },
        "clickdeleteforcategory()": {
          "definition": "Click_Delete_for_category__(string categoryName)"
        },
        "verifyrowusageis()": {
          "definition": "Verify_row_usage_is__(string usage)"
        },
        "verifycannoteditcategories()": {
          "definition": "Verify_cannot_edit_categories()"
        },
        "verifyrowcoloris()": {
          "definition": "Verify_row_color_is__(string color)"
        },
        "bindmodel()": {
          "definition": "BindModel(PlanningCategoryListVM model)"
        },
        "clickeditforcategory()": {
          "definition": "Click_Edit_for_category__(string categoryName)"
        },
        "showaddmodal()": {
          "definition": "ShowAddModal()"
        },
        "verifyuniquenamevalidationfailed()": {
          "definition": "Verify_unique_name_validation_failed()"
        },
        "verifyrowtypeis()": {
          "definition": "Verify_row_type_is__(string type)"
        },
        "clickaddcategory()": {
          "definition": "Click_Add_Category()"
        },
        "selectforusage()": {
          "definition": "Select__for_Usage(string usageString)"
        },
        "enterforname()": {
          "definition": "Enter__for_Name(string name)"
        },
        "enterfordescription()": {
          "definition": "Enter__for_Description(string description)"
        },
        "clicksaveandaddanother()": {
          "definition": "Click_Save_and_Add_Another()"
        },
        "verifyrowdescriptionis()": {
          "definition": "Verify_row_description_is__(string description)"
        },
        "selectforcolor()": {
          "definition": "Select__for_Color(string color)"
        },
        "verifycategorycanbedeleted()": {
          "definition": "Verify_category__can_be_deleted(string categoryName)"
        },
        "verifycaneditcategories()": {
          "definition": "Verify_can_edit_categories()"
        },
        "clicksave()": {
          "definition": "Click_Save()"
        },
        "verifycategorycannotbedeleted()": {
          "definition": "Verify_category__cannot_be_deleted(string categoryName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PlanningCategoryListWorkflow"
    },
    "scenarioconfiguration": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": "Workflow",
      "class-name": "ScenarioConfiguration"
    },
    "housinginventorylist": {
      "namespace": "",
      "methods": {
        "verifyassignusagesbuttonvisible()": {
          "definition": "Verify_Assign_Usages_button__visible(string isIsNotStr)"
        },
        "verifyallroomcolumnsareblank()": {
          "definition": "Verify_all_room_columns_are_blank()"
        },
        "verifyfacilityactionsvisible()": {
          "definition": "Verify_facility_actions__visible(string areAreNotVisibleStr)"
        },
        "verifybathroomisprivate()": {
          "definition": "Verify_bathroom_is_private()"
        },
        "setassignusagebuttonenabled()": {
          "definition": "SetAssignUsageButtonEnabled(bool shouldEnable)"
        },
        "bindbuildings()": {
          "definition": "BindBuildings(IList<BuildingSequenceDTO> buildings)"
        },
        "lookatrowforroomin()": {
          "definition": "Look_at_row_for_room__in____(string roomName, string buildingName, string floorName)"
        },
        "lookatrowforfloorin()": {
          "definition": "Look_at_row_for_floor__in__(string floorName, string buildingName)"
        },
        "verifygenderrestrictionis()": {
          "definition": "Verify_gender_restriction_is__(string genderRestrictionDescription)"
        },
        "verifyprimaryusageisunspecified()": {
          "definition": "Verify_primary_usage_is_unspecified()"
        },
        "lookatrowforbuilding()": {
          "definition": "Look_at_row_for_building__(string buildingName)"
        },
        "verifyroomadacompliant()": {
          "definition": "Verify_room__ADA_compliant(string isIsNotStr)"
        },
        "verifybathroomis()": {
          "definition": "Verify_bathroom_is__(string bathroomName)"
        },
        "verifyprimaryusageis()": {
          "definition": "Verify_primary_usage_is__(string primaryUsageStr)"
        },
        "bindhousinginventorydata()": {
          "definition": "BindHousingInventoryData(IList<HousingInventoryDTO> housingInventoryData)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "HousingInventoryListWorkflow"
    },
    "updateissuedcertification": {
      "namespace": "",
      "methods": {
        "cancelcertexpiration()": {
          "definition": "Cancel_cert_expiration()"
        },
        "showexpirationconfirmation()": {
          "definition": "ShowExpirationConfirmation()"
        },
        "verifyexpirationdateisneverexpiresandcannotbechanged()": {
          "definition": "Verify_expiration_date_is_Never_Expires_and_cannot_be_changed()"
        },
        "browsetoaddcertificationactionfromviewofforfacility()": {
          "definition": "Browse_to_add_certification_action_from_view_of__for_facility__(string certificationName, string facilityName)"
        },
        "browsetoaddcertificationactionfromviewoffororganization()": {
          "definition": "Browse_to_Add_Certification_Action_from_view_of__for_organization__(string certificationName, string orgName)"
        },
        "browsetorenewcertificationfromviewcertforvehicle()": {
          "definition": "Browse_to_Renew_Certification__from_view_cert_for_vehicle__(string certificationName, string vehicleName)"
        },
        "verifyexpirationdefaultisbasedoncurrentexpiration()": {
          "definition": "Verify_expiration_default_is_based_on_current_expiration()"
        },
        "verifyeffectivedateisdefaultedtotoday()": {
          "definition": "Verify_effective_date_is_defaulted_to_today()"
        },
        "browsetorenewcertificationfromviewcertforclasstemplate()": {
          "definition": "Browse_to_Renew_Certification__from_view_cert_for_class_template__(string certificationName, string classTemplateName)"
        },
        "browsetoeditofcertificationactionnumberfromviewofforperson()": {
          "definition": "Browse_to_edit_of_certification_action_number__from_view_of__for_person__(int actionNum, string certificationName, string personName)"
        },
        "savesuccessful()": {
          "definition": "SaveSuccessful()"
        },
        "returntofacilitypage()": {
          "definition": "ReturnToFacilityPage()"
        },
        "verifyeffectivedateis()": {
          "definition": "Verify_effective_date_is__(DateTime date)"
        },
        "selectstatusof()": {
          "definition": "Select_status_of__(string statusName)"
        },
        "setrenewaldatetonull()": {
          "definition": "Set_renewal_date_to_null()"
        },
        "verifymarkforprintingisvisibleanddefaultedtotrue()": {
          "definition": "Verify_mark_for_printing_is_visible_and_defaulted_to_true()"
        },
        "verifytypeofactionbeingaddedoreditedis()": {
          "definition": "Verify_type_of_action_being_added_or_edited_is__(string actionType)"
        },
        "verifynotredirected()": {
          "definition": "Verify_not_redirected()"
        },
        "verifysaveincompleteduetocertexpirationconfirmation()": {
          "definition": "Verify_save_incomplete_due_to_cert_expiration_confirmation()"
        },
        "clickdoneandconfirmstatuschange()": {
          "definition": "Click_Done_and_confirm_status_change()"
        },
        "clickcancel()": {
          "definition": "Click_Cancel()"
        },
        "verifystatusis()": {
          "definition": "Verify_status_is__(string statusLabel)"
        },
        "setrenewaldateto()": {
          "definition": "Set_renewal_date_to__(DateTime renewalDate)"
        },
        "verifyothercertnumberisnotvisible()": {
          "definition": "Verify_other_cert_number_is_not_visible()"
        },
        "confirmstatuschange()": {
          "definition": "Confirm_status_change()"
        },
        "verifyredirectedtoprogrampage()": {
          "definition": "Verify_redirected_to_program_page()"
        },
        "verifyeffectivedateislabeled()": {
          "definition": "Verify_effective_date_is_labeled__(string label)"
        },
        "confirmcertexpiration()": {
          "definition": "Confirm_cert_expiration()"
        },
        "verifyredirectedtopersonpage()": {
          "definition": "Verify_redirected_to_person_page()"
        },
        "verifysaveincompleteduetostatuschangeconfirmation()": {
          "definition": "Verify_save_incomplete_due_to_status_change_confirmation()"
        },
        "returntoorgpage()": {
          "definition": "ReturnToOrgPage()"
        },
        "browsetorenewcertificationfromviewcertforperson()": {
          "definition": "Browse_to_Renew_Certification__from_view_cert_for_person__(string certificationName, string personName)"
        },
        "verifytypeofactionbeingaddedoreditedisnotvisible()": {
          "definition": "Verify_type_of_action_being_added_or_edited_is_not_visible()"
        },
        "browsetorenewcertificationfrompersoncertificationlist()": {
          "definition": "Browse_to_Renew_Certification__from_person__certification_list(string certificationName, string personName)"
        },
        "verifycurrentexpirationdateisnotvisible()": {
          "definition": "Verify_current_expiration_date_is_not_visible()"
        },
        "browsetorenewcertificationfromorganizationcertificationlist()": {
          "definition": "Browse_to_Renew_Certification__from_organization__certification_list(string certificationName, string orgName)"
        },
        "verifyexpirationdatelabelis()": {
          "definition": "Verify_expiration_date_label_is__(string label)"
        },
        "returntovehiclepage()": {
          "definition": "ReturnToVehiclePage()"
        },
        "verifyothercertnumberisvisible()": {
          "definition": "Verify_other_cert_number_is_visible()"
        },
        "setexpirationto()": {
          "definition": "Set_expiration_to__(DateTime newExpirationDate)"
        },
        "verifyissueddateis()": {
          "definition": "Verify_issued_date_is__(DateTime issuedDate)"
        },
        "verifycurrentexpirationdateis()": {
          "definition": "Verify_current_expiration_date_is__(string expirationDate)"
        },
        "browsetoaddcertificationactionfromviewofforanimal()": {
          "definition": "Browse_to_add_certification_action_from_view_of__for_animal__(string certificationName, string animalName)"
        },
        "returntopersonpage()": {
          "definition": "ReturnToPersonPage()"
        },
        "setcommentsto()": {
          "definition": "Set_comments_to__(string comments)"
        },
        "browsetoaddcertificationactionfromviewofforfirearm()": {
          "definition": "Browse_to_add_certification_action_from_view_of__for_firearm__(string certificationName, string firearmName)"
        },
        "verifycertificationis()": {
          "definition": "Verify_certification_is__(string certName)"
        },
        "browsetorenewcertificationfromviewcertfororganization()": {
          "definition": "Browse_to_Renew_Certification__from_view_cert_for_organization__(string certificationName, string orgName)"
        },
        "browsetorenewcertificationfromclasstemplatecertificationlist()": {
          "definition": "Browse_to_Renew_Certification__from_class_template__certification_list(string certificationName, string classTemplateName)"
        },
        "verifyexpirationdefaultisbasedontoday()": {
          "definition": "Verify_expiration_default_is_based_on_today()"
        },
        "browsetorenewcertificationfromvehiclecertificationlist()": {
          "definition": "Browse_to_Renew_Certification__from_vehicle__certification_list(string certificationName, string vehicleName)"
        },
        "returntocertviewpage()": {
          "definition": "ReturnToCertViewPage()"
        },
        "verifyredirectedtocertviewpage()": {
          "definition": "Verify_redirected_to_cert_view_page()"
        },
        "setexpirationtonull()": {
          "definition": "Set_expiration_to_null()"
        },
        "browsetoaddcertificationactionfromviewofforvehicle()": {
          "definition": "Browse_to_add_certification_action_from_view_of__for_vehicle__(string certificationName, string vehicleName)"
        },
        "browsetoaddcertificationactionfromviewofforclasstemplate()": {
          "definition": "Browse_to_Add_Certification_Action_from_view_of__for_class_template__(string certificationName, string classTemplateName)"
        },
        "seteffectivedatetonull()": {
          "definition": "Set_effective_date_to_null()"
        },
        "verifypagetitleis()": {
          "definition": "Verify_page_title_is(string pageTitle)"
        },
        "verifyredirectedtoorgpage()": {
          "definition": "Verify_redirected_to_org_page()"
        },
        "seteffectivedateto()": {
          "definition": "Set_effective_date_to__(DateTime effDate)"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "verifyredirectedtovehiclepage()": {
          "definition": "Verify_redirected_to_vehicle_page()"
        },
        "cancelstatuschange()": {
          "definition": "Cancel_status_change()"
        },
        "showstatusconfirmation()": {
          "definition": "ShowStatusConfirmation()"
        },
        "returntoprogrampage()": {
          "definition": "ReturnToProgramPage()"
        },
        "returntoaccountablepropertypage()": {
          "definition": "ReturnToAccountablePropertyPage()"
        },
        "shouldshowcertexpirationcontrol()": {
          "definition": "ShouldShowCertExpirationControl(bool shouldShow, int recipientID)"
        },
        "returntofirearmpage()": {
          "definition": "ReturnToFirearmPage()"
        },
        "browsetoaddcertificationactionfromviewofforperson()": {
          "definition": "Browse_to_Add_Certification_Action_from_view_of__for_person__(string certificationName, string personName)"
        },
        "verifyexpirationdateis()": {
          "definition": "Verify_expiration_date_is__(DateTime expirationDate)"
        },
        "verifymarkforprintingisnotvisible()": {
          "definition": "Verify_mark_for_printing_is_not_visible()"
        },
        "verifyexpirationdefaultisbasedonrenewaldate()": {
          "definition": "Verify_expiration_default_is_based_on_renewal_date()"
        },
        "returntoanimalpage()": {
          "definition": "ReturnToAnimalPage()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "UpdateIssuedCertification"
    },
    "reportmanagement": {
      "namespace": "",
      "methods": {
        "create()": {
          "definition": "Create()"
        },
        "verifytimerangerowforshowson()": {
          "definition": "Verify_time_range_row_for__shows__on__(string label, string timeRange, string dayOfWeek)"
        },
        "savecustomtranscripttemplate()": {
          "definition": "Save_custom_transcript_template()"
        },
        "verifyreportshowsrowsofresources()": {
          "definition": "Verify_report_shows__rows_of_resources(int rowCount)"
        },
        "verifyreportcontains()": {
          "definition": "Verify_report_contains(string instructor)"
        },
        "createcustomtranscripttemplate()": {
          "definition": "Create_custom_transcript_template__(string transcriptName)"
        },
        "verifyresourcerowforshowscategoryquantityandstandard()": {
          "definition": "Verify_resource_row_for__shows_category__quantity__and_standard__(string resourceName, string category, int quantity, float utilizationPercentage)"
        },
        "uncheckboxtoincludecustomizablefield()": {
          "definition": "Uncheck_box_to_include_customizable_field__(PlaceableTemplateField field)"
        },
        "criteriadate()": {
          "definition": "Criteria_Date(DateTime startDate)"
        },
        "verifyreportdoesnotcontain()": {
          "definition": "Verify_report_does_not_contain(string instructor)"
        },
        "criteriadateto()": {
          "definition": "Criteria_Date_to(DateTime startDate, DateTime endDate)"
        },
        "instructorsforroware()": {
          "definition": "Instructors_for_row_are(int rowNum, string instructors)"
        },
        "group()": {
          "definition": "Group(string groupName)"
        },
        "setcustomtranscripttemplateownerto()": {
          "definition": "Set_custom_transcript_template_owner_to__(string ownerName)"
        },
        "generatereport()": {
          "definition": "Generate_Report( string which )"
        },
        "resultcountequals()": {
          "definition": "Result_Count_Equals(int rowCount)"
        },
        "segmentnameforrowis()": {
          "definition": "Segment_Name_for_row_is(int rowNum, string expectedValue)"
        },
        "resourcenameforrowis()": {
          "definition": "Resource_Name_for_row_is(int rowNum, string expectedValue)"
        },
        "verifyboxtoincludecustomizablefieldchecked()": {
          "definition": "Verify_box_to_include_customizable_field____checked(PlaceableTemplateField field, string isIsNotString)"
        },
        "checkboxtoincludecustomizablefield()": {
          "definition": "Check_box_to_include_customizable_field__(PlaceableTemplateField field)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "ReportManagement"
    },
    "portalclasstestresults": {
      "namespace": "",
      "methods": {
        "enterfortestdate()": {
          "definition": "Enter__for_test_date(DateTime testDate)"
        },
        "bindclassenrollmentlist()": {
          "definition": "BindClassEnrollmentList(IEnumerable<PortalClassTestEntryListItemDto> dtos)"
        },
        "verifyalreadyhasgrade()": {
          "definition": "Verify_already_has_grade()"
        },
        "clickfinishlater()": {
          "definition": "Click_finish_later()"
        },
        "enterforcomments()": {
          "definition": "Enter__for_comments(string comments)"
        },
        "verifypercentageresultis()": {
          "definition": "Verify_percentage_result_is__(decimal score)"
        },
        "clicksubmit()": {
          "definition": "Click_submit()"
        },
        "verifytestdateis()": {
          "definition": "Verify_test_date_is__(DateTime testDate)"
        },
        "selectforpassfailresult()": {
          "definition": "Select__for_pass_fail_result(string passFail)"
        },
        "verifytestresultsforeachstudentaretosubmit()": {
          "definition": "Verify_test_results_for_each_student_are__to_submit(string requiredOrNot)"
        },
        "clearpercentageresult()": {
          "definition": "Clear_percentage_result()"
        },
        "considerstudent()": {
          "definition": "Consider_student__(string studentName, string academyId)"
        },
        "verifypassfailresultis()": {
          "definition": "Verify_pass_fail_result_is__(string passFail)"
        },
        "verifytestdateisnotset()": {
          "definition": "Verify_test_date_is_not_set()"
        },
        "enterforpercentageresult()": {
          "definition": "Enter__for_percentage_result(decimal? score)"
        },
        "clearpassfailresult()": {
          "definition": "Clear_pass_fail_result()"
        },
        "verifyresultisnotset()": {
          "definition": "Verify_result_is_not_set()"
        },
        "waitforclicktolandusongradeentrypage()": {
          "definition": "Wait_for_click_to_land_us_on_grade_entry_page()"
        },
        "verifycommentsare()": {
          "definition": "Verify_comments_are__(string comments)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalClassTestResultsWorkflow"
    },
    "comparabletrainingaddedit": {
      "namespace": "",
      "methods": {
        "browsetopagetoeditcomparabletrainingfor()": {
          "definition": "Browse_to_page_to_edit_comparable_training_for__(string classTemplateName)"
        },
        "selectfromprogramintheclasstemplatetypeaheadresults()": {
          "definition": "Select__from_program__in_the_class_template_type_ahead_results(string classTemplateName, string programName)"
        },
        "verifythereareprogramsinthesubstitutionstypeahead()": {
          "definition": "Verify_there_are__programs_in_the_substitutions_type_ahead(int numberOfPrograms)"
        },
        "clickaddtolist()": {
          "definition": "Click_Add_to_List()"
        },
        "dispose()": {
          "definition": "Dispose()"
        },
        "ismutualfor()": {
          "definition": "__is_mutual_for__(string checkUncheckString, string substitutionName)"
        },
        "verifysubstitutionforforaprogramandmarkedasmutual()": {
          "definition": "Verify_substitution_for____for_a_program_and__marked_as_mutual(string substitutionName, string isIsNotProgram, string isIsNotMutual)"
        },
        "redirecttocomparabletraininglist()": {
          "definition": "RedirectToComparableTrainingList(int comparableTrainingSetID)"
        },
        "verifytherearesubstitutionsinthelist()": {
          "definition": "Verify_there_are__substitutions_in_the_list(int numberOfSubstitutions)"
        },
        "typeintothesubstitutionsselector()": {
          "definition": "Type__into_the_substitutions_selector(string searchText)"
        },
        "verifythereareprogramsintheclasstemplatetypeahead()": {
          "definition": "Verify_there_are__programs_in_the_class_template_type_ahead(int numberOfPrograms)"
        },
        "selectfromprograminthesubstitutionstypeaheadresults()": {
          "definition": "Select__from_program__in_the_substitutions_type_ahead_results(string classTemplateName, string programName)"
        },
        "browsetopagetoaddcomparabletraining()": {
          "definition": "Browse_to_page_to_add_comparable_training()"
        },
        "typeintotheclasstemplateselector()": {
          "definition": "Type__into_the_class_template_selector(string searchText)"
        },
        "verifyuserchangetheismutualsettingfor()": {
          "definition": "Verify_user__change_the_is_mutual_setting_for__(string canCannotString, string substitutionName)"
        },
        "verifyprogramintheclasstemplatetypeaheadcontains()": {
          "definition": "Verify_program__in_the_class_template_type_ahead_contains__(string programName, List<string> classTemplateNames)"
        },
        "bindsubstitutions()": {
          "definition": "BindSubstitutions(IList<ComparableTrainingSubstitutionReadonlyDTO> substitutions)"
        },
        "verifyprograminthesubstitutionstypeaheadcontains()": {
          "definition": "Verify_program__in_the_substitutions_type_ahead_contains__(string programName, List<string> classTemplateNames)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ComparableTrainingAddEditWorkflow"
    },
    "listmaintenancetickets": {
      "namespace": "",
      "methods": {
        "updateticketforresource()": {
          "definition": "Update_ticket_for_resource__(string resourceName)"
        },
        "setseverityfilterto()": {
          "definition": "Set_severity_filter_to__(List<string> severity)"
        },
        "verifyticketsaredisplayed()": {
          "definition": "Verify__tickets_are_displayed(int number)"
        },
        "setminreportdatefilterto()": {
          "definition": "Set_min_report_date_filter_to__(string reportDate)"
        },
        "clicklinktoviewticketofresource()": {
          "definition": "Click_link_to_view_ticket_of_resource_(string resourceName)"
        },
        "verifyresourceis()": {
          "definition": "Verify_resource_is__(string resourceName)"
        },
        "setproblemtypefilterto()": {
          "definition": "Set_problem_type_filter_to__(List<string> problemTypes)"
        },
        "bindproblemtypefilteroptions()": {
          "definition": "BindProblemTypeFilterOptions(List<DropDownItem> problemTypeOptions)"
        },
        "setmaxdaysopenfilterto()": {
          "definition": "Set_max_days_open_filter_to__(string daysOpen)"
        },
        "bindstatusfilteroptions()": {
          "definition": "BindStatusFilterOptions(List<DropDownItem> statusOptions)"
        },
        "verifyticketisinthelist()": {
          "definition": "Verify_ticket_is__in_the_list(string ordinal)"
        },
        "showupdatestatusinfopopover()": {
          "definition": "ShowUpdateStatusInfoPopover()"
        },
        "verifyticketnumbersareunique()": {
          "definition": "Verify_ticket_numbers_are_unique()"
        },
        "browsetopagefromhousingtab()": {
          "definition": "Browse_to_page_from_housing_tab()"
        },
        "clickdoneonfilterpopover()": {
          "definition": "Click_done_on_filter_popover()"
        },
        "verifyestimatedactivedateisnotset()": {
          "definition": "Verify_Estimated_Active_Date_is_not_set()"
        },
        "bindmaintenancetickets()": {
          "definition": "BindMaintenanceTickets(IEnumerable<ListMaintenanceTicketDTO.Ticket> ticketDtos)"
        },
        "verifywarningcallouttextis()": {
          "definition": "Verify_warning_callout_text_is(string resourceNotAvailableCalloutText)"
        },
        "verifydaysopenis()": {
          "definition": "Verify_days_open_is__(int days)"
        },
        "verifystatusis()": {
          "definition": "Verify_status_is__(string status)"
        },
        "setmaxreportdatefilterto()": {
          "definition": "Set_max_report_date_filter_to__(string reportDate)"
        },
        "verifyaticketforwithstatusisvisible()": {
          "definition": "Verify_a_ticket_for__with_status__is_visible(string resourceName, string status)"
        },
        "setmindaysopenfilterto()": {
          "definition": "Set_min_days_open_filter_to__(string daysOpen)"
        },
        "beginverifyingticketforresource()": {
          "definition": "Begin_verifying_ticket_for_resource__(string resourceName)"
        },
        "verifyestimatedactivedateis()": {
          "definition": "Verify_Estimated_Active_Date_is__(DateTime estimatedDate)"
        },
        "verifywarningiconshows()": {
          "definition": "Verify_warning_icon_shows()"
        },
        "setstatusfilterto()": {
          "definition": "Set_status_filter_to__(List<string> statuses)"
        },
        "verifywarningicondoesnotshow()": {
          "definition": "Verify_warning_icon_does_not_show()"
        },
        "clearallfilters()": {
          "definition": "Clear_all_filters()"
        },
        "verifyseverityis()": {
          "definition": "Verify_severity_is__(string severity)"
        },
        "verifyproblemtypeis()": {
          "definition": "Verify_problem_type_is__(string problemType)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ListMaintenanceTicketsWorkflow"
    },
    "externalhrimportsettings": {
      "namespace": "",
      "methods": {
        "selectfirstemployingorgupthetreeasemployerfordutyassignments()": {
          "definition": "Select_first_employing_org_up_the_tree_as_employer_for_duty_assignments()"
        },
        "bindparentorgforneworgs()": {
          "definition": "BindParentOrgForNewOrgs(int? selectedID, string name)"
        },
        "verifyredirectedtotemplatesetup()": {
          "definition": "Verify_redirected_to_template_setup()"
        },
        "selectasemployerfordutyassignments()": {
          "definition": "Select__as_employer_for_duty_assignments(string orgName)"
        },
        "verifyhrimportinuse()": {
          "definition": "Verify_HR_import__in_use(string isIsNot)"
        },
        "verifyredirectedtoglobalsettings()": {
          "definition": "Verify_redirected_to_global_settings()"
        },
        "verifyimporttemplatebeencreated()": {
          "definition": "Verify_import_template__been_created(string hasHasNot)"
        },
        "bindemployingorgfordutyassignments()": {
          "definition": "BindEmployingOrgForDutyAssignments(int? selectedID, string name)"
        },
        "selectasparentforneworganizations()": {
          "definition": "Select__as_parent_for_new_organizations(string orgName)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "selectforimportmode()": {
          "definition": "Select__for_Import_Mode(ExternalHRImportMode mode)"
        },
        "redirecttotemplatesetup()": {
          "definition": "RedirectToTemplateSetup(int jobID)"
        },
        "redirecttoglobalsettings()": {
          "definition": "RedirectToGlobalSettings()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ExternalHRImportSettingsWorkflow"
    },
    "selectableinserviceroster": {
      "namespace": "",
      "methods": {
        "verifynameis()": {
          "definition": "Verify_name__is__(int index, string name)"
        },
        "selectcheckboxfor()": {
          "definition": "Select_checkbox_for(string name)"
        },
        "browsetoaddattendeesforevent()": {
          "definition": "Browse_to_add_attendees_for_event__(string trainingEventName)"
        },
        "selectincludeinactivecheckbox()": {
          "definition": "Select_include_inactive_checkbox()"
        },
        "clickcontinue()": {
          "definition": "Click_continue()"
        },
        "verifytherearepeopleinthelist()": {
          "definition": "Verify_there_are__people_in_the_list(int numResults)"
        },
        "checkaddattendeebyselectingfromalistradiobutton()": {
          "definition": "Check_Add_attendee_by_selecting_from_a_list_radio_button()"
        },
        "verifyisnotinlist()": {
          "definition": "Verify_is_not_in_list(string name)"
        },
        "verifyissignedupforevent()": {
          "definition": "Verify_is_signed_up_for_event(string personName, string eventName)"
        },
        "bindroster()": {
          "definition": "BindRoster(IList<SelectableInServiceRosterDto> roster)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "SelectableInServiceRoster"
    },
    "liststaffassignments": {
      "namespace": "",
      "methods": {
        "browsetolistassignmentsforactivityonclass()": {
          "definition": "Browse_to_list_assignments_for_activity__on_class__(string activityName, string className)"
        },
        "considertheassignmentlisted()": {
          "definition": "Consider_the__assignment_listed(string ordinal)"
        },
        "browsetolistassignmentsforclasstemplate()": {
          "definition": "Browse_to_list_assignments_for_class_template__(string templateName)"
        },
        "verifyassignmentroleis()": {
          "definition": "Verify_assignment_role_is__(string role)"
        },
        "verifythedatapermissionwarningpopoverisdisplayed()": {
          "definition": "Verify_the_data_permission_warning_popover_is_displayed()"
        },
        "deletetheassignment()": {
          "definition": "Delete_the__assignment(string ordinal)"
        },
        "browsetolistassignmentsforclass()": {
          "definition": "Browse_to_list_assignments_for_class__(string className)"
        },
        "verifyassigneenameis()": {
          "definition": "Verify_assignee_name_is__(string name)"
        },
        "showdeleteconfirmationdialog()": {
          "definition": "ShowDeleteConfirmationDialog()"
        },
        "confirmdeletion()": {
          "definition": "Confirm_deletion()"
        },
        "verifythereareassignmentslisted()": {
          "definition": "Verify_there_are__assignments_listed(int count)"
        },
        "verifyassigneehoursare()": {
          "definition": "Verify_assignee_hours_are__(decimal hours)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "browsetolistassignmentsforactivityonclasstemplate()": {
          "definition": "Browse_to_list_assignments_for_activity__on_class_template__(string activityName, string templateName)"
        },
        "verifyassignmenttheprimarycontact()": {
          "definition": "Verify_assignment__the_primary_contact(string isOrNot)"
        },
        "bindstaffassignments()": {
          "definition": "BindStaffAssignments(IList<ListStaffAssignmentsDTO.Assignment> assignments)"
        },
        "verifytheassignmentexistsinthedb()": {
          "definition": "Verify_the__assignment_exists_in_the_db(string ordinal)"
        },
        "verifythereisaninprogressdeletefortheassignment()": {
          "definition": "Verify_there_is_an_in_progress_delete_for_the__assignment(string ordinal)"
        }
      },
      "parent-name": "MVBaseControlWorkflow",
      "class-name": "ListStaffAssignmentsWorkflow"
    },
    "certificationmanagementfnh": {
      "namespace": "",
      "methods": {
        "setauditnotificationtextofto()": {
          "definition": "Set_audit_notification_text_of__to__(string masterName, string auditNotificationTxt)"
        },
        "commandeerrenewalviewsfromcustomerwithcode()": {
          "definition": "Commandeer_renewal_views_from_customer_with_code_( string customerCode )"
        },
        "haveportalrenewmeetingrequirementswithnocriminaloffense()": {
          "definition": "Have__portal_renew__meeting_requirements_with_no_criminal_offense(string personName, string masterName)"
        },
        "verifyrequirementofisfulfilledwithtrainingclass()": {
          "definition": "Verify_requirement__of__is_fulfilled_with_training_class__(string reqText, string appName, string className)"
        },
        "verifyrequirementofisfulfilledwithcertification()": {
          "definition": "Verify_requirement__of__is_fulfilled_with_certification__(string reqText, string appName, string certVersionName)"
        },
        "verifythatapplicationhasrequirement()": {
          "definition": "Verify_that_application__has__requirement__(string appName, InquiryItemType category, string reqText)"
        },
        "verifycertificationisnotavailableforconferralandrenewal()": {
          "definition": "Verify_certification__is_not_available_for_conferral_and_renewal(string certName)"
        },
        "verifyapplicationhasaffirmationtext()": {
          "definition": "Verify_application_has_affirmation_text(string appName, string text)"
        },
        "createcertificationtemplateoftypenamedwithdescriptionthatneverexpires()": {
          "definition": "Create__certification_template_of_type__named__with_description__that_never_expires(string isActive, string certTypeName, string name, string description)"
        },
        "verifythereareclassdefinitionsusing()": {
          "definition": "Verify_there_are_class_definitions_using(int number, string masterName)"
        },
        "allowautorenewalofusingcustomviewnamedwithrenewalcommentsof()": {
          "definition": "Allow_AutoRenewal_of__using_custom_view_named__with_renewal_comments_of_( string masterName, string customViewName, string renewalComments )"
        },
        "verifyrequirementofisfulfilledwithemployment()": {
          "definition": "Verify_requirement__of__is_fulfilled_with_employment__(string reqText, string appName, string empName)"
        },
        "verifyversionofforpersonhasrenewalguidelines()": {
          "definition": "Verify_version_of__for_person__has_renewal_guidelines__(string masterName, string personName, string guidelines)"
        },
        "verifythereareactivitiesusing()": {
          "definition": "Verify_there_are_activities_using(int number, string masterName)"
        },
        "setaffirmationtextofto()": {
          "definition": "Set_affirmation_text_of__to_(string masterName, string affirmation)"
        },
        "donotallowportalrenewalof()": {
          "definition": "Do_Not_Allow_Portal_Renewal_of__( string masterName )"
        },
        "verifytherearetestsusing()": {
          "definition": "Verify_there_are_tests_using(int number, string masterName)"
        },
        "verifyversionofforpersonhasnorequirements()": {
          "definition": "Verify_version_of__for_person__has_no_requirements(string masterName, string personName)"
        },
        "createcopyofas()": {
          "definition": "Create_copy_of__as__(string certToCopyName, string newCertName)"
        },
        "verifythathascertificationapplication()": {
          "definition": "Verify_that__has_certification_application__(string personName, string appName)"
        },
        "selectportalrenewalrequirementfulfillmentrequiredfor()": {
          "definition": "Select_portal_renewal_requirement_fulfillment_required_for__(string masterName)"
        },
        "allowinactiverenewalsfor()": {
          "definition": "Allow_inactive_renewals_for__( string masterName )"
        },
        "createcertificationtemplateoftypenamedthatexpireseverywithowner()": {
          "definition": "Create__certification_template_of_type__named__that_expires_every__with_owner__(string isActive, string certTypeName, string name, int expireInterval, string expireType, string ownerName)"
        },
        "setauditpercentageofto()": {
          "definition": "Set_audit_percentage_of_to(string masterName, int auditPercentage)"
        },
        "haveapplyforconferralofas()": {
          "definition": "Have__apply_for_conferral_of__as__(string personName, string masterName, string appName)"
        },
        "setcertificationnameofto()": {
          "definition": "Set_certification_name_of__to__(string origName, string newName)"
        },
        "createcertificationtemplateoftypenamedthatexpiresevery()": {
          "definition": "Create__certification_template_of_type__named__that_expires_every__(string isActive, string certTypeName, string name, int expireInterval, string expireType)"
        },
        "removeconferralforinclass()": {
          "definition": "Remove__conferral_for__in_class_(string certVersionName, string personName, string className)"
        },
        "donotallowinactiverenewalsfor()": {
          "definition": "Do_not_allow_inactive_renewals_for__(string masterName)"
        },
        "verifythathasaportalrenewalapplicationforwithrequirementsmet()": {
          "definition": "Verify_that__has_a_portal_renewal_application_for__with_requirements_met(string personName, string masterName)"
        },
        "verifyversionofforpersonhasaffirmationtext()": {
          "definition": "Verify_version_of__for_person__has_affirmation_text__(string masterName, string personName, string affirmationTxt)"
        },
        "createcertificationtemplateoftypenamedwithdescriptionthatexpiresevery()": {
          "definition": "Create__certification_template_of_type__named__with_description__that_expires_every__(string isActive, string certTypeName, string name, string description, int expireInterval, string expireType)"
        },
        "verifyrequirementofisfulfilledwithinserviceevent()": {
          "definition": "Verify_requirement__of__is_fulfilled_with_inservice_event__(string reqText, string appName, string inserviceName)"
        },
        "verifycertificationisavailableforconferralandrenewal()": {
          "definition": "Verify_certification__is_available_for_conferral_and_renewal(string certName)"
        },
        "setdisciplinetoon()": {
          "definition": "Set_discipline_to__on__(string disciplineName, string masterName)"
        },
        "verifyapplicationhasrequirement()": {
          "definition": "Verify_application_has_requirement_(string appName, CertRequirementContext context, string text)"
        },
        "createcertificationtemplateoftypenamedthatneverexpires()": {
          "definition": "Create__certification_template_of_type__named__that_never_expires(string isActive, string certTypeName, string name)"
        },
        "allowportalrenewalof()": {
          "definition": "Allow_Portal_Renewal_of__( string masterName )"
        },
        "verifyapplicationhasrenewalguidelines()": {
          "definition": "Verify_application_has_renewal_guidelines(string appName, string text)"
        },
        "deletecertificationactionforperson()": {
          "definition": "Delete__certification_action__for_person__(string certName, int actionNumber, string personName)"
        },
        "selectportalrenewalrequirementaffirmationonlyfor()": {
          "definition": "Select_portal_renewal_requirement_affirmation_only_for__(string masterName)"
        },
        "verifyapplicationdoesnothaverequirement()": {
          "definition": "Verify_application__does_not_have__requirement__(string appName, CertRequirementContext context, string text)"
        },
        "setguidelinetextofto()": {
          "definition": "Set_guideline_text_of__to__(string masterName, string guidelines)"
        },
        "setactiverenewalexpirationdatetobebasedonrenewaldateforcertificationtemplate()": {
          "definition": "Set_active_renewal_expiration_date_to_be_based_on_renewal_date_for_certification_template__(string certTemplateName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "CertificationManagementFNH"
    },
    "expectedcheckoutlist": {
      "namespace": "",
      "methods": {
        "navigateback()": {
          "definition": "NavigateBack()"
        },
        "clickcheckoutall()": {
          "definition": "Click_check_out_all()"
        },
        "verifychangecheckoutreportsnoconflict()": {
          "definition": "Verify_change_checkout_reports_no_conflict()"
        },
        "verifyroomis()": {
          "definition": "Verify_room_is__(string room)"
        },
        "verifyearliestallowedcheckoutis()": {
          "definition": "Verify_earliest_allowed_checkout_is__(DateTime date)"
        },
        "verifyrowhasnamewithcostoverriddento()": {
          "definition": "Verify_row__has_name__with_cost__overridden_to(int index, string personName, string cost, string overrideCost)"
        },
        "verifycostisnotoverridden()": {
          "definition": "Verify_cost_is_not_overridden()"
        },
        "changecheckoutdateforto()": {
          "definition": "Change_checkout_date_for__to__(string name, DateTime date)"
        },
        "verifyrowsdisplay()": {
          "definition": "Verify__rows_display(int numRows)"
        },
        "verifyorganizationisempty()": {
          "definition": "Verify_organization_is_empty()"
        },
        "verifypriorcheckoutisnotexpected()": {
          "definition": "Verify_prior_checkout_is_not_expected()"
        },
        "verifyexpectedcheckoutis()": {
          "definition": "Verify_expected_checkout_is__(DateTime date)"
        },
        "selectcheckoutondatespecified()": {
          "definition": "Select_checkout_on_date_specified()"
        },
        "browsetopageforresidentonreservation()": {
          "definition": "Browse_to_Page_for_resident__on_reservation__(string residentName, string reservationName)"
        },
        "selectcheckoutonexpecteddate()": {
          "definition": "Select_checkout_on_expected_date()"
        },
        "verifysinglesubjectshown()": {
          "definition": "Verify_single_subject_shown()"
        },
        "verifyrowhasnamewithcostnotoverridden()": {
          "definition": "Verify_row__has_name__with__cost_not_overridden(int index, string personName, string cost)"
        },
        "verifymultiplesubjectsshown()": {
          "definition": "Verify_multiple_subjects_shown()"
        },
        "verifyassignedusageis()": {
          "definition": "Verify_assigned_usage_is__(string usage)"
        },
        "showsinglesubjecttextonpopover()": {
          "definition": "ShowSingleSubjectTextOnPopover()"
        },
        "bindexpectedcheckoutlist()": {
          "definition": "BindExpectedCheckoutList(List<ExpectedCheckoutListItemDTO> listData)"
        },
        "confirmcheckout()": {
          "definition": "Confirm_checkout()"
        },
        "verifypriorcheckoutexpected()": {
          "definition": "Verify_prior_checkout_expected()"
        },
        "verifychangecheckoutreportsconflicton()": {
          "definition": "Verify_change_checkout_reports_conflict_on__(DateTime date)"
        },
        "clickcheckout()": {
          "definition": "Click_check_out()"
        },
        "verifyrequestedusageis()": {
          "definition": "Verify_requested_usage_is__(string usage)"
        },
        "verifyorganizationis()": {
          "definition": "Verify_organization_is__(string org)"
        },
        "showmultiplesubjectstextonpopover()": {
          "definition": "ShowMultipleSubjectsTextOnPopover()"
        },
        "verifyoptionstouseexpectedcheckoutorspecifieddateareshown()": {
          "definition": "Verify_options_to_use_expected_checkout_or_specified_date_are_shown()"
        },
        "verifyoptionstouseexpectedcheckoutorspecifieddatearenotshown()": {
          "definition": "Verify_options_to_use_expected_checkout_or_specified_date_are_not_shown()"
        },
        "verifycostis()": {
          "definition": "Verify_cost_is__(decimal cost)"
        },
        "verifynightsis()": {
          "definition": "Verify_nights_is__(int nights)"
        },
        "clickcheckoutfor()": {
          "definition": "Click_checkout_for__(string name)"
        },
        "showcheckoutchangeconflict()": {
          "definition": "ShowCheckoutChangeConflict(DateTime conflictDate)"
        },
        "verifycostoverrideis()": {
          "definition": "Verify_cost_override_is__(decimal cost)"
        },
        "verifytextshowingthattherearecheckoutsexpectedbeforetodayappears()": {
          "definition": "Verify_text_showing_that_there_are_checkouts_expected_before_today_appears()"
        },
        "browsetopageforreservation()": {
          "definition": "Browse_to_Page_for_reservation__(string reservationName)"
        },
        "verifytextshowingthattherearecheckoutsexpectedbeforetodaydoesnotappear()": {
          "definition": "Verify_text_showing_that_there_are_checkouts_expected_before_today_does_not_appear()"
        },
        "verifyrowscontainentryfor()": {
          "definition": "Verify_rows_contain_entry_for__(string name)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ExpectedCheckoutListWorkflow"
    },
    "personnelexport": {
      "namespace": "",
      "methods": {
        "writeexport()": {
          "definition": "WriteExport(string fileName, IList<string> exportData)"
        },
        "export()": {
          "definition": "Export()"
        },
        "dispose()": {
          "definition": "Dispose()"
        }
      },
      "parent-name": "MVBaseExportHandlerWorkflow",
      "class-name": "PersonnelExportWorkflow"
    },
    "housingpricingstructure": {
      "namespace": "",
      "methods": {
        "verifypriceforatlevelisempty()": {
          "definition": "Verify_price_for__at_level__is__empty(string usage, string level)"
        },
        "clicksavelevel()": {
          "definition": "Click_Save_Level()"
        },
        "verifyusageexists()": {
          "definition": "Verify_usage__exists(string usage)"
        },
        "clickaddusage()": {
          "definition": "Click_Add_Usage()"
        },
        "verifyusageexistsinposition()": {
          "definition": "Verify_usage__exists_in_position__(string usage, int position)"
        },
        "verifylevelexistsinposition()": {
          "definition": "Verify_level__exists_in_position__(string level, int position)"
        },
        "clearpriceforatlevel()": {
          "definition": "Clear_price_for__at_level__(string usage, string level)"
        },
        "clicksaveusage()": {
          "definition": "Click_Save_Usage()"
        },
        "verifypriceforatlevelis()": {
          "definition": "Verify_price_for__at_level__is__(string usage, string level, decimal price)"
        },
        "enterpriceofforatlevel()": {
          "definition": "Enter_price_of__for__at_level__(decimal price, string usage, string level)"
        },
        "bindpricingstructure()": {
          "definition": "BindPricingStructure(List<UsageTypeDTO> usages, List<PriceLevelDTO> levels)"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "clickaddlevel()": {
          "definition": "Click_Add_Level()"
        },
        "verifylevelexists()": {
          "definition": "Verify_level__exists(string level)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "HousingPricingStructureWorkflow"
    },
    "tilecontroller": {
      "namespace": "",
      "methods": {
        "deletetileinposition()": {
          "definition": "Delete_tile_in_position__(int position)"
        },
        "verifyalltilesaredefault()": {
          "definition": "Verify_all_tiles_are_default()"
        },
        "verifynotilesaredefault()": {
          "definition": "Verify_no_tiles_are_default()"
        },
        "restoredefaulttiles()": {
          "definition": "Restore_default_tiles()"
        },
        "viewdashboard()": {
          "definition": "View__dashboard(AcadisTabs tab)"
        },
        "reordertilesinsequence()": {
          "definition": "Reorder_tiles_in_sequence__(List<int> positions)"
        },
        "verifytileatpositionisnavigationtilewithtitle()": {
          "definition": "Verify_tile_at_position__is_navigation_tile_with_title__(int position, string title)"
        },
        "verifytherearetiles()": {
          "definition": "Verify_there_are__tiles(int numTiles)"
        },
        "copydefaulttiles()": {
          "definition": "Copy_default_tiles()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "TileControllerWorkflow"
    },
    "editenrollment": {
      "namespace": "",
      "methods": {
        "verifythereisnotitle()": {
          "definition": "Verify_there_is_no_title()"
        },
        "clickbuttonsave()": {
          "definition": "Click_button_Save()"
        },
        "inthehousingrequesteditorenterdateforexpectedcheckin()": {
          "definition": "In_the_housing_request_editor_Enter_date__for_Expected_Checkin(DateTime expectedCheckIn)"
        },
        "inthehousingrequestdisplayverifythatpricelevelis()": {
          "definition": "In_the_housing_request_display_Verify_that_Price_Level_is__(string priceLevelDescription)"
        },
        "inthehousingrequesteditorverifythatspecialinstructionsisblank()": {
          "definition": "In_the_housing_request_editor_Verify_that_Special_Instructions_is_blank()"
        },
        "inthehousingrequesteditordiscardoldpriceandselect()": {
          "definition": "In_the_housing_request_editor_Discard_old_price_and_select____(string usageTypeName, string priceLevelDescription)"
        },
        "dispose()": {
          "definition": "Dispose()"
        },
        "inthehousingrequesteditorentertextforspecialinstructions()": {
          "definition": "In_the_housing_request_editor_Enter_text__for_Special_Instructions(string specialInstructions)"
        },
        "verifydateofbirthis()": {
          "definition": "Verify_date_of_birth_is__(DateTime dob)"
        },
        "inthehousingrequesteditorverifythatexpectedcheckoutis()": {
          "definition": "In_the_housing_request_editor_Verify_that_Expected_Checkout_is__(DateTime expectedCheckOut)"
        },
        "verifysendingorganizationis()": {
          "definition": "Verify_Sending_Organization_is__(string sendingOrgName)"
        },
        "clickok()": {
          "definition": "Click_Ok()"
        },
        "verifydateofbirthisemptyandcanbeedited()": {
          "definition": "Verify_date_of_birth_is_empty_and_can_be_edited()"
        },
        "inthehousingrequesteditorverifythatcheckedinwarningisdisplayed()": {
          "definition": "In_the_housing_request_editor_Verify_that_Checked_In_warning_is_displayed()"
        },
        "verifythatthehousingrequestvisible()": {
          "definition": "Verify_that_the_housing_request__visible(string isIsNot)"
        },
        "gotoenrollmentrecord()": {
          "definition": "GotoEnrollmentRecord()"
        },
        "browsetopagetoeditenrollmentforin()": {
          "definition": "Browse_to_page_to_edit_enrollment_for__in__(string personName, string cls)"
        },
        "verifyisselectedfortrainingcategory()": {
          "definition": "Verify__is_selected_for_Training_Category(string value)"
        },
        "inthehousingrequesteditorverifythatpricelevelis()": {
          "definition": "In_the_housing_request_editor_Verify_that_Price_Level_is__(string priceLevelDescription)"
        },
        "verifythereisnoselectedsendingorganization()": {
          "definition": "Verify_there_is_no_selected_Sending_Organization()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifytitleis()": {
          "definition": "Verify_Title_is__(string titleName)"
        },
        "setemergencycontactrelationshipto()": {
          "definition": "Set_emergency_contact_relationship_to(string contactRelationship)"
        },
        "setemergencycontactphone1totypewithnumberext()": {
          "definition": "Set_emergency_contact_Phone_1_to_type_with_number_ext(string phoneType, string phoneNumber, string phoneExt)"
        },
        "inthehousingrequesteditorverifythathousingrequestedhasnoselection()": {
          "definition": "In_the_housing_request_editor_Verify_that_Housing_Requested_has_no_selection()"
        },
        "selectfortrainingcategory()": {
          "definition": "Select__for_Training_Category(string value)"
        },
        "selectforgender()": {
          "definition": "Select__for_Gender(string value)"
        },
        "inthehousingrequesteditorverifythatpricelevelisreadonlywithtext()": {
          "definition": "In_the_housing_request_editor_Verify_that_price_level_is_read_only_with_text(string text)"
        },
        "verifythereisnoselectedtrainingcategory()": {
          "definition": "Verify_there_is_no_selected_training_category()"
        },
        "verifyemergencycontactis()": {
          "definition": "Verify_emergency_contact_is(string emergencyContact)"
        },
        "clicknotoupdateperson()": {
          "definition": "Click_No_to_update_person()"
        },
        "inthehousingrequesteditorverifythathousingrequestedhasunpublishedoptions()": {
          "definition": "In_the_housing_request_editor_Verify_that_Housing_Requested_has_unpublished_options__(List<string> usageTypeNames)"
        },
        "inthehousingrequestdisplayverifythatexpectedcheckoutis()": {
          "definition": "In_the_housing_request_display_Verify_that_Expected_Checkout_is__(string expectedCheckOutDate)"
        },
        "verifyemergencycontactrelationshipis()": {
          "definition": "Verify_emergency_contact_relationship_is(string value)"
        },
        "inthehousingrequesteditorenterdateforexpectedcheckout()": {
          "definition": "In_the_housing_request_editor_Enter_date__for_Expected_Checkout(DateTime expectedCheckOut)"
        },
        "inthehousingrequesteditorverifythathousingrequestedisusage()": {
          "definition": "In_the_housing_request_editor_Verify_that_Housing_Requested_is_usage__(string usageTypeName)"
        },
        "verifynoemergencycontact()": {
          "definition": "Verify_no_emergency_contact()"
        },
        "inthehousingrequesteditorverifythatpriceleveloptionsforare()": {
          "definition": "In_the_housing_request_editor_Verify_that_Price_Level_options_for__are__(string usageTypeName, List<string> priceLevelDescriptions)"
        },
        "inthehousingrequestdisplayverifythatspecialinstructionsis()": {
          "definition": "In_the_housing_request_display_Verify_that_Special_Instructions_is__(string specialInstructions)"
        },
        "gotoenrollanother()": {
          "definition": "GotoEnrollAnother()"
        },
        "verifypersonalinformationchangealertisvisible()": {
          "definition": "Verify_personal_information_change_alert_is_visible()"
        },
        "clickyestoupdateperson()": {
          "definition": "Click_Yes_to_update_person()"
        },
        "inthehousingrequesteditorverifythatpricelevelhasnoselection()": {
          "definition": "In_the_housing_request_editor_Verify_that_Price_Level_has_no_selection()"
        },
        "inthehousingrequestdisplayverifythathousingrequestedis()": {
          "definition": "In_the_housing_request_display_Verify_that_Housing_Requested_is__(string usageTypeName)"
        },
        "setemergencycontactphone2totypewithnumberext()": {
          "definition": "Set_emergency_contact_Phone_2_to_type_with_number_ext(string phoneType, string phoneNumber, string phoneExt)"
        },
        "inthehousingrequesteditorverifythatassignedwarningisdisplayed()": {
          "definition": "In_the_housing_request_editor_Verify_that_Assigned_warning_is_displayed()"
        },
        "inthehousingrequesteditorverifythatspecialinstructionsis()": {
          "definition": "In_the_housing_request_editor_Verify_that_Special_Instructions_is__(string specialInstructions)"
        },
        "verifythatthehousingrequesteditable()": {
          "definition": "Verify_that_the_housing_request__editable(string isIsNot)"
        },
        "inthehousingrequesteditorverifythathousingrequestedhaspublishedoptions()": {
          "definition": "In_the_housing_request_editor_Verify_that_Housing_Requested_has_published_options__(List<string> usageTypeNames)"
        },
        "inthehousingrequesteditorverifythathousingrequestedisreadonlywithtext()": {
          "definition": "In_the_housing_request_editor_Verify_that_housing_requested_is_read_only_with_text__(string text)"
        },
        "setemergencycontactto()": {
          "definition": "Set_emergency_contact_to(string emergencyContact)"
        },
        "clickbuttonsaveandenrollanother()": {
          "definition": "Click_button_Save_and_Enroll_Another()"
        },
        "inthehousingrequesteditorselectforhousingbilltoparty()": {
          "definition": "In_the_housing_request_editor_Select__for_Housing_Bill_to_Party(string billToParty)"
        },
        "inthehousingrequesteditorselectforusagetype()": {
          "definition": "In_the_housing_request_editor_Select__for_usage_type(string usageTypeName)"
        },
        "inthehousingrequestdisplayverifythatstudenthasrequestforhousing()": {
          "definition": "In_the_housing_request_display_Verify_that_student_has_request_for_housing()"
        },
        "inthehousingrequestdisplayverifythatexpectedcheckinis()": {
          "definition": "In_the_housing_request_display_Verify_that_Expected_Checkin_is__(string expectedCheckInDate)"
        },
        "inthehousingrequesteditorverifythatpurposecollected()": {
          "definition": "In_the_housing_request_editor_Verify_that_Purpose__collected(string isIsNotCollectedStr)"
        },
        "setsendingorganization()": {
          "definition": "Set_Sending_Organization__(string orgName)"
        },
        "inthehousingrequesteditorselectforpricelevel()": {
          "definition": "In_the_housing_request_editor_Select__for_price_level(string priceLevelDescription)"
        },
        "inthehousingrequestdisplayverifythatstudenthasrequestfornohousing()": {
          "definition": "In_the_housing_request_display_Verify_that_student_has_request_for_no_housing()"
        },
        "verifyisselectedforgender()": {
          "definition": "Verify__is_selected_for_Gender(string value)"
        },
        "inthehousingrequesteditorverifythatexpectedcheckinis()": {
          "definition": "In_the_housing_request_editor_Verify_that_Expected_Checkin_is__(DateTime expectedCheckIn)"
        },
        "inthehousingrequestdisplayverifythatstudenthasnotspecifiedahousingrequest()": {
          "definition": "In_the_housing_request_display_Verify_that_student_has_not_specified_a_housing_request()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EditEnrollmentWorkflow"
    },
    "animaledit": {
      "namespace": "",
      "methods": {
        "markasinactive()": {
          "definition": "Mark_as_Inactive()"
        },
        "verifybrandnumberis()": {
          "definition": "Verify_Brand_Number_is__(string value)"
        },
        "verifyphysicaldescriptionis()": {
          "definition": "Verify_Physical_Description_is__(string value)"
        },
        "enterasphysicaldescription()": {
          "definition": "Enter__as_Physical_Description(string value)"
        },
        "enterasname()": {
          "definition": "Enter__as_Name(string value)"
        },
        "selectasnimsavailability()": {
          "definition": "Select_as_NIMS_Availability(string value)"
        },
        "verifynameis()": {
          "definition": "Verify_Name_is__(string value)"
        },
        "enterasdateremovedfromservice()": {
          "definition": "Enter_as_Date_Removed_from_Service(DateTime value)"
        },
        "verifyisactive()": {
          "definition": "Verify_is_Active()"
        },
        "verifyitemisnotavailableindropdown()": {
          "definition": "Verify_item__is_not_available_in_dropdown__(string item, string list)"
        },
        "verifydateremovedfromserviceis()": {
          "definition": "Verify_Date_Removed_from_Service_is__(DateTime value)"
        },
        "saveanimal()": {
          "definition": "Save_animal()"
        },
        "enterasdescription()": {
          "definition": "Enter__as_Description(string value)"
        },
        "verifyisselectedfornimscategory()": {
          "definition": "Verify__is_selected_for_NIMS_Category(string value)"
        },
        "selectasgender()": {
          "definition": "Select__as_Gender(string value)"
        },
        "selectasnimscategory()": {
          "definition": "Select_as_NIMS_Category(string value)"
        },
        "selectasnimsresource()": {
          "definition": "Select_as_NIMS_Resource(string value)"
        },
        "verifydateofbirthis()": {
          "definition": "Verify_Date_of_Birth_is__(DateTime value)"
        },
        "verifybreedis()": {
          "definition": "Verify_Breed_is__(string value)"
        },
        "verifyisselectedfornimsavailability()": {
          "definition": "Verify__is_selected_for_NIMS_Availability(string value)"
        },
        "enterasdateenteredservice()": {
          "definition": "Enter__as_Date_Entered_Service(DateTime value)"
        },
        "selectasnimstier()": {
          "definition": "Select_as_NIMS_Tier(string value)"
        },
        "editanimalfromorganization()": {
          "definition": "Edit_animal__from_organization__(string animalName, string organizationName)"
        },
        "enterasdateofbirth()": {
          "definition": "Enter__as_Date_of_Birth(DateTime value)"
        },
        "enterasbrandnumber()": {
          "definition": "Enter__as_Brand_Number(string value)"
        },
        "verifyisselectedfornimstype()": {
          "definition": "Verify__is_selected_for_NIMS_Type(string value)"
        },
        "returntorecord()": {
          "definition": "ReturnToRecord()"
        },
        "verifyisselectedfornimsresource()": {
          "definition": "Verify__is_selected_for_NIMS_Resource(string value)"
        },
        "markasactive()": {
          "definition": "Mark_as_Active()"
        },
        "verifydescriptionis()": {
          "definition": "Verify_Description_is__(string value)"
        },
        "enterasbreed()": {
          "definition": "Enter__as_Breed(string value)"
        },
        "veifyisinactive()": {
          "definition": "Veify_is_Inactive()"
        },
        "verifyisselectedfornimskind()": {
          "definition": "Verify__is_selected_for_NIMS_Kind(string value)"
        },
        "selectforresourceimage()": {
          "definition": "Select__for_resource_image(string fileName)"
        },
        "selectasanimaltype()": {
          "definition": "Select__as_Animal_Type(string value)"
        },
        "verifyisselectedforgender()": {
          "definition": "Verify__is_selected_for_Gender(string value)"
        },
        "verifyanimalsexistunder()": {
          "definition": "Verify__animals__exist_under__(int count, string animalName, string organizationName)"
        },
        "addnewanimaltoorganization()": {
          "definition": "Add_new_animal_to_organization__(string organizationName)"
        },
        "enterasmarkings()": {
          "definition": "Enter__as_Markings(string value)"
        },
        "verifyisselectedforanimaltype()": {
          "definition": "Verify__is_selected_for_Animal_Type(string value)"
        },
        "selectasnimskind()": {
          "definition": "Select_as_NIMS_Kind(string value)"
        },
        "verifydateenteredserviceis()": {
          "definition": "Verify_Date_Entered_Service_is__(DateTime value)"
        },
        "addnewanimalnamedtoorganization()": {
          "definition": "Add_new__animal_named__to_organization__(string animalType, string animalName, string organizationName)"
        },
        "verifymarkingsis()": {
          "definition": "Verify_Markings_is__(string value)"
        },
        "verifyisselectedfornimstier()": {
          "definition": "Verify__is_selected_for_NIMS_Tier(string value)"
        },
        "selectasnimstype()": {
          "definition": "Select_as_NIMS_Type(string value)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AnimalEdit"
    },
    "certificationapplicationlist": {
      "namespace": "",
      "methods": {
        "verifythatcertificationapplicationsrestricted()": {
          "definition": "Verify_that_certification_applications__restricted(string certsAreRestrictedString)"
        },
        "browsetoorganization()": {
          "definition": "Browse_to_organization__(string orgName)"
        },
        "verifythatappcanbedeleted()": {
          "definition": "Verify_that__app__can_be_deleted(string appType, string certName)"
        },
        "verifythatappcannotbeedited()": {
          "definition": "Verify_that__app__cannot_be_edited(string appType, string certName)"
        },
        "verifythatlistcontainsapplications()": {
          "definition": "Verify_that_list_contains__applications(int numApps)"
        },
        "verifythatappisnotviewable()": {
          "definition": "Verify_that__app__is_not_viewable(string appType, string certName)"
        },
        "verifythatappisviewable()": {
          "definition": "Verify_that__app__is_viewable(string appType, string certName)"
        },
        "verifyaddnewbuttonisnotvisible()": {
          "definition": "Verify_Add_New_button_is_not_visible()"
        },
        "bindrepeater()": {
          "definition": "BindRepeater(List<CertApplicationListItemDTO> applications)"
        },
        "verifyaddnewbuttonisvisible()": {
          "definition": "Verify_Add_New_button_is_visible()"
        },
        "showdeletecertappaudit()": {
          "definition": "ShowDeleteCertAppAudit(int certAppID, string title, string auditMsg)"
        },
        "verifythatlistcontainsappforcertwithstatusandapplicationdateof()": {
          "definition": "Verify_that_list_contains__app_for_cert__with_status__and_application_date_of__(string appType, string certName, string statusName, DateTime appDate)"
        },
        "verifythatappcanbeedited()": {
          "definition": "Verify_that__app__can_be_edited(string appType, string certName)"
        },
        "verifydeleteconfirmationisvisible()": {
          "definition": "Verify_delete_confirmation_is_visible()"
        },
        "enteradeletereasonandclickdelete()": {
          "definition": "Enter_a_delete_reason_and_click_delete()"
        },
        "browsetoperson()": {
          "definition": "Browse_to_person__(string personName)"
        },
        "clickdeleteforappforcert()": {
          "definition": "Click_delete_for__app_for_cert__(string appType, string certName)"
        },
        "verifythatappcannotbedeleted()": {
          "definition": "Verify_that__app__cannot_be_deleted(string appType, string certName)"
        }
      },
      "parent-name": "MVBaseControlWorkflow",
      "class-name": "CertificationApplicationList"
    },
    "contactinfolist": {
      "namespace": "",
      "methods": {
        "verifyaddressismailing()": {
          "definition": "Verify__address_is_mailing(string ordinal)"
        },
        "verifyprimaryaddressflagset()": {
          "definition": "Verify_primary_address_flag__set(string isIsNot)"
        },
        "verifyemergencycontactphone1is()": {
          "definition": "verify_emergency_contact_phone_1_is__(string value)"
        },
        "considerphonenumber()": {
          "definition": "Consider_phone_number__(string number)"
        },
        "verifyaddressorderis()": {
          "definition": "Verify_address_order_is__(List<string> addressLineOnes)"
        },
        "verifynumberofphonesis()": {
          "definition": "Verify_number_of_phones_is__(int count)"
        },
        "verifyline2is()": {
          "definition": "Verify_line_2_is__(string line2)"
        },
        "verifyaddressisprimary()": {
          "definition": "Verify__address_is_primary(string ordinal)"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for__(string personName)"
        },
        "verifyemailisprimary()": {
          "definition": "Verify__email_is_primary(string ordinal)"
        },
        "consideraddressat()": {
          "definition": "Consider_address_at__(string addressLine1)"
        },
        "verifymailingaddressflagset()": {
          "definition": "Verify_mailing_address_flag__set(string isIsNot)"
        },
        "verifyphoneisprimary()": {
          "definition": "Verify__phone_is_primary(string ordinal)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "bindwebsites()": {
          "definition": "BindWebsites(IList<WebsiteDto> dtos)"
        },
        "bindphones()": {
          "definition": "BindPhones(IList<PhoneDto> dtos)"
        },
        "bindaddresses()": {
          "definition": "BindAddresses(IList<AddressDto> dtos)"
        },
        "verifydescriptionis()": {
          "definition": "Verify_description_is__(string description)"
        },
        "verifycityis()": {
          "definition": "Verify_city_is__(string city)"
        },
        "verifywebsiteis()": {
          "definition": "Verify__website_is__(string ordinal, string url)"
        },
        "verifyemergencycontactphone2is()": {
          "definition": "verify_emergency_contact_phone_2_is__(string value)"
        },
        "bindemailaddresses()": {
          "definition": "BindEmailAddresses(IList<EmailDto> dtos)"
        },
        "verifyemailis()": {
          "definition": "Verify__email_is__(string ordinal, string emailAddress)"
        },
        "browsetopagefororganization()": {
          "definition": "Browse_to_page_for_organization__(string orgName)"
        },
        "verifynumberofaddressesis()": {
          "definition": "Verify_number_of_addresses_is__(int count)"
        },
        "verifynumberofemailsis()": {
          "definition": "Verify_number_of_emails_is__(int count)"
        },
        "verifycountyis()": {
          "definition": "Verify_county_is__(string county)"
        },
        "verifyemergencycontactrelationshipis()": {
          "definition": "verify_emergency_contact_relationship_is__(string value)"
        },
        "verifyzipis()": {
          "definition": "Verify_zip_is__(string zip)"
        },
        "verifyemergencycontactwaslastupdatedon()": {
          "definition": "verify_emergency_contact_was_last_updated_on__(string value)"
        },
        "verifyemergencycontactnameis()": {
          "definition": "verify_emergency_contact_name_is__(string value)"
        },
        "verifyphoneisoftype()": {
          "definition": "Verify__phone_is__of_type__(string ordinal, string number, string extension, string phoneType)"
        },
        "verifyprimaryphoneflagset()": {
          "definition": "Verify_primary_phone_flag__set(string isIsNot)"
        },
        "verifyemergencycontactaddressis()": {
          "definition": "verify_emergency_contact_address_is__(string value)"
        },
        "verifyphonetypeis()": {
          "definition": "Verify_phone_type_is__(string type)"
        },
        "bindemergencycontact()": {
          "definition": "BindEmergencyContact(PersonEmergencyContactReadOnlyDto dto)"
        },
        "verifynumberofwebsitesis()": {
          "definition": "Verify_number_of_websites_is__(int count)"
        },
        "verifyaddresstypeis()": {
          "definition": "Verify_address_type_is__(string type)"
        },
        "verifystateis()": {
          "definition": "Verify_state_is__(string state)"
        },
        "verifynocontactinfo()": {
          "definition": "Verify_no_contact_info()"
        },
        "verifyextensionis()": {
          "definition": "Verify_extension_is__(string extension)"
        },
        "verifyaddressisoftype()": {
          "definition": "Verify__address_is__of_type__(string ordinal, string street1, string street2, string city, string state, string zip, string addressType)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ContactInfoListWorkflow"
    },
    "projectedresidentseditor": {
      "namespace": "",
      "methods": {
        "verifyresidentsis()": {
          "definition": "Verify_Residents_is__(int numResidents)"
        },
        "addanewnonstudentprojection()": {
          "definition": "Add_a_new_non_student_projection()"
        },
        "chooseforgender()": {
          "definition": "Choose__for_Gender(string genderDesc)"
        },
        "verifythattherearegroupsofstudentsprojected()": {
          "definition": "Verify_that_there_are__groups_of_students_projected(int numProjections)"
        },
        "entertextforresidents()": {
          "definition": "Enter_text__for_Residents(int numResidents)"
        },
        "verifyroomtypeis()": {
          "definition": "Verify_Room_Type_is__(string roomTypeName)"
        },
        "verifygenderis()": {
          "definition": "Verify_Gender_is__(string genderDesc)"
        },
        "chooseforroomtype()": {
          "definition": "Choose__for_Room_Type(string roomTypeName)"
        },
        "verifythattherearegroupsofnonstudentsprojected()": {
          "definition": "Verify_that_there_are__groups_of_non_students_projected(int numProjections)"
        },
        "instudentprojection()": {
          "definition": "In_student_projection__(int index)"
        },
        "verifyspecialaccommodationsis()": {
          "definition": "Verify_Special_Accommodations_is__(string specialAccommodationsDesc)"
        },
        "bindreservationrequirements()": {
          "definition": "BindReservationRequirements(IList<ReservationRequirementDTO> studentReqs, IList<ReservationRequirementDTO> nonStudentReqs)"
        },
        "removenonstudentprojection()": {
          "definition": "Remove_non_student_projection__(int index)"
        },
        "innonstudentprojection()": {
          "definition": "In_non_student_projection__(int index)"
        },
        "addanewstudentprojection()": {
          "definition": "Add_a_new_student_projection()"
        },
        "removestudentprojection()": {
          "definition": "Remove_student_projection__(int index)"
        },
        "verifyresidentsisblank()": {
          "definition": "Verify_Residents_is_blank()"
        },
        "chooseforspecialaccommodations()": {
          "definition": "Choose__for_Special_Accommodations(string specialAccommodationsDesc)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ProjectedResidentsEditorWorkflow"
    },
    "testopiaperson": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "TestopiaPerson"
    },
    "attemplateoptionalinfo": {
      "namespace": "",
      "methods": {
        "showpreview()": {
          "definition": "ShowPreview()"
        },
        "showpreviewvalidationerror()": {
          "definition": "ShowPreviewValidationError()"
        },
        "setcategoryto()": {
          "definition": "Set_Category_to__(string categoryName)"
        },
        "verifythatcategoryis()": {
          "definition": "Verify_that_Category_is__(string categoryName)"
        },
        "verifythatsubcategoryhasoptions()": {
          "definition": "Verify_that_Subcategory_has__options(int numCategories)"
        },
        "verifythatinstructionsshouldappearat()": {
          "definition": "Verify_that_Instructions_should_appear_at__(TestTemplateInstructionsPlacement placement)"
        },
        "verifythatpretestinstructionsare()": {
          "definition": "Verify_that_Pre_Test_Instructions_are__(string instructions)"
        },
        "verifythatposttestinstructionsare()": {
          "definition": "Verify_that_Post_Test_Instructions_are__(string instructions)"
        },
        "verifythattimelimitis()": {
          "definition": "Verify_that_Time_Limit_is__(string timeLimit)"
        },
        "verifythatdescriptionis()": {
          "definition": "Verify_that_Description_is__(string description)"
        },
        "clickcontinue()": {
          "definition": "Click_Continue()"
        },
        "verifythatcategoryhasoptions()": {
          "definition": "Verify_that_Category_has__options(int numCategories)"
        },
        "setposttestinstructionsto()": {
          "definition": "Set_Post_Test_Instructions_to__(string instructions)"
        },
        "setsubcategoryto()": {
          "definition": "Set_Subcategory_to__( string subcategoryName )"
        },
        "setpretestinstructionsto()": {
          "definition": "Set_Pre_Test_Instructions_to__(string instructions)"
        },
        "setsurveyto()": {
          "definition": "Set_Survey_to__( string surveyName )"
        },
        "settimelimittominutes()": {
          "definition": "Set_Time_Limit_to__minutes(string timeLimit)"
        },
        "verifythattemplatenameis()": {
          "definition": "Verify_that_Template_Name_is__( string templateName )"
        },
        "verifythatsurveyis()": {
          "definition": "Verify_that_Survey_is__( string SurveyName )"
        },
        "verifythatshowgradeuponcompletionis()": {
          "definition": "Verify_that_Show_Grade_Upon_Completion_is__(string selectedUnselected)"
        },
        "showgradeuponcompletion()": {
          "definition": "__Show_Grade_Upon_Completion(string selectUnselect)"
        },
        "verifythatsubcategoryhasoption()": {
          "definition": "Verify_that_Subcategory_has_option__(string subcategoryName)"
        },
        "setinstructionstoappearat()": {
          "definition": "Set_Instructions_to_appear_at__(TestTemplateInstructionsPlacement placement)"
        },
        "verifythatsubcategoryis()": {
          "definition": "Verify_that_Subcategory_is__(string subcategoryName)"
        },
        "setdescriptionto()": {
          "definition": "Set_Description_to__( string description )"
        },
        "browsetooptionalinformationpagefor()": {
          "definition": "Browse_to_Optional_Information_Page_for__( string templateName )"
        },
        "verifythatcategoryhasoption()": {
          "definition": "Verify_that_Category_has_option__(string categoryName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ATTemplateOptionalInfoWorkflow"
    },
    "advanceddataexport": {
      "namespace": "",
      "methods": {
        "clicktocloseproblemalert()": {
          "definition": "Click_to_close_problem_alert()"
        },
        "verifythatproblemalertisshownaswarning()": {
          "definition": "Verify_that_problem_alert_is_shown_as_warning()"
        },
        "writeexport()": {
          "definition": "WriteExport(IList<string> exportChunks)"
        },
        "verifythatshowsinvalidationerrors()": {
          "definition": "Verify_that__shows_in_validation_errors(string errorMessage)"
        },
        "bindassignablebizfuncs()": {
          "definition": "BindAssignableBizFuncs(IEnumerable<BusinessFunctionDTO> businessFunctions)"
        },
        "selectasrequiredpermissionforsharing()": {
          "definition": "Select__as_required_permission_for_sharing(string businessFunctionName)"
        },
        "verifythatselectedpermissionis()": {
          "definition": "Verify_that_selected_permission_is__(string businessFunctionName)"
        },
        "verifythatinvalidsyntaxerrorwasreceived()": {
          "definition": "Verify_that_invalid_syntax_error_was_received()"
        },
        "verifythatnamenotavailableerrorshown()": {
          "definition": "Verify_that_name_not_available_error__shown(string isIsNot)"
        },
        "shownamenotavailableerror()": {
          "definition": "ShowNameNotAvailableError()"
        },
        "bindvalidationerrors()": {
          "definition": "BindValidationErrors(IEnumerable<string> validationErrors)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "showqueryproblemalert()": {
          "definition": "ShowQueryProblemAlert(bool showAsError)"
        },
        "verifythatpermissionexist()": {
          "definition": "Verify_that__permission__exist(string businessFunctionName, string doesDoesNot)"
        },
        "verifythattherearevalidationerrors()": {
          "definition": "Verify_that_there_are__validation_errors(int count)"
        },
        "continuetolist()": {
          "definition": "ContinueToList(int savedExportID, bool initializeExportAfterRedirect)"
        },
        "verifythatproblemalertisnotshown()": {
          "definition": "Verify_that_problem_alert_is_not_shown()"
        },
        "browsetopageforexport()": {
          "definition": "Browse_to_page_for_export__(string exportName)"
        },
        "verifythatproblemalertisshownaserror()": {
          "definition": "Verify_that_problem_alert_is_shown_as_error()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AdvancedDataExportWorkflow"
    },
    "housingmanagement": {
      "namespace": "",
      "methods": {
        "lookatreservationforevent()": {
          "definition": "Look_at_reservation_for_event__(string eventName)"
        },
        "verifyreservationisoftype()": {
          "definition": "Verify_reservation_is_of_type__(string reservationTypeStr)"
        },
        "verifyreservationhasrequirements()": {
          "definition": "Verify_reservation_has__requirements(int numRequirements)"
        },
        "verifyeventhaveareservation()": {
          "definition": "Verify_event_____have_a_reservation(string eventName, string doesDoesNot)"
        },
        "deletereservationforevent()": {
          "definition": "Delete_reservation_for_event__(string eventName)"
        },
        "verifyreservationisfromto()": {
          "definition": "Verify_reservation_is_from__to__(DateTime checkInDate, DateTime checkOutDate)"
        },
        "verifyrequestforeventhaveanevent()": {
          "definition": "Verify_request_for_event_____have_an_event(string eventName, string doesDoesNot)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "HousingManagement"
    },
    "addacadisuser": {
      "namespace": "",
      "methods": {
        "verifyactivedirectoryusernameisblank()": {
          "definition": "Verify_Active_Directory_username_is_blank()"
        },
        "verifyuserdidnotnavigatetouserrecord()": {
          "definition": "Verify_user_did_not_navigate_to_user_record()"
        },
        "setstatusto()": {
          "definition": "Set_status_to__(LoginStatus status)"
        },
        "verifyusernameis()": {
          "definition": "Verify_username_is__(string username)"
        },
        "selectperson()": {
          "definition": "Select_person__(string personName)"
        },
        "browsetopageforperson()": {
          "definition": "Browse_to_Page_for_person__(string personName)"
        },
        "navigatetouserrecord()": {
          "definition": "NavigateToUserRecord(int personID)"
        },
        "verifysamlusernameisblank()": {
          "definition": "Verify_SAML_username_is_blank()"
        },
        "setactivedirectoryusernameto()": {
          "definition": "Set_active_directory_user_name_to__(string userName )"
        },
        "setusernameto()": {
          "definition": "Set_user_name_to__(string userName)"
        },
        "verifyusernavigatedtouserrecordfor()": {
          "definition": "Verify_user_navigated_to_user_record_for__(string personName)"
        },
        "verifysamlusernamecollected()": {
          "definition": "Verify_SAML_username__collected(string isIsNotCollected)"
        },
        "verifystatusis()": {
          "definition": "Verify_status_is__(LoginStatus status)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifyusernameduplicate()": {
          "definition": "Verify_username__duplicate(string isIsNotDuplicate)"
        },
        "verifytemporarypassworddisplayed()": {
          "definition": "Verify_temporary_password__displayed(string wasWasNotDisplayed)"
        },
        "verifyactivedirectoryusernameduplicate()": {
          "definition": "Verify_Active_Directory_username__duplicate(string isIsNotDuplicate)"
        },
        "verifyexistinguser()": {
          "definition": "Verify__existing_user(string isIsNotExistingUser)"
        },
        "verifyactivedirectoryusernamecollected()": {
          "definition": "Verify_Active_Directory_username__collected(string isIsNotCollected)"
        },
        "verifyactivedirectoryusernameinvalid()": {
          "definition": "Verify_Active_Directory_username__invalid(string isIsNotInvalid)"
        },
        "showtemporarypassword()": {
          "definition": "ShowTemporaryPassword(string username, string password)"
        },
        "verifysamlusernameduplicate()": {
          "definition": "Verify_SAML_username__duplicate(string isIsNotDuplicate)"
        },
        "setsamlusernameto()": {
          "definition": "Set_saml_user_name_to__(string userName )"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AddAcadisUserWorkflow"
    },
    "questionbank": {
      "namespace": "",
      "methods": {
        "addanswerwithtext()": {
          "definition": "Add__Answer__with_text_(string correct, string letter, string answerText)"
        },
        "updatequestionwithtextownedby()": {
          "definition": "Update_question_with_text__owned_by__(string questionText, string ownerName)"
        },
        "questionsubcategoryis()": {
          "definition": "Question_Subcategory_is__(string subcategory)"
        },
        "createquestionwithtextownedby()": {
          "definition": "Create__Question_with_text__owned_by__(QuestionType type, string questionText, string ownerName)"
        },
        "setquestiontextto()": {
          "definition": "Set_question_text_to__(string questionText)"
        },
        "removeelofromquestion()": {
          "definition": "Remove_ELO__from_question__(string eloName, string questionName)"
        },
        "verifythatcurrentversionofquestionis()": {
          "definition": "Verify_that_current_version_of_question__is__(string questionName, int versionNumber)"
        },
        "createquestionwithtextownedbyforprogram()": {
          "definition": "Create__Question_with_text__owned_by__for_program__(QuestionType type, string questionText, string ownerName, string programName)"
        },
        "questionpriorityis()": {
          "definition": "Question_Priority_is__(string priority)"
        },
        "questionfilenameis()": {
          "definition": "Question_File_Name_is__(string fileName)"
        },
        "createnewversionofquestionwithtextownedby()": {
          "definition": "Create_new_version_of_question_with_text__owned_by__(string questionText, string ownerName)"
        },
        "setcorrectanswerto()": {
          "definition": "Set_correct_answer_to__(string correctAnswer)"
        },
        "answerfeedbackis()": {
          "definition": "Answer_Feedback_is__(string str)"
        },
        "savequestion()": {
          "definition": "Save_Question()"
        },
        "addelotoquestion()": {
          "definition": "Add_ELO__to_question(string eloName)"
        },
        "questioncategoryis()": {
          "definition": "Question_Category_is__(string category)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "QuestionBankWorkflow"
    },
    "pointsofcontactportal": {
      "namespace": "",
      "methods": {
        "verifyisnotasearchoption()": {
          "definition": "Verify_is_not_a_search_option(string personName)"
        },
        "verifyorganizationnameis()": {
          "definition": "Verify_organization_name_is__(string organizationName)"
        },
        "selectcontactrole()": {
          "definition": "Select_Contact_Role__(string roleName)"
        },
        "verifyisasearchoption()": {
          "definition": "Verify__is_a_search_option(string personName)"
        },
        "entertosearchforpointsofcontact()": {
          "definition": "Enter__to_search_for_Points_of_Contact(string searchText)"
        },
        "verifynotprimarycontact()": {
          "definition": "Verify_not_primary_contact()"
        },
        "makethispersonaprimarycontact()": {
          "definition": "Make_this_person_a_primary_contact()"
        },
        "browsetoeditpointofcontactforunder()": {
          "definition": "Browse_to_Edit_Point_Of_Contact_for__under__(string personName, string orgName)"
        },
        "opentheemployeelisttypeahead()": {
          "definition": "Open_the_employee_list_type_ahead()"
        },
        "verifyisacontactroleoption()": {
          "definition": "Verify__is_a_Contact_Role_option(string roleName)"
        },
        "verifyisnotapointofcontactoption()": {
          "definition": "Verify__is_not_a_Point_of_Contact_option(string optionName)"
        },
        "verifytherearesearchoptions()": {
          "definition": "Verify_there_are__search_options(int number)"
        },
        "verifycontactnameisandemailisandphoneis()": {
          "definition": "Verify_Contact_Name_is__and_Email_is__and_Phone_is__(string personName, string email, string phone)"
        },
        "verifycontactroleis()": {
          "definition": "Verify_Contact_Role_is__(string roleName)"
        },
        "selectfromsearch()": {
          "definition": "Select__from_search(string searchTerm)"
        },
        "enterintheemployeelisttypeahead()": {
          "definition": "Enter__in_the_employee_list_type_ahead(string text)"
        },
        "select()": {
          "definition": "Select__(string personName)"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "browsetoaddpointofcontactfor()": {
          "definition": "Browse_to_Add_Point_Of_Contact_for__(string orgName)"
        },
        "bindcontactoptions()": {
          "definition": "BindContactOptions(PointOfContactDTO pocDTO)"
        },
        "bindexistingcontact()": {
          "definition": "BindExistingContact(ViewPointOfContactSingleDTO contactInfo)"
        },
        "verifyisapointofcontactoption()": {
          "definition": "Verify__is_a_Point_of_Contact_option(string optionName)"
        },
        "makethispersonnotaprimarycontact()": {
          "definition": "Make_this_person_not_a_primary_contact()"
        },
        "verifythathaspocwithrole()": {
          "definition": "Verify_that__has_POC__with_role__(string orgName, string pocName, string pocRole)"
        },
        "verifyprimarycontact()": {
          "definition": "Verify_primary_contact()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PointsOfContactPortalWorkflow"
    },
    "editorviewapplicationrequirements": {
      "namespace": "",
      "methods": {
        "showfulfillmentchangealert()": {
          "definition": "ShowFulfillmentChangeAlert(List<AutoFulfillmentChangeDTO> changes)"
        },
        "clicktoviewrequirement()": {
          "definition": "Click_to_view__requirement__(string category, string reqText)"
        },
        "bindrequirements()": {
          "definition": "BindRequirements(List<InquiryItemResponseDTO> requirements)"
        },
        "clickignorechanges()": {
          "definition": "Click_Ignore_Changes()"
        },
        "clicktoupdaterequirement()": {
          "definition": "Click_to_Update__requirement__(string category, string reqText)"
        },
        "verifyalertappearstellinguserthatsomeitemscanbeautofulfilledandarenot()": {
          "definition": "Verify_alert_appears_telling_user_that_some_items_can_be_autofulfilled_and_are_not()"
        },
        "applyvalidation()": {
          "definition": "ApplyValidation()"
        },
        "initializecontrol()": {
          "definition": "InitializeControl(bool autoFulfillRequirements)"
        },
        "clickupdatedocumentation()": {
          "definition": "Click_Update_Documentation()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EditOrViewApplicationRequirements"
    },
    "importprevalidation": {
      "namespace": "",
      "methods": {
        "verifywarningthatacadisserviceisunavailableisshown()": {
          "definition": "Verify_warning_that_acadis_service_is_unavailable_is_shown()"
        },
        "bindlisterrors()": {
          "definition": "BindListErrors(IEnumerable<ImportMappingValidationDTO> fields)"
        },
        "setacadisserviceisrunningto()": {
          "definition": "Set_acadis_service_is_running_to__(bool isRunning)"
        },
        "verifythattherearenounresolvederrors()": {
          "definition": "Verify_that_there_are_no_unresolved_errors()"
        },
        "clickreplacelistvaluesforfield()": {
          "definition": "Click_replace_list_values_for_field__(string fieldName)"
        },
        "selecttoreplacevalue()": {
          "definition": "Select__to_replace_value__(string transformedValue, string originalValue)"
        },
        "verifyremapdialogshowsfield()": {
          "definition": "Verify_remap_dialog_shows_field__(string fieldName)"
        },
        "remapfieldtofilecolumn()": {
          "definition": "Remap_field__to_file_column__(string fieldName, string columnName)"
        },
        "verifyheaderis()": {
          "definition": "Verify_Header_is( string headerText )"
        },
        "proceedtovalidation()": {
          "definition": "Proceed_to_validation()"
        },
        "clickcontinue()": {
          "definition": "Click_continue()"
        },
        "clickremapfield()": {
          "definition": "Click_remap_field__(string fieldName)"
        },
        "bindformaterrors()": {
          "definition": "BindFormatErrors(IEnumerable<ImportMappingValidationDTO> fields)"
        },
        "verifythattherearevalidationerrors()": {
          "definition": "Verify_that_there_are__validation_errors(int numErrorsExpected)"
        },
        "verifyreplacevaluesdialogshowsvalue()": {
          "definition": "Verify_replace_values_dialog_shows_value__(string originalValue)"
        },
        "verifythatpagewillredirecttomappingpage()": {
          "definition": "Verify_that_page_will_redirect_to_mapping_page()"
        },
        "waitforvalidationtocomplete()": {
          "definition": "Wait_for_validation_to_complete()"
        },
        "navigatetopage()": {
          "definition": "NavigateToPage(ImportWizardPage page)"
        },
        "showimportjobreallocated()": {
          "definition": "ShowImportJobReallocated()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ImportPreValidationWorkflow"
    },
    "billablepartiesapi": {
      "namespace": "",
      "methods": {
        "verifydependentfundpropertyvaluationis()": {
          "definition": "Verify_dependent_fund_property_valuation_is__(decimal? propertyValuation)"
        },
        "verifynameis()": {
          "definition": "Verify_Name_is__(string name)"
        },
        "getbillablepartiessincelastupdate()": {
          "definition": "Get_billable_parties_since_last_update()"
        },
        "verifysuffixis()": {
          "definition": "Verify_Suffix_is__(string suffixName)"
        },
        "recordlastupdateinstant()": {
          "definition": "Record_last_update_instant()"
        },
        "verifyreferencenumberis()": {
          "definition": "Verify_Reference_Number_is__(string referenceNumber)"
        },
        "dispose()": {
          "definition": "Dispose()"
        },
        "verifyistheprimaryphonenumber()": {
          "definition": "Verify__is_the_primary_phone_number(string phoneNumber)"
        },
        "verifydependentfundsecretarysuffixis()": {
          "definition": "Verify_dependent_fund_secretary_suffix_is__(string suffix)"
        },
        "verifyistheprimaryemailaddress()": {
          "definition": "Verify__is_the_primary_email_address(string emailAddress)"
        },
        "verifyphonenumberscontainwithtype()": {
          "definition": "Verify_PhoneNumbers_contain__with_type__(string phoneNumber, string phoneType)"
        },
        "verifydependentfundfiscalofficerfirstnameis()": {
          "definition": "Verify_dependent_fund_fiscal_officer_first_name_is__(string firstName)"
        },
        "verifydependentfundbillingaddresszipis()": {
          "definition": "Verify_dependent_fund_billing_address_zip_is__(string zip)"
        },
        "verifydependentfundsecretarymiddlenameis()": {
          "definition": "Verify_dependent_fund_secretary_middle_name_is__(string middleName)"
        },
        "verifydependentfundbillingaddresscityis()": {
          "definition": "Verify_dependent_fund_billing_address_city_is__(string city)"
        },
        "verifydependentfundfiscalofficernameis()": {
          "definition": "Verify_dependent_fund_fiscal_officer_name_is__(string name)"
        },
        "verifymailingaddressisnull()": {
          "definition": "Verify_MailingAddress_is_null()"
        },
        "verifyemailaddressescontain()": {
          "definition": "Verify__EmailAddresses_contain__(string email)"
        },
        "verifylastnameisblank()": {
          "definition": "Verify_LastName_is_blank()"
        },
        "verifydependentfundassessmentdateis()": {
          "definition": "Verify_dependent_fund_assessment_date_is__(DateTime assessmentDate)"
        },
        "verifylastnameis()": {
          "definition": "Verify_LastName_is__(string lastName)"
        },
        "verifydependentfundbillingaddressstateis()": {
          "definition": "Verify_dependent_fund_billing_address_state_is__(string state)"
        },
        "verifydependentfundfiscalofficerlastnameis()": {
          "definition": "Verify_dependent_fund_fiscal_officer_last_name_is__(string lastName)"
        },
        "verifydependentfundparticipationflagis()": {
          "definition": "Verify_dependent_fund_participation_flag_is__(bool flag)"
        },
        "verifydependentfundsecretaryfirstnameis()": {
          "definition": "Verify_dependent_fund_secretary_first_name_is__(string firstName)"
        },
        "verifydependentfundsecretarylastnameis()": {
          "definition": "Verify_dependent_fund_secretary_last_name_is__(string lastName)"
        },
        "verifybillablepartytypeis()": {
          "definition": "Verify_BillablePartyType_is__(BillablePartyType type)"
        },
        "verifydependentfundbillingaddressline1is()": {
          "definition": "Verify_dependent_fund_billing_address_line_1_is__(string line1)"
        },
        "verifytherearebillableparties()": {
          "definition": "Verify_there_are__billable_parties(int count)"
        },
        "verifydependentfundsecretarynameis()": {
          "definition": "Verify_dependent_fund_secretary_name_is__(string name)"
        },
        "waitforonesecond()": {
          "definition": "Wait_for_one_second()"
        },
        "verifythereareemailaddresses()": {
          "definition": "Verify_there_are__EmailAddresses(int count)"
        },
        "verifyfirstnameis()": {
          "definition": "Verify_FirstName_is__(string firstName)"
        },
        "verifyfirstnameisblank()": {
          "definition": "Verify_FirstName_is_blank()"
        },
        "verifydependentfundbillingaddresstypeis()": {
          "definition": "Verify_dependent_fund_billing_address_type_is__(string type)"
        },
        "verifydependentfundbillingaddressline2is()": {
          "definition": "Verify_dependent_fund_billing_address_line_2_is__(string line2)"
        },
        "beginverifyingresult()": {
          "definition": "Begin_verifying_result__(int position)"
        },
        "verifymiddlenameis()": {
          "definition": "Verify_MiddleName_is__(string middleName)"
        },
        "verifymiddlenameisblank()": {
          "definition": "Verify_MiddleName_is_blank()"
        },
        "verifytherearephonenumbers()": {
          "definition": "Verify_there_are__PhoneNumbers(int count)"
        },
        "verifydependentfundfiscalofficermiddlenameis()": {
          "definition": "Verify_dependent_fund_fiscal_officer_middle_name_is__(string middleName)"
        },
        "verifydependentfundfiscalofficersuffixis()": {
          "definition": "Verify_dependent_fund_fiscal_officer_suffix_is__(string suffix)"
        },
        "verifyreferencenumberisblank()": {
          "definition": "Verify_Reference_Number_is_blank()"
        },
        "verifysuffixisblank()": {
          "definition": "Verify_Suffix_is_blank()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "BillablePartiesApiWorkflow"
    },
    "classrosterreportview": {
      "namespace": "",
      "methods": {
        "verifytheacademyidcolumnheaderis()": {
          "definition": "Verify_the_AcademyId_column_header_is(string academyIdHeader)"
        },
        "verifythetitleranksarenotdisplayed()": {
          "definition": "Verify_the_title_ranks_are_not_displayed()"
        },
        "verifynoincompletestudentsareshownonreport()": {
          "definition": "Verify_no_incomplete_students_are_shown_on_report()"
        },
        "setgroupbystudentgroup()": {
          "definition": "Set_group_by_student_group( bool groupByStudentGroup )"
        },
        "setthevisibilityoforganizationparentto()": {
          "definition": "Set_the_visibility_of_organization_parent_to(bool visible)"
        },
        "setthevisibilityoforganizationto()": {
          "definition": "Set_the_visibility_of_organization_to(bool visible)"
        },
        "setsortorderto()": {
          "definition": "Set_sort_order_to(ClassRosterReportPreferencesSortField sortField)"
        },
        "setgraduatedfilterto()": {
          "definition": "Set_graduated_filter_to(bool filter)"
        },
        "verifythereportclassnameis()": {
          "definition": "Verify_the_report_class_name_is(string reportClassName)"
        },
        "setenrolledfilterto()": {
          "definition": "Set_enrolled_filter_to(bool filter)"
        },
        "setthevisibilityofstatusto()": {
          "definition": "Set_the_visibility_of_status_to(bool visible)"
        },
        "setthevisibilityofssnto()": {
          "definition": "Set_the_visibility_of_ssn_to(bool visible)"
        },
        "setincompletefilterto()": {
          "definition": "Set_Incomplete_Filter_to__(bool filter)"
        },
        "setclasslabel()": {
          "definition": "SetClassLabel(string label)"
        },
        "setthevisibilityofnameto()": {
          "definition": "Set_the_visibility_of_name_to( bool visible )"
        },
        "verifystudentgenderisdisplayedonthereport()": {
          "definition": "Verify_student_gender_is_displayed_on_the_report(string gender)"
        },
        "verifystudentacademyidisdisplayedonthereport()": {
          "definition": "Verify_student_academy_id_is_displayed_on_the_report(string academyId)"
        },
        "verifythegendersarenotdisplayed()": {
          "definition": "Verify_the_genders_are_not_displayed()"
        },
        "verifythereportnameis()": {
          "definition": "Verify_the_report_name_is(string reportName)"
        },
        "verifystudenttitlerankisdisplayedonthereport()": {
          "definition": "Verify_student_title_rank_is_displayed_on_the_report(string titleRank)"
        },
        "verifystudentsendingorganizationisdisplayedonthereport()": {
          "definition": "Verify_student_sending_organization_is_displayed_on_the_report(string sendingOrg)"
        },
        "verifynograduatedstudentsareshownonreport()": {
          "definition": "Verify_no_graduated_students_are_shown_on_report()"
        },
        "verifytheorganizationparentsarenotdisplayed()": {
          "definition": "Verify_the_organization_parents_are_not_displayed()"
        },
        "setthevisibilityoftitlerankto()": {
          "definition": "Set_the_visibility_of_title_rank_to(bool visible)"
        },
        "verifynoenrolledstudentsareshownonreport()": {
          "definition": "Verify_no_enrolled_students_are_shown_on_report()"
        },
        "verifythestatusesarenotdisplayed()": {
          "definition": "Verify_the_statuses_are_not_displayed()"
        },
        "verifystudentnameisdisplayedonthereport()": {
          "definition": "Verify_student_name__is_displayed_on_the_report(string studentName)"
        },
        "verifythessnsarenotdisplayed()": {
          "definition": "Verify_the_ssns_are_not_displayed()"
        },
        "verifynodepartedstudentsareshownonreport()": {
          "definition": "Verify_no_departed_students_are_shown_on_report()"
        },
        "verifythestudentsaredisplayedinorder()": {
          "definition": "Verify_the_students_are_displayed_in__order(ClassRosterReportPreferencesSortField sortField)"
        },
        "showreport()": {
          "definition": "ShowReport()"
        },
        "setcriteriatoloadclass()": {
          "definition": "Set_criteria_to_load_class(string className)"
        },
        "verifythereportdateis()": {
          "definition": "Verify_the_report_date_is(string reportDate)"
        },
        "verifytheorganizationsarenotdisplayed()": {
          "definition": "Verify_the_organizations_are_not_displayed()"
        },
        "verifythenamesarenotdisplayed()": {
          "definition": "Verify_the_names_are_not_displayed()"
        },
        "verifystudentstatusisdisplayedonthereport()": {
          "definition": "Verify_student_status_is_displayed_on_the_report(string status)"
        },
        "verifythereportdatelabelis()": {
          "definition": "Verify_the_report_date_label_is(string reportDateLabel)"
        },
        "setthevisibilityofgenderto()": {
          "definition": "Set_the_visibility_of_gender_to(bool visible)"
        },
        "setthevisibilityofacademyidto()": {
          "definition": "Set_the_visibility_of_academy_id_to(bool visible)"
        },
        "binddatasource()": {
          "definition": "BindDataSource(ClassRosterReportDTO dto)"
        },
        "setdepartedfilterto()": {
          "definition": "Set_departed_filter_to(bool filter)"
        },
        "verifythereportrundateistoday()": {
          "definition": "Verify_the_report_run_date_is_today()"
        },
        "verifythereportheaderis()": {
          "definition": "Verify_the_report_header_is(string reportHeader)"
        },
        "verifytheacademyidsarenotdisplayed()": {
          "definition": "Verify_the_academy_ids_are_not_displayed()"
        },
        "verifyreportnameis()": {
          "definition": "Verify_report_name_is__(string reportName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ClassRosterReportView"
    },
    "testopiaimportmessagehandler": {
      "namespace": "",
      "methods": {
        "handleallmessages()": {
          "definition": "HandleAllMessages()"
        }
      },
      "parent-name": null,
      "class-name": "TestopiaImportMessageHandler"
    },
    "billandapproval": {
      "namespace": "",
      "methods": {
        "verifyamountforeventis()": {
          "definition": "Verify_amount_for_event_is__(decimal amount)"
        },
        "setamountforrentableto()": {
          "definition": "Set_amount_for_rentable__to__(string requestDetail, decimal amount)"
        },
        "verifyamountforrentableis()": {
          "definition": "Verify_amount_for_rentable_is__(string requestDetail, decimal amount)"
        },
        "verifyamountforeventisblank()": {
          "definition": "Verify_amount_for_event_is_blank()"
        },
        "browsetopageforevent()": {
          "definition": "Browse_to_page_for_event(string eventRequestName)"
        },
        "setamountforrentabletoblank()": {
          "definition": "Set_amount_for_rentable__to_blank(string requestDetail)"
        },
        "setamountforeventto()": {
          "definition": "Set_amount_for_event_to__(decimal amount)"
        },
        "setamountforeventtoblank()": {
          "definition": "Set_amount_for_event_to_blank()"
        },
        "verifyamountforrentableisblank()": {
          "definition": "Verify_amount_for_rentable_is_blank(string requestDetail)"
        },
        "bindbillingitems()": {
          "definition": "BindBillingItems(List<EventRequestBillingItemDTO> dtos)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "BillAndApprovalWorkflow"
    },
    "addeditinquiryitemgroups": {
      "namespace": "",
      "methods": {
        "shutupwarningaboutunusedeventrefreshgroups()": {
          "definition": "Shut_up_warning_about_unused_event_RefreshGroups()"
        },
        "changenameonrowto()": {
          "definition": "Change_name_on_row__to_(int rowNumber, string newNameValue)"
        },
        "verifygrouphasordervalueof()": {
          "definition": "Verify_group__has_order_value_of__(string groupName, int orderValue)"
        },
        "onnewgrouprowsetnameto()": {
          "definition": "On_new_group_row_set_name_to_(string newName)"
        },
        "clickclear()": {
          "definition": "Click_clear()"
        },
        "setnamecellsvalidity()": {
          "definition": "SetNameCellsValidity()"
        },
        "setordercellsvalidity()": {
          "definition": "SetOrderCellsValidity()"
        },
        "setnewgroupcellsvalidity()": {
          "definition": "SetNewGroupCellsValidity()"
        },
        "onnewgrouprowsetorderto()": {
          "definition": "On_new_group_row_set_order_to_(string newOrder)"
        },
        "changeorderonrowto()": {
          "definition": "Change_order_on_row__to_(int rowNumber, string newOrder)"
        },
        "bindgroups()": {
          "definition": "BindGroups()"
        },
        "verifylastsavefailedbecausethenamewasinvalid()": {
          "definition": "Verify_last_save_failed_because_the_name_was_invalid()"
        },
        "verifyrownamecellis()": {
          "definition": "Verify_row__name_cell_is_(int rowNumber, string validity)"
        },
        "verifylastsavefailedbecausetheorderwasinvalid()": {
          "definition": "Verify_last_save_failed_because_the_order_was_invalid()"
        },
        "verifyrowordercellis()": {
          "definition": "Verify_row__order_cell_is_(int rowNumber, string validity)"
        },
        "onnewgrouprowsetordertoandnameto()": {
          "definition": "On_new_group_row_set_order_to__and_name_to__(string newOrder, string newName)"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "browsetoinquiryitemgroupeditorforperformancereport()": {
          "definition": "Browse_to_Inquiry_Item_Group_Editor_for_Performance_Report__(string reportName)"
        },
        "clickdeleteonrow()": {
          "definition": "Click_delete_on_row_(int rowNumber)"
        },
        "verifythatitemgroupexists()": {
          "definition": "Verify_that_item_group__exists(string groupName)"
        },
        "clicksave()": {
          "definition": "Click_save()"
        },
        "verifythatitemgroupdoesnotexist()": {
          "definition": "Verify_that_item_group__does_not_exist(string groupName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AddEditInquiryItemGroupsWorkflow"
    },
    "incompleteperformancereportslist": {
      "namespace": "",
      "methods": {
        "verifyauthorofevaluationisforlastsavedon()": {
          "definition": "Verify_author_of_evaluation__is__for__last_saved_on__(string evaluationName, string authorName, string subjectName, DateTime lastSaveDate)"
        },
        "bindevaluationlist()": {
          "definition": "BindEvaluationList(IList<IncompletePerformanceReportDTO> data)"
        },
        "verifythattheevaluationlisthasentries()": {
          "definition": "Verify_that_the_evaluation_list_has__entries(int entryCount)"
        },
        "verifythatthenoevaluationsmessagevisible()": {
          "definition": "Verify_that_the_no_evaluations_message__visible(string isIsNotString)"
        },
        "browsetopagefororganizations()": {
          "definition": "Browse_to_page_for_organizations()"
        },
        "verifyeditevaluationforlastsavedon()": {
          "definition": "Verify__edit_evaluation__for__last_saved_on__(string canCannotString, string evaluationName, string subjectName, DateTime lastSaveDate)"
        },
        "verifythatevaluationforlastsavedonhasstatus()": {
          "definition": "Verify_that_evaluation__for__last_saved_on__has_status_(string evalName, string subjectName, DateTime lastSaveDate, string status)"
        },
        "browsetopageforpeople()": {
          "definition": "Browse_to_page_for_people()"
        },
        "verifyviewevaluationforlastsavedon()": {
          "definition": "Verify__view_evaluation__for__last_saved_on__(string canCannotString, string evaluationName, string subjectName, DateTime lastSaveDate)"
        },
        "verifythattheevaluationlistcontainsforlastsavedon()": {
          "definition": "Verify_that_the_evaluation_list_contains__for__last_saved_on__(string evaluationName, string subjectName, DateTime lastSaveDate)"
        },
        "verifythattheevaluationlistcontainsreportsoftypefor()": {
          "definition": "Verify_that_the_evaluation_list_contains__reports_of_type__for__(int count, string evaluationName, string subjectName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "IncompletePerformanceReportsListWorkflow"
    },
    "portallessonplanreadonly": {
      "namespace": "",
      "methods": {
        "browsetopageforlessonplan()": {
          "definition": "Browse_to_page_for_lesson_plan__(string lessonPlanCourseTitle)"
        },
        "verifyuserwasnavigatedtothelessonplanrequestlisthighlighting()": {
          "definition": "Verify_user_was_navigated_to_the_lesson_plan_request_list_highlighting__(string lessonPlanCourseTitle)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "navigatetolistoflessonplans()": {
          "definition": "NavigateToListOfLessonPlans(int lessonPlanID)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalLessonPlanReadonlyWorkflow"
    },
    "teststructureexport": {
      "namespace": "",
      "methods": {
        "selectchildnode()": {
          "definition": "Select__child_node( string childNodeName )"
        },
        "verifynodeexistswithacademyidofandfullnameof()": {
          "definition": "Verify__node_exists_with_AcademyID_of__and_FullName_of_( string nodeName, string academyID, string fullName )"
        },
        "verifyattributeisequalto()": {
          "definition": "Verify__attribute_is_equal_to_( string attributeName, string value )"
        },
        "verifynodenameis()": {
          "definition": "Verify_node_name_is_( string nodeName )"
        },
        "verifynodedoesnothavechildnodenamed()": {
          "definition": "Verify_node_does_not_have_child_node_named(string childNodeName)"
        },
        "selectnodelevelsup()": {
          "definition": "Select_node_levels_up( int numLevels )"
        },
        "verifynodehaschildnodesnamed()": {
          "definition": "Verify_node_has__child_nodes_named_( int numberOfNodes, string childNodeName )"
        },
        "browsetopagefortestnamedinclass()": {
          "definition": "Browse_to_page_for_test_named__in_class__( string testName, string className )"
        },
        "selectparentnode()": {
          "definition": "Select_parent_node()"
        },
        "verifynodehaschildnodenamed()": {
          "definition": "Verify_node_has_child_node_named_( string childNodeName )"
        },
        "verifynodehaschildnodenamedwithvalueof()": {
          "definition": "Verify_node_has_child_node_named__with_value_of_( string childNodeName, string nodeValue )"
        },
        "verifytextis()": {
          "definition": "Verify_Text_is_( string nodeText )"
        },
        "selectchildnodenumber()": {
          "definition": "Select__child_node_number_( string childNodeName, int nodeNumber )"
        },
        "selectrootnode()": {
          "definition": "Select_root_node()"
        },
        "readxml()": {
          "definition": "Read_XML()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "TestStructureExport"
    },
    "attemplateeditionstatuses": {
      "namespace": "",
      "methods": {
        "setedition508to()": {
          "definition": "Set_Edition__508_to__(string editionName, string status)"
        },
        "browsetotemplatefinishpagefortemplate()": {
          "definition": "Browse_to_Template_finish_page_for_template__(string templateName)"
        },
        "showpreview()": {
          "definition": "ShowPreview()"
        },
        "showpreviewvalidationerror()": {
          "definition": "ShowPreviewValidationError()"
        },
        "selectprintpreview()": {
          "definition": "Select_print_preview()"
        },
        "selectsave()": {
          "definition": "Select_Save()"
        },
        "verifyedition508is()": {
          "definition": "Verify_Edition__508_is__(string editionName, string status)"
        },
        "seteditionstatusto()": {
          "definition": "Set_Edition__status_to__(string editionName, string status)"
        },
        "verifyeditionpreviewshown()": {
          "definition": "Verify_edition_preview_shown()"
        },
        "selectprint()": {
          "definition": "Select_print()"
        },
        "verifyeditionstatusis()": {
          "definition": "Verify_Edition__Status_is__(string editionName, string status)"
        },
        "bindeditions()": {
          "definition": "BindEditions(IList<TestEditionStatusDto> editions)"
        },
        "selectdone()": {
          "definition": "Select_Done()"
        },
        "verifypreviewvalidationerrorshown()": {
          "definition": "Verify_preview_validation_error_shown()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ATTemplateEditionStatusesWorkflow"
    },
    "proctormonitor": {
      "namespace": "",
      "methods": {
        "viewproctormonitorfortest()": {
          "definition": "View_proctor_monitor_for_test__(string testName)"
        },
        "verifyusercanprinttestmaterials()": {
          "definition": "verify_user_can_print_test_materials()"
        },
        "verifythatstudentwithacademyidisinprogressoneditionwithtimeremainingandalastcontactof()": {
          "definition": "Verify_that_student__with_Academy_ID__is_in_progress_on_edition__with__time_remaining_and_a_last_contact_of__(string studentName, string academyID, string editionName, string timeRemaining, string lastContact)"
        },
        "verifythatthereareeditions()": {
          "definition": "Verify_that_there_are__editions(int numEditions)"
        },
        "verifyusercannotprinttestmaterials()": {
          "definition": "verify_user_can_not_print_test_materials()"
        },
        "verifythattherearecompletedstudents()": {
          "definition": "Verify_that_there_are__completed_students(int num)"
        },
        "bindtestinfo()": {
          "definition": "BindTestInfo(ProctorMonitorTestDTO test)"
        },
        "verifythattherearestudentsinprogress()": {
          "definition": "Verify_that_there_are__students_in_progress(int numStudents)"
        },
        "verifythateditionhasquestions()": {
          "definition": "Verify_that_edition__has__questions(string editionName, int numQuestions)"
        },
        "verifythattitleis()": {
          "definition": "Verify_that_title_is__(string title)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ProctorMonitor"
    },
    "auditresults": {
      "namespace": "",
      "methods": {
        "verifyapplicantnameis()": {
          "definition": "Verify_applicant_name_is(string applicantName)"
        },
        "showinactiveapprovalconfirmation()": {
          "definition": "ShowInactiveApprovalConfirmation()"
        },
        "enterauditcommentof()": {
          "definition": "Enter_audit_comment_of(string comments)"
        },
        "enterreasonforrejectionof()": {
          "definition": "Enter_reason_for_rejection_of(string rejectionReason)"
        },
        "verifyselectednewcertstatusis()": {
          "definition": "Verify_selected_new_cert_status_is(string status)"
        },
        "verifyrenewalexpirationdateisfromtoday()": {
          "definition": "Verify_renewal_expiration_date_is____from_today(int interval, string timeUnit)"
        },
        "verifyotheridis()": {
          "definition": "Verify_other_id_is(string otherID)"
        },
        "selectrejected()": {
          "definition": "SelectRejected()"
        },
        "restorestate()": {
          "definition": "RestoreState()"
        },
        "submitresults()": {
          "definition": "SubmitResults()"
        },
        "browsetoauditresultsforforperson()": {
          "definition": "Browse_to_audit_results_for__for_person__(string certVersionName, string personName)"
        },
        "verifyrecipientnameis()": {
          "definition": "Verify_recipient_name_is(string recipientName)"
        },
        "selectapproved()": {
          "definition": "SelectApproved()"
        },
        "confirmyouwanttoapproveinactive()": {
          "definition": "ConfirmYouWantToApproveInactive()"
        },
        "enterrenewalexpirationof()": {
          "definition": "Enter_renewal_expiration_of(string renewalExpiration)"
        },
        "verifycurrentexpirationisfromtoday()": {
          "definition": "Verify_current_expiration_is____from_today(int interval, string timeUnit)"
        },
        "enterrenewaldateof()": {
          "definition": "Enter_renewal_date_of(string renewalDate)"
        },
        "showstatuschangeconfirmation()": {
          "definition": "ShowStatusChangeConfirmation()"
        },
        "verifynavigatedtocertapplicationspendingauditlist()": {
          "definition": "Verify_navigated_to_cert_applications_pending_audit_list()"
        },
        "navigatetolistofapplicationspendingaudit()": {
          "definition": "NavigateToListOfApplicationsPendingAudit()"
        },
        "shouldshowexpirationcontrol()": {
          "definition": "ShouldShowExpirationControl(bool visible, int? issuedCertId)"
        },
        "verifyapplicationstatusis()": {
          "definition": "Verify_application_status_is(string status)"
        },
        "verifyapplicationtypeis()": {
          "definition": "Verify_application_type_is(string type)"
        },
        "navigatetoapplication()": {
          "definition": "NavigateToApplication()"
        },
        "verifyapprovedisselected()": {
          "definition": "Verify_approved_is_selected()"
        },
        "approvalsuccessful()": {
          "definition": "ApprovalSuccessful()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AuditResults"
    },
    "organizationfnhmanagement": {
      "namespace": "",
      "methods": {
        "createdivisionnamedunderparent()": {
          "definition": "Create_division_named__under_parent__(string divisionName, string parentName)"
        },
        "createorganizationnamed()": {
          "definition": "Create_organization_named_(string childName)"
        },
        "verifyorgaddressstateis()": {
          "definition": "Verify_org_address_state_is_(string state)"
        },
        "setreferencenumberfororganizationto()": {
          "definition": "Set_reference_number_for_organization__to__(string orgName, string referenceNumber)"
        },
        "createacademynamed()": {
          "definition": "Create_academy_named_(string academyName)"
        },
        "verifyorgactive()": {
          "definition": "Verify_org__active(string isIsNot)"
        },
        "addprimaryphonenumberwithtypetoorganization()": {
          "definition": "add_primary_phone_number__with_type__to_organization__(string phoneNumber, string type, string orgName)"
        },
        "verifyorgaddressline1is()": {
          "definition": "Verify_org_address_line_1_is_(string address1)"
        },
        "verifyorgreferenceis()": {
          "definition": "Verify_org_reference_is_(string reference)"
        },
        "verifyorgaddressdescriptionis()": {
          "definition": "Verify_org_address_description_is_(string description)"
        },
        "addphonenumberwithtypetoorganization()": {
          "definition": "add_phone_number__with_type__to_organization__(string phoneNumber, string type, string orgName)"
        },
        "verifyorgemploying()": {
          "definition": "Verify_org__employing(string isIsNot)"
        },
        "renamebaseparentorganizationto()": {
          "definition": "Rename_Base_Parent_Organization_to__(string parentName)"
        },
        "verifyorgaddressprimarysettingis()": {
          "definition": "Verify_org_address_primary_setting_is_(bool setting)"
        },
        "verifyorgexternalsystemrecordwithtypeandvalue()": {
          "definition": "Verify_org__External_System_Record_with_type__and_value_(string hasHasNot, string externalType, string externalID)"
        },
        "verifyorgaddresszipis()": {
          "definition": "Verify_org_address_zip_is_(string zip)"
        },
        "verifyorgemailis()": {
          "definition": "Verify_org_email_is_(string email)"
        },
        "setabbreviationfororganizationto()": {
          "definition": "Set_abbreviation_for_organization__to__(string orgName, string abbrev)"
        },
        "verifyorgaddresscountyis()": {
          "definition": "Verify_org_address_county_is_(string county)"
        },
        "addasauthoritytoorganizationusingcontacttype()": {
          "definition": "add__as_authority_to_organization__using_contact_type__(string person, string orgName, string contactTypeName)"
        },
        "verifythatdiscipline()": {
          "definition": "Verify_that__discipline__(string orgName, string hasHasNot, string discipline)"
        },
        "addcontacttype()": {
          "definition": "Add_contact_type__(string contactTypeName)"
        },
        "verifyorgaddresstypeidis()": {
          "definition": "Verify_org_address_type_id_is_(int typeID)"
        },
        "verifyorgaddressline2is()": {
          "definition": "Verify_org_address_line_2_is_(string address2)"
        },
        "usingorganization()": {
          "definition": "Using_organization__( string orgName )"
        },
        "verifyorgdiscipline()": {
          "definition": "Verify_org__discipline__(string hasHasNot, string discipline)"
        },
        "verifyorghasudfsetto()": {
          "definition": "Verify_org_has_udf__set_to_(string fieldName, string value)"
        },
        "verifyorgabbreviationis()": {
          "definition": "Verify_org_abbreviation_is_(string abbr)"
        },
        "setdisciplineforto()": {
          "definition": "Set_discipline_for__to__(string orgName, List<string> disciplines)"
        },
        "makeorganizationactive()": {
          "definition": "Make_organization__active(string name)"
        },
        "verifyorgaddressline2isnull()": {
          "definition": "Verify_org_address_line_2_is_null()"
        },
        "createacademynamedunderparent()": {
          "definition": "Create_academy_named__under_parent__(string childName, string parentName)"
        },
        "setorganizationtoemploying()": {
          "definition": "Set_organization__to_employing(string orgName)"
        },
        "verifyorgpointofcontactof()": {
          "definition": "Verify_org__point_of_contact__of__(string hasHasNot, string contactType, string personName)"
        },
        "setorganizationtonotemploying()": {
          "definition": "Set_organization__to_not_employing(string orgName)"
        },
        "verifyorgvisibleinportal()": {
          "definition": "Verify_org__visible_in_portal(string isIsNot)"
        },
        "addmailingaddresstoorganization()": {
          "definition": "add_mailing_address__to_organization__(string addressLine1, string addressLine2, string city, string state, string zip, string orgName)"
        },
        "createorganizationnamedunderparentgroupoftype()": {
          "definition": "CreateOrganizationNamedUnderParentGroupOfType(string active, string childName, OrganizationBase parentOrg, string orgTypeName)"
        },
        "renameorganizationto()": {
          "definition": "Rename_organization__to__(string oldName, string newName)"
        },
        "setorganizationudfto()": {
          "definition": "set_organization_udf__to__(string udfName, string value)"
        },
        "setexternalsystemfororganizationto()": {
          "definition": "Set_external_system_for_organization__to__(string orgName, string systemType, string systemKey)"
        },
        "createorganizationnamedoftypeunderbaseparentgroup()": {
          "definition": "Create_organization_named__of_type__under_base_parent_group(string childName, string orgTypeName)"
        },
        "addasprimaryauthoritytoorganizationusingcontacttype()": {
          "definition": "add__as_primary_authority_to_organization__using_contact_type__(string person, string orgName, string contactTypeName)"
        },
        "makeorganizationinactive()": {
          "definition": "Make_organization__inactive(string name)"
        },
        "addprimaryemailtoorganization()": {
          "definition": "Add_primary_email_to_organization(string emailAddress, string orgName)"
        },
        "verifyorghasparentnamed()": {
          "definition": "Verify_org_has_parent_named_(string parentName)"
        },
        "verifyorghascomment()": {
          "definition": "Verify_org_has_comment_(string comment)"
        },
        "verifyorgaddresscityis()": {
          "definition": "Verify_org_address_city_is_(string city)"
        },
        "verifyorgaddressmailingsettingis()": {
          "definition": "Verify_org_address_mailing_setting_is_(bool setting)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "OrganizationFNHManagement"
    },
    "addemployee": {
      "namespace": "",
      "methods": {
        "bindemploymenttypes()": {
          "definition": "BindEmploymentTypes(IList<NamedItem> employmentTypes)"
        },
        "verifythatudfwithlabelhasvalue()": {
          "definition": "Verify_that_UDF_with__label__has_value__(string label, string value)"
        },
        "verifysearchselectedperson()": {
          "definition": "Verify_search_selected_person__(string personName)"
        },
        "uploaddocument()": {
          "definition": "Upload_document__(string fileName)"
        },
        "clearsupervisor()": {
          "definition": "Clear_Supervisor()"
        },
        "verifythatnoemploymenttypeisselected()": {
          "definition": "Verify_that_no_employment_type_is_selected()"
        },
        "verifythatthepreviouslastnamesearchis()": {
          "definition": "Verify_that_the_previous_last_name_search_is__(string previousLastNameSearch)"
        },
        "verifythatthesubmitbuttontextis()": {
          "definition": "Verify_that_the_submit_button_text_is__(string value)"
        },
        "setsupervisortoentryof()": {
          "definition": "Set_Supervisor_to__entry_of_(string ordinal, string personName)"
        },
        "verifythatisintheorganizationdropdown()": {
          "definition": "Verify_that__is_in_the_organization_dropdown(string organization)"
        },
        "returntoworkforcepersonnelpage()": {
          "definition": "ReturnToWorkforcePersonnelPage(RequestPersonnelChangeResultsDTO hireResultsDTO)"
        },
        "clickdoneondocumentupload()": {
          "definition": "Click_done_on_document_upload()"
        },
        "setcommentsto()": {
          "definition": "Set_comments_to__(string comments)"
        },
        "sethiredateto()": {
          "definition": "Set_hire_date_to__(DateTime hireDate)"
        },
        "verifyhiredateis()": {
          "definition": "Verify_hire_date_is__(DateTime hireDate)"
        },
        "verifythatisthecurrentselectedappointmenttype()": {
          "definition": "Verify_that__is_the_current_selected_appointment_type(string appointmentType)"
        },
        "verifythatnotitlerankisselected()": {
          "definition": "Verify_that_no_title_rank_is_selected()"
        },
        "verifythattheitemintheemploymenttypedropdownis()": {
          "definition": "Verify_that_the__item_in_the_employment_type_dropdown_is__(string ordinal, string employmentType)"
        },
        "verifythattheiteminthetitlerankdropdownis()": {
          "definition": "Verify_that_the__item_in_the_title_rank_dropdown_is__(string ordinal, string titleRank)"
        },
        "enterlastnameinsearchcriteria()": {
          "definition": "Enter_last_name__in_search_criteria(string lastName)"
        },
        "bindappointmenttypes()": {
          "definition": "BindAppointmentTypes(IList<NamedItem> appointmentTypes)"
        },
        "verifythatnoappointmenttypeisselected()": {
          "definition": "Verify_that_no_appointment_type_is_selected()"
        },
        "verifynodocumenthasbeenuploadedfor()": {
          "definition": "Verify_no_document_has_been_uploaded_for__(string label)"
        },
        "verifythatpersonsearchvisible()": {
          "definition": "Verify_that_person_search__visible(string isIsNot)"
        },
        "verifythatisthecurrentselectedorganization()": {
          "definition": "Verify_that__is_the_current_selected_organization(string organizatino)"
        },
        "markfileascontainingsensitivedata()": {
          "definition": "Mark_file_as_containing_sensitive_data()"
        },
        "bindorganizations()": {
          "definition": "BindOrganizations(IList<NamedItem> organizations)"
        },
        "selectfororganization()": {
          "definition": "Select__for_organization(string organization)"
        },
        "verifythatudfwithlabelexist()": {
          "definition": "Verify_that_UDF_with__label__exist(string label, string doesDoesNot)"
        },
        "bindemploymentdocuments()": {
          "definition": "BindEmploymentDocuments(IEnumerable<AddEmployeeDTO.EmploymentDocument> employmentDocuments)"
        },
        "verifysearchdidnotselectaperson()": {
          "definition": "Verify_search_did_not_select_a_person()"
        },
        "verifythatsearchfail()": {
          "definition": "Verify_that_search__fail(string didDidNot)"
        },
        "searchforsupervisors()": {
          "definition": "Search_for_supervisors()"
        },
        "clickuploadlinkfor()": {
          "definition": "Click_upload_link_for__(string label)"
        },
        "selectfromthetitledropdown()": {
          "definition": "Select__from_the_title_dropdown(string title)"
        },
        "verifywewentbacktotheworkforcepage()": {
          "definition": "Verify_we_went_back_to_the_workforce_page()"
        },
        "verifythatnoorganizationisselected()": {
          "definition": "Verify_that_no_organization_is_selected()"
        },
        "verifythattheitemintheappointmenttypedropdownis()": {
          "definition": "Verify_that_the__item_in_the_appointment_type_dropdown_is__(string ordinal, string appointmentType)"
        },
        "verifyacademyiddisplayedis()": {
          "definition": "Verify_academy_id_displayed_is__(string academyID)"
        },
        "verifythatthereareemploymentudfs()": {
          "definition": "Verify_that_there_are__employment_UDFs(int count)"
        },
        "clicksearchforadifferentperson()": {
          "definition": "Click_search_for_a_different_person()"
        },
        "verifythatisthecurrentselectedtitlerank()": {
          "definition": "Verify_that__is_the_current_selected_title_rank(string titleRank)"
        },
        "clicksearch()": {
          "definition": "Click_search()"
        },
        "clicksubmit()": {
          "definition": "Click_Submit()"
        },
        "verifythatisintheappointmenttypedropdown()": {
          "definition": "Verify_that__is_in_the_appointment_type_dropdown(string appointmentType)"
        },
        "verifythatthereceivingorganizationtextis()": {
          "definition": "Verify_that_the_receiving_organization_text_is__(string receivingOrganizationText)"
        },
        "verifythatisinthetitlerankdropdown()": {
          "definition": "Verify_that__is_in_the_title_rank_dropdown(string titleRank)"
        },
        "bindtitleranks()": {
          "definition": "BindTitleRanks(IList<NamedItem> titleRanks)"
        },
        "verifythatisintheemploymenttypedropdown()": {
          "definition": "Verify_that__is_in_the_employment_type_dropdown(string employmentType)"
        },
        "verifythatemploymentdocumentsbandvisible()": {
          "definition": "Verify_that_employment_documents_band__visible(string isIsNot)"
        },
        "selectfromtheemploymenttypedropdown()": {
          "definition": "Select__from_the_employment_type_dropdown(string employmentType)"
        },
        "setvalueofudfwithlabelto()": {
          "definition": "Set_value_of_UDF_with_label__to__(string label, string value)"
        },
        "selectfromtheappointmenttypedropdown()": {
          "definition": "Select__from_the_appointment_type_dropdown(string appointmentType)"
        },
        "setsupervisorto()": {
          "definition": "Set_Supervisor_to_(string personName)"
        },
        "verifythatisthecurrentselectedemploymenttype()": {
          "definition": "Verify_that__is_the_current_selected_employment_type(string employmentType)"
        },
        "enteracademyidinsearchcriteria()": {
          "definition": "Enter_academy_id__in_search_criteria(string academyID)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AddEmployeeWorkflow"
    },
    "certificatemanagement": {
      "namespace": "",
      "methods": {
        "setprinttemplateto()": {
          "definition": "Set__print_template_to__(string cert, string template)"
        },
        "verifycertificationhasprinttemplateof()": {
          "definition": "Verify_certification__has_print_template_of__(string certName, string templateName)"
        },
        "createcertificatetemplatenamedforversionofcertification()": {
          "definition": "Create__certificate_template_named__for_version__of_certification__(string certLayout, string templateName, int version, string certificationName)"
        },
        "createpressuresealcertificatetemplatenamedforcertification()": {
          "definition": "create_pressure_seal_certificate_template_named_for_certification(string certificateTemplateName, string certificationName)"
        },
        "createwallandwalletcertificatetemplatenamedforcertification()": {
          "definition": "create_wall_and_wallet_certificate_template_named_for_certification(string certificateTemplateName, string certificationName)"
        },
        "createcertificatetemplatenamedforcertification()": {
          "definition": "Create__certificate_template_named__for_certification__(string certLayout, string templateName, string certificationName)"
        },
        "verifyversionofcertificationhasprinttemplateof()": {
          "definition": "Verify_version__of_certification__has_print_template_of__(int version, string certName, string templateName)"
        },
        "createclasscompletiondiplomatemplate()": {
          "definition": "create_class_completion_diploma_template()"
        },
        "createwallcertificatetemplatenamedforcertification()": {
          "definition": "create_wall_certificate_template_named_for_certification(string certificateTemplateName, string certificationName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "CertificateManagement"
    },
    "certmasterlist": {
      "namespace": "",
      "methods": {
        "verifycertificationtemplateisinlist()": {
          "definition": "Verify_certification_template__is_in_list(string certMasterName)"
        },
        "verifycertificationtemplatehasdisciplineof()": {
          "definition": "Verify_certification_template__has_discipline_of__(string certMasterName, string disciplineName)"
        },
        "bindcertmasterlist()": {
          "definition": "BindCertMasterList(IList<CertificationMasterDTO> dtos)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "CertMasterListWorkflow"
    },
    "firearmlist": {
      "namespace": "",
      "methods": {
        "verifylistcontainsanofmakemodelwithserialnumber()": {
          "definition": "Verify_list_contains_an___of_make__model__with_serial_number__(string status, string type, string make, string model, string serial)"
        },
        "verifyinisunchecked()": {
          "definition": "Verify__in__is_unchecked( string itemName, string groupName )"
        },
        "checkin()": {
          "definition": "Check__in_( string itemName, string groupName )"
        },
        "showfilters()": {
          "definition": "Show_Filters()"
        },
        "verifyinischecked()": {
          "definition": "Verify__in__is_checked( string itemName, string groupName )"
        },
        "uncheckin()": {
          "definition": "Uncheck__in_( string itemName, string groupName )"
        },
        "bindfirearmlist()": {
          "definition": "BindFirearmList(IEnumerable<FirearmListItemDto> items)"
        },
        "verifylistcontainsitems()": {
          "definition": "Verify_list_contains__items(int count)"
        },
        "savefilters()": {
          "definition": "Save_filters()"
        },
        "setpermissions()": {
          "definition": "SetPermissions(bool canView, bool canEdit, bool canAdd, bool canViewAssignee)"
        },
        "browsetofirearmlistfororganization()": {
          "definition": "Browse_to_Firearm_List_for_Organization__(string organizationName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "FirearmList"
    },
    "persontraininglistportaldisplay": {
      "namespace": "",
      "methods": {
        "verifyonlinetrainingeventshowshours()": {
          "definition": "Verify_online_training_event__shows__hours(string onlineEventName, string hours)"
        },
        "showlaunchedcontentwarning()": {
          "definition": "ShowLaunchedContentWarning()"
        },
        "verifytrainingeventdoesnotshowtranscriptlink()": {
          "definition": "Verify_training_event__does_not_show_Transcript_link(string eventName)"
        },
        "showdiploma()": {
          "definition": "ShowDiploma(ReportSpawnDTO spawnDTO)"
        },
        "launchonlineassessment()": {
          "definition": "LaunchOnlineAssessment(StudentLearnDTO learnDTO)"
        },
        "verifyonlinetrainingeventcanberemoved()": {
          "definition": "Verify_online_training_event__can_be_removed(string onlineEventName)"
        },
        "verifytranscriptshown()": {
          "definition": "Verify_transcript__shown(string wasWasNot)"
        },
        "verifytrainingeventdoesnotshowdiplomalink()": {
          "definition": "Verify_training_event__does_not_show_Diploma_link(string eventName)"
        },
        "completeremoveonlineenrollment()": {
          "definition": "CompleteRemoveOnlineEnrollment(int enrollmentID)"
        },
        "removeonlinetrainingevent()": {
          "definition": "Remove_online_training_event__(string onlineEventName)"
        },
        "verifytrainingeventdoesnotexistinlist()": {
          "definition": "Verify_training_event__does_not_exist_in_list(string eventName)"
        },
        "launchonlinetrainingeventandcompletewithpercentinminutes()": {
          "definition": "Launch_online_training_event__and_complete_with__percent_in__minutes(string onlineEventName, double grade, double minutes)"
        },
        "verifyonlinetrainingeventcannotbelaunched()": {
          "definition": "Verify_online_training_event__cannot_be_launched(string onlineEventName)"
        },
        "launchonlinetrainingeventandworkonforminutesbutdonotcomplete()": {
          "definition": "Launch_online_training_event__and_work_on_for__minutes_but_do_not_complete(string onlineEventName, double minutes)"
        },
        "verifyonlinetrainingeventcanbelaunched()": {
          "definition": "Verify_online_training_event__can_be_launched(string onlineEventName)"
        },
        "verifyonlinetrainingeventshowsnograde()": {
          "definition": "Verify_online_training_event__shows_no_grade(string onlineEventName)"
        },
        "verifytrainingeventshowsdiplomalink()": {
          "definition": "Verify_training_event__shows_Diploma_link(string eventName)"
        },
        "verifytrainingeventexistsinlist()": {
          "definition": "Verify_training_event__exists_in_list(string eventName)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "clicktoviewtranscriptfortrainingeventandverifysuccess()": {
          "definition": "Click_to_view_transcript_for_training_event__and_verify_success(string eventName)"
        },
        "verifytrainingeventdoesnotshowdocumenticon()": {
          "definition": "Verify_Training_Event__Does_Not_Show_Document_Icon(string eventName)"
        },
        "showcancellationalert()": {
          "definition": "ShowCancellationAlert(bool isEnrolled, bool housingRequested)"
        },
        "verifytrainingeventshowstranscriptlink()": {
          "definition": "Verify_training_event__shows_Transcript_link(string eventName)"
        },
        "verifyonlinetrainingeventdoesnotexistinlist()": {
          "definition": "Verify_online_training_event__does_not_exist_in_list(string onlineEventName)"
        },
        "verifyonlinetrainingeventshowsagradeof()": {
          "definition": "Verify_online_training_event__shows_a_grade_of__(string onlineEventName, string grade)"
        },
        "verifytrainingeventshowsdocumenticon()": {
          "definition": "Verify_Training_Event__Shows_Document_Icon(string eventName)"
        },
        "verifyonlinetrainingeventshowsstudentstatusof()": {
          "definition": "Verify_online_training_event_shows_student_status_of(string onlineEventName, string studentStatus)"
        },
        "showtranscript()": {
          "definition": "ShowTranscript(ReportSpawnDTO reportData)"
        },
        "verifyonlinetrainingeventcannotberemoved()": {
          "definition": "Verify_online_training_event__cannot_be_removed(string onlineEventName)"
        },
        "bindtrainingsections()": {
          "definition": "BindTrainingSections(List<PersonTrainingGroupDTO> groupedPersonTraining)"
        },
        "clicktoviewdiplomafortrainingeventandverifysuccess()": {
          "definition": "Click_to_view_diploma_for_training_event__and_verify_success(string eventName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PersonTrainingListPortalDisplayWorkflow"
    },
    "compliancesetup": {
      "namespace": "",
      "methods": {
        "issuecertificationtofirearmexpiringonwithstatus()": {
          "definition": "Issue_certification__to_firearm__expiring_on__with_status__(string cert, string firearmSN, DateTime expireDate, string status)"
        },
        "issuecertificationtoorganizationexpiringonwithstatus()": {
          "definition": "Issue_certification__to_organization__expiring_on__with_status__(string cert, string org, DateTime expireDate, string status)"
        },
        "addactiontofororganizationwitheffectivedateexpiringandstatus()": {
          "definition": "Add_action_to__for_organization__with_effective_date__expiring__and_status__(string certName, string orgName, DateTime effDate, DateTime expDate, string statusName)"
        },
        "createvehiclefor()": {
          "definition": "Create_vehicle__for__(string name, string orgName)"
        },
        "createaccountablepropertynamedwithserialnumberfor()": {
          "definition": "Create_accountable_property_named__with_serial_number__for__(string name, string serialNumber, string orgName)"
        },
        "addactiontoforfirearmwitheffectivedateexpiringandstatus()": {
          "definition": "Add_action_to__for_firearm__with_effective_date__expiring__and_status__(string certName, string firearmName, DateTime effDate, DateTime expDate, string statusName)"
        },
        "issuecertificationtovehiclewithissuedateexpiringonwithstatus()": {
          "definition": "Issue_certification__to_vehicle__with_issue_date__expiring_on__with_status__(string cert, string vehicle, DateTime issueDate, DateTime expireDate, string status)"
        },
        "allowtoseefirearmcerts()": {
          "definition": "Allow__to_see_firearm_certs(string username)"
        },
        "issuecertificationtovehicleexpiringonwithstatus()": {
          "definition": "Issue_certification__to_vehicle__expiring_on__with_status__(string cert, string vehicle, DateTime expireDate, string status)"
        },
        "createfirearmwithmodelandserialnumberfor()": {
          "definition": "Create_firearm_with_model_and_serial_number_for__(string model, string serialNum, string orgName)"
        },
        "allowtoseepersoncerts()": {
          "definition": "Allow__to_see_person_certs(string username)"
        },
        "removeexistingbaselinecerts()": {
          "definition": "Remove_existing_baseline_certs()"
        },
        "allowtoseefacilitycerts()": {
          "definition": "Allow__to_see_facility_certs(string username)"
        },
        "employaton()": {
          "definition": "Employ__at__on__(string person, string org, DateTime hireDate)"
        },
        "issuecertificationtoaccountablepropertywithserialnumberexpiringonwithstatus()": {
          "definition": "Issue_certification__to_accountable_property_with_serial_number__expiring_on__with_status__(string cert, string serialNumber, DateTime expireDate, string status)"
        },
        "createanimaloftypefor()": {
          "definition": "Create_animal__of_type__for__(string name, string type, string orgName)"
        },
        "issuecertificationtofacilityexpiringonwithstatus()": {
          "definition": "Issue_certification__to_facility__expiring_on__with_status__(string cert, string facilityName, DateTime expireDate, string status)"
        },
        "issuecertificationtopersonwithissuedateexpiringonwithstatus()": {
          "definition": "Issue_certification__to_person__with_issue_date__expiring_on__with_status__(string cert, string person, DateTime issueDate, DateTime expireDate, string status)"
        },
        "addactiontoforpersonwitheffectivedateexpiringandstatus()": {
          "definition": "Add_action_to__for_person__with_effective_date__expiring__and_status__(string certName, string personName, DateTime effDate, DateTime expDate, string statusName)"
        },
        "allowtoseeanimalcerts()": {
          "definition": "Allow__to_see_animal_certs(string username)"
        },
        "createfacilityfor()": {
          "definition": "Create_facility__for__(string name, string orgName)"
        },
        "addactiontoforfacilitywitheffectivedateexpiringandstatus()": {
          "definition": "Add_action_to__for_facility__with_effective_date__expiring__and_status__(string certName, string facilityName, DateTime effDate, DateTime expDate, string statusName)"
        },
        "createcertificationstatus()": {
          "definition": "Create_certification_status__(string name)"
        },
        "addactiontoforanimalwitheffectivedateexpiringandstatus()": {
          "definition": "Add_action_to__for_animal__with_effective_date__expiring__and_status__(string certName, string animalName, DateTime effDate, DateTime expDate, string statusName)"
        },
        "createcertificationtype()": {
          "definition": "Create_certification_type__(string name)"
        },
        "allowtoseevehiclecerts()": {
          "definition": "Allow__to_see_vehicle_certs(string username)"
        },
        "createfirearmmakeandmodeloftype()": {
          "definition": "Create_firearm_make__and_model__of_type__(string make, string model, string type)"
        },
        "createcertificationoftype()": {
          "definition": "Create_certification__of_type__(string name, string type)"
        },
        "issuecertificationtopersonexpiringonwithstatus()": {
          "definition": "Issue_certification__to_person__expiring_on__with_status__(string cert, string person, DateTime expireDate, string status)"
        },
        "allowtoseeorganizationcerts()": {
          "definition": "Allow__to_see_organization_certs(string username)"
        },
        "preventfromseeingpersoncerts()": {
          "definition": "Prevent___from_seeing_person_certs(string username)"
        },
        "issuecertificationtoanimalwithissuedateexpiringonwithstatus()": {
          "definition": "Issue_certification__to_animal__with_issue_date___expiring_on__with_status__(string cert, string animal, DateTime issueDate, DateTime expireDate, string status)"
        },
        "issuecertificationtofirearmwithissuedateexpiringonwithstatus()": {
          "definition": "Issue_certification__to_firearm__with_issue_date___expiring_on__with_status__(string cert, string firearm, DateTime issueDate, DateTime expireDate, string status)"
        },
        "createfirearmtype()": {
          "definition": "Create_firearm_type__(string typeName)"
        },
        "addactiontoforvehiclewitheffectivedateexpiringandstatus()": {
          "definition": "Add_action_to__for_vehicle__with_effective_date__expiring__and_status__(string certName, string vehicleName, DateTime effDate, DateTime expDate, string statusName)"
        },
        "allowtoseeaccountablepropertycerts()": {
          "definition": "Allow__to_see_accountable_property_certs(string username)"
        },
        "issuecertificationtoanimalexpiringonwithstatus()": {
          "definition": "Issue_certification__to_animal__expiring_on__with_status__(string cert, string animal, DateTime expireDate, string status)"
        },
        "issuecertificationtofacilitywithissuedateexpiringonwithstatus()": {
          "definition": "Issue_certification__to_facility__with_issue_date___expiring_on__with_status__(string cert, string facilityName, DateTime issueDate, DateTime expireDate, string status)"
        },
        "issuecertificationtoorganizationwithissuedateexpiringonwithstatus()": {
          "definition": "Issue_certification__to_organization__with_issue_date__expiring_on__with_status__(string cert, string org, DateTime issueDate, DateTime expireDate, string status)"
        }
      },
      "parent-name": "SetupWorkflow",
      "class-name": "ComplianceSetup"
    },
    "trainingeventstartctl": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "TrainingEventStartCtlWorkflow"
    },
    "testopiasmtpclient": {
      "namespace": "",
      "methods": {
        "sendasync()": {
          "definition": "SendAsync(MailMessage message, object userToken)"
        },
        "dispose()": {
          "definition": "Dispose()"
        },
        "wiresendasynccompletedevent()": {
          "definition": "WireSendAsyncCompletedEvent(SendCompletedEventHandler sendAsyncCompleted)"
        },
        "send()": {
          "definition": "Send(MailMessage message)"
        }
      },
      "parent-name": null,
      "class-name": "TestopiaSmtpClient"
    },
    "usagestatisticsmanagement": {
      "namespace": "",
      "methods": {
        "recordstatisticsfromto()": {
          "definition": "Record_statistics_from_to(DateTime startDate, DateTime endDate)"
        },
        "updatestatisticsforcurrentmonth()": {
          "definition": "Update_statistics_for_current_month()"
        },
        "countbaselinestatisticsfromto()": {
          "definition": "Count_baseline_statistics_from_to_(DateTime startDate, DateTime endDate)"
        },
        "recordstatisticsforcurrentmonth()": {
          "definition": "Record_statistics_for_current_month()"
        },
        "countbaselinestatisticsforcurrentmonth()": {
          "definition": "Count_baseline_statistics_for_current_month()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "UsageStatisticsManagement"
    },
    "publishingoptions": {
      "namespace": "",
      "methods": {
        "verifyauthorizedportaluserstoentertestresults()": {
          "definition": "Verify__authorized_portal_users_to_enter_test_results(string allowingDisallowing)"
        },
        "verifytestsareeligible()": {
          "definition": "Verify_tests__are_eligible(string testNames)"
        },
        "verifytestsarenoteligible()": {
          "definition": "Verify_tests__are_not_eligible(string testNames)"
        },
        "choosetoauthorizedportaluserstoentertestresults()": {
          "definition": "Choose_to__authorized_portal_users_to_enter_test_results(string allowDisallow)"
        },
        "verifytestresultsforeachstudentare()": {
          "definition": "Verify_test_results_for_each_student_are__(string requiredOrNot)"
        },
        "choosetotestresultsforeachstudent()": {
          "definition": "Choose_to__test_results_for_each_student(string requireOrNot)"
        },
        "verifynoreportingorganizationselected()": {
          "definition": "Verify_no_reporting_organization_selected()"
        },
        "verifyclassdiplomatextisdisplayedinsteadofcheckbox()": {
          "definition": "Verify_class_diploma_text_is_displayed_instead_of_checkbox()"
        },
        "verifypublishendoffsetisdaysclassstart()": {
          "definition": "Verify_publish_end_offset_is__days__class_start(int offsetDays, string beforeAfter)"
        },
        "browsetopageforclasstemplate()": {
          "definition": "Browse_to_page_for_class_template(string templateName)"
        },
        "verifypublishstatusis()": {
          "definition": "Verify_publish_status_is__(PublishingStatus status)"
        },
        "verifypublishstarttypeis()": {
          "definition": "Verify_publish_start_type_is__(ClassTemplatePublishStartType startType)"
        },
        "verifytestinactivityselected()": {
          "definition": "Verify_test__in_activity____selected(string testName, string activityName, string isIsNotSelected)"
        },
        "verifyviewdiplomacheckboxisvisible()": {
          "definition": "Verify_view_diploma_checkbox_is_visible()"
        },
        "selecttests()": {
          "definition": "Select_tests__(string testNames)"
        },
        "verifytestsareselected()": {
          "definition": "Verify_tests__are_selected(string testNames)"
        },
        "verifyreportingorganizationisselected()": {
          "definition": "Verify_reporting_organization__is_selected(string orgName)"
        },
        "browsetopageforclass()": {
          "definition": "Browse_to_page_for_class__(string className)"
        },
        "verifypublishendoffsetisdayclassstart()": {
          "definition": "Verify_publish_end_offset_is__day__class_start(int offsetDays, string beforeAfter)"
        },
        "setpublishendtypetoclassstart()": {
          "definition": "Set_Publish_End_Type_to__class_start(string beforeOrAfter)"
        },
        "verifytherearetestsselected()": {
          "definition": "Verify_there_are__tests_selected(int numTests)"
        },
        "selectforpublishstatus()": {
          "definition": "Select__for_publish_status(PublishingStatus status)"
        },
        "selectforpublishstarttype()": {
          "definition": "Select__for_publish_start_type(ClassTemplatePublishStartType startType)"
        },
        "selectreportingorganization()": {
          "definition": "Select_reporting_organization__(string orgName)"
        },
        "enterforreportingorganizationtypeahead()": {
          "definition": "Enter__for_reporting_organization_typeahead(string searchText)"
        },
        "verifynotestsareselected()": {
          "definition": "Verify_no_tests_are_selected()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PublishingOptionsWorkflow"
    },
    "hooverfinish": {
      "namespace": "",
      "methods": {
        "simulatestalledjobmissingrows()": {
          "definition": "Simulate_stalled_job_missing_rows__(List<string> rows)"
        },
        "verifythatentitiesweremodified()": {
          "definition": "Verify_that__entities_were_modified(int count)"
        },
        "exporterrors()": {
          "definition": "Export_errors()"
        },
        "verifythetemplatecannotbesavedbecause()": {
          "definition": "Verify_the_template_cannot_be_saved_because__(string errorMessage)"
        },
        "cannotsavetemplate()": {
          "definition": "CannotSaveTemplate(string errorMsg)"
        },
        "verifythatentitieswerecreated()": {
          "definition": "Verify_that__entities_were_created(int count)"
        },
        "navigatetoimportmonitor()": {
          "definition": "NavigateToImportMonitor()"
        },
        "navigatetoreturnurl()": {
          "definition": "NavigateToReturnUrl()"
        },
        "verifyerrorlistcontains()": {
          "definition": "Verify_Error_list_contains__(string expectedError)"
        },
        "verifyerrorlistisempty()": {
          "definition": "Verify_Error_list_is_empty()"
        },
        "verifythatrecordsweremodified()": {
          "definition": "Verify_that____records_were_modified(int count, string entity)"
        },
        "clickcontinue()": {
          "definition": "Click_continue()"
        },
        "showcanceldialog()": {
          "definition": "ShowCancelDialog()"
        },
        "verifytemplatesavecheckboxshowing()": {
          "definition": "Verify_Template_Save_Checkbox__showing(string isIsNot)"
        },
        "navigatetoexternalhrimportsettings()": {
          "definition": "NavigateToExternalHRImportSettings()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifythatrecordswerecreated()": {
          "definition": "Verify_that____records_were_created(int count, string entity)"
        },
        "navigatetopage()": {
          "definition": "NavigateToPage(ImportWizardPage page)"
        },
        "verifythatentitiesfailed()": {
          "definition": "Verify_that__entities_failed(int count)"
        },
        "showimportjobreallocated()": {
          "definition": "ShowImportJobReallocated()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "HooverFinishWorkflow"
    },
    "retestandwaiverrules": {
      "namespace": "",
      "methods": {
        "browsetoretestandwaiverrulespagefor()": {
          "definition": "Browse_to_retest_and_waiver_rules_page_for__(string testName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "RetestAndWaiverRules"
    },
    "importfilewriter": {
      "namespace": "",
      "methods": {
        "writemanifestto()": {
          "definition": "Write_manifest_to_( string fileName )"
        },
        "beginnewmanifestfileforimportinginserviceeventdocuments()": {
          "definition": "Begin_new_manifest__file_for_importing_inservice_event_documents()"
        },
        "addinservicedocumentdescribedasfor()": {
          "definition": "Add_inservice_document__described_as__for_( string fileName, string fileDescription, string eventName )"
        },
        "scenarioteardown()": {
          "definition": "ScenarioTearDown()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "ImportFileWriterWorkflow"
    },
    "iz": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "Iz"
    },
    "assignroomusages": {
      "namespace": "",
      "methods": {
        "bindfloors()": {
          "definition": "BindFloors(IList<RoomUsageAssignmentFloorDTO> floors)"
        },
        "selectroomin()": {
          "definition": "Select_room__in____(string roomName, string buildingName, string floorName)"
        },
        "selectfloorin()": {
          "definition": "Select_floor__in__(string floorName, string buildingName)"
        },
        "bindrooms()": {
          "definition": "BindRooms(IList<RoomUsageAssignmentRoomDTO> rooms)"
        },
        "verifyfloorsincludein()": {
          "definition": "Verify_floors_include__in__(string floorName, string buildingName)"
        },
        "verifyroomsincludein()": {
          "definition": "Verify_rooms_include__in____(string roomName, string buildingName, string floorName)"
        },
        "verifyusernavigatedtohousinginventorylist()": {
          "definition": "Verify_user_navigated_to_housing_inventory_list()"
        },
        "navigatetohousinginventorylist()": {
          "definition": "NavigateToHousingInventoryList()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AssignRoomUsagesWorkflow"
    },
    "studentdataview": {
      "namespace": "",
      "methods": {
        "selectfortuitionbilltoparty()": {
          "definition": "Select__for_Tuition_Bill_to_Party(string billToParty)"
        },
        "dispose()": {
          "definition": "Dispose()"
        },
        "changesendingorganizationtonone()": {
          "definition": "Change_sending_organization_to_none()"
        },
        "changesendingorganizationtowithtitle()": {
          "definition": "Change_sending_organization_to__with_title__(string orgName, string titleName)"
        },
        "verifydateofbirthis()": {
          "definition": "Verify_date_of_birth_is__(DateTime dob)"
        },
        "verifytuitionbillingvisible()": {
          "definition": "Verify_Tuition_Billing__Visible(string isIsNotString)"
        },
        "verifysendingorganizationis()": {
          "definition": "Verify_Sending_Organization_is__(string sendingOrgName)"
        },
        "setpersonnamelink()": {
          "definition": "SetPersonNameLink(int personId)"
        },
        "selectfortuitiongrant()": {
          "definition": "Select__for_Tuition_Grant(string grant)"
        },
        "enterfortuitionotherorganizationtypeahead()": {
          "definition": "Enter__for_Tuition_Other_Organization_typeahead(string searchText)"
        },
        "selectfortuitionotherorganization()": {
          "definition": "Select__for_Tuition_Other_Organization(string organizationName)"
        },
        "verifytitleis()": {
          "definition": "Verify_Title_is__(string titleName)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "changesendingorganizationtoemploymentwith()": {
          "definition": "Change_sending_organization_to_employment_with__(string employerName)"
        },
        "verifythereisnoselectedtrainingcategory()": {
          "definition": "Verify_there_is_no_selected_training_category()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "StudentDataViewWorkflow"
    },
    "awardsmanagement": {
      "namespace": "",
      "methods": {
        "thisisawardedtothestudentwithagradeequalorhigherto()": {
          "definition": "This_is_awarded_to_the_student_with_a_grade_equal_or_higher_to__( decimal minimumGrade )"
        },
        "verifyclassawardawardeescanfail()": {
          "definition": "Verify_Class_award_awardees_can_fail(string awardName, string testNames)"
        },
        "verifyclassawardawardeescanhaveretestson()": {
          "definition": "Verify_Class_award__awardees_can_have_retests_on__( string awardName, string retestCriteria )"
        },
        "awardto()": {
          "definition": "Award_to( string awardName, string studentName )"
        },
        "verifydoesnotdisqualifyon()": {
          "definition": "Verify_does_not_disqualify_on(string award1Name, string award2Name, string classDefName)"
        },
        "verifyawardconferredtoin()": {
          "definition": "Verify_award_conferred_to_in(string awardName, string conferred, string personName, string className)"
        },
        "addclassawardto()": {
          "definition": "Add_Class_Award_to(string awardName, string classDefinitionName)"
        },
        "saveclassaward()": {
          "definition": "Save_Class_Award()"
        },
        "verifyclassawardawardeescanhavewaivers()": {
          "definition": "Verify_Class_award__awardees_can_have__waivers( string awardName, string waiverCriteria )"
        },
        "conferallawardson()": {
          "definition": "Confer_All_Awards_on(string trainingClassName)"
        },
        "theawarddoesnotdisqualifyon()": {
          "definition": "The_award_does_not_disqualify_on(string award1Name, string award2Name, string classDefName)"
        },
        "theawardeehavetakenaclassintheprogrambefore()": {
          "definition": "The_awardee_have_taken_a_class_in_the_program_before( string priorClassCriteria )"
        },
        "theawardisbasedonactivities()": {
          "definition": "The_award_is_based_on_activities__( string activities )"
        },
        "resequenceawardstoon()": {
          "definition": "Resequence_awards_to__on_(string newClassAwardSequence, string classDefinitionName)"
        },
        "thisisawardedtothestudentwith()": {
          "definition": "This_is_awarded_to_the_student_with__( string gradeCriteria )"
        },
        "verifyclassawardawardeeshavetakenaclassintheprogrambefore()": {
          "definition": "Verify_Class_award_awardees_have_taken_a_class_in_the_program_before( string awardName, string priorClassCriteria )"
        },
        "theawardeecannothaveanyofthefollowingawards()": {
          "definition": "The_awardee_cannot_have_any_of_the_following_awards(string listOfAwards)"
        },
        "theawardeecannotfailanytest()": {
          "definition": "The_awardee_cannot_fail_any_test()"
        },
        "theawarddisqualifieson()": {
          "definition": "The_award_disqualifies_on(string award1Name, string award2Name, string classDefName)"
        },
        "theawardeecanfailthefollowingtests()": {
          "definition": "The_awardee_can_fail_the_following_tests(string testNames)"
        },
        "verifyclassawardisbasedonexamsandactivities()": {
          "definition": "Verify_Class_award__is_based_on__exams_and_activities( string awardName, string examCriteria )"
        },
        "conferawardtonewrecipients()": {
          "definition": "Confer_award_to_new_recipients()"
        },
        "theawardeecannothaveretestsonanytest()": {
          "definition": "The_awardee_cannot_have_retests_on_any_test()"
        },
        "verifyawardconferredto()": {
          "definition": "Verify__award__conferred_to__( string awardName, string conferred, string personName )"
        },
        "conferawardonto()": {
          "definition": "Confer_award__on__to_(string awardName, string trainingClassName, string studentName)"
        },
        "verifyclassnolongerhasawardrecipients()": {
          "definition": "Verify_class__no_longer_has_award_recipients( string className )"
        },
        "verifydisqualifieson()": {
          "definition": "Verify_disqualifies_on(string award1Name, string award2Name, string classDefName)"
        },
        "usingclassaward()": {
          "definition": "Using_class_award__( string awardName )"
        },
        "theawardonallowsanyotherawards()": {
          "definition": "The_award__on__allows_any_other_awards(string awardName, string classDefName)"
        },
        "verifystudentnolongerhasawards()": {
          "definition": "Verify_student_no_longer_has_awards()"
        },
        "theawardisbasedontests()": {
          "definition": "The_award_is_based_on_tests( string tests )"
        },
        "verifycontainsclassaward()": {
          "definition": "Verify__contains_class_award__( string classDefinitionName, string awardName )"
        },
        "theawardisbasedonexamsandactivities()": {
          "definition": "The_award_is_based_on__exams_and_activities(string examCriteria)"
        },
        "selectawardrecipients()": {
          "definition": "Select_award_recipients__( string recipientNames )"
        },
        "deletefrom()": {
          "definition": "Delete_from( string awardName, string className )"
        },
        "assignaward()": {
          "definition": "Assign_award( string awardName )"
        },
        "verifystudenthasaward()": {
          "definition": "Verify_student_has_award( string awardName )"
        },
        "verifyclassawardisbasedonactivities()": {
          "definition": "Verify_Class_Award__is_based_on_activities__( string awardName, string activities )"
        },
        "verifyclassawardallowsretestson()": {
          "definition": "Verify_Class_award__allows_retests_on__( string awardName, string testsAllowingRetests )"
        },
        "theawardeecanhaveretestsonthefollowingtests()": {
          "definition": "The_awardee_can_have_retests_on_the_following_tests__(string testsForRetest)"
        },
        "theawardeecanhavewaivers()": {
          "definition": "The_awardee_can_have_waivers()"
        },
        "verifyclassawardisawardedtothestudentwith()": {
          "definition": "Verify_Class_award__is_awarded_to_the_student_with__( string awardName, string gradeCriteria )"
        },
        "verifyclassawardawardeescannotfailanytest()": {
          "definition": "Verify_Class_award_awardees_cannot_fail_any_test(string awardName)"
        },
        "theawardeecannothavewaivers()": {
          "definition": "The_awardee_cannot_have_waivers()"
        },
        "verifyclassawardisbasedontests()": {
          "definition": "Verify_Class_Award__is_based_on_tests__( string awardName, string tests )"
        },
        "verifyclassawardsequenceon()": {
          "definition": "Verify_class_award_sequence_on( string classAwardSequence, string classDefinitionName )"
        },
        "usingclassawardinclass()": {
          "definition": "Using_class_award__in_class__( string awardName, string className )"
        }
      },
      "parent-name": "Workflow",
      "class-name": "AwardsManagement"
    },
    "classperformancereportroster": {
      "namespace": "",
      "methods": {
        "setdeleteauditinfo()": {
          "definition": "SetDeleteAuditInfo(string personName, string reportDate)"
        },
        "printreport()": {
          "definition": "PrintReport(int id)"
        },
        "browsetoperformancereportrosteroftypeforclass()": {
          "definition": "Browse_to_Performance_Report_Roster_of_type__for_class__(string reportName, string className)"
        },
        "displayhistory()": {
          "definition": "DisplayHistory(int classId, int reportTemplateId, int personId)"
        },
        "entermultiplereports()": {
          "definition": "Enter_multiple_reports()"
        },
        "bindreportdata()": {
          "definition": "BindReportData()"
        },
        "navigatetoeditreport()": {
          "definition": "NavigateToEditReport(int itemToEdit)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ClassPerformanceReportRosterWorkflow"
    },
    "atmanagement": {
      "namespace": "",
      "methods": {
        "createcriteriarulewithquestionsofpriority()": {
          "definition": "Create_criteria_rule_with_questions_of_priority(int count, string priorityName)"
        },
        "createtesttemplatenamedwithownerandprogram()": {
          "definition": "Create_test_template_named_with_owner_and_program(string templateName, string ownerName, string programName)"
        },
        "createtesteditionnamedwithsamerulesetasbutwithdifferentquestions()": {
          "definition": "Create_test_edition_named_with_same_ruleset_as_but_with_different_questions(string editionName, string copiedEditionName)"
        },
        "verifyeditionhasrules()": {
          "definition": "Verify_edition_has_rules(int count)"
        },
        "createtesteditionnamedwithnewruleset()": {
          "definition": "Create_test_edition_named_with_new_ruleset(string editionName)"
        },
        "gettesttemplateedition()": {
          "definition": "Get_test_template_edition(string templateName, string editionName)"
        },
        "createcriteriarulewithquestionsfromcategory()": {
          "definition": "Create_criteria_rule_with_questions_from_category(int count, string categoryName)"
        },
        "verifytesttemplatehaseditions()": {
          "definition": "Verify_test_template_has_editions(int count)"
        },
        "createtesteditionnamedwithsamequestionsetas()": {
          "definition": "Create_test_edition_named_with_same_question_set_as(string editionName, string copiedEditionName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "ATManagement"
    },
    "inservicetrainingmanagement": {
      "namespace": "",
      "methods": {
        "verifyoneeventwithhourswascreated()": {
          "definition": "Verify_one_event_with__hours_was_created(string expectedHours)"
        },
        "verifytheeventisintheapprovedstatus()": {
          "definition": "Verify_the_event_is_in_the_approved_status()"
        },
        "verifytheeventcontainsattendeenamed()": {
          "definition": "Verify_the_event_contains_attendee_named__(string attendeeName)"
        },
        "approveevent()": {
          "definition": "Approve_event()"
        },
        "verifyeventswerecreated()": {
          "definition": "Verify__events_were_created(int eventCout)"
        },
        "verifyeventisinsubmittedstatus()": {
          "definition": "Verify_event_is_in_submitted_status()"
        },
        "verifytheeventhasattendees()": {
          "definition": "Verify_the_event_has__attendees(int attendeeCount)"
        },
        "useeventnamed()": {
          "definition": "Use_event_named__(string eventName)"
        },
        "useeventsnamed()": {
          "definition": "Use_events_named__(string eventName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "InServiceTrainingManagement"
    },
    "questionsearch": {
      "namespace": "",
      "methods": {
        "verifyexportdoesnotcontainquestionwithtext()": {
          "definition": "Verify_Export_does_not_contain_Question_with_Text(string questionText)"
        },
        "writeexport()": {
          "definition": "WriteExport(string export)"
        },
        "verifysearchresultscontainsquestions()": {
          "definition": "Verify_Search_Results_contains_Questions(int count)"
        },
        "bindsearchresults()": {
          "definition": "BindSearchResults(IEnumerable<QuestionSearchResultItem> results, bool showOwner, int totalRowCount)"
        },
        "verifysearchresultscontainsquestionwithtext()": {
          "definition": "Verify_Search_Results_contains_Question_with_Text(string questionText)"
        },
        "selectquestion()": {
          "definition": "Select_Question(string questionText)"
        },
        "exportselected()": {
          "definition": "Export_Selected()"
        },
        "browsetoquestionsearch()": {
          "definition": "Browse_to_Question_Search()"
        },
        "dosearch()": {
          "definition": "Do_Search()"
        },
        "verifyexportcontainsquestionwithtext()": {
          "definition": "Verify_Export_contains_Question_with_Text(string questionText)"
        },
        "saveexportto()": {
          "definition": "Save_export_to_(string fileName)"
        },
        "addtoquestiontextcriteria()": {
          "definition": "Add_to_question_text_criteria(string text)"
        },
        "exportall()": {
          "definition": "Export_All()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "QuestionSearch"
    },
    "pointsofcontactlist": {
      "namespace": "",
      "methods": {
        "removepointofcontact()": {
          "definition": "Remove_Point_of_Contact(string personName)"
        },
        "verifyuseraddcontacts()": {
          "definition": "Verify_user__add_contacts(string value)"
        },
        "bindrepeater()": {
          "definition": "BindRepeater(IList<PointOfContactListItemDTO> contacts)"
        },
        "verifyusereditcontacts()": {
          "definition": "Verify_user__edit_contacts(string value)"
        },
        "browsetopointsofcontactfor()": {
          "definition": "Browse_to_Points_of_contact_for__(string orgName)"
        },
        "verifythatwithroleberemovedduetodependentfund()": {
          "definition": "Verify_that__with_role__be_removed_due_to_dependent_fund(string personName, string roleName, string canOrNot)"
        },
        "verifytherearepointsofcontact()": {
          "definition": "Verify_there_are__points_of_contact(int number)"
        },
        "verifyuserdeletecontacts()": {
          "definition": "Verify_user__delete_contacts(string value)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PointsOfContactListWorkflow"
    },
    "trainingmanagement": {
      "namespace": "",
      "methods": {
        "createprogramcategory()": {
          "definition": "Create_Program_Category(string categoryName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "TrainingManagement"
    },
    "surveymanagement": {
      "namespace": "",
      "methods": {
        "verifyastudentsurveyresponseforwasgeneratedforinclasswithacohortof()": {
          "definition": "Verify_a_student_survey_response_for__was_generated_for__in_class__with_a_cohort_of__(string surveyName, string personName, string className, string cohortName)"
        },
        "verifyasendingorganizationsurveyresponseforwasgeneratedforinclasswithacohortof()": {
          "definition": "Verify_a_sending_organization_survey_response_for__was_generated_for__in_class__with_a_cohort_of__(string surveyName, string personName, string className, string cohortName)"
        },
        "verifynosendingorganizationsurveyresponsesforweregeneratedforinclass()": {
          "definition": "Verify_no_sending_organization_survey_responses_for_were_generated_for_in_class(string surveyName, string personName, string className)"
        },
        "verifyasupervisorsurveyresponseforwasgeneratedforinclasswithacohortofandstudent()": {
          "definition": "Verify_a_supervisor_survey_response_for__was_generated_for__in_class__with_a_cohort_of__and_student__(string surveyName, string personName, string className, string cohortName, string studentName)"
        },
        "verifynostaffsurveyresponsesforweregeneratedforinclass()": {
          "definition": "Verify_no_staff_survey_responses_for__were_generated_for__in_class__(string surveyName, string personName, string className)"
        },
        "verifyastaffsurveyresponseforwasgeneratedforinclasswithacohortof()": {
          "definition": "Verify_a_staff_survey_response_for__was_generated_for__in_class__with_a_cohort_of__(string surveyName, string personName, string className, string cohortName)"
        },
        "verifyasurveyresponseforwasgeneratedwithacohortof()": {
          "definition": "Verify_a_survey_response_for__was_generated_with_a_cohort_of__(string surveyName, string cohortName)"
        },
        "verifyresponsesforweregeneratedforcohort()": {
          "definition": "Verify__responses_for__were_generated_for_cohort__(int numResponses, string surveyName, string cohortName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "SurveyManagement"
    },
    "emailaddressdata": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "EmailAddressData"
    },
    "csvmanagement": {
      "namespace": "",
      "methods": {
        "inremovecolumn()": {
          "definition": "In__remove_column__(string csvFileName, string columnName)"
        },
        "incopyandappenddatarowtotheendofthefile()": {
          "definition": "In__copy_and_append_data_row__to_the_end_of_the_file(string csvFileName, int dataRowNumber)"
        },
        "inremoverow()": {
          "definition": "In__remove_row__(string csvFileName, int dataRowNumber)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "CsvManagement"
    },
    "conflictmanagement": {
      "namespace": "",
      "methods": {
        "verifyclasshasconflictonrulewithashortfallofon()": {
          "definition": "Verify_class___has_conflict_on_rule__with_a_shortfall_of__on__( string className, string ruleName, int shortfallQuantity, string blockName )"
        },
        "verifyblockonclasshasconflicts()": {
          "definition": "Verify_block__on_class__has__conflicts(string blockName, string className, int conflictNum)"
        },
        "verifyblockonclasshasconflict()": {
          "definition": "Verify_block__on_class__has_conflict__(string blockName, string className, string conflictText)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "ConflictManagement"
    },
    "changehousingassignment": {
      "namespace": "",
      "methods": {
        "verifypricelevelsdoesnotcontain()": {
          "definition": "Verify_price_levels_does_not_contain__(string pricelevel)"
        },
        "dispose()": {
          "definition": "Dispose()"
        },
        "verifyisacomparablealternateroom()": {
          "definition": "Verify__is_a_comparable_alternate_room(string name)"
        },
        "selectforalternateroom()": {
          "definition": "Select__for_alternate_room(string roomName)"
        },
        "selectforpricelevel()": {
          "definition": "Select__for_price_level(string levelName)"
        },
        "bindalternaterooms()": {
          "definition": "BindAlternateRooms(AvailableRoomsDTO rooms)"
        },
        "verifyusagesdoesnotcontain()": {
          "definition": "Verify_usages_does_not_contain__(string usage)"
        },
        "clickchangerecommendation()": {
          "definition": "Click_change_recommendation()"
        },
        "selectforusage()": {
          "definition": "Select__for_usage(string usageName)"
        },
        "verifyisanonrecommendedalternateroom()": {
          "definition": "Verify__is_a_non_recommended_alternate_room(string name)"
        },
        "verifyisnotanalternateroom()": {
          "definition": "Verify__is_not_an_alternate_Room(string name)"
        },
        "verifypricelevelscontain()": {
          "definition": "Verify_price_levels_contain__(string pricelevel)"
        },
        "verifyisarecommendedalternateroom()": {
          "definition": "Verify__is_a_recommended_alternate_room(string name)"
        },
        "verifyusagescontain()": {
          "definition": "Verify_usages_contain__(string usage)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ChangeHousingAssignmentWorkflow"
    },
    "resourcecompliancemonitor": {
      "namespace": "",
      "methods": {
        "viewfacility()": {
          "definition": "ViewFacility(int recipientId)"
        },
        "writeexport()": {
          "definition": "WriteExport(IList<string> certs)"
        },
        "viewanimal()": {
          "definition": "ViewAnimal(int animalID)"
        },
        "verifythattherearenoexpiringcerts()": {
          "definition": "Verify_that_there_are_no_expiring_certs()"
        },
        "viewrecipient()": {
          "definition": "View__recipient__(string recipientTypeString, string recipientName)"
        },
        "considerexportrow()": {
          "definition": "Consider_export_row__(int row)"
        },
        "checkshowexpired()": {
          "definition": "Check_show_expired()"
        },
        "verifyis()": {
          "definition": "Verify__is__(string fieldName, string value)"
        },
        "verifyexportcolumnheadersare()": {
          "definition": "Verify_export_column_headers_are__(List<string> expectedHeaders)"
        },
        "verifyresultisforexpiringon()": {
          "definition": "Verify_result__is__for__expiring_on__(int position, string recipient, string cert, DateTime date)"
        },
        "checkcertificationstatus()": {
          "definition": "Check_certification_status_(string status)"
        },
        "verifycannotfilteroncertificationstatus()": {
          "definition": "Verify_cannot_filter_on_certification_status()"
        },
        "selectexpiresinthenextdays()": {
          "definition": "Select_expires_in_the_next__days(string days)"
        },
        "sortby()": {
          "definition": "sort_by_(ComplianceMonitorSortColumn column)"
        },
        "bindfiltercertificationmasters()": {
          "definition": "BindFilterCertificationMasters(List<CertMasterListItemDTO> masters)"
        },
        "selectcertificationtype()": {
          "definition": "Select_certification_type(string type)"
        },
        "savefilters()": {
          "definition": "Save_filters()"
        },
        "doexport()": {
          "definition": "Do_export()"
        },
        "uncheckcertificationstatus()": {
          "definition": "Uncheck_certification_status_(string status)"
        },
        "uncheckshowexpired()": {
          "definition": "Uncheck_show_expired()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifythereareexportrows()": {
          "definition": "Verify_there_are__export_rows(int count)"
        },
        "selectexpiredinthelastdays()": {
          "definition": "Select_expired_in_the_last__days(string days)"
        },
        "viewfirearm()": {
          "definition": "ViewFirearm(int firearmID)"
        },
        "verifyresultisforwithprimaryorganizationofexpiringon()": {
          "definition": "Verify_result__is__for__with_primary_organization_of__expiring_on__(int position, string recipient, string cert, string orgName, DateTime date)"
        },
        "verifyresultis()": {
          "definition": "Verify_result__is__(int position, List<string> expectedRow)"
        },
        "bindexpirationdaterange()": {
          "definition": "BindExpirationDateRange()"
        },
        "uncheckcertification()": {
          "definition": "Uncheck_certification_(string certName)"
        },
        "bindcertifications()": {
          "definition": "BindCertifications(IEnumerable<ExpiringCertificationDTO> certs)"
        },
        "viewaccountableproperty()": {
          "definition": "ViewAccountableProperty(int recipientId)"
        },
        "verifythatthereareexpiringcerts()": {
          "definition": "Verify_that_there_are__expiring_certs(int num)"
        },
        "verifycanfilteroncertificationstatus()": {
          "definition": "Verify_can_filter_on_certification_status()"
        },
        "checkcertification()": {
          "definition": "Check_certification_(string certName)"
        },
        "viewvehicle()": {
          "definition": "ViewVehicle(int vehicleID)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ResourceComplianceMonitorWorkflow"
    },
    "registerform": {
      "namespace": "",
      "methods": {
        "enterforrelationship()": {
          "definition": "Enter_for_Relationship(string relationship)"
        },
        "setregistrationtype()": {
          "definition": "SetRegistrationType(StudentRegistrationStatus status)"
        },
        "enterforcontactname()": {
          "definition": "Enter_for_Contact_Name(string name)"
        },
        "verifyemergencycontactrequired()": {
          "definition": "Verify_Emergency_Contact__required(string status)"
        },
        "verifyemergencycontactnameis()": {
          "definition": "Verify_Emergency_Contact_Name_is_(string val)"
        },
        "verifyemergencycontactrelationshipis()": {
          "definition": "Verify_Emergency_Contact_relationship_is_(string val)"
        },
        "bindenrolledclasses()": {
          "definition": "BindEnrolledClasses(List<RequestedClassDTO> enrolledClasses)"
        },
        "dispose()": {
          "definition": "Dispose()"
        },
        "redirecttoaddperson()": {
          "definition": "RedirectToAddPerson()"
        },
        "loadsendingorganization()": {
          "definition": "LoadSendingOrganization()"
        },
        "redirectaftersubmit()": {
          "definition": "RedirectAfterSubmit(bool registerAnother)"
        },
        "bindrequestsets()": {
          "definition": "BindRequestSets(IList<RegistrationRequestSetDTO> requestSets)"
        },
        "bindprimaryemail()": {
          "definition": "BindPrimaryEmail(string primaryEmail)"
        },
        "enterforemergencycontactaddress()": {
          "definition": "Enter___for_Emergency_Contact_Address(string addressLine1, string addressLine2, string city, string state, string zip)"
        },
        "verifyphysicaladdressiswithtype()": {
          "definition": "Verify_Physical_Address_is___with_type_(string addressLine1, string addressLine2, string city, string state, string zip, string addressType)"
        },
        "verifyemergencycontactisempty()": {
          "definition": "Verify_Emergency_Contact_is_empty()"
        },
        "verifymailingaddressisempty()": {
          "definition": "Verify_Mailing_Address_is_empty()"
        },
        "verifyemergencycontactprimaryphoneis()": {
          "definition": "Verify_Emergency_Contact_primary_phone_is_(string val)"
        },
        "verifyemergencycontactaddressis()": {
          "definition": "Verify_Emergency_Contact_Address_is_(string addressLine1, string addressLine2, string city, string state, string zip)"
        },
        "enterwithtypeforphysicaladdress()": {
          "definition": "Enter___with_type_for_Physical_address(string addressLine1, string addressLine2, string city, string state, string zip, string addressType)"
        },
        "bindstandaloneset()": {
          "definition": "BindStandaloneSet(RegistrationRequestSetDTO standaloneSet)"
        },
        "enterforemergencycontactprimaryphone()": {
          "definition": "Enter___for_Emergency_Contact_Primary_Phone(string number, string extension)"
        },
        "verifymailingaddressiswithtype()": {
          "definition": "Verify_Mailing_Address_is___with_type_(string addressLine1, string addressLine2, string city, string state, string zip, string addressType)"
        },
        "bindaddresses()": {
          "definition": "BindAddresses(AddressDto mailingaddress, AddressDto physicalAddress)"
        },
        "enterwithtypeformailingaddress()": {
          "definition": "Enter___with_type_for_Mailing_address(string addressLine1, string addressLine2, string city, string state, string zip, string addressType)"
        },
        "verifyemergencycontactalternatephoneis()": {
          "definition": "Verify_Emergency_Contact_alternate_phone_is_(string val)"
        },
        "verifyphysicaladdressisempty()": {
          "definition": "Verify_Physical_Address_is_empty()"
        },
        "verifyemergencycontactalternatephoneextensionis()": {
          "definition": "Verify_Emergency_Contact_alternate_phone_extension_is_(string val)"
        },
        "enterforemergencycontactalternatephone()": {
          "definition": "Enter___for_Emergency_Contact_Alternate_Phone(string number, string extension)"
        },
        "verifyemergencycontactprimaryphoneextensionis()": {
          "definition": "Verify_Emergency_Contact_primary_phone_extension_is_(string val)"
        },
        "showrestricted()": {
          "definition": "ShowRestricted(string reason)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "RegisterFormWorkflow"
    },
    "deferredrosterapprovallist": {
      "namespace": "",
      "methods": {
        "rememberhowmanyitemsareindeferredenrollmentlist()": {
          "definition": "Remember_how_many_items_are_in_deferred_enrollment_list()"
        },
        "verifyautoapprovemessageshown()": {
          "definition": "Verify_auto_approve_message__shown(string shown)"
        },
        "approveevent()": {
          "definition": "Approve_event()"
        },
        "verifythereareeventsinlist()": {
          "definition": "Verify_there_are__events_in_list(int itemCount)"
        },
        "considerrownumber()": {
          "definition": "Consider_row_number__(int rowNum)"
        },
        "bindevents()": {
          "definition": "BindEvents(IEnumerable<DeferredRosterDTO> dtos)"
        },
        "verifydeferredenrollmentlisthasgrownbyitems()": {
          "definition": "Verify_deferred_enrollment_list_has_grown_by__items(int count)"
        },
        "verifynoeventsmessageshown()": {
          "definition": "Verify_no_events_message__shown(string shown)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "DeferredRosterApprovalListWorkflow"
    },
    "profileeditaddresses": {
      "namespace": "",
      "methods": {
        "setcountyto()": {
          "definition": "Set_County_to(string value)"
        },
        "settothemailingaddress()": {
          "definition": "Set_to_the_mailing_address()"
        },
        "addnewaddressincontactinfo()": {
          "definition": "Add_new_address_in_Contact_Info()"
        },
        "verifyline1is()": {
          "definition": "Verify_line_1_is(string value)"
        },
        "verifyzipis()": {
          "definition": "Verify_zip_is(string value)"
        },
        "verifycountyis()": {
          "definition": "Verify_county_is(string value)"
        },
        "settotheprimaryaddress()": {
          "definition": "Set_to_the_primary_address()"
        },
        "setline2to()": {
          "definition": "Set_line_2_to(string value)"
        },
        "verifyline2is()": {
          "definition": "Verify_line_2_is(string value)"
        },
        "setline1to()": {
          "definition": "Set_line_1_to(string value)"
        },
        "setcityto()": {
          "definition": "Set_City_to(string value)"
        },
        "deleteaddress()": {
          "definition": "Delete_address()"
        },
        "setzipto()": {
          "definition": "Set_Zip_to(string value)"
        },
        "consideraddressat()": {
          "definition": "Consider_address_at__(string line1)"
        },
        "verifythereareaddresses()": {
          "definition": "Verify_there_are__addresses(int count)"
        },
        "verifycityis()": {
          "definition": "Verify_city_is(string value)"
        },
        "verifystateis()": {
          "definition": "Verify_state_is(string value)"
        },
        "verifyaddresstypeis()": {
          "definition": "Verify_address_type_is(string value)"
        },
        "verifydescriptionis()": {
          "definition": "Verify_description_is(string value)"
        },
        "bindaddresses()": {
          "definition": "BindAddresses(IEnumerable<PortalAddressEditDto.Address> addresses)"
        },
        "setstateto()": {
          "definition": "Set_State_to(string value)"
        },
        "bindaddresstypes()": {
          "definition": "BindAddressTypes(IEnumerable<Tuple<int, string, AcadisListEntryUsage>> addressTypeList)"
        },
        "verifyaddressvalidationsucceeded()": {
          "definition": "Verify_address_validation_succeeded()"
        },
        "verifyaddressprimary()": {
          "definition": "Verify_address__primary(string isIsNot)"
        },
        "verifyaddressmailing()": {
          "definition": "Verify_address__mailing(string isIsNot)"
        },
        "setaddresstypeto()": {
          "definition": "Set_address_type_to(string value)"
        },
        "setdescriptionto()": {
          "definition": "Set_description_to(string value)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ProfileEditAddressesWorkflow"
    },
    "studentresponseexportparameters": {
      "namespace": "",
      "methods": {
        "verifyselectquestionsisfilteringbyclass()": {
          "definition": "Verify_select_questions_is_filtering_by_class()"
        },
        "verifythereisselectedtesttemplateinthetypeahead()": {
          "definition": "Verify_there_is__selected_test_template_in_the_type_ahead(int expectedNumberOfResults)"
        },
        "verifyisintheprogramtypeaheadresults()": {
          "definition": "Verify__is_in_the_program_type_ahead_results(string programName)"
        },
        "verifyusernavigatedtotheexportstatusmonitor()": {
          "definition": "Verify_user__navigated_to_the_export_status_monitor(string wasWasNotString)"
        },
        "setfiscalyearrangestartto()": {
          "definition": "Set_fiscal_year_range_start_to__(int startYear)"
        },
        "clickexport()": {
          "definition": "Click_Export()"
        },
        "setcustomtimeframerangestartto()": {
          "definition": "Set_custom_timeframe_range_start_to__(DateTime startDate)"
        },
        "verifyistheselectedoptioninthetimeframerangedropdown()": {
          "definition": "Verify__is_the_selected_option_in_the_timeframe_range_dropdown(string filterOption)"
        },
        "removefromthetesttemplatetypeaheadselections()": {
          "definition": "Remove__from_the_test_template_type_ahead_selections(string testTemplateName)"
        },
        "selectfromtheprogramtypeaheadresults()": {
          "definition": "Select__from_the_program_type_ahead_results(string programName)"
        },
        "verifythereisclassinthetypeaheadresults()": {
          "definition": "Verify_there_is__class_in_the_type_ahead_results(int expectedNumberOfResults, string classTemplateName)"
        },
        "verifyselectquestionsisfilteringbytesttemplate()": {
          "definition": "Verify_select_questions_is_filtering_by_test_template()"
        },
        "verifyfiscalyearrangeendis()": {
          "definition": "Verify_fiscal_year_range_end_is__(string endYearString)"
        },
        "verifyisanoptioninthetimeframerangedropdown()": {
          "definition": "Verify__is_an_option_in_the_timeframe_range_dropdown(string filterModeDescription)"
        },
        "verifythereisclasstemplategroupinthetypeaheadresults()": {
          "definition": "Verify_there_is__class_template_group_in_the_type_ahead_results(int expectedNumberOfResults)"
        },
        "selectfromthetimeframetypedropdown()": {
          "definition": "Select__from_the_timeframe_type_dropdown(string typeOption)"
        },
        "navigatetoexportstatusmonitor()": {
          "definition": "NavigateToExportStatusMonitor(int exportFileID)"
        },
        "removefromtheclasstemplatetypeaheadselections()": {
          "definition": "Remove__from_the_class_template_type_ahead_selections(string classTemplateName)"
        },
        "setfiscalyearrangeendto()": {
          "definition": "Set_fiscal_year_range_end_to__(int endYear)"
        },
        "verifycustomtimeframerangestartis()": {
          "definition": "Verify_custom_timeframe_range_start_is__(DateTime startDate)"
        },
        "verifyclassisintheclasstemplategroupinthetypeaheadresults()": {
          "definition": "Verify_class__is_in_the__class_template_group_in_the_type_ahead_results(string className, string classTemplateName)"
        },
        "removefromtheclasstypeaheadselections()": {
          "definition": "Remove__from_the_class_type_ahead_selections(string className)"
        },
        "verifyclassisselectedinthetypeahead()": {
          "definition": "Verify_class__is_selected_in_the_type_ahead(string className)"
        },
        "verifythereisselectedclasstemplateinthetypeahead()": {
          "definition": "Verify_there_is__selected_class_template_in_the_type_ahead(int expectedNumberOfResults)"
        },
        "clickcancel()": {
          "definition": "Click_Cancel()"
        },
        "verifythereareselectedprogramsinthetypeahead()": {
          "definition": "Verify_there_are__selected_programs_in_the_type_ahead(int expectedNumberOfResults)"
        },
        "verifythereareclassesintheclasstemplategroupinthetypeaheadresults()": {
          "definition": "Verify_there_are__classes_in_the__class_template_group_in_the_type_ahead_results(int expectedNumberOfResults, string classTemplateName)"
        },
        "navigatetotestingdashboard()": {
          "definition": "NavigateToTestingDashboard()"
        },
        "verifyexportdatarowis()": {
          "definition": "Verify_export_data_row__is__(int rowNum, List<string> values)"
        },
        "typeintoprogramtypeahead()": {
          "definition": "Type__into_program_type_ahead(string programSearchText)"
        },
        "verifyisinthetesttemplatetypeaheadresults()": {
          "definition": "Verify__is_in_the_test_template_type_ahead_results(string testTemplateName)"
        },
        "verifyexportheadersare()": {
          "definition": "Verify_export_headers_are__(List<string> expected)"
        },
        "verifyistheselectedoptioninthetimeframetypedropdown()": {
          "definition": "Verify__is_the_selected_option_in_the_timeframe_type_dropdown(string typeOption)"
        },
        "verifyexportdatacontainsrows()": {
          "definition": "Verify_export_data_contains__rows(int numRows)"
        },
        "removefromtheprogramtypeaheadselections()": {
          "definition": "Remove__from_the_program_type_ahead_selections(string programName)"
        },
        "verifythatafilewasexported()": {
          "definition": "Verify_that_a_file_was_exported()"
        },
        "openexportfiletoverifycontents()": {
          "definition": "Open_export_file_to_verify_contents()"
        },
        "verifyclasstemplategroupisinthetypeaheadresults()": {
          "definition": "Verify_class_template_group__is_in_the_type_ahead_results(string classTemplateName)"
        },
        "verifyfiscalyearrangestartis()": {
          "definition": "Verify_fiscal_year_range_start_is__(string startYearString)"
        },
        "ticktheradiobuttontoselectquestionsbyclass()": {
          "definition": "Tick_the_radio_button_to_select_questions_by_class()"
        },
        "selectfromthetimeframerangedropdown()": {
          "definition": "Select__from_the_timeframe_range_dropdown(string filterOption)"
        },
        "verifythereisselectedprograminthetypeahead()": {
          "definition": "Verify_there_is__selected_program_in_the_type_ahead(int expectedNumberOfResults)"
        },
        "verifythereistesttemplateinthetypeaheadresults()": {
          "definition": "Verify_there_is__test_template_in_the_type_ahead_results(int expectedNumberOfResults)"
        },
        "verifyisselectedinthetesttemplatetypeahead()": {
          "definition": "Verify__is_selected_in_the_test_template_type_ahead(string testTemplateName)"
        },
        "verifythereareselectedclasstemplatesinthetypeahead()": {
          "definition": "Verify_there_are__selected_class_templates_in_the_type_ahead(int expectedNumberOfResults)"
        },
        "verifytherearetimeframetypeoptions()": {
          "definition": "Verify_there_are__timeframe_type_options(int numberOfOptions)"
        },
        "verifythereareselectedclassesinthetypeahead()": {
          "definition": "Verify_there_are__selected_classes_in_the_type_ahead(int expectedNumberOfResults)"
        },
        "typeintotesttemplatetypeahead()": {
          "definition": "Type__into_test_template_type_ahead(string searchText)"
        },
        "verifyisselectedintheprogramtypeahead()": {
          "definition": "Verify__is_selected_in_the_program_type_ahead(string programName)"
        },
        "ticktheradiobuttontoselectquestionsbytesttemplate()": {
          "definition": "Tick_the_radio_button_to_select_questions_by_test_template()"
        },
        "verifyclasstemplateisselectedinthetypeahead()": {
          "definition": "Verify_class_template__is_selected_in_the_type_ahead(string classTemplateName)"
        },
        "waitforexporttocomplete()": {
          "definition": "Wait_for_Export_to_complete()"
        },
        "verifytherearetesttemplatesinthetypeaheadresults()": {
          "definition": "Verify_there_are__test_templates_in_the_type_ahead_results(int expectedNumberOfResults)"
        },
        "verifyisanoptioninthetimeframetypedropdown()": {
          "definition": "Verify__is_an_option_in_the_timeframe_type_dropdown(string timeframeTypeDescription)"
        },
        "verifyusernavigatedtothetestingdashboard()": {
          "definition": "Verify_user__navigated_to_the_testing_dashboard(string wasWasNotString)"
        },
        "verifythereisprograminthetypeaheadresults()": {
          "definition": "Verify_there_is__program_in_the_type_ahead_results(int expectedNumberOfResults)"
        },
        "verifythereareclasstemplategroupsinthetypeaheadresults()": {
          "definition": "Verify_there_are__class_template_groups_in_the_type_ahead_results(int expectedNumberOfResults)"
        },
        "verifythereareselectedtesttemplatesinthetypeahead()": {
          "definition": "Verify_there_are__selected_test_templates_in_the_type_ahead(int expectedNumberOfResults)"
        },
        "selectfromthetesttemplatetypeaheadresults()": {
          "definition": "Select__from_the_test_template_type_ahead_results(string testTemplateName)"
        },
        "verifycustomtimeframerangeendis()": {
          "definition": "Verify_custom_timeframe_range_end_is__(DateTime endDate)"
        },
        "verifythereareprogramsinthetypeaheadresults()": {
          "definition": "Verify_there_are__programs_in_the_type_ahead_results(int expectedNumberOfResults)"
        },
        "verifytherearetimeframerangeoptions()": {
          "definition": "Verify_there_are__timeframe_range_options(int numberOfOptions)"
        },
        "typeintoclassandclasstemplatetypeahead()": {
          "definition": "Type__into_class_and_class_template_type_ahead(string searchText)"
        },
        "setcustomtimeframerangeendto()": {
          "definition": "Set_custom_timeframe_range_end_to__(DateTime endDate)"
        },
        "verifythereisselectedclassinthetypeahead()": {
          "definition": "Verify_there_is__selected_class_in_the_type_ahead(int expectedNumberOfResults)"
        },
        "selectfromtheclassandclasstemplatetypeaheadresults()": {
          "definition": "Select__from_the_class_and_class_template_type_ahead_results(string classOrClassTemplateName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "StudentResponseExportParametersWorkflow"
    },
    "classsearchresults": {
      "namespace": "",
      "methods": {
        "writeexport()": {
          "definition": "WriteExport(string export)"
        },
        "redirecttoclass()": {
          "definition": "RedirectToClass(bool isOnline, bool isSchedule, int classId)"
        },
        "verifyfirstresultis()": {
          "definition": "verify_first_result_is_(string className)"
        },
        "bindsearchresults()": {
          "definition": "BindSearchResults(PagedResult<ClassSearchResultDTO> searchResults)"
        },
        "verifyresultcountis()": {
          "definition": "verify_result_count_is_(int count)"
        },
        "searchwhereis()": {
          "definition": "Search_where__is_(string field, string value)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ClassSearchResultsWorkflow"
    },
    "portalmanagementfnh": {
      "namespace": "",
      "methods": {
        "verifyportalaccountforhaspermission()": {
          "definition": "Verify_portal_account_for__has_permission__(string emailAddress, PortalPermissionType permission)"
        },
        "grantaccountwithregistrationorganizationalportalpermissionandagencyand()": {
          "definition": "Grant_account_with_Registration_organizational_portal_permission_and_agency_and_(string email, string orgName, string registrationPermissionType)"
        },
        "verifyresendportalwelcomeemailfailedwithresult()": {
          "definition": "Verify_resend_portal_welcome_email_failed_with_result(PortalAccountManager.SendAccountInformationResult result)"
        },
        "getportalaccountforpersonid()": {
          "definition": "Get_portal_account_for_personid__(int personID)"
        },
        "resendportalwelcomeemailto()": {
          "definition": "Resend_portal_welcome_email_to__(string emailAddress)"
        },
        "verifymustchangetheirpasswordonnextlogin()": {
          "definition": "Verify__must_change_their_password_on_next_login(string email)"
        },
        "grantaccountpermission()": {
          "definition": "Grant_account__permission__(string email, string permissionDesc)"
        },
        "grantaccountwithindividualportalpermission()": {
          "definition": "Grant_account_with_individual_portal_permission(string email, PortalPermissionType permission)"
        },
        "verifycanlogintoportalwithusernameandpassword()": {
          "definition": "Verify_can_log_into_Portal_with_username_and_password(string emailAddress, string password)"
        },
        "createportalaccessforwithemailandpasswordandportalpermission()": {
          "definition": "Create_portal_access_for_with_email_and_password_and_portal_permission(PortalStatus status, string personName, string email, string password, PortalPermissionType permission)"
        },
        "verifyisnotrequiredtochangetheirpasswordonnextlogin()": {
          "definition": "Verify__is_not_required_to_change_their_password_on_next_login(string email)"
        },
        "logintoportalwithusernameandpasswordfromwelcomeemail()": {
          "definition": "Login_to_portal_with_username__and_password_from_welcome_email(string email)"
        },
        "setaccountstatusforto()": {
          "definition": "Set_account_status_for__to__(string email, PortalStatus status)"
        },
        "revokeaccountpermission()": {
          "definition": "Revoke_account_permission(string emailAddress, PortalPermissionType permission)"
        },
        "verifyresendportalwelcomeemailsucceededwithresult()": {
          "definition": "Verify_resend_portal_welcome_email_succeeded_with_result(PortalAccountManager.SendAccountInformationResult result)"
        },
        "verifyportalaccountforis()": {
          "definition": "Verify_Portal_Account_for_is_(string emailAddress, PortalStatus status)"
        },
        "getportalaccounts()": {
          "definition": "Get_portal_accounts()"
        },
        "verifycannotlogintoportalwithusernameandpassword()": {
          "definition": "Verify_cannot_log_into_Portal_with_username_and_password(string emailAddress, string password)"
        },
        "setaccountpasswordforto()": {
          "definition": "Set_account_password_for__to__(string email, string password)"
        },
        "grantaccountwithorganizationalportalpermissionandagency()": {
          "definition": "Grant_account_with_organizational_portal_permission_and_agency_(string email, PortalPermissionType permission, string orgName)"
        },
        "verifynoportalaccountfor()": {
          "definition": "Verify_No_Portal_Account_for_(string emailAddress)"
        },
        "logintoportalwithusernameandpassword()": {
          "definition": "Log_into_portal_with_Username__and_Password(string emailAddress, string password)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "PortalManagementFNH"
    },
    "transferstudent": {
      "namespace": "",
      "methods": {
        "verifyisinlistwithseatsavailableandisavailablefortransfer()": {
          "definition": "Verify__is_in_list_with__seats_available_and_is_available_for_transfer(string className, int numSeats)"
        },
        "bindtransferclasses()": {
          "definition": "BindTransferClasses(IList<TransferClassRegChoiceDTO> dtos)"
        },
        "verifycantransfer()": {
          "definition": "Verify_can_transfer()"
        },
        "clickcancel()": {
          "definition": "Click_Cancel()"
        },
        "verifytherearetransferitems()": {
          "definition": "Verify_there_are__transfer_items(int numTransferListItems)"
        },
        "verifyisinlistwithseatsavailableandisnotavailablefortransfer()": {
          "definition": "Verify__is_in_list_with__seats_available_and_is_not_available_for_transfer(string className, int numSeats)"
        },
        "browsetotransferregistrationforfromclass()": {
          "definition": "Browse_to_transfer_registration_for__from_class__(string personName, string className)"
        },
        "clicktransfer()": {
          "definition": "Click_Transfer()"
        },
        "verifycannottransferbecause()": {
          "definition": "Verify_cannot_transfer_because__(string reason)"
        },
        "selecttotransferto()": {
          "definition": "Select__to_transfer_to(string className)"
        }
      },
      "parent-name": "MVBaseControlWorkflow",
      "class-name": "TransferStudentWorkflow"
    },
    "gradingscalepersistence": {
      "namespace": "",
      "methods": {
        "canloadallscales()": {
          "definition": "can_load_all_scales()"
        },
        "canroundtripgradingscale()": {
          "definition": "Can_roundtrip_GradingScale()"
        },
        "canroundtriptimedgradingscaleproperties()": {
          "definition": "Can_roundtrip_TimedGradingScaleProperties()"
        },
        "canloadscalefromdsmart()": {
          "definition": "can_load_scale__from_dsmart( int id )"
        }
      },
      "parent-name": "Workflow",
      "class-name": "GradingScalePersistence"
    },
    "questionandansweranalysisreportmanagement": {
      "namespace": "",
      "methods": {
        "verifythatquestionhasanswerrows()": {
          "definition": "Verify_that_question_has_answer_rows( int questionIndex, int count )"
        },
        "verifythatquestionanswerhasquestionletter()": {
          "definition": "verify_that_question_answer_has_question_letter( int questionIndex, int answerIndex, string letter )"
        },
        "loadquestionandansweranalysisreportfortestinclass()": {
          "definition": "Load_question_and_answer_analysis_report_for_test_in_class( string examName, string className )"
        },
        "verifythatquestionhasmissedpercenttext()": {
          "definition": "Verify_that_question_has_missed_percent_text( int questionIndex, string text )"
        },
        "verifythatquestionhasquestiontext()": {
          "definition": "Verify_that_question_has_question_text( int questionIndex, string text )"
        },
        "verifythatquestionanswerhaspercenttext()": {
          "definition": "verify_that_question_answer_has_percent_text( int questionIndex, int answerIndex, string text )"
        },
        "verifythatquestionanswerhasanswertext()": {
          "definition": "verify_that_question_answer_has_answer_text( int questionIndex, int answerIndex, string text )"
        },
        "verifythatquestionanswerhasblankquestionletter()": {
          "definition": "verify_that_question_answer_has_blank_question_letter( int questionIndex, int answerIndex )"
        },
        "verifythatquestionhasmissednumbertext()": {
          "definition": "verify_that_question_has_missed_number_text( int questionIndex, string text )"
        },
        "verifythatreporthasquestionrows()": {
          "definition": "Verify_that_report_has_question_rows( int count )"
        }
      },
      "parent-name": "Workflow",
      "class-name": "QuestionAndAnswerAnalysisReportManagement"
    },
    "inquiryitemlist": {
      "namespace": "",
      "methods": {
        "verifyrequirementhasvisibilityof()": {
          "definition": "Verify__requirement__has_visibility_of__(string reqType, string reqText, string visibility)"
        },
        "browsetoclassregistrationfortemplate()": {
          "definition": "Browse_to_class_registration_for_template__(string templateName)"
        },
        "browsetoclassregistrationforclass()": {
          "definition": "Browse_to_class_registration_for_class__(string className)"
        },
        "bindinquiryitems()": {
          "definition": "BindInquiryItems()"
        },
        "verifythereareprerequisites()": {
          "definition": "Verify_there_are__prerequisites(int numItems)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "InquiryItemListWorkflow"
    },
    "addpersonflag": {
      "namespace": "",
      "methods": {
        "browsetopageforperson()": {
          "definition": "Browse_to_Page_For_Person__(string name)"
        },
        "bindflagtypes()": {
          "definition": "BindFlagTypes(IList<AddPersonFlagItemDTO> orderedFlagTypes)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AddPersonFlagWorkflow"
    },
    "scheduleoverview": {
      "namespace": "",
      "methods": {
        "opentheprogramfiltertypeahead()": {
          "definition": "Open_the_program_filter_type_ahead()"
        },
        "verifyanavailableprogramfilteroption()": {
          "definition": "Verify__an_available_program_filter_option(string programName, string isOrNot)"
        },
        "verifythereareclassesdisplayed()": {
          "definition": "Verify_there_are__classes_displayed(int count)"
        },
        "selectinprogramfiltertypeahead()": {
          "definition": "Select__in_program_filter_type_ahead(string item)"
        },
        "clickdoneonfilterpopover()": {
          "definition": "Click_done_on_filter_popover()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "clearprogramfilter()": {
          "definition": "Clear_program_filter()"
        },
        "verifydatabeginsonandendson()": {
          "definition": "Verify_data_begins_on__and_ends_on__(DateTime start, DateTime end)"
        },
        "verifydisplayed()": {
          "definition": "Verify__displayed(string programName, string className, string isOrNot)"
        },
        "enterintotheprogramfiltertypeahead()": {
          "definition": "Enter__into_the_program_filter_type_ahead(string prefixText)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ScheduleOverviewWorkflow"
    },
    "registrationmonitor": {
      "namespace": "",
      "methods": {
        "verifylocationdetailis()": {
          "definition": "Verify_location_detail_is__(string locText)"
        },
        "bindclasses()": {
          "definition": "BindClasses(List<RegistrationMonitorDTO.Class> classes, int totalCount)"
        },
        "addtoportalvisibilityfilter()": {
          "definition": "Add__to_portal_visibility_filter(string publishingStatus)"
        },
        "verifyregisteringorganizationsare()": {
          "definition": "Verify_registering_organizations_are__(List<string> orgNames)"
        },
        "verifynameis()": {
          "definition": "Verify_name_is__(string expected)"
        },
        "verifywaitlistedis()": {
          "definition": "Verify_waitlisted_is__(int expected)"
        },
        "verifydocumentationrequireddetailisnotvisible()": {
          "definition": "Verify_documentation_required_detail_is_not_visible()"
        },
        "verifyopenis()": {
          "definition": "Verify_open_is__(int expected)"
        },
        "addtoprogramfilter()": {
          "definition": "Add__to_program_filter(string program)"
        },
        "verifywaitlistlinksare()": {
          "definition": "Verify_waitlist_links_are__(List<string> expectedWaitlists)"
        },
        "verifyhousingdetailis()": {
          "definition": "Verify_housing_detail_is__(string housingText)"
        },
        "clickdetailsbutton()": {
          "definition": "Click_details_button()"
        },
        "clearportalvisibilityfilter()": {
          "definition": "Clear_portal_visibility_filter()"
        },
        "verifyprogramfilteroptionsare()": {
          "definition": "Verify_program_filter_options_are__(List<string> expectedPrograms)"
        },
        "verifyportalcancellationdetailis()": {
          "definition": "Verify_portal_cancellation_detail_is__(string portalCancellationText)"
        },
        "verifythereareresults()": {
          "definition": "Verify_there_are__results(int count)"
        },
        "setregistrationendfilterto()": {
          "definition": "Set_registration_end_filter_to__(string dt)"
        },
        "verifyenrollmentprocessingdetailis()": {
          "definition": "Verify_enrollment_processing_detail_is__(string enrollmentProcessingText)"
        },
        "verifyprerequisitesdetailis()": {
          "definition": "Verify_prerequisites_detail_is__(string prereqText)"
        },
        "verifyattentionrequiredis()": {
          "definition": "Verify_attention_required_is__(string expected)"
        },
        "setclassstartfilterto()": {
          "definition": "Set_class_start_filter_to__(string dt)"
        },
        "verifywaitlistsectionvisible()": {
          "definition": "Verify_waitlist_section__visible(string isOrNot)"
        },
        "verifyportalvisibilityis()": {
          "definition": "Verify_portal_visibility_is__(string portalVisibility)"
        },
        "verifyresultsdonotincludeclass()": {
          "definition": "Verify_results_do_not_include_class__(string className)"
        },
        "verifywaitlistlinksisempty()": {
          "definition": "Verify_waitlist_links_is_empty()"
        },
        "bindpublishingstatusfilteroptions()": {
          "definition": "BindPublishingStatusFilterOptions(List<DropDownItem> publishingStatusFilterOptions)"
        },
        "clearprogramfilter()": {
          "definition": "Clear_program_filter()"
        },
        "applyfilters()": {
          "definition": "Apply_filters()"
        },
        "verifyregistrationendis()": {
          "definition": "Verify_registration_end_is__(DateTime expected)"
        },
        "considerresult()": {
          "definition": "Consider_result__(int position)"
        },
        "verifyenrolledis()": {
          "definition": "Verify_enrolled_is__(int expected)"
        },
        "verifyresultsincludeclass()": {
          "definition": "Verify_results_include_class__(string className)"
        },
        "setclassendfilterto()": {
          "definition": "Set_class_end_filter_to__(string dt)"
        },
        "verifyregistrationstartis()": {
          "definition": "Verify_registration_start_is__(DateTime expected)"
        },
        "verifydocumentationrequireddetailisvisible()": {
          "definition": "Verify_documentation_required_detail_is_visible()"
        },
        "verifyportalregistrationdetailis()": {
          "definition": "Verify_portal_registration_detail_is__(string portalRegText)"
        },
        "bindprogramwaitlists()": {
          "definition": "BindProgramWaitlists(List<RegistrationMonitorDTO.ProgramWaitlist> programWaitlists)"
        },
        "bindprogramfilteroptions()": {
          "definition": "BindProgramFilterOptions(List<DropDownItem> programFilterOptions)"
        },
        "verifypendingis()": {
          "definition": "Verify_pending_is__(int expected)"
        },
        "verifyeligibleis()": {
          "definition": "Verify_eligible_is__(int expected)"
        },
        "setregistrationstartfilterto()": {
          "definition": "Set_registration_start_filter_to__(string dt)"
        },
        "clearallfilters()": {
          "definition": "Clear_all_filters()"
        },
        "verifyclassstartis()": {
          "definition": "Verify_class_start_is__(DateTime expected)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "RegistrationMonitorWorkflow"
    },
    "personfnhmanagement": {
      "namespace": "",
      "methods": {
        "verifyproctoraccountforhasstatus()": {
          "definition": "Verify_proctor_account_for__has_status__(string personName, string proctorStatus)"
        },
        "setaddresstoprimary()": {
          "definition": "set_address__to_primary(string description)"
        },
        "verifypersonhaseducationwithlevelanddegreetypeandmajorandminoranddegreeyear()": {
          "definition": "Verify_person_has_education_with_level__and_degree_type__and_major__and_minor__and_degree_year__(string educationLevel, string degreeType, string major, string minor, int? degreeYear)"
        },
        "verifyaddressismailing()": {
          "definition": "Verify_address_is_mailing()"
        },
        "verifypersonhasnophonenumberrecord()": {
          "definition": "Verify_person_has_no_phone_number_record()"
        },
        "setdateofbirthto()": {
          "definition": "set_date_of_birth_to(DateTime dob)"
        },
        "createperson()": {
          "definition": "Create_person(string name, int? acadisID)"
        },
        "verifyzipforaddressis()": {
          "definition": "Verify_zip_for_address__is__(string addressDescription, string zip)"
        },
        "verifyproctoraccountforhasnousername()": {
          "definition": "Verify_proctor_account_for__has_no_username(string personName)"
        },
        "setstatusto()": {
          "definition": "Set_Status_to__(PersonStatus status)"
        },
        "addnewprimaryaddresstoperson()": {
          "definition": "add_new_primary_address__to_person(string addressLine1, string addressLine2, string city, string state, string zip, string personName)"
        },
        "addnewmailingaddresswithtypetopersonwithdescription()": {
          "definition": "add_new_mailing_address__with_type__to_person__with_description__(string addressLine1, string addressLine2, string city, string state, string zip, string addressType, string personName, string description)"
        },
        "verifypersonhasdobof()": {
          "definition": "Verify_person_has_DOB_of__(DateTime DOB)"
        },
        "verifypersonhasbloodtypeof()": {
          "definition": "Verify_person_has_blood_type_of__(string bloodType)"
        },
        "createpersonwithacademyid()": {
          "definition": "Create_person_with_academy_id__(string name, string academyID)"
        },
        "considerperson()": {
          "definition": "Consider_person__(string fullName)"
        },
        "verifypersonhasacademyidof()": {
          "definition": "Verify_person_has_AcademyID_of__(string academyID)"
        },
        "usingperson()": {
          "definition": "Using_Person(string nameFirstLast)"
        },
        "verifyorganizationhasoptiongroups()": {
          "definition": "Verify__organization_has__option_groups(string ordinal, int number)"
        },
        "verifyaddressisprimary()": {
          "definition": "Verify_address_is_primary()"
        },
        "verifyaddresscountyis()": {
          "definition": "Verify_address_county_is__(string county)"
        },
        "verifypersonhasnoeyecolor()": {
          "definition": "Verify_person_has_no_eye_color()"
        },
        "setbloodtypeto()": {
          "definition": "Set_blood_type_to( string bloodTypeString )"
        },
        "verifyportalaccountforhasstatus()": {
          "definition": "Verify_portal_account_for__has_status__(string personName, string portalStatus)"
        },
        "setsuffixto()": {
          "definition": "Set_suffix_to_( string suffix )"
        },
        "verifypersonhasnobloodtype()": {
          "definition": "Verify_person_has_no_blood_type()"
        },
        "addphonenumberwithtypetoperson()": {
          "definition": "add_phone_number__with_type__to_person__(string phoneNumber, string type, string personName)"
        },
        "verifynumberofemailsforis()": {
          "definition": "Verify_Number_of_Emails_for__is__(string personName, int numEmails)"
        },
        "verifypersonhasfullnameof()": {
          "definition": "Verify_person_has_full_name_of__(string fullname)"
        },
        "createpersonwithgender()": {
          "definition": "Create_person__with_gender__(string personName, string genderDesc)"
        },
        "verifyuserstatusequals()": {
          "definition": "Verify_User__status_equals__(string userName, LoginStatus status)"
        },
        "verifypersonhasmilitaryexperienceforbranchwithrankandspecialtyofanddischargetypeisandyearsofserviceis()": {
          "definition": "Verify_person_has_military_experience_for_branch__with_rank__and_specialty_of__and_discharge_type_is__and_years_of_service_is__(string branch, string rank, string specialty, string dischargeType, int yearsOfService)"
        },
        "verifypersonhasdriverslicenseof()": {
          "definition": "Verify_person_has_drivers_license_of__(string driversLicense)"
        },
        "verifypersonhasnodob()": {
          "definition": "Verify_person_has_no_DOB()"
        },
        "verifypersonhasheightof()": {
          "definition": "Verify_person_has_height_of__(int heightInInches)"
        },
        "verifypersonhasinstructorudfof()": {
          "definition": "Verify_person_has_instructor_udf__of__(string udfName, string value)"
        },
        "verifypersondoesnotexist()": {
          "definition": "Verify_Person__does_not_exist(string fullName)"
        },
        "verifyacadisaccountforhasusername()": {
          "definition": "Verify_acadis_account_for__has_username__(string personName, string username)"
        },
        "verifypersonhasbirthdateof()": {
          "definition": "Verify_person_has_birthdate_of__(DateTime dob)"
        },
        "verifyportalaccountforhasnousername()": {
          "definition": "Verify_portal_account_for__has_no_username(string personName)"
        },
        "addemailaddressoftoperson()": {
          "definition": "Add_email_address_of__to_person__(string emailAddress, string personName)"
        },
        "inactivatepersonandcheckreassignmentoptions()": {
          "definition": "Inactivate_person_and_check_reassignment_options()"
        },
        "addnewaddresstoperson()": {
          "definition": "add_new_address__to_person(string addressLine1, string addressLine2, string city, string state, string zip, string personName)"
        },
        "addnewaddresswithtypetopersonwithdescription()": {
          "definition": "add_new_address__with_type__to_person_with_description__(string addressLine1, string addressLine2, string city, string state, string zip, string addressType, string personName, string description)"
        },
        "verifypersonexists()": {
          "definition": "Verify_Person__exists(string fullName)"
        },
        "setwebsitetoforperson()": {
          "definition": "Set_website_to__for_person__(string website, string personName)"
        },
        "verifyorganizationgroupoptionis()": {
          "definition": "Verify__organization__group__option_is_(string ordinal, string group, string option, string optionName)"
        },
        "verifypersonhasprimaryphonenumberof()": {
          "definition": "Verify_person__has_primary_phone_number_of__(string personName, string phoneNum)"
        },
        "verifypersonhaswebsites()": {
          "definition": "Verify_person_has__websites(int count)"
        },
        "verifypersonsupervisesemployeesinorganizations()": {
          "definition": "Verify_person_supervises_employees_in__organizations(int number)"
        },
        "changephonenumbertoforperson()": {
          "definition": "change_phone_number__to__for_person__(string oldPhoneNum, string newPhoneNum, string personName)"
        },
        "verifypersonhaswebsite()": {
          "definition": "Verify_person_has_website__(string url)"
        },
        "addnewmailingaddresstoperson()": {
          "definition": "add_new_mailing_address__to_person(string addressLine1, string addressLine2, string city, string state, string zip, string personName)"
        },
        "verifypersonwithacademyidandfirstnameandlastnameexists()": {
          "definition": "Verify_person_with_academy_id__and_first_name__and_last_name__exists(string academyID, string firstName, string lastName)"
        },
        "verifypersonisactive()": {
          "definition": "Verify_Person_is_active(string personName)"
        },
        "addprimaryemailaddressoftoperson()": {
          "definition": "Add_primary_email_address_of__to_person__(string emailAddress, string personName)"
        },
        "selectforemployment()": {
          "definition": "Select__for__employment(string personName, string ordinal)"
        },
        "verifypersonhaseeocof()": {
          "definition": "Verify_person_has_eeoc_of__(string eeoc)"
        },
        "createagroupofpeoplecalledwithbirthdate()": {
          "definition": "Create_a_group_of_people_called_with_birthdate_(int num, string groupName, DateTime date)"
        },
        "verifyportalaccountforhasusername()": {
          "definition": "Verify_portal_account_for__has_username__(string personName, string email)"
        },
        "setimportkeyforaddressto()": {
          "definition": "Set_Import_Key_for_address__to__(string addressDescription, string importKey)"
        },
        "verifyaddressstreet1is()": {
          "definition": "Verify_address_street1_is__(string street1)"
        },
        "saveperson()": {
          "definition": "save_person()"
        },
        "verifypersonhaslanguagenamedandreadandwriteandlectureandtranslatethelanguage()": {
          "definition": "Verify_person_has_language_named__and__read_and__write_and__lecture_and__translate_the_language(string languageName, string canRead, string canWrite, string canLecture, string canTranslate)"
        },
        "verifyaddresszipis()": {
          "definition": "Verify_address_zip_is__(string zip)"
        },
        "verifypersonhasemailaddress()": {
          "definition": "Verify_person_has_email_address__(string emailAddr)"
        },
        "seteyecolorto()": {
          "definition": "Set_eye_color_to( string eyeColorString )"
        },
        "createuserforwithusernameandactivedirectoryname()": {
          "definition": "Create_User_For__With_Username__and_Active_Directory_name__(string personAlias, string userName, string adUserName)"
        },
        "verifyline1foraddressis()": {
          "definition": "Verify_line_1_for_address__is__(string addressDescription, string line1)"
        },
        "createpersonwithfirstnamelastnamemiddle()": {
          "definition": "Create_person_with_first_name__last_name__middle__(string first, string last, string middle)"
        },
        "verifyaddresstypeis()": {
          "definition": "Verify_address_type_is__(string type)"
        },
        "addprimaryphonenumberwithtypetoperson()": {
          "definition": "add_primary_phone_number__with_type__to_person__(string phoneNumber, string type, string personName)"
        },
        "verifyaddressstateisblank()": {
          "definition": "Verify_address_state_is_blank()"
        },
        "verifypersonhasnogender()": {
          "definition": "Verify_person_has_no_gender()"
        },
        "verifypersonhashaircolorof()": {
          "definition": "Verify_person_has_hair_color_of__(string hairColor)"
        },
        "verifypersonhaseducationrecords()": {
          "definition": "Verify_person_has__education_records(int count)"
        },
        "setssnto()": {
          "definition": "Set_SSN_to_( string ssn )"
        },
        "verifyprimaryaddressforis()": {
          "definition": "Verify_primary_address_for__is__(string personName, string addressDescription)"
        },
        "setweightto()": {
          "definition": "Set_weight_to( int weight )"
        },
        "setimportkeyforwebsiteto()": {
          "definition": "Set_Import_Key_for__website__to__(string url, string importKey)"
        },
        "deleteperson()": {
          "definition": "Delete_person__(string fullName)"
        },
        "addnewprimaryaddresswithtypetopersonwithdescription()": {
          "definition": "add_new_primary_address__with__type__to_person_with_description__(string addressLine1, string addressLine2, string city, string state, string zip, string addressType, string personName, string description)"
        },
        "verifyaddresscountyisblank()": {
          "definition": "Verify_address_county_is_blank()"
        },
        "verifyuseraccountstatusis()": {
          "definition": "Verify_user_account__status_is__(string username, string status)"
        },
        "makeaninstructor()": {
          "definition": "Make__an_instructor(string personName)"
        },
        "verifypersonhasdriverslicensestateof()": {
          "definition": "Verify_person_has_drivers_license_state_of__(string driversLicenseState)"
        },
        "getbaselinepersonwithid()": {
          "definition": "Get_baseline_person_with_id_(int ID)"
        },
        "addcommentto()": {
          "definition": "Add_comment__to_(string commentText, string personName)"
        },
        "verifypersonhasnohaircolor()": {
          "definition": "Verify_person_has_no_hair_color()"
        },
        "verifypersonhasnoheight()": {
          "definition": "Verify_person_has_no_height()"
        },
        "verifypersonhasnoweight()": {
          "definition": "Verify_person_has_no_weight()"
        },
        "verifyline2foraddressis()": {
          "definition": "Verify_line_2_for_address__is__(string addressDescription, string line2)"
        },
        "verifyaddressisnotprimary()": {
          "definition": "Verify_address__is_not_primary(string addressDescription)"
        },
        "verifypersonhasphones()": {
          "definition": "Verify_person_has__phones(int count)"
        },
        "verifypersonhaseyecolorof()": {
          "definition": "Verify_person_has_eye_color_of__(string eyeColor)"
        },
        "verifypersonhasnogenderset()": {
          "definition": "Verify_person__has_no_gender_set(string personName)"
        },
        "setcountyonaddressto()": {
          "definition": "set_county_on_address__to__(string description, string county)"
        },
        "verifypersondoesnothaveudf()": {
          "definition": "Verify_person_does_not_have_udf__(string udfName)"
        },
        "createuserforwithusername()": {
          "definition": "Create_User_For__With_Username__(string personAlias, string userName)"
        },
        "verifyorganizationoptionis()": {
          "definition": "Verify__organization__option_is_(string ordinal, string group, string optionText)"
        },
        "verifypersonisinactive()": {
          "definition": "Verify_Person_is_inactive(string personName)"
        },
        "consideraddresswithdescription()": {
          "definition": "Consider_address_with_description__(string description)"
        },
        "createpersonwithfirstnamelastnamemiddlenamesuffix()": {
          "definition": "Create_person_with_first_name__last_name__middle__name_suffix__(string first, string last, string middle, string suffix)"
        },
        "verifypersonhasnonprimaryemailaddress()": {
          "definition": "Verify_person__has_non_primary_email_address__(string personName, string address)"
        },
        "verifypersonhasweightof()": {
          "definition": "Verify_person_has_weight_of__(int weightInPounds)"
        },
        "verifypersonhasssnof()": {
          "definition": "Verify_person_has_SSN_of__(string SSN)"
        },
        "verifypersonhasgender()": {
          "definition": "Verify_person__has_gender__(string personName, Gender gender)"
        },
        "verifypersonhasmilitaryservicerecords()": {
          "definition": "Verify_person_has__military_service_records(int count)"
        },
        "verifyorganizationgroupis()": {
          "definition": "Verify__organization__group_is_(string ordinal, string group, string groupName)"
        },
        "driverslicenseforstateis()": {
          "definition": "Drivers_license_for_state__is__( string state, string number )"
        },
        "verifystateforaddressis()": {
          "definition": "Verify_state_for_address__is__(string addressDescription, string state)"
        },
        "verifyproctoraccountforhasusername()": {
          "definition": "Verify_proctor_account_for__has_username__(string personName, string email)"
        },
        "verifypersonhasaddresses()": {
          "definition": "Verify_person_has__addresses(int count)"
        },
        "verifypersonhasphonenumberoftypewithareacodeandnumberofandextension()": {
          "definition": "Verify_person_has_phone_number_of_type__with_area_code__and_number_of__and_extension__(string phoneType, string areaCode, string phoneNumber, string extension)"
        },
        "verifypersonacademyidis()": {
          "definition": "Verify_person_academyid_is_(string academyID)"
        },
        "verifypersonhasudfof()": {
          "definition": "Verify_person_has_udf__of__(string udfName, string value)"
        },
        "sethaircolorto()": {
          "definition": "Set_hair_color_to( string hairColorString )"
        },
        "verifywebsiteforpersonis()": {
          "definition": "Verify_website_for_person__is__(string personName, string website)"
        },
        "verifycommentsoncontain()": {
          "definition": "Verify_comments_on__contain_(string personName, string commentText)"
        },
        "verifypersonhasnoprimaryemailaddress()": {
          "definition": "Verify_person__has_no_primary_email_address(string personName)"
        },
        "setmiddlenameto()": {
          "definition": "Set_middle_name_to__(string middleName)"
        },
        "inactivateuser()": {
          "definition": "Inactivate_User__(string userName)"
        },
        "verifypersonhasprimaryemailaddress()": {
          "definition": "Verify_person_has_primary_email_address__(string emailAddr)"
        },
        "verifypersondoesnothaveinstructorudf()": {
          "definition": "Verify_person_does_not_have_instructor_udf__(string udfName)"
        },
        "verifyhascomments()": {
          "definition": "Verify__has__comments(string personName, int commentCount)"
        },
        "createuserforwithusernameandpassword()": {
          "definition": "Create_User_For__With_Username__and_password__(string personAlias, string userName, string password)"
        },
        "verifyaddressstreet2is()": {
          "definition": "Verify_address_street2_is__(string street2)"
        },
        "verifypersonhaslanguagerecords()": {
          "definition": "Verify_person_has__language_records(int count)"
        },
        "verifymailingaddressforis()": {
          "definition": "Verify_mailing_address_for__is__(string personName, string addressDescription)"
        },
        "addphonenumberwithtypeandextensiontoperson()": {
          "definition": "add_phone_number__with_type__and_extension__to_person__(string phoneNumber, string type, string extension, string personName)"
        },
        "setimportkeyforemailaddressto()": {
          "definition": "Set_Import_Key_for__email_address__to__(string address, string importKey)"
        },
        "setheightto()": {
          "definition": "Set_height_to( int height )"
        },
        "verifypersonhasprimaryphone()": {
          "definition": "Verify_person_has_primary_phone__(string phoneNumber)"
        },
        "addemailaddressof()": {
          "definition": "Add_email_address_of__(string emailAddress)"
        },
        "verifypersonhascomments()": {
          "definition": "Verify_person_has__comments(int commentCount)"
        },
        "seteeoccategoryto()": {
          "definition": "set_eeoc_category_to__(string category)"
        },
        "setgenderto()": {
          "definition": "Set_gender_to_(string genderString)"
        },
        "setacademyidto()": {
          "definition": "Set_academy_id_to_(string academyId)"
        },
        "verifyaddressisnotmailing()": {
          "definition": "Verify_address__is_not_mailing(string addressDescription)"
        },
        "verifypersonprimaryemailaddressis()": {
          "definition": "Verify_person__primary_email_address_is_(string personName, string address)"
        },
        "setaddresstomailing()": {
          "definition": "set_address__to_mailing(string description)"
        },
        "createpersonwithacademyidandacadisid()": {
          "definition": "create_person__with_academy_id__and_acadis_id__(string name, string academyID, int? acadisID)"
        },
        "verifypersonhasgenderof()": {
          "definition": "Verify_person_has_gender_of__(Gender gender)"
        },
        "verifypersonhasemailaddresses()": {
          "definition": "Verify_person_has__email_addresses(int count)"
        },
        "setpersonudfto()": {
          "definition": "set_person_udf__to__(string udfName, string value)"
        },
        "verifycityforaddressis()": {
          "definition": "Verify_city_for_address__is__(string addressDescription, string city)"
        },
        "setasthepersonid()": {
          "definition": "Set__as_the_person_id(int ID)"
        },
        "verifyaddresscityis()": {
          "definition": "Verify_address_city_is__(string city)"
        },
        "verifypersonhasphone()": {
          "definition": "Verify_person_has___phone__(string type, string phoneNumber)"
        },
        "addprimaryemailaddressof()": {
          "definition": "Add_primary_email_address_of__(string emailAddress)"
        },
        "setimportkeyforphoneto()": {
          "definition": "Set_Import_Key_for__phone__to__(string phoneType, string phoneNumber, string importKey)"
        },
        "addmilitaryservice()": {
          "definition": "Add_military_service()"
        },
        "verifyorganizationiswithassignees()": {
          "definition": "Verify__organization_is__with__assignees(string ordinal, string orgName, int assignees)"
        },
        "createpersonnamedwithemailaddressof()": {
          "definition": "Create_person_named__with_email_address_of__(string personName, string emailAddress)"
        },
        "verifypersonhasnoeeoc()": {
          "definition": "Verify_person_has_no_eeoc()"
        },
        "verifypersonhasnonprimaryphonenumberof()": {
          "definition": "Verify_person__has_non_primary_phone_number_of__(string personName, string phoneNum)"
        },
        "verifyaddressstateis()": {
          "definition": "Verify_address_state_is__(string state)"
        },
        "verifypersonhascomment()": {
          "definition": "Verify_person_has_comment_(string commentText)"
        },
        "verifypersonhasstatusof()": {
          "definition": "Verify_person_has_status_of__(PersonStatus status)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "PersonFNHManagement"
    },
    "trainingdata": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "TrainingData"
    },
    "acadisusersearch": {
      "namespace": "",
      "methods": {
        "updatecriteriafromui()": {
          "definition": "UpdateCriteriaFromUI()"
        },
        "loginas()": {
          "definition": "Log_in_as(string userName)"
        },
        "searchwithcriteria()": {
          "definition": "Search_with_criteria()"
        },
        "createsearchcriteria()": {
          "definition": "Create_search_criteria()"
        },
        "withlastname()": {
          "definition": "with_Last_Name_(string lastName)"
        },
        "withresultsperpage()": {
          "definition": "With__results_per_page(int number)"
        },
        "withfirstname()": {
          "definition": "with_First_Name_(string firstName)"
        },
        "withstatus()": {
          "definition": "With_status_(LoginStatus status)"
        },
        "navigatetosearchresults()": {
          "definition": "NavigateToSearchResults()"
        },
        "withusername()": {
          "definition": "with_UserName_(string username)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "updateuifromcriteria()": {
          "definition": "UpdateUIFromCriteria()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AcadisUserSearchWorkflow"
    },
    "trainingcategorizer": {
      "namespace": "",
      "methods": {
        "showfilterdialog()": {
          "definition": "ShowFilterDialog()"
        },
        "verifythathastraininghoursof()": {
          "definition": "Verify_that__has_training_hours_of( string personName, List<decimal> hours )"
        },
        "selectpeople()": {
          "definition": "Select_people_( List<string> personNames )"
        },
        "bindcategorizedhours()": {
          "definition": "BindCategorizedHours( IEnumerable<PersonCategorizedTrainingDTO> categorizedHours )"
        },
        "selectfiscalyearof()": {
          "definition": "Select_fiscal_year_of( int fiscalYear )"
        },
        "selecttrainingcategoriesof()": {
          "definition": "Select_training_categories_of( List<string> categories )"
        },
        "openfiltersdialog()": {
          "definition": "Open_Filters_Dialog()"
        },
        "savefilters()": {
          "definition": "Save_Filters()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "TrainingCategorizer"
    },
    "eventrequesthousingedit": {
      "namespace": "",
      "methods": {
        "verifyspecialaccommodationsonlineis()": {
          "definition": "Verify_Special_Accommodations_on__line__is__(string housingType, int lineNum, string roomType)"
        },
        "showhousingeditpopover()": {
          "definition": "ShowHousingEditPopover()"
        },
        "showmissinghousing()": {
          "definition": "ShowMissingHousing()"
        },
        "showoutofrange()": {
          "definition": "ShowOutOfRange(bool students, bool nonStudents)"
        },
        "verifynonstudentcountoutofrangealertisvisible()": {
          "definition": "Verify_Non_Student_count_out_of_range_alert_is_visible()"
        },
        "verifynumberofguestsonlineis()": {
          "definition": "Verify_Number_of_Guests_on__line__is__(string housingType, int lineNum, int numGuests)"
        },
        "bindstudents()": {
          "definition": "BindStudents(List<AttendeesHousingRequestInfoDTO> students)"
        },
        "enterfornumberofguestsonline()": {
          "definition": "Enter__for_Number_of_Guests_on__line__(int numGuests, string housingType, int lineNum)"
        },
        "verifystudentcountoutofrangealertisvisible()": {
          "definition": "Verify_Student_count_out_of_range_alert_is_visible()"
        },
        "cancelhousingalert()": {
          "definition": "Cancel_housing_alert()"
        },
        "verifygenderonlineis()": {
          "definition": "Verify_Gender_on__line__is__(string housingType, int lineNum, string gender)"
        },
        "verifyroomtypeonlineis()": {
          "definition": "Verify_Room_Type_on__line__is__(string housingType, int lineNum, string usageTypeName)"
        },
        "verifyhousingeditpopoverisvisible()": {
          "definition": "Verify_housing_edit_popover_is_visible()"
        },
        "clickdeletestudentrow()": {
          "definition": "Click_Delete_Student_Row__(int lineNum)"
        },
        "selectgenderforline()": {
          "definition": "Select_Gender_for__line__(string gender, string housingType, int lineNum)"
        },
        "selectforspecialaccommodationsonline()": {
          "definition": "Select__for_Special_Accommodations_on__line__(string roomType, string housingType, int lineNum)"
        },
        "clickdeletenonstudentrow()": {
          "definition": "Click_Delete_Non_Student_Row__(int lineNum)"
        },
        "selectforroomtypeonline()": {
          "definition": "Select__for_Room_Type_on__line__(string usageTypeName, string housingType, int lineNum)"
        },
        "verifymissinghousingdetailsalertisvisible()": {
          "definition": "Verify_Missing_Housing_Details_alert_is_visible()"
        },
        "bindnonstudents()": {
          "definition": "BindNonStudents(List<AttendeesHousingRequestInfoDTO> nonStudents)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EventRequestHousingEditWorkflow"
    },
    "weightdata": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "WeightData"
    },
    "portallessonplanlist": {
      "namespace": "",
      "methods": {
        "verifysubmittedis()": {
          "definition": "Verify_Submitted_is__(string submitted)"
        },
        "verifyuserwaspromptedforconfirmationtodelete()": {
          "definition": "Verify_user_was_prompted_for_confirmation_to_delete()"
        },
        "verifypreparedbyis()": {
          "definition": "Verify_Prepared_By_is__(string preparedBy)"
        },
        "verifyrowwasrequestedbyforistitledhasastatusof()": {
          "definition": "Verify_row_was_requested_by_for_is_titled_has_a_status_of(int rowNumber, string requestedBy, string requestedFor, string courseTitle, LessonPlanRequestStatus status)"
        },
        "considerrowoftheunapprovedlist()": {
          "definition": "Consider_row__of_the_unapproved_list(int rowNumber)"
        },
        "verifyusernavigatedtoeditcurrentlessonplan()": {
          "definition": "Verify_user_navigated_to_edit_current_lesson_plan()"
        },
        "verifylessonplanisnotactive()": {
          "definition": "Verify_lesson_plan_is_not_active()"
        },
        "verifythatthemoremenumakeinactiveisvisible()": {
          "definition": "Verify_that_the_More_menu_make_inactive_is_visible()"
        },
        "verifyeffectivedateis()": {
          "definition": "Verify_Effective_Date_is__(DateTime effectiveDate)"
        },
        "verifytherearelessonplansintheapprovedlist()": {
          "definition": "Verify_there_are__lesson_plans_in_the_approved_list(int expectedNumberOfPlans)"
        },
        "verifyreasonis()": {
          "definition": "Verify_Reason_is__(string reason)"
        },
        "verifytherearelessonplanrequestsintheunapprovedlist()": {
          "definition": "Verify_there_are__lesson_plan_requests_in_the_unapproved_list(int expectedNumberOfRequests)"
        },
        "verifyusernavigatedtorequestlessonplanapproval()": {
          "definition": "Verify_user__navigated_to_request_lesson_plan_approval(string wasWasNotString)"
        },
        "verifyreasonisblank()": {
          "definition": "Verify_Reason_is_blank()"
        },
        "verifythatthemoremenumakeactiveisnotvisible()": {
          "definition": "Verify_that_the_More_menu_make_active_is_not_visible()"
        },
        "verifyusernavigatedtoeditnewversionoflessonplan()": {
          "definition": "Verify_user_navigated_to_edit_new_version_of_lesson_plan()"
        },
        "verifystatusis()": {
          "definition": "Verify_Status_is__(string status)"
        },
        "verifyrowwasrequestedbyforistitledwassubmittedonwithaneffectivedateofandhasastatusof()": {
          "definition": "VerifyRowWasRequestedByForIsTitledWasSubmittedOnWithAnEffectiveDateOfAndHasAStatusOf(int rowNumber, string requestedBy, string requestedFor, string courseTitle, string submitted, DateTime? effectiveDate, LessonPlanRequestStatus status)"
        },
        "navigatetoviewlessonplanrequest()": {
          "definition": "NavigateToViewLessonPlanRequest(int lessonPlanID)"
        },
        "navigatetorequestlessonplanapproval()": {
          "definition": "NavigateToRequestLessonPlanApproval()"
        },
        "verifythereislessonplanintheapprovedlist()": {
          "definition": "Verify_there_is__lesson_plan_in_the_approved_list(int expectedNumberOfPlans)"
        },
        "verifynavigatetocreateclassfromlessonplan()": {
          "definition": "Verify__navigate_to_Create_Class_from_Lesson_Plan(string didDidNot)"
        },
        "navigatetoviewlessonplan()": {
          "definition": "NavigateToViewLessonPlan(int lessonPlanID)"
        },
        "clickdelete()": {
          "definition": "Click_Delete()"
        },
        "clickeditlessonplanbuttonforcurrentrow()": {
          "definition": "Click_Edit_Lesson_Plan_button_for_current_row()"
        },
        "verifythatthemoremenudeleteisnotvisible()": {
          "definition": "Verify_that_the_More_menu_delete_is_not_visible()"
        },
        "verifyapprovedis()": {
          "definition": "Verify_Approved_is__(string approvedDate)"
        },
        "verifylessonplanisactive()": {
          "definition": "Verify_lesson_plan_is_active()"
        },
        "bindlessonplanrequests()": {
          "definition": "BindLessonPlanRequests(IList<PortalLessonPlanListItemDTO> lessonPlanRequests)"
        },
        "verifythatthemoremenumakeactiveisvisible()": {
          "definition": "Verify_that_the_More_menu_make_active_is_visible()"
        },
        "considerrowoftheapprovedlist()": {
          "definition": "Consider_row__of_the_approved_list(int rowNumber)"
        },
        "clickeditapprovedlessonplan()": {
          "definition": "Click_edit_approved_lesson_plan()"
        },
        "verifynavigatetoviewlessonplanrequest()": {
          "definition": "Verify__navigate_to_View_Lesson_Plan_Request(string didDidNot)"
        },
        "clickactivate()": {
          "definition": "Click_Activate()"
        },
        "showlessonplanalertmessage()": {
          "definition": "ShowLessonPlanAlertMessage(string title, string message, string details)"
        },
        "promptuserwithdeleteconfirmation()": {
          "definition": "PromptUserWithDeleteConfirmation(int lessonPlanID)"
        },
        "navigatetoeditlessonplan()": {
          "definition": "NavigateToEditLessonPlan( int lessonPlanID )"
        },
        "clickconfirmdeletewithreason()": {
          "definition": "Click_Confirm_Delete_with_reason__(string reason)"
        },
        "verifythatthemoremenudeleteisvisible()": {
          "definition": "Verify_that_the_More_menu_delete_is_visible()"
        },
        "verifytrainingcannotbereportedagainstlessonplan()": {
          "definition": "Verify_training_cannot_be_reported_against_lesson_plan()"
        },
        "verifyrequestedforis()": {
          "definition": "Verify_Requested_For_is__(string requestedFor)"
        },
        "verifythatthemoremenumakeinactiveisnotvisible()": {
          "definition": "Verify_that_the_More_menu_make_inactive_is_not_visible()"
        },
        "bindapprovedlessonplans()": {
          "definition": "BindApprovedLessonPlans(IList<PortalLessonPlanListItemDTO> approvedLessonPlans)"
        },
        "verifytrainingcanbereportedagainstlessonplan()": {
          "definition": "Verify_training_can_be_reported_against_lesson_plan()"
        },
        "verifyusernavigatedtoviewlessonplan()": {
          "definition": "Verify_user__navigated_to_view_lesson_plan__(string wasWasNotString, string lessonPlanCourseTitle)"
        },
        "clickinactivate()": {
          "definition": "Click_Inactivate()"
        },
        "verifyrowwasrequestedbyforistitledwassubmittedonandhasastatusof()": {
          "definition": "Verify_row__was_requested_by__for__is_titled__was_submitted_on__and_has_a_status_of__(int rowNumber, string requestedBy, string requestedFor, string courseTitle, string submitted, LessonPlanRequestStatus status)"
        },
        "verifythereislessonplanrequestintheunapprovedlist()": {
          "definition": "Verify_there_is__lesson_plan_request_in_the_unapproved_list(int expectedNumberOfRequests)"
        },
        "navigatetocreateclassfromlessonplan()": {
          "definition": "NavigateToCreateClassFromLessonPlan(int lessonPlanID, DateTime startDate, DateTime endDate)"
        },
        "verifyrequestedbyis()": {
          "definition": "Verify_Requested_By_is__(string requestedBy)"
        },
        "verifycoursetitleis()": {
          "definition": "Verify_Course_Title_is__(string courseTitle)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalLessonPlanListWorkflow"
    },
    "accountingapi": {
      "namespace": "",
      "methods": {
        "verifyinvoiceableitemperiodendisnull()": {
          "definition": "Verify_invoiceable_item_PeriodEnd_is_null()"
        },
        "getinvoiceableitems()": {
          "definition": "Get_Invoiceable_Items()"
        },
        "verifyinvoiceableitemeventis()": {
          "definition": "Verify_invoiceable_item_Event_is__(string expected)"
        },
        "verifycancellationitemis()": {
          "definition": "Verify_cancellation_item_is(string expected)"
        },
        "dispose()": {
          "definition": "Dispose()"
        },
        "verifythereareinvoiceableitems()": {
          "definition": "Verify_there_are__Invoiceable_Items(int count)"
        },
        "getcancellations()": {
          "definition": "Get_Cancellations()"
        },
        "verifycancellationdateis()": {
          "definition": "Verify_cancellation_date_is__(DateTime expected)"
        },
        "verifycancellationdescriptionis()": {
          "definition": "Verify_cancellation_description_is__(string expected)"
        },
        "verifyinvoiceableitemusageisblank()": {
          "definition": "Verify_invoiceable_item_Usage_is_blank()"
        },
        "verifycancellationperiodstartisblank()": {
          "definition": "Verify_cancellation_period_start_is_blank()"
        },
        "verifycancellationbilldateis()": {
          "definition": "Verify_cancellation_bill_date_is__(DateTime expected)"
        },
        "beginverifyinginvoiceableitem()": {
          "definition": "Begin_verifying_invoiceable_item__(int position)"
        },
        "verifycancellationeventis()": {
          "definition": "Verify_cancellation_event_is__(string expected)"
        },
        "verifyinvoiceableitembilltois()": {
          "definition": "Verify_invoiceable_item_BillTo_is__(string expected)"
        },
        "verifyinvoiceableitemperiodstartisnull()": {
          "definition": "Verify_invoiceable_item_PeriodStart_is_null()"
        },
        "verifycancellationcategoryis()": {
          "definition": "Verify_cancellation_category_is__(BillingCategory expected)"
        },
        "verifycancellationamountis()": {
          "definition": "Verify_cancellation_amount_is__(decimal expected)"
        },
        "verifyinvoiceableitembilltoidisgreaterthanzero()": {
          "definition": "Verify_invoiceable_item_BillToID_is_greater_than_zero()"
        },
        "verifyinvoiceableitemperiodstartisdaysfromtoday()": {
          "definition": "Verify_invoiceable_item_PeriodStart_is__days_from_today(int offset)"
        },
        "verifycancellationbillforis()": {
          "definition": "Verify_cancellation_bill_for_is__(string expected)"
        },
        "verifycancellationbilltois()": {
          "definition": "Verify_cancellation_bill_to_is__(string expected)"
        },
        "verifycancellationquantityis()": {
          "definition": "Verify_cancellation_quantity_is__(int expected)"
        },
        "verifycancellationunitpriceis()": {
          "definition": "Verify_cancellation_unit_price_is(decimal expected)"
        },
        "verifyinvoiceableitemitemis()": {
          "definition": "Verify_invoiceable_item_Item_is__(string expected)"
        },
        "verifytherearecancellations()": {
          "definition": "Verify_there_are__cancellations(int count)"
        },
        "verifyinvoiceableitemamountis()": {
          "definition": "Verify_invoiceable_item_Amount_is__(decimal expected)"
        },
        "verifycancellationreasonis()": {
          "definition": "Verify_cancellation_reason_is__(string expected)"
        },
        "verifyinvoiceableitembillforis()": {
          "definition": "Verify_invoiceable_item_BillFor_is__(string expected)"
        },
        "beginverifyingcancellationitem()": {
          "definition": "Begin_verifying_cancellation_item__(int position)"
        },
        "verifycancellationusageisblank()": {
          "definition": "Verify_cancellation_usage_is_blank()"
        },
        "verifyinvoiceableitemcreationdateis()": {
          "definition": "Verify_invoiceable_item_CreationDate_is__(DateTime creationDate)"
        },
        "verifyinvoiceableitemusageis()": {
          "definition": "Verify_invoiceable_item_Usage_is__(string expected)"
        },
        "verifyinvoiceableitemperiodendisdaysfromtoday()": {
          "definition": "Verify_invoiceable_item_PeriodEnd_is__days_from_today(int offset)"
        },
        "verifyinvoiceableitemcreationdateistoday()": {
          "definition": "Verify_invoiceable_item_CreationDate_is_today()"
        },
        "verifycancellationperiodendisblank()": {
          "definition": "Verify_cancellation_period_end_is_blank()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "AccountingApiWorkflow"
    },
    "forecastingdashboard": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ForecastingDashboardWorkflow"
    },
    "inventorysearchresults": {
      "namespace": "",
      "methods": {
        "writeexport()": {
          "definition": "WriteExport(string export)"
        },
        "returntosearchcriteriascreen()": {
          "definition": "ReturnToSearchCriteriaScreen()"
        },
        "verifysearchfoundtotalresults()": {
          "definition": "Verify_search_found__total_results(int expectedNumberOfResults)"
        },
        "selectresultforexport()": {
          "definition": "Select_result__for_export(int rowNum)"
        },
        "selectallrowsforexport()": {
          "definition": "Select_all_rows_for_export()"
        },
        "verifyrowresourceidisnotblank()": {
          "definition": "Verify_row__Resource_ID_is_not_blank(int row)"
        },
        "verifymatchesregex()": {
          "definition": "Verify__matches_regex__(string exportColumn, string regex)"
        },
        "verifyis()": {
          "definition": "Verify__is__(string exportColumn, string expectedValue)"
        },
        "browsetosearchresults()": {
          "definition": "Browse_to_search_results()"
        },
        "bindsearchresults()": {
          "definition": "BindSearchResults(PagedResultDTO<InventorySearchResultDTO> results)"
        },
        "verifythatmorethanresultswerefound()": {
          "definition": "Verify_that_more_than__results_were_found(int count)"
        },
        "verifyrowtypeis()": {
          "definition": "Verify_row__type_is__(int row, string itemType)"
        },
        "verifyrowschedulingnameis()": {
          "definition": "Verify_row__scheduling_name_is__(int row, string schedulingName)"
        },
        "sortby()": {
          "definition": "Sort_by____(InventorySearchSortColumn column, string ascendingDescending)"
        },
        "verifyrowswereexported()": {
          "definition": "Verify__rows_were_exported(int count)"
        },
        "verifyrownameis()": {
          "definition": "Verify_row__Name_is__(int row, string name)"
        },
        "verifyrowidentifyingnumberis()": {
          "definition": "Verify_row__identifying_number_is__(int row, string expectedIdentifyingNumber)"
        },
        "verifycolumnsexistintheexport()": {
          "definition": "Verify__columns_exist_in_the_export(int count)"
        },
        "verifyrowowneris()": {
          "definition": "Verify_row_owner_is__(int row, string owner)"
        },
        "exportselectedresults()": {
          "definition": "Export_selected_results()"
        },
        "beginverifyingrow()": {
          "definition": "Begin_verifying_row__(int exportRow)"
        },
        "exportall()": {
          "definition": "Export_all()"
        },
        "verifyrowassignedtois()": {
          "definition": "Verify_row__assigned_to_is__(int row, string assignedTo)"
        },
        "setallidsinsearchresults()": {
          "definition": "SetAllIdsInSearchResults(IEnumerable<int> allIds)"
        },
        "verifyisblank()": {
          "definition": "Verify__is_blank(string exportColumn)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "InventorySearchResults"
    },
    "wisconsincustomviews": {
      "namespace": "",
      "methods": {
        "setexternalidofcountyto()": {
          "definition": "Set_external_id_of_county_to(string stateName, string countyName, int externalId)"
        },
        "getdatafromagencyview()": {
          "definition": "Get_data_from_agency_view()"
        },
        "getdatafromemployeeview()": {
          "definition": "Get_data_from_employee_view()"
        },
        "changesystemitemnamedsetdescriptionto()": {
          "definition": "Change_system_item_named_set_description_to(LookupType lookupType, string name, string description)"
        },
        "recordcurrentdataasbaseline()": {
          "definition": "Record_current_data_as_baseline()"
        },
        "getdatafromemploymentsummaryview()": {
          "definition": "Get_data_from_employment_summary_view()"
        },
        "getdatafromcodetableview()": {
          "definition": "Get_data_from_code_table_view()"
        },
        "verifyviewhasarowcountequaltorowcountminus()": {
          "definition": "Verify_view__has_a_row_count_equal_to__row_count_minus__(string view, string table, int difference)"
        },
        "getdatafromcertificationhistoryview()": {
          "definition": "Get_data_from_certification_history_view()"
        }
      },
      "parent-name": "CustomerViewWorkflowBase",
      "class-name": "WisconsinCustomViews"
    },
    "webformaddeditwizardfinish": {
      "namespace": "",
      "methods": {
        "verifythatnoconfirmationemailhasbeensetupbutonecouldbe()": {
          "definition": "Verify_that_no_confirmation_email_has_been_set_up_but_one_could_be()"
        },
        "navigateback()": {
          "definition": "NavigateBack()"
        },
        "verifyuserwasshowntheresponseemaildialog()": {
          "definition": "Verify_user_was_shown_the_response_email_dialog()"
        },
        "verifythattheselectedtoaddressis()": {
          "definition": "Verify_that_the_Selected_To_Address_is__(string selectedToAddress)"
        },
        "selectfromtheccfieldlist()": {
          "definition": "Select__from_the_CC_field_list(string ccField)"
        },
        "clickremoveemail()": {
          "definition": "Click_Remove_Email()"
        },
        "verifythatthespecificbccaddressis()": {
          "definition": "Verify_that_the_Specific_BCC_Address_is__(string specificBccAddresses)"
        },
        "setreplytoemailaddressto()": {
          "definition": "Set_Reply_To_Email_Address_to__(string replyToEmailAddress)"
        },
        "clickfinishlater()": {
          "definition": "Click_Finish_Later()"
        },
        "verifyaconfirmationemailhasbeensetupbutisnolongervalidandcannotbefixedbecausetherearenoemailfieldsontheform()": {
          "definition": "Verify_a_confirmation_email_has_been_set_up_but_is_no_longer_valid_and_cannot_be_fixed_because_there_are_no_email_fields_on_the_form()"
        },
        "verifythatthereplytoemailaddressis()": {
          "definition": "Verify_that_the_Reply_To_Email_Address_is__(string replyToEmailAddress)"
        },
        "verifythatthemessagebodyis()": {
          "definition": "Verify_that_the_Message_Body_is__(string messageBody)"
        },
        "enterforconfirmationtext()": {
          "definition": "Enter__for_Confirmation_Text(string text)"
        },
        "setsenderemailaddressto()": {
          "definition": "Set_Sender_Email_Address_to__(string senderEmailAddress)"
        },
        "verifyconfirmationtextis()": {
          "definition": "Verify_Confirmation_Text_is__(string text)"
        },
        "navigatetowebformlist()": {
          "definition": "NavigateToWebFormList()"
        },
        "clickpublishonthepublishdialog()": {
          "definition": "Click_Publish_on_the_Publish_Dialog()"
        },
        "verifythatthespecificccaddressis()": {
          "definition": "Verify_that_the_Specific_CC_Address_is__(string specificCcAddresses)"
        },
        "selectfromthetofieldlist()": {
          "definition": "Select__from_the_To_field_list(string toField)"
        },
        "verifythatnoconfirmationemailhasbeensetupandcannotbebecausetherearenoemailfieldsontheform()": {
          "definition": "Verify_that_no_confirmation_email_has_been_set_up_and_cannot_be_because_there_are_no_email_fields_on_the_form()"
        },
        "verifythattheselectedbccaddressis()": {
          "definition": "Verify_that_the_Selected_BCC_Address_is__(string selectedBccAddress)"
        },
        "verifythatthesendernameis()": {
          "definition": "Verify_that_the_Sender_Name_is__(string senderName)"
        },
        "verifythattheiteminthebccfieldlistis()": {
          "definition": "Verify_that_the__item_in_the_BCC_field_list_is__(string ordinal, string value)"
        },
        "showconfirmationemaildialog()": {
          "definition": "ShowConfirmationEmailDialog()"
        },
        "verifythatthetofieldlisthasitems()": {
          "definition": "Verify_that_the_To_field_list_has__items(int toFieldCount)"
        },
        "clickback()": {
          "definition": "Click_Back()"
        },
        "clickchangeemail()": {
          "definition": "Click_Change_Email()"
        },
        "verifythattheccfieldlisthasitems()": {
          "definition": "Verify_that_the_CC_field_list_has__items(int ccFieldCount)"
        },
        "verifyaconfirmationemailhasbeensetupbutisnolongervalidthoughitcouldbefixed()": {
          "definition": "Verify_a_confirmation_email_has_been_set_up_but_is_no_longer_valid_though_it_could_be_fixed()"
        },
        "verifythatthesubjectis()": {
          "definition": "Verify_that_the_Subject_is__(string subject)"
        },
        "clickaddemail()": {
          "definition": "Click_Add_Email()"
        },
        "verifythatthesenderemailaddressis()": {
          "definition": "Verify_that_the_Sender_Email_Address_is__(string senderEmailAddress)"
        },
        "showpublishdialog()": {
          "definition": "ShowPublishDialog()"
        },
        "clickcancelonresponseemaildialog()": {
          "definition": "Click_Cancel_on_response_email_dialog()"
        },
        "clickdoneonresponseemaildialog()": {
          "definition": "Click_Done_on_response_email_dialog()"
        },
        "setspecificccaddressesto()": {
          "definition": "Set_Specific_CC_Addresses_to__(string specificCcAddresses)"
        },
        "setspecificbccaddressesto()": {
          "definition": "Set_Specific_BCC_Addresses_to__(string specificBccAddresses)"
        },
        "verifyusernavigatedtothewebformlist()": {
          "definition": "Verify_user_navigated_to_the_WebForm_list()"
        },
        "clickpublish()": {
          "definition": "Click_Publish()"
        },
        "verifythatthebccfieldlisthasitems()": {
          "definition": "Verify_that_the_BCC_field_list_has__items(int bccFieldCount)"
        },
        "verifythattheitemintheccfieldlistis()": {
          "definition": "Verify_that_the__item_in_the_CC_field_list_is__(string ordinal, string value)"
        },
        "verifythattheemaildialogwasclosed()": {
          "definition": "Verify_that_the_Email_dialog_was_closed()"
        },
        "setmessagebodyto()": {
          "definition": "Set_Message_Body_to__(string messageBody)"
        },
        "verifythattheselectedccaddressis()": {
          "definition": "Verify_that_the_Selected_CC_Address_is__(string selectedCcAddress)"
        },
        "verifyusernavigatedtopreviouspage()": {
          "definition": "Verify_user_navigated_to_previous_page()"
        },
        "verifyaconfirmationemailhasbeensetupandisvalid()": {
          "definition": "Verify_a_confirmation_email_has_been_set_up_and_is_valid()"
        },
        "setsendernameto()": {
          "definition": "Set_Sender_Name_to__(string senderName)"
        },
        "browsetopageforwebformversion()": {
          "definition": "Browse_to_page_for_WebForm__version__(string formName, int versionNumber)"
        },
        "verifythattheiteminthetofieldlistis()": {
          "definition": "Verify_that_the__item_in_the_To_field_list_is__(string ordinal, string value)"
        },
        "selectfromthebccfieldlist()": {
          "definition": "Select__from_the_BCC_field_list(string bccField)"
        },
        "setsubjectto()": {
          "definition": "Set_Subject_to__(string subject)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "WebFormAddEditWizardFinishWorkflow"
    },
    "usagestatistics": {
      "namespace": "",
      "methods": {
        "browsetousagestatisticsreportforyear()": {
          "definition": "Browse_to_usage_statistics_report_for_year__(int year)"
        },
        "bindtimeframes()": {
          "definition": "BindTimeframes(List<int> timeframes)"
        },
        "browsetousagestatisticsreportforcurrentyeartocurrentyearplus()": {
          "definition": "Browse_to_usage_statistics_report_for_current_year_to_current_year_plus__(int value)"
        },
        "verifyvalueforusagestatformonthandyearisnull()": {
          "definition": "Verify_value_for_usage_stat__for_month__and_year__is_null(string description, string month, int year)"
        },
        "verifytotalforusagestatforyearisbaselineplus()": {
          "definition": "Verify_total_for_usage_stat__for_year__is_baseline_plus__(string description, int year, int total)"
        },
        "verifyvalueforusagestatforcurrentmonthandcurrentyearisbaselineplus()": {
          "definition": "Verify_value_for_usage_stat__for_current_month_and_current_year_is_baseline_plus__(string description, int value)"
        },
        "verifytotalforusagestatforcurrentyearis()": {
          "definition": "Verify_total_for_usage_stat__for_current_year_is__(string description, string total)"
        },
        "verifyvalueforusagestatforcurrentmonthandcurrentyearisnull()": {
          "definition": "Verify_value_for_usage_stat__for_current_month_and_current_year_is_null(string description)"
        },
        "verifytotalforusagestatforcurrentyearisbaselineplus()": {
          "definition": "Verify_total_for_usage_stat__for_current_year_is_baseline_plus__(string description, int total)"
        },
        "bindstats()": {
          "definition": "BindStats(List<UsageStatisticYearDTO> dtos)"
        },
        "browsetousagestatisticsreportforyearsto()": {
          "definition": "Browse_to_usage_statistics_report_for_years__to__(int startYear, int endYear)"
        },
        "browsetousagestatisticsreportforcurrentyear()": {
          "definition": "Browse_to_usage_statistics_report_for_current_year()"
        },
        "changetimeframetocalendaryear()": {
          "definition": "Change_timeframe_to_calendar_year__(int year)"
        },
        "verifyusagestatisincategory()": {
          "definition": "Verify_usage_stat__is_in_category__(string description, string category)"
        },
        "verifythereareusagestatsforcurrentyear()": {
          "definition": "Verify_there_are__usage_stats_for_current_year(int numStats)"
        },
        "changetimeframetocurrentcalendaryearplus()": {
          "definition": "Change_timeframe_to_current_calendar_year_plus__(int value)"
        },
        "verifyvalueforusagestatformonthandyearisbaselineplus()": {
          "definition": "Verify_value_for_usage_stat__for_month__and_year__is_baseline_plus__(string description, string month, int year, int value)"
        },
        "verifythereareusagestatsforyear()": {
          "definition": "Verify_there_are__usage_stats_for_year__(int numStats, int year)"
        },
        "verifytotalforusagestatforyearis()": {
          "definition": "Verify_total_for_usage_stat__for_year__is__(string description, int year, string total)"
        },
        "verifyusagestatatindexis()": {
          "definition": "Verify_usage_stat_at_index__is__(int index, string description)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "UsageStatisticsWorkflow"
    },
    "documentaddeditcontrol": {
      "namespace": "",
      "methods": {
        "verifyfilenameis()": {
          "definition": "Verify_filename_is__(string filename)"
        },
        "verifyuploadfailedbecauseoffilelargerthanmb()": {
          "definition": "Verify_upload_failed_because_of_file_larger_than__MB(int maxSize)"
        },
        "teardown()": {
          "definition": "TearDown()"
        },
        "verifyuploadfailedbecauseofinvalidfileextension()": {
          "definition": "Verify_upload_failed_because_of_invalid_file_extension()"
        },
        "verifycannotchangeuploadedfile()": {
          "definition": "Verify_cannot_change_uploaded_file()"
        },
        "setfilevalidation()": {
          "definition": "SetFileValidation(bool validExtension)"
        },
        "verifyportalviewingoptionsarenotvisible()": {
          "definition": "Verify_portal_viewing_options_are_not_visible()"
        },
        "markfileascontainingsensitivedata()": {
          "definition": "Mark_file_as_containing_sensitive_data()"
        },
        "verifycannotchangeprotectionlevel()": {
          "definition": "Verify_cannot_change_protection_level()"
        },
        "verifycanuploadnewfile()": {
          "definition": "Verify_can_upload_new_file()"
        },
        "verifydescriptionis()": {
          "definition": "Verify_description_is__(string descr)"
        },
        "enterdescription()": {
          "definition": "Enter_description__(string fileDescription)"
        },
        "select()": {
          "definition": "Select__(string filename)"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "viewablebycurrentstudentsinportaloptionisnotvisible()": {
          "definition": "Viewable_by_current_students_in_portal_option_is_not_visible()"
        },
        "verifyportalviewingoptionsarevisible()": {
          "definition": "Verify_portal_viewing_options_are_visible()"
        },
        "viewablebyprospectivestudentsinportaloptionisnotvisible()": {
          "definition": "Viewable_by_prospective_students_in_portal_option_is_not_visible()"
        },
        "verifysavecompletedandredirectedtopreviouspage()": {
          "definition": "Verify_save_completed_and_redirected_to_previous_page()"
        },
        "verifycanchangeprotectionlevel()": {
          "definition": "Verify_can_change_protection_level()"
        },
        "notifydocumentuploaded()": {
          "definition": "NotifyDocumentUploaded(int docToHighlight)"
        },
        "clicktochangefile()": {
          "definition": "Click_to_change_file()"
        },
        "verifycanchangeuploadedfile()": {
          "definition": "Verify_can_change_uploaded_file()"
        },
        "viewablebyprospectivestudentsinportaloptionisvisible()": {
          "definition": "Viewable_by_prospective_students_in_portal_option_is_visible()"
        },
        "unmarkfileascontainingsensitivedata()": {
          "definition": "Unmark_file_as_containing_sensitive_data()"
        },
        "verifyuploadfailedbecauseofmissingfile()": {
          "definition": "Verify_upload_failed_because_of_missing_file()"
        },
        "viewablebycurrentstudentsinportaloptionisvisible()": {
          "definition": "Viewable_by_current_students_in_portal_option_is_visible()"
        }
      },
      "parent-name": "MVBaseControlWorkflow",
      "class-name": "DocumentAddEditControlWorkflow"
    },
    "lessonplanreadonly": {
      "namespace": "",
      "methods": {
        "verifyislistedasaninstructorwithacademyidandprimaryorganizationandroleandhours()": {
          "definition": "Verify__is_listed_as_an_instructor_with_Academy_ID__and_Primary_Organization__and_role__and__hours(string personName, string academyId, string orgName, string roleName, decimal hours)"
        },
        "verifyexistsinlistwithdescription()": {
          "definition": "Verify__exists_in_list_with_description__(string fileName, string fileDescription)"
        },
        "verifycandeletedocuments()": {
          "definition": "Verify_can_delete_documents()"
        },
        "verifycannotdeletedocuments()": {
          "definition": "Verify_cannot_delete_documents()"
        },
        "verifyisnotprotected()": {
          "definition": "Verify__is_not_protected(string fileName)"
        },
        "bindinstructors()": {
          "definition": "BindInstructors(IEnumerable<TrainingEventInstructorDTO> dtos)"
        },
        "verifycanbeedited()": {
          "definition": "Verify__can_be_edited(string fileName)"
        },
        "verifycannotadddocument()": {
          "definition": "Verify_cannot_add_document()"
        },
        "verifycannotbeedited()": {
          "definition": "Verify__cannot_be_edited(string fileName)"
        },
        "verifycanbeopenedforviewing()": {
          "definition": "Verify__can_be_opened_for_viewing(string fileName)"
        },
        "verifythereareinstructorslisted()": {
          "definition": "Verify_there_are__instructors_listed(int count)"
        },
        "verifycanadddocument()": {
          "definition": "Verify_can_add_document()"
        },
        "verifytherearedocumentsinthelist()": {
          "definition": "Verify_there_are__documents_in_the_list(int count)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "LessonPlanReadonlyWorkflow"
    },
    "webformlist": {
      "namespace": "",
      "methods": {
        "navigatetoimportdata()": {
          "definition": "NavigateToImportData(int importJobID, int webFormVersionID)"
        },
        "verifywebformhasversions()": {
          "definition": "Verify_WebForm__has__versions(string webFormName, int numberOfVersions)"
        },
        "clickcloseforwebformversion()": {
          "definition": "Click_Close_for_webform__version__(string webFormName, int versionNumber)"
        },
        "verifyversionresumedatacollection()": {
          "definition": "Verify_version__resume_data_collection(string canCannot)"
        },
        "verifyusernavigatedtocollecteddataforwebformversion()": {
          "definition": "Verify_user_navigated_to_collected_data_for_webform__version__(string webFormName, int versionNumber)"
        },
        "clickadd()": {
          "definition": "Click_Add()"
        },
        "verifylistcontainswebformversion()": {
          "definition": "Verify_list_contains_WebForm__version__(string webFormName, int versionNumber)"
        },
        "showeditdialog()": {
          "definition": "ShowEditDialog(int webFormVersionID, WebFormEditDialogMode dialogMode)"
        },
        "verifywebformsarecurrentlybeingfilteredoutmessagedisplayed()": {
          "definition": "Verify_WebForms_are_currently_being_filtered_out_message__displayed(string isIsNotStr)"
        },
        "verifywebformmarkedpublic()": {
          "definition": "Verify_webform_marked_Public(string status)"
        },
        "verifycopydialogvisible()": {
          "definition": "Verify_Copy_dialog__visible(string isIsNot)"
        },
        "verifyuserhasnotnavigatedtoeditpage()": {
          "definition": "Verify_user_has_not_navigated_to_edit_page()"
        },
        "verifyeditdialogvisible()": {
          "definition": "Verify_Edit_dialog__visible(string isIsNot)"
        },
        "clickstopdatacollectionforwebformversion()": {
          "definition": "Click_stop_data_collection_for_webform__version__(string webFormName, int versionNumber)"
        },
        "clickcloseontheclosewebformdialog()": {
          "definition": "Click_Close_on_the_Close_WebForm_Dialog()"
        },
        "clickcopyforwebformversion()": {
          "definition": "Click_Copy_for_webform__version__(string webFormName, int versionNumber)"
        },
        "verifyusernavigatedtowebformcreationwizard()": {
          "definition": "Verify_user_navigated_to_webform_creation_wizard()"
        },
        "verifyversionstopdatacollection()": {
          "definition": "Verify_version__stop_data_collection(string canCannot)"
        },
        "verifydeletedialogshown()": {
          "definition": "Verify_delete_dialog__shown(string isIsNot)"
        },
        "verifyfilterforhideclosedwebformschecked()": {
          "definition": "Verify_filter_for_Hide_Closed_WebForms__checked(string isIsNotString)"
        },
        "applyfilters()": {
          "definition": "Apply_filters()"
        },
        "showdeletedialog()": {
          "definition": "ShowDeleteDialog(int webFormVersionID, string webformName, int versionNumber)"
        },
        "clickpublishonthepublishdialog()": {
          "definition": "Click_Publish_on_the_Publish_Dialog()"
        },
        "verifyversionbecopied()": {
          "definition": "Verify_version__be_Copied(string canCannot)"
        },
        "navigatetocollecteddata()": {
          "definition": "NavigateToCollectedData(int dataCollectorID)"
        },
        "verifyclosedialogvisible()": {
          "definition": "Verify_Close_dialog__visible(string isIsNot)"
        },
        "verifyversionbedeleted()": {
          "definition": "Verify_version__be_Deleted(string canCannot)"
        },
        "entertextforcopyname()": {
          "definition": "Enter_text__for_copy_name(string copyName)"
        },
        "verifywebformlistdisplayed()": {
          "definition": "Verify_WebForm_list__displayed(string isIsNotStr)"
        },
        "verifyversionbeclosed()": {
          "definition": "Verify_version__be_Closed(string canCannot)"
        },
        "verifyduplicatenamevalidationdisplayed()": {
          "definition": "Verify_duplicate_name_validation__displayed(string isIsNotDisplayed)"
        },
        "clickeditforwebformversion()": {
          "definition": "Click_Edit_for_webform__version__(string webFormName, int versionNumber)"
        },
        "clickback()": {
          "definition": "Click_Back()"
        },
        "verifywebformhasdescription()": {
          "definition": "Verify_webform_has_description__(string description)"
        },
        "clickviewdatacollectedforwebformversion()": {
          "definition": "Click_View_Data_Collected_for_webform__version__(string webFormName, int versionNumber)"
        },
        "verifyversionbepublished()": {
          "definition": "Verify_version__be_Published(string canCannot)"
        },
        "showclosedialog()": {
          "definition": "ShowCloseDialog(int webFormVersionID)"
        },
        "clickdeletethiswebformonthedeletedialogexpectingexception()": {
          "definition": "Click_Delete_This_WebForm__on_the_Delete_Dialog_expecting_exception__(string exceptionText)"
        },
        "clickdeletethiswebformonthedeletedialog()": {
          "definition": "Click_Delete_this_WebForm_on_the_Delete_Dialog()"
        },
        "verifywebformhasstatus()": {
          "definition": "Verify_webform_has_status_(WebFormStatus status)"
        },
        "clickdraftanewversiononthecopydialog()": {
          "definition": "Click_Draft_A_New_Version_on_the_Copy_Dialog()"
        },
        "clickcontinueeditingdraftontheeditdialog()": {
          "definition": "Click_Continue_Editing_Draft_on_the_Edit_Dialog()"
        },
        "navigatetoaddwebform()": {
          "definition": "NavigateToAddWebForm()"
        },
        "removebaselinewebforms()": {
          "definition": "Remove_baseline_webforms()"
        },
        "clickpublishforwebformversion()": {
          "definition": "Click_Publish_for_webform__version__(string webFormName, int versionNumber)"
        },
        "clickeditthiswebformonthecopydialog()": {
          "definition": "Click_Edit_this_WebForm_on_the_Copy_Dialog()"
        },
        "verifylistdoesnotcontainwebform()": {
          "definition": "Verify_list_does_not_contain_WebForm__(string webFormName)"
        },
        "showpublishdialog()": {
          "definition": "ShowPublishDialog(int webFormVersionID)"
        },
        "bindwebforms()": {
          "definition": "BindWebForms(IList<WebFormListItemDTO> webForms)"
        },
        "verifyversionhasstatus()": {
          "definition": "Verify_version_has_status_(string status)"
        },
        "clickresumedatacollectionforwebformversion()": {
          "definition": "Click_resume_data_collection_for_webform__version__(string webFormName, int versionNumber)"
        },
        "verifypublishdialogvisible()": {
          "definition": "Verify_Publish_dialog__visible(string isIsNot)"
        },
        "verifynowebformsexistmessagedisplayed()": {
          "definition": "Verify_no_WebForms_exist_message__displayed(string isIsNotStr)"
        },
        "verifylistdoesnotcontainwebformversion()": {
          "definition": "Verify_list_does_not_contain_WebForm__version__(string webFormName, int versionNumber)"
        },
        "clickcopythiswebformonthecopydialog()": {
          "definition": "Click_Copy_this_WebForm_on_the_Copy_Dialog()"
        },
        "showunabletodeletedialog()": {
          "definition": "ShowUnableToDeleteDialog(int webFormVersionID, string webformName, int versionNumber)"
        },
        "verifyusernavigatedtoeditwebformversion()": {
          "definition": "Verify_user_navigated_to_edit_webform__version__(string webFormName, int versionNumber)"
        },
        "clickimportforwebformversion()": {
          "definition": "Click_Import_for_webform__version__(string webFormName, int versionNumber)"
        },
        "clickdeleteforwebformversion()": {
          "definition": "Click_Delete_for_webform__version__(string webFormName, int versionNumber)"
        },
        "verifylistcontainswebforms()": {
          "definition": "Verify_list_contains__webforms(int numberOfWebForms)"
        },
        "verifyversionviewdatacollected()": {
          "definition": "Verify_version__view_data_collected(string canCannot)"
        },
        "verifyaddbuttonvisible()": {
          "definition": "Verify_Add_button__visible(string isIsNotVisibleStr)"
        },
        "verifyversionbeedited()": {
          "definition": "Verify_version__be_Edited(string canCannot)"
        },
        "checkhideclosedwebforms()": {
          "definition": "Check_Hide_Closed_WebForms()"
        },
        "navigatetoeditwebform()": {
          "definition": "NavigateToEditWebForm(int webFormVersionID)"
        },
        "navigatetodashboard()": {
          "definition": "NavigateToDashboard()"
        },
        "clickdraftanewversionontheeditdialog()": {
          "definition": "Click_Draft_A_New_Version_on_the_Edit_Dialog()"
        },
        "verifyunabletodeletedialogshown()": {
          "definition": "Verify_unable_to_delete_dialog__shown(string isIsNot)"
        },
        "uncheckhideclosedwebforms()": {
          "definition": "Uncheck_Hide_Closed_WebForms()"
        },
        "verifyusernavigatedtodashboard()": {
          "definition": "Verify_user_navigated_to_dashboard()"
        },
        "showcopydialog()": {
          "definition": "ShowCopyDialog(int webFormVersionID, string name, bool nameIsValid, WebFormCopyDialogMode dialogMode)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "WebFormListWorkflow"
    },
    "addoreditcertificationapplication": {
      "namespace": "",
      "methods": {
        "verifydocumentsareattachedtothecertificationrequirement()": {
          "definition": "Verify_documents_are_attached_to_the_certification_requirement(int numAttached)"
        },
        "setapplicationdateto()": {
          "definition": "Set_application_date_to__(string appDate)"
        },
        "setdateofbirthto()": {
          "definition": "Set_date_of_birth_to__(DateTime dob)"
        },
        "verifytrainingisselected()": {
          "definition": "Verify_training__is_selected(string trainingName)"
        },
        "checkthecheckbox()": {
          "definition": "Check_the_checkbox()"
        },
        "verifyemploymentisnotselected()": {
          "definition": "Verify_employment__is_not_selected(string employmentOrgName)"
        },
        "verifycanuploadnewdocument()": {
          "definition": "Verify_can_upload_new_document()"
        },
        "browsetoeditapplicationfromorganization()": {
          "definition": "Browse_to_edit____application_from_organization__(string certName, string appType, string orgName)"
        },
        "clickcontinuetocompleteapproval()": {
          "definition": "Click_Continue_to_complete_approval()"
        },
        "verifycommentis()": {
          "definition": "Verify_comment_is(string comment)"
        },
        "verifynoemploymentisselected()": {
          "definition": "Verify_no_employment_is_selected()"
        },
        "verifydateofbirthcanbeedited()": {
          "definition": "Verify_date_of_birth_can_be_edited()"
        },
        "verifyisrequired()": {
          "definition": "Verify_is_required(string requirementText)"
        },
        "verifyemploymentisselected()": {
          "definition": "Verify_employment__is_selected(string employmentOrgName)"
        },
        "verifycreatingnewapplication()": {
          "definition": "Verify_creating_new_application()"
        },
        "clickcontinueonalerttosave()": {
          "definition": "Click_Continue_on_alert_to_save()"
        },
        "clickapprove()": {
          "definition": "Click_Approve()"
        },
        "verifyexpirationdateinapprovalinformationis()": {
          "definition": "Verify_expiration_date_in_approval_information_is__(DateTime expDate)"
        },
        "verifytrainingrecordsareloadedandtherearerecords()": {
          "definition": "Verify_training_records_are_loaded_and_there_are__records(int numRecords)"
        },
        "verifycheckboxischecked()": {
          "definition": "Verify_checkbox_is_checked()"
        },
        "verifycertificationissuedexpiresandcurrentstatusisinlistofexistingcertifications()": {
          "definition": "Verify_certification__issued__expires__and_current_status__is_in_list_of_existing_certifications(string certName, DateTime issueDate, DateTime expiration, string statusName)"
        },
        "verifycheckboxisnotchecked()": {
          "definition": "Verify_checkbox_is_not_checked()"
        },
        "verifythereareoptionsdisplayed()": {
          "definition": "Verify_there_are__options_displayed(int numOptions)"
        },
        "verifyrequirementisfulfilledbywithfulfillmentofanddateof()": {
          "definition": "Verify__requirement__is_Fulfilled_by__with_fulfillment_of__and_date_of__(string category, string reqText, string fulfiller, string fulfillmentText, DateTime fulfillmentDate)"
        },
        "verifytrainingcannotbeselected()": {
          "definition": "Verify_training__cannot_be_selected(string className)"
        },
        "verifystatuschangeconfirmationisvisible()": {
          "definition": "Verify_status_change_confirmation_is_visible()"
        },
        "verifytherearenoinstructions()": {
          "definition": "Verify_there_are_no_instructions()"
        },
        "verifyexistingcertificationoptionisdisabled()": {
          "definition": "Verify_existing_certification_option_is_disabled()"
        },
        "verifyeffectivedateinapprovalinformationis()": {
          "definition": "Verify_effective_date_in_approval_information_is__(DateTime effDt)"
        },
        "verifydateofbirthcannotbeedited()": {
          "definition": "Verify_date_of_birth_cannot_be_edited()"
        },
        "selectwaivefulfillmentoptionwithcomment()": {
          "definition": "Select_waive_fulfillment_option_with_comment__(string comment)"
        },
        "clickcancel()": {
          "definition": "Click_Cancel()"
        },
        "verifynotrainingisselected()": {
          "definition": "Verify_no_training_is_selected()"
        },
        "verifytherearenorequirementsandheaderis()": {
          "definition": "Verify_there_are_no_requirements_and_header_is__(string title)"
        },
        "cancelrequirementupdate()": {
          "definition": "Cancel_requirement_update()"
        },
        "verifythereisnocomment()": {
          "definition": "Verify_there_is_no_comment()"
        },
        "uploadandselectnewfilewithdescriptionandclickdone()": {
          "definition": "Upload_and_select_new_file__with_description__and_click_Done(string fileName, string descr)"
        },
        "verifynorequirementtextisvisible()": {
          "definition": "Verify_no_requirement_text_is_visible()"
        },
        "clicktoattachdocument()": {
          "definition": "Click_to_attach_document()"
        },
        "seteffectivedateinapprovalinformationto()": {
          "definition": "Set_effective_date_in_approval_information_to__(DateTime effDt)"
        },
        "selectnewcertificationof()": {
          "definition": "Select_new_certification_of__(string selectedCertMasterVersionName)"
        },
        "verifyvehiclewithvinmakemodelyearhascertifications()": {
          "definition": "Verify_vehicle_with_VIN__make__model__year__has_certifications__(string vehicleName, string vin, string make, string model, string year, string certNames)"
        },
        "verifyquestiontextis()": {
          "definition": "Verify_question_text_is__(string questionText)"
        },
        "verifymultipleresponsesallowed()": {
          "definition": "Verify_multiple_responses_allowed()"
        },
        "verifyalertappearstellinguserthatsomeitemscanbeautofulfilledandarenot()": {
          "definition": "Verify_alert_appears_telling_user_that_some_items_can_be_autofulfilled_and_are_not()"
        },
        "verifymarkforprintingisnotavailableinapprovalinformation()": {
          "definition": "Verify_mark_for_printing_is_not_available_in_approval_information()"
        },
        "selectmultiplefulfillmentoptionofwaivewithcomment()": {
          "definition": "Select_multiple_fulfillment_option_of_waive_with_comment__(string comment)"
        },
        "clicktoupdaterequirement()": {
          "definition": "Click_to_Update__requirement__(string category, string reqText)"
        },
        "verifynooptionsselected()": {
          "definition": "Verify_no_options_selected()"
        },
        "verifyvehiclewithvinmakemodelyearhasnocertifications()": {
          "definition": "Verify_vehicle_with_VIN__make__model__year__has_no_certifications(string vehicleName, string vin, string make, string model, string year)"
        },
        "clickupdatedocumentation()": {
          "definition": "Click_Update_Documentation()"
        },
        "selecttrainingforfulfillment()": {
          "definition": "Select_training__for_fulfillment(string trainingName)"
        },
        "verifyadjudicatorcommentsare()": {
          "definition": "Verify_adjudicator_comments_are_(string comments)"
        },
        "verifyemployeewithacademyidhascertifications()": {
          "definition": "Verify_employee__with_Academy_ID__has_certifications__(string employeeName, string academyID, string certNames)"
        },
        "browsetonewcertificationapplicationfromperson()": {
          "definition": "Browse_to_New_Certification_Application_from_person__(string personName)"
        },
        "clickreturntoapplicationfromstatuschangeconfirmation()": {
          "definition": "Click_return_to_application_from_status_change_confirmation()"
        },
        "setstartupformissingcertselection()": {
          "definition": "SetStartupForMissingCertSelection()"
        },
        "bindissuedcertifications()": {
          "definition": "BindIssuedCertifications(List<IssuedCertificationListItemDTO> issuedCertifications)"
        },
        "browsetonewcertificationapplicationfromorganization()": {
          "definition": "Browse_to_New_Certification_Application_from_organization__(string orgName)"
        },
        "verifyoptionisnotselected()": {
          "definition": "Verify_option__is_not_selected(string optionText)"
        },
        "verifyvalidationfailsbecausenoselectedissuedcertification()": {
          "definition": "Verify_validation_fails_because_no_selected_issued_certification()"
        },
        "verifyfreeformansweris()": {
          "definition": "Verify_freeform_answer_is__(string answer)"
        },
        "selectcertificationforfulfillment()": {
          "definition": "Select_certification__for_fulfillment(string certName)"
        },
        "selectemployeeforfulfillment()": {
          "definition": "Select_employee__for_fulfillment(string employeeName)"
        },
        "clicksaveaspending()": {
          "definition": "Click_Save_as_Pending()"
        },
        "setapplicationdateinapprovalinformationto()": {
          "definition": "Set_application_date_in_approval_information_to__(DateTime effDt)"
        },
        "clicksaveasexpiredinstatuschangeconfirmation()": {
          "definition": "Click_save_as_expired_in_status_change_confirmation()"
        },
        "verifyissuedateinapprovalinformationis()": {
          "definition": "Verify_issue_date_in_approval_information_is__(DateTime issueDate)"
        },
        "verifycurrentexpirationdateinapprovalinformationis()": {
          "definition": "Verify_current_expiration_date_in_approval_information_is__(DateTime currExpDt)"
        },
        "clicksaveadjudicatorcomment()": {
          "definition": "Click_save_adjudicator_comment()"
        },
        "verifycertificationinapprovalinformationis()": {
          "definition": "Verify_certification_in_approval_information_is__(string certName)"
        },
        "verifyexpirationsyncisnotavailable()": {
          "definition": "Verify_expiration_sync_is_not_available()"
        },
        "clickcancelforadjudicatorcommentedit()": {
          "definition": "Click_cancel_for_adjudicator_comment_edit()"
        },
        "verifyexistingcertificationoptionisnotdisabled()": {
          "definition": "Verify_existing_certification_option_is_not_disabled()"
        },
        "verifyrequirementsarevisibleandheaderis()": {
          "definition": "Verify_requirements_are_visible_and_header_is__(string title)"
        },
        "setforeditmode()": {
          "definition": "SetForEditMode()"
        },
        "setapplicationdatetonull()": {
          "definition": "Set_application_date_to_null()"
        },
        "verifyrosterrecordsarenotloaded()": {
          "definition": "Verify_roster_records_are_not_loaded()"
        },
        "verifycertificationisnotinlistofexistingcertifications()": {
          "definition": "Verify_certification_is_not_in_list_of_existing_certifications(string certName)"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "verifycannotuploadnewdocument()": {
          "definition": "Verify_cannot_upload_new_document()"
        },
        "clickignorechanges()": {
          "definition": "Click_Ignore_Changes()"
        },
        "verifyexpirationdateinapprovalinformationisneverexpires()": {
          "definition": "Verify_expiration_date_in_approval_information_is_Never_Expires()"
        },
        "verifynewcertificationoptionisselected()": {
          "definition": "Verify_new_certification_option_is_selected()"
        },
        "verifyfreeformisdisplayed()": {
          "definition": "Verify_freeform_is_displayed()"
        },
        "verifyvalidationfaileddueto()": {
          "definition": "Verify_validation_failed_due_to__(string msg)"
        },
        "verifyoptionisselected()": {
          "definition": "Verify_option__is_selected(string optionText)"
        },
        "selectoption()": {
          "definition": "Select__option(string optionText)"
        },
        "verifyapplicationdateinapprovalinformationis()": {
          "definition": "Verify_application_date_in_approval_information_is__(DateTime applicationDate)"
        },
        "verifyemployeewithacademyidhasnocertifications()": {
          "definition": "Verify_employee__with_Academy_ID__has_no_certifications(string employeeName, string academyID)"
        },
        "selectrenewalof()": {
          "definition": "Select_renewal_of__(string certName)"
        },
        "verifytherearenoadjudicatorcomments()": {
          "definition": "Verify_there_are_no_adjudicator_comments()"
        },
        "verifycurrentstatusinapprovalinformationis()": {
          "definition": "Verify_current_status_in_approval_information_is__(string statusName)"
        },
        "verifyrequirementisautofulfilledbyacadissystemwithfulfillmentofanddateof()": {
          "definition": "Verify__requirement__is_AutoFulfilled_by_Acadis_System_with_fulfillment_of__and_date_of__(string category, string reqText, string fulfillmentText, DateTime fulfillmentDate)"
        },
        "verifytrainingisavailableforselection()": {
          "definition": "Verify_training__is_available_for_selection(string className)"
        },
        "verifyisavailabletoattach()": {
          "definition": "Verify__is_available_to_attach(string docFileName)"
        },
        "selectvehicleforfulfillment()": {
          "definition": "Select_vehicle__for_fulfillment(string vehicleName)"
        },
        "verifyinstructionsare()": {
          "definition": "Verify_instructions_are__(string expectedInstructions)"
        },
        "verifywaivefulfillmentoptionisselected()": {
          "definition": "Verify_waive_fulfillment_option_is_selected()"
        },
        "verifyothercertificationnumberinapprovalinformationis()": {
          "definition": "Verify_other_certification_number_in_approval_information_is__(string otherNum)"
        },
        "verifymultipleresponsesnotallowed()": {
          "definition": "Verify_multiple_responses_not_allowed()"
        },
        "verifyapprovalsuccesspopoverisvisible()": {
          "definition": "Verify_approval_success_popover_is_visible()"
        },
        "verifyapplicationexistsandavailableforupdate()": {
          "definition": "Verify_application_exists_and_available_for_update()"
        },
        "verifyrecipientnameis()": {
          "definition": "Verify_recipient_name_is__(string recipientName)"
        },
        "clickcontinue()": {
          "definition": "Click_Continue()"
        },
        "enteradjudicatorcommentof()": {
          "definition": "Enter_adjudicator_comment_of(string commentText)"
        },
        "verifyisattachedtothecertificationrequirement()": {
          "definition": "Verify_is_attached_to_the_certification_requirement(string docName)"
        },
        "verifyeffectivedatelabelinapprovalinformationis()": {
          "definition": "Verify_effective_date_label_in_approval_information_is__(string effDtLbl)"
        },
        "setforaddmode()": {
          "definition": "SetForAddMode()"
        },
        "selectrenewalofanexistingcertificationoption()": {
          "definition": "Select_Renewal_of_an_Existing_Certification_option()"
        },
        "browsetoeditapplicationfromperson()": {
          "definition": "Browse_to_edit____application_from_person__(string certName, string appType, string personName)"
        },
        "verifyvehicleisselected()": {
          "definition": "Verify_vehicle__is_selected(string vehicleName)"
        },
        "verifyresponseisrequired()": {
          "definition": "Verify_response_is_required()"
        },
        "verifyemployeeisselected()": {
          "definition": "Verify_employee__is_selected(string employeeName)"
        },
        "setforupdaterequirementmode()": {
          "definition": "SetForUpdateRequirementMode()"
        },
        "verifyapplicationstatusis()": {
          "definition": "Verify_application_status_is__(string appStatus)"
        },
        "verifyexpirationsyncisavailable()": {
          "definition": "Verify_expiration_sync_is_available()"
        },
        "verifyvehicleisnotselected()": {
          "definition": "Verify_vehicle__is_not_selected(string employeeName)"
        },
        "enterfreeformanswerof()": {
          "definition": "Enter_freeform_answer_of__(string answer)"
        },
        "verifyupdateunfulfilledrequirementspopoverisvisible()": {
          "definition": "Verify_Update_Unfulfilled_Requirements_popover_is_visible()"
        },
        "verifyvalidationfailsbecausenoapplicationdate()": {
          "definition": "Verify_validation_fails_because_no_application_date()"
        },
        "clickcancelofapproval()": {
          "definition": "Click_cancel_of_approval()"
        },
        "verifytherearedocumentstoattach()": {
          "definition": "Verify_there_are__documents_to_attach(int numDocs)"
        },
        "verifyvehiclerecordsareloadedandtherearerecords()": {
          "definition": "Verify_vehicle_records_are_loaded_and_there_are__records(int numRecords)"
        },
        "manuallyrecordfulfillmentoptionwithcomment()": {
          "definition": "Manually_record_fulfillment_option_with_comment(string comment)"
        },
        "setstatusinapprovalinformationto()": {
          "definition": "Set_status_in_approval_information_to__(string statusName)"
        },
        "verifyisanoption()": {
          "definition": "Verify__is_an_option(string optionText)"
        },
        "verifythereisnoothercertificationnumberinapprovalinformation()": {
          "definition": "Verify_there_is_no_other_certification_number_in_approval_information()"
        },
        "verifyapprovalinformationpopoverisnotvisibleandcaneditapplication()": {
          "definition": "Verify_approval_information_popover_is_not_visible_and_can_edit_application()"
        },
        "verifycertificationis()": {
          "definition": "Verify_certification_is__(string certName)"
        },
        "verifyalertappearswarninguserthattheitemwillnotbeautofulfilled()": {
          "definition": "Verify_alert_appears_warning_user_that_the_item_will_not_be_autofulfilled()"
        },
        "verifyvehiclerecordsarenotloaded()": {
          "definition": "Verify_vehicle_records_are_not_loaded()"
        },
        "verifyemploymentrecordsareloadedandtherearerecords()": {
          "definition": "Verify_employment_records_are_loaded_and_there_are__records(int numRecords)"
        },
        "verifymarkforprintingisavailableinapprovalinformation()": {
          "definition": "Verify_mark_for_printing_is_available_in_approval_information()"
        },
        "verifynonewcertificationisselected()": {
          "definition": "Verify_no_new_certification_is_selected()"
        },
        "verifycheckboxtextis()": {
          "definition": "Verify_checkbox_text_is__(string text)"
        },
        "clickmarkunfulfilledrequirementsasfulfilled()": {
          "definition": "Click_Mark_unfulfilled_requirements_as_fulfilled()"
        },
        "setexpirationdateinapprovalinformationto()": {
          "definition": "Set_expiration_date_in_approval_information_to__(DateTime effDt)"
        },
        "selectfilewithdescriptionandfilename()": {
          "definition": "Select_file_with_description__and_filename__(string descr, string fileName)"
        },
        "showapprovalsuccesspopover()": {
          "definition": "ShowApprovalSuccessPopover()"
        },
        "verifycertificationisselected()": {
          "definition": "Verify_certification__is_selected(string certName)"
        },
        "verifyrequirementisavailableforupdate()": {
          "definition": "Verify__requirement__is_available_for_update(string category, string reqText)"
        },
        "verifystatusinapprovalinformationis()": {
          "definition": "Verify_status_in_approval_information_is__(string statusName)"
        },
        "verifycheckboxisdisplayed()": {
          "definition": "Verify_checkbox_is_displayed()"
        },
        "verifyfreeformanswerisempty()": {
          "definition": "Verify_freeform_answer_is_empty()"
        },
        "saverequirementasfulfilled()": {
          "definition": "Save_requirement_as_fulfilled()"
        },
        "removeoptionselection()": {
          "definition": "Remove__option_selection(string optionText)"
        },
        "verifyemployeeisnotselected()": {
          "definition": "Verify_employee__is_not_selected(string employeeName)"
        },
        "setothercertificationnumberinapprovalinformationto()": {
          "definition": "Set_other_certification_number_in_approval_information_to__(string otherNum)"
        },
        "selectemploymentforfulfillment()": {
          "definition": "Select_employment__for_fulfillment(string employmentOrgName)"
        },
        "saverequirementasunfulfilled()": {
          "definition": "Save_requirement_as_unfulfilled()"
        },
        "verifynocertificationisselected()": {
          "definition": "Verify_no_certification_is_selected()"
        },
        "verifyrosterrecordsareloadedandtherearerecords()": {
          "definition": "Verify_roster_records_are_loaded_and_there_are__records(int numRecords)"
        },
        "showcommentedit()": {
          "definition": "ShowCommentEdit(bool bShow)"
        },
        "verifytrainingrecordsarenotloaded()": {
          "definition": "Verify_training_records_are_not_loaded()"
        },
        "verifyapplicationdateis()": {
          "definition": "Verify_application_date_is__(DateTime appDate)"
        },
        "cancelalert()": {
          "definition": "Cancel_alert()"
        },
        "enterfulfillmentcommentof()": {
          "definition": "Enter_fulfillment_comment_of__(string comment)"
        },
        "verifydonothaveoptiontowaivefulfillment()": {
          "definition": "Verify_do_not_have_option_to_waive_fulfillment()"
        },
        "clickeditadjudicatorcomment()": {
          "definition": "Click_edit_adjudicator_comment()"
        },
        "verifyupdaterequirementtitleis()": {
          "definition": "Verify_update_requirement_title_is__(string title)"
        },
        "setforfulfillunfulfilledrequirementmode()": {
          "definition": "SetForFulfillUnfulfilledRequirementMode()"
        },
        "verifyapprovalinformationpopoverisvisible()": {
          "definition": "Verify_approval_information_popover_is_visible()"
        },
        "verifydateofbirthisnullandcanbeentered()": {
          "definition": "Verify_date_of_birth_is_null_and_can_be_entered()"
        },
        "verifyrequirementisunfulfilled()": {
          "definition": "Verify__requirement__is_Unfulfilled(string category, string reqText)"
        },
        "verifyvalidationfailsbecausenoselectedcertificationtemplate()": {
          "definition": "Verify_validation_fails_because_no_selected_certification_template()"
        },
        "verifycertificationrecordsareloadedandtherearerecords()": {
          "definition": "Verify_certification_records_are_loaded_and_there_are__records(int numRecords)"
        },
        "verifyvalidationfailsbecauseapplicationdateisinvalid()": {
          "definition": "Verify_validation_fails_because_application_date_is_invalid()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AddOrEditCertificationApplication"
    },
    "portalmanagement": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": "Workflow",
      "class-name": "PortalManagement"
    },
    "profileeditemails": {
      "namespace": "",
      "methods": {
        "verifypageisnotvalid()": {
          "definition": "Verify_page_is_not_valid()"
        },
        "verifyprimaryemailportallogin()": {
          "definition": "Verify_primary_email__portal_login(string isIsNot)"
        },
        "addexistingprimaryemail()": {
          "definition": "AddExistingPrimaryEmail(string email)"
        },
        "verifyemailprimary()": {
          "definition": "Verify_email__primary(string isIsNot)"
        },
        "settotheprimaryemail()": {
          "definition": "Set_to_the_primary_email()"
        },
        "setemailaddressto()": {
          "definition": "Set_email_address_to(string value)"
        },
        "verifypageisvalid()": {
          "definition": "Verify_page_is_valid()"
        },
        "verifythereareemails()": {
          "definition": "Verify_there_are__emails(int count)"
        },
        "consideremailaddress()": {
          "definition": "Consider_email_address__(string email)"
        },
        "verifyisinduplicateemaillist()": {
          "definition": "Verify__is_in_duplicate_email_list(string email)"
        },
        "bindemails()": {
          "definition": "BindEmails(IEnumerable<EmailDto> emails)"
        },
        "deleteemail()": {
          "definition": "Delete_email()"
        },
        "addnewemailincontactinfo()": {
          "definition": "Add_new_email_in_contact_info()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ProfileEditEmailsWorkflow"
    },
    "viewcollecteddata": {
      "namespace": "",
      "methods": {
        "writeexport()": {
          "definition": "WriteExport(string fileName, string exportCsv)"
        },
        "verifyuserwasnavigatedtoimportwebform()": {
          "definition": "Verify_user_was_navigated_to_import_WebForm()"
        },
        "verifyactionsmenuvisible()": {
          "definition": "Verify_Actions_menu__visible(string isIsNotVisibleStr)"
        },
        "checkhideimporteddata()": {
          "definition": "Check_Hide_Imported_Data()"
        },
        "navigatetolistofwebforms()": {
          "definition": "NavigateToListOfWebForms()"
        },
        "verifyexportcolumnishyperlinkfordocument()": {
          "definition": "Verify_export_column__is_hyperlink_for_document__(string columnName, string fileName)"
        },
        "verifydatatablevisible()": {
          "definition": "Verify_Data_Table__visible(string isIsNotVisibleStr)"
        },
        "verifynodatamessagevisible()": {
          "definition": "Verify_No_Data_message__visible(string isIsNotVisibleStr)"
        },
        "verifycheckboxesvisibleforeachrow()": {
          "definition": "Verify_checkboxes__visible_for_each_row(string areAreNotVisibleStr)"
        },
        "verifyexportcolumnisurlfordocument()": {
          "definition": "Verify_export_column__is_url_for_document__(string columnName, string fileName)"
        },
        "verifyexportisbeginning()": {
          "definition": "Verify_export_is_beginning()"
        },
        "verifyusercandownloadtextdocumentforrowcolumnandfilenameiswithcontents()": {
          "definition": "Verify_user_can_download_text_document_for_row__column__and_filename_is__with_contents__(int rowIndex, string columnName, string fileName, string contents)"
        },
        "verifythedeletewarningshowing()": {
          "definition": "Verify_the_delete_warning__showing(string isIsNotString)"
        },
        "doexport()": {
          "definition": "DoExport()"
        },
        "verifyuserwasnavigatedtothelistofwebforms()": {
          "definition": "Verify_user_was_navigated_to_the_list_of_WebForms()"
        },
        "applyfilters()": {
          "definition": "Apply_filters()"
        },
        "uncheckcheckboxforrow()": {
          "definition": "Uncheck_checkbox_for_row__(int rowIndex)"
        },
        "verifyexportheadersare()": {
          "definition": "Verify_export_headers_are__(List<string> expectedHeaders)"
        },
        "uncheckhideexporteddata()": {
          "definition": "Uncheck_Hide_Exported_Data()"
        },
        "verifylisthasdatacolumns()": {
          "definition": "Verify_list_has_data_columns__(List<string> columnNames)"
        },
        "verifyexportcolumnisrestricteddocumentplaceholder()": {
          "definition": "Verify_export_column__is_restricted_document_placeholder(string columnName)"
        },
        "verifydatanotvisiblemessagevisible()": {
          "definition": "Verify_Data_Not_Visible_message__visible(string isIsNotVisibleStr)"
        },
        "checkhideexporteddata()": {
          "definition": "Check_Hide_Exported_Data()"
        },
        "checkcheckboxforrow()": {
          "definition": "Check_checkbox_for_row__(int rowIndex)"
        },
        "verifyrowcolumnisunprotecteddocumentnamed()": {
          "definition": "Verify_row__column__is_unprotected_document_named__(int rowIndex, string columnName, string fileName)"
        },
        "verifyexporthasrows()": {
          "definition": "Verify_export_has__rows(int numRows)"
        },
        "refreshpage()": {
          "definition": "RefreshPage()"
        },
        "clickdeleteselected()": {
          "definition": "Click_Delete_Selected()"
        },
        "verifyrowcolumnisaccessibleprotecteddocumentnamed()": {
          "definition": "Verify_row__column__is_accessible_protected_document_named__(int rowIndex, string columnName, string fileName)"
        },
        "verifyuserwasnavigatedtoeditwebform()": {
          "definition": "Verify_user_was_navigated_to_edit_WebForm()"
        },
        "uncheckcheckboxforselectall()": {
          "definition": "Uncheck_checkbox_for_select_all()"
        },
        "verifythehideexporteddatafilterchecked()": {
          "definition": "Verify_the_Hide_Exported_Data_Filter__checked(string isIsNotString)"
        },
        "hidedeletewarning()": {
          "definition": "HideDeleteWarning()"
        },
        "pushidstosession()": {
          "definition": "PushIDsToSession()"
        },
        "verifythehideimporteddatafilterchecked()": {
          "definition": "Verify_the_Hide_Imported_Data_Filter__checked(string isIsNotString)"
        },
        "navigatetoimport()": {
          "definition": "NavigateToImport(int importJobID, int webFormVersionID)"
        },
        "browsetopageforwebformversionrequestingexportofselecteddata()": {
          "definition": "Browse_to_page_for_webform__version__requesting_export_of_selected_data(string webFormName, int versionNumber)"
        },
        "verifyusercannotdownloadtextdocumentforrowcolumn()": {
          "definition": "Verify_user_cannot_download_text_document_for_row__column__(int rowIndex, string columnName)"
        },
        "beginverifyingexportrow()": {
          "definition": "Begin_verifying_export_row__(int rowIndex)"
        },
        "clickimportselected()": {
          "definition": "Click_Import_Selected()"
        },
        "verifyrowcolumnisrestrictedprotecteddocument()": {
          "definition": "Verify_row__column__is_restricted_protected_document(int rowIndex, string columnName)"
        },
        "verifyexportcolumnisblank()": {
          "definition": "Verify_export_column__is_blank(string columnName)"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "verifyexportcolumnis()": {
          "definition": "Verify_export_column__is__(string columnName, string value)"
        },
        "checkcheckboxforselectall()": {
          "definition": "Check_checkbox_for_select_all()"
        },
        "clickdeleteonthedeletewarning()": {
          "definition": "Click_Delete_on_the_Delete_Warning()"
        },
        "verifyrowcolumnisblank()": {
          "definition": "Verify_row__column__is_blank(int rowIndex, string columnName)"
        },
        "verifyrowcolumnis()": {
          "definition": "Verify_row__column__is__(int rowIndex, string columnName, string value)"
        },
        "verifydeleteselectedactionshown()": {
          "definition": "Verify_Delete_Selected_action__shown(string isIsNotShownStr)"
        },
        "navigatetoeditwebform()": {
          "definition": "NavigateToEditWebForm(int webFormID)"
        },
        "uncheckhideimporteddata()": {
          "definition": "Uncheck_Hide_Imported_Data()"
        },
        "verifylisthasrows()": {
          "definition": "Verify_list_has__rows(int numRows)"
        },
        "bindcolumnheaders()": {
          "definition": "BindColumnHeaders(IList<ViewCollectedDataColumnHeadDTO> headers)"
        },
        "clickexportselecteddata()": {
          "definition": "Click_Export_Selected_Data()"
        },
        "clickcancelonthedeletewarning()": {
          "definition": "Click_Cancel_on_the_Delete_Warning()"
        },
        "showdeletewarning()": {
          "definition": "ShowDeleteWarning()"
        },
        "browsetopageforwebformversionrequestingexportofalldata()": {
          "definition": "Browse_to_page_for_webform__version__requesting_export_of_all_data(string webFormName, int versionNumber)"
        },
        "verifyimportselectedactionshown()": {
          "definition": "Verify_Import_Selected_action__shown(string isIsNotShownStr)"
        },
        "bindrows()": {
          "definition": "BindRows(int totalRows, IList<ViewCollectedDataRowDTO> rows)"
        },
        "popidsfromsession()": {
          "definition": "PopIDsFromSession()"
        },
        "browsetopageforwebformversion()": {
          "definition": "Browse_to_page_for_webform__version__(string webFormName, int versionNumber)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ViewCollectedDataWorkflow"
    },
    "departureexportpreferences": {
      "namespace": "",
      "methods": {
        "verifyfiscalendyearis()": {
          "definition": "Verify_Fiscal_end_year_is(int endYear)"
        },
        "verifyclassselectioncontainsinprogram()": {
          "definition": "Verify_class_selection_contains_in_program(string className, string programName)"
        },
        "bindfytolist()": {
          "definition": "BindFYtoList(List<string> fyList)"
        },
        "verifyfiscalyeardropdownscontainyears()": {
          "definition": "Verify_Fiscal_Year_dropdowns_contain__years(int numRows)"
        },
        "checkusefiscalyear()": {
          "definition": "Check_Use_Fiscal_Year()"
        },
        "verifyusespecificclassesisunchecked()": {
          "definition": "Verify_Use_Specific_Classes_is_unchecked()"
        },
        "selectprogramandclass()": {
          "definition": "Select_program__and_class__(string programName, string className)"
        },
        "verifycustomtimeframeis()": {
          "definition": "Verify_Custom_Time_Frame_is(string dateRange)"
        },
        "selecttofiscalyear()": {
          "definition": "Select_To_Fiscal_Year(int endYear)"
        },
        "verifyprogramandclasslistdoesnotcontainclassinprogram()": {
          "definition": "Verify_program_and_class_list_does_not_contain_class__in_program__(string className, string programName)"
        },
        "exportdepartures()": {
          "definition": "ExportDepartures(string csvText)"
        },
        "verifyusefiscalyearischecked()": {
          "definition": "Verify_Use_Fiscal_Year_is_checked()"
        },
        "verifyusecustomdaterangeisunchecked()": {
          "definition": "Verify_Use_Custom_Date_Range_is_unchecked()"
        },
        "setcustomtimeframeendto()": {
          "definition": "Set_Custom_Time_Frame_End_to_(DateTime endDate)"
        },
        "verifyprogramandclasslistcontainsclassinprogram()": {
          "definition": "Verify_program_and_class_list_contains_class__in_program__(string className, string programName)"
        },
        "verifyfiscalyeardropdownscontain()": {
          "definition": "Verify_Fiscal_Year_dropdowns_contain(string fyYear)"
        },
        "browsetopagedepartureexportpreferences()": {
          "definition": "Browse_to_page_Departure_Export_Preferences()"
        },
        "verifyusefiscalyearisunchecked()": {
          "definition": "Verify_Use_Fiscal_Year_is_unchecked()"
        },
        "verifyprogramandclasslistcontainsitem()": {
          "definition": "Verify_program_and_class_list_contains__item(int numClasses)"
        },
        "verifyusespecificclassesischecked()": {
          "definition": "Verify_Use_Specific_Classes_is_checked()"
        },
        "verifyusecustomdaterangeischecked()": {
          "definition": "Verify_Use_Custom_Date_Range_is_checked()"
        },
        "setcustomtimeframestartto()": {
          "definition": "Set_Custom_Time_Frame_Start_to_(DateTime startDate)"
        },
        "verifyexportdatarowis()": {
          "definition": "Verify_export_data_row__is__(int rowNum, List<string> values)"
        },
        "verifyprogramandclasslistcontainsitems()": {
          "definition": "Verify_program_and_class_list_contains__items(int numClasses)"
        },
        "checkusespecificclasses()": {
          "definition": "Check_Use_Specific_Classes()"
        },
        "verifyclassselectiondoesnotcontaininprogram()": {
          "definition": "Verify_class_selection_does_not_contain_in_program(string className, string programName)"
        },
        "checkusecustomdaterange()": {
          "definition": "Check_Use_Custom_Date_Range()"
        },
        "verifyexportheadersare()": {
          "definition": "Verify_export_headers_are(List<string> expected)"
        },
        "verifyfiscalstartyearis()": {
          "definition": "Verify_Fiscal_start_year_is(int startYear)"
        },
        "verifyexportdatacontainsrows()": {
          "definition": "Verify_export_data_contains_rows(int numRows)"
        },
        "selectfromfiscalyear()": {
          "definition": "Select_From_Fiscal_Year(int startYear)"
        },
        "removeallselectedclasses()": {
          "definition": "Remove_all_selected_classes()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "DepartureExportPreferencesWorkflow"
    },
    "automatedemaillist": {
      "namespace": "",
      "methods": {
        "listcontainsmodule()": {
          "definition": "List_contains__module__(string name, string module)"
        },
        "listdoesnotcontainmodule()": {
          "definition": "List_does_not_contain__module__(string name, string module)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AutomatedEmailList"
    },
    "atriskmonitor": {
      "namespace": "",
      "methods": {
        "browsetoatriskmonitorforclassforclass()": {
          "definition": "Browse_to_At_Risk_Monitor_for_Class_for_class(string className)"
        },
        "verifysubrowofrowhaspercenttopass()": {
          "definition": "Verify_subrow__of_row__has__Percent_to_Pass( int subrow, string personName, string percentToPass )"
        },
        "verifysubrowofrowhasminimumpassinggrade()": {
          "definition": "Verify_subrow__of_row__has__minimum_passing_grade( int subrow, string personName, string minimumPassingGrade )"
        },
        "verifynostudentsatriskmessageshows()": {
          "definition": "Verify_No_Students_At_Risk_message_shows()"
        },
        "verifyrowviolationhasname()": {
          "definition": "Verify_row__violation__has_name__(int rowNumber, int violationNumber, string violationName)"
        },
        "verifysubrowsshownonrow()": {
          "definition": "Verify__subrows_shown_on_row__( int subrowCount, string personName )"
        },
        "verifycannotseedeparturelinks()": {
          "definition": "Verify_cannot_see_departure_links()"
        },
        "verifysubrowofrowis()": {
          "definition": "Verify_subrow__of_row__is__( int subrow, string personName, string atRiskElement )"
        },
        "verifyrowviolationhaseligibleretakes()": {
          "definition": "Verify_row__violation__has__eligible_retakes(int rowNumber, int violationNumber, string numberOfRemainingRetakes)"
        },
        "verifyrowviolationhasagradeof()": {
          "definition": "Verify_row__violation__has_a_grade_of__(int rowNumber, int violationNumber, string grade)"
        },
        "verifyrowhasviolations()": {
          "definition": "Verify_row__has__Violations(int rowNumber, int violationCount)"
        },
        "verifyrowhasname()": {
          "definition": "Verify_row__has_name__(int rowNumber, string name)"
        },
        "verifycanseedeparturelinks()": {
          "definition": "Verify_can_see_departure_links()"
        },
        "verifyrowviolationhasasrequiredtograduate()": {
          "definition": "Verify_row__violation__has_as__required_to_graduate(int rowNumber, int violationNumber, string requiredToGraduate)"
        },
        "verifysubrowofrowminimumpassingfootnote()": {
          "definition": "Verify_subrow__of_row____Minimum_Passing_footnote( int subrow, string personName, string hasText )"
        },
        "verifyrowshown()": {
          "definition": "Verify__Row_shown(int rowCount)"
        },
        "verifysubrowofrowachievable()": {
          "definition": "Verify_subrow__of_row___achievable(  int subrow, string personName, string isText )"
        },
        "verifysubrowofrowhasnopercenttopass()": {
          "definition": "Verify_subrow__of_row__has_no_Percent_to_Pass( int subrow, string personName )"
        },
        "bindrows()": {
          "definition": "BindRows(List<AtRiskMonitorDTO> dtos)"
        },
        "changesort()": {
          "definition": "Change_sort()"
        },
        "verifyrowhasaveragetopass()": {
          "definition": "Verify_row__has__average_to_pass( int rowNumber, decimal percentToPass )"
        },
        "verifyrowhasinfiniteaveragetopass()": {
          "definition": "Verify_row__has_infinite_average_to_pass( int rowNumber )"
        },
        "verifyrowviolationhasaminimumpassingof()": {
          "definition": "Verify_row__violation__has_a_minimum_passing_of__(int rowNumber, int violationNumber, string minPassing)"
        },
        "verifyrowaveragetopassismarkedunachievable()": {
          "definition": "Verify_row__average_to_pass_is_marked_unachievable( int rowNumber )"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AtRiskMonitorWorkflow"
    },
    "certificationsearchapi": {
      "namespace": "",
      "methods": {
        "verifycertificationstatusis()": {
          "definition": "Verify_certification_status_is__(string statusName)"
        },
        "verifyexpirationdateisblank()": {
          "definition": "Verify_expiration_date_is_blank()"
        },
        "verifycertificationstatusanactivestatus()": {
          "definition": "Verify_certification_status__an_active_status(string isOrNot)"
        },
        "verifyothernumberidis()": {
          "definition": "Verify_other_number_id_is__(string otherNumberID)"
        },
        "verifycertificationnameis()": {
          "definition": "Verify_certification_name_is__(string certificationName)"
        },
        "verifybillableaccountidbelongsto()": {
          "definition": "Verify_billable_account_id_belongs_to__(string personName)"
        },
        "considerresult()": {
          "definition": "Consider_result__(int resultPosition)"
        },
        "verifytherearepagesofresults()": {
          "definition": "Verify_there_are__pages_of_results(int pages)"
        },
        "verifyexpirationdateis()": {
          "definition": "Verify_expiration_date_is__(DateTime expirationDate)"
        },
        "verifythereareresultstotal()": {
          "definition": "Verify_there_are__results_total(int resultCount)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "CertificationSearchApiWorkflow"
    },
    "acadisusersearchresults": {
      "namespace": "",
      "methods": {
        "browsetopageforemailselected()": {
          "definition": "Browse_to_Page_for_email_selected()"
        },
        "writeexport()": {
          "definition": "WriteExport(string export)"
        },
        "verifythatemailiconisnotvisiblefor()": {
          "definition": "Verify_that_email_icon_is_not_visible_for__(string name)"
        },
        "verifythatresultsdonotinclude()": {
          "definition": "Verify_that_results_do_not_include_(string name)"
        },
        "bindsearchresults()": {
          "definition": "BindSearchResults(PagedResultDTO<AcadisUserSearchResultDto> results, bool showRestrictedAccessWarning)"
        },
        "enableemailselected()": {
          "definition": "EnableEmailSelected()"
        },
        "verifythatemailiconisvisiblefor()": {
          "definition": "Verify_that_email_icon_is_visible_for__(string name)"
        },
        "emailselected()": {
          "definition": "Email_Selected()"
        },
        "verifythatthereareresults()": {
          "definition": "Verify_that_there_are__results(int number)"
        },
        "enableexportall()": {
          "definition": "EnableExportAll()"
        },
        "verifythatexportcolumnsare()": {
          "definition": "Verify_that_export_columns_are_(List<string> headers)"
        },
        "verifythatexportrowis()": {
          "definition": "Verify_that_export_row__is_(int number, List<string> columns)"
        },
        "verifythatthereareexportrows()": {
          "definition": "Verify_that_there_are__export_rows(int number)"
        },
        "updateallselected()": {
          "definition": "UpdateAllSelected(string allIds)"
        },
        "exportselected()": {
          "definition": "Export_Selected()"
        },
        "enableexportselected()": {
          "definition": "EnableExportSelected()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "select()": {
          "definition": "Select_(string name)"
        },
        "browsetopageforexportall()": {
          "definition": "Browse_to_Page_for_export_all()"
        },
        "verifythatresultsinclude()": {
          "definition": "Verify_that_results_include_(string name)"
        },
        "browsetopageforexportselected()": {
          "definition": "Browse_to_Page_for_export_selected()"
        },
        "redirecttosingleresult()": {
          "definition": "RedirectToSingleResult(int personId)"
        },
        "exportall()": {
          "definition": "Export_All()"
        },
        "verifythattheresultforis()": {
          "definition": "Verify_that_the_result_for__is__(string name, List<string> columns)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AcadisUserSearchResultsWorkflow"
    },
    "personmerge": {
      "namespace": "",
      "methods": {
        "selecttouseudffrom()": {
          "definition": "Select_to_use__udf_from__(string udfName, string personName)"
        },
        "verifysectionshown()": {
          "definition": "Verify_section____shown(string section, string isIsNot)"
        },
        "verifythatvalueforfieldinsectionforis()": {
          "definition": "Verify_that_value_for__field_in__section_for__is__(string field, string section, string personName, string value)"
        },
        "bindsections()": {
          "definition": "BindSections(IEnumerable<PersonMergeSectionDTO> sections)"
        },
        "selecttousecertificationfrom()": {
          "definition": "Select_to_use__certification_from__(string certifificationName, string personName)"
        },
        "selecttouseemailfromforprimaryemail()": {
          "definition": "Select_to_use_email_from__for_primary_email(string personName)"
        },
        "selectallvaluesfor()": {
          "definition": "Select_all_values_for__(string personName)"
        },
        "selecttousephonenumberfromforprimaryphone()": {
          "definition": "Select_to_use_phone_number_from__for_primary_phone(string personName)"
        },
        "selecttouseaddressfromfor()": {
          "definition": "Select_to_use_address_from__for__(string personName, string field)"
        },
        "browsetopagetomerge()": {
          "definition": "Browse_to_Page_to_Merge__(string peopleToMerge)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifysectioncontainsfield()": {
          "definition": "Verify_section__contains_field__(string section, string field)"
        },
        "verifythatudffieldforis()": {
          "definition": "Verify_that_udf_field__for__is__(string udfFieldName, string personName, string value)"
        },
        "redirecttoperson()": {
          "definition": "RedirectToPerson(int newPersonID)"
        },
        "bindcandidates()": {
          "definition": "BindCandidates(IEnumerable<PersonMergeCandidateDTO> candidates)"
        },
        "selecttousewebsitefrom()": {
          "definition": "Select_to_use_website_from__(string personName)"
        },
        "selectvalueforfieldinsection()": {
          "definition": "Select__value_for_field__in_section__(string personName, string field, string section)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PersonMergeWorkflow"
    },
    "addmaintenanceticket": {
      "namespace": "",
      "methods": {
        "selectnamedasresource()": {
          "definition": "Select__named__as_resource(ResourceType resourceType, string name)"
        },
        "verifyresourcetypeaheadresultsincludenamed()": {
          "definition": "Verify_resource_typeahead_results_include__named__(ResourceType resourceType, string name)"
        },
        "returntolistmaintenancetickets()": {
          "definition": "ReturnToListMaintenanceTickets(int ticketId)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "enterinresourcetypeahead()": {
          "definition": "Enter__in_resource_typeahead(string text)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AddMaintenanceTicketWorkflow"
    },
    "housingfacilityshortcuts": {
      "namespace": "",
      "methods": {
        "makebuildinginactive()": {
          "definition": "Make_building__inactive(string buildingName)"
        },
        "addfloornamedto()": {
          "definition": "Add_floor_named__to__(string floorName, string buildingName)"
        },
        "changenumberofbedsinto()": {
          "definition": "Change_number_of_beds_in__to__(string roomName, int num)"
        },
        "futureroomsgetusagelevelbydefault()": {
          "definition": "Future_rooms_get_usage_level__by_default(string usageLevel)"
        },
        "addroomnamedtowithbathroomandgenderrestriction()": {
          "definition": "Add_room_named__to____with_bathroom__and_gender_restriction__(string roomName, string buildingName, string floorName, string bathroomName, string genderRestrictionDescription)"
        },
        "addroomnamedtowithprivatebathroom()": {
          "definition": "Add_room_named__to____with_private_bathroom(string roomName, string buildingName, string floorName)"
        },
        "createoffcenterbuildingnamedwhichisinactive()": {
          "definition": "Create_off_center_building_named__which_is_inactive(string buildingName)"
        },
        "deleteoffcenterbuilding()": {
          "definition": "Delete_off_center_building__(string buildingName)"
        },
        "addroomnamedtowithbeds()": {
          "definition": "Add_room_named__to____with__beds(string roomName, string buildingName, string floorName, int numBeds)"
        },
        "createoffcenterbuildingnamedwithamaxoccupancyof()": {
          "definition": "Create_off_center_building_named__with_a_max_occupancy_of__(string buildingName, int maxOccupancy)"
        },
        "createbuildingnamedwithgenderrestriction()": {
          "definition": "Create_building_named__with_gender_restriction__(string buildingName, string genderRestrictionDesc)"
        },
        "deletealloffcenterlodgingandtheirusages()": {
          "definition": "Delete_all_off_center_lodging_and_their_usages()"
        },
        "makebathroominactive()": {
          "definition": "Make_bathroom__inactive(string bathroomName)"
        },
        "addadaroomnamedtowithbathroomandgenderrestriction()": {
          "definition": "Add_ADA_room_named__to____with_bathroom__and_gender_restriction__(string roomName, string buildingName, string floorName, string bathroomName, string genderRestrictionDescription)"
        },
        "addroomnamedtowithprivatebathroomandgenderrestriction()": {
          "definition": "Add_room_named__to____with_private_bathroom_and_gender_restriction__(string roomName, string buildingName, string floorName, string genderRestrictionDescription)"
        },
        "addbathroomnamedto()": {
          "definition": "Add_bathroom_named__to____(string bathroomName, string buildingName, string floorName)"
        },
        "addroomnamedto()": {
          "definition": "Add_room_named__to____(string roomName, string buildingName, string floorName)"
        },
        "futureroomsgetnousagelevelbydefault()": {
          "definition": "Future_rooms_get_no_usage_level_by_default()"
        },
        "createbuildingnamed()": {
          "definition": "Create_building_named__(string buildingName)"
        },
        "assignroomtobathroom()": {
          "definition": "Assign_room__to_bathroom__(string roomName, string bathName)"
        },
        "addroomnamedtowithbathroom()": {
          "definition": "Add_room_named__to____with_bathroom__(string roomName, string buildingName, string floorName, string bathroomName)"
        },
        "addadaroomnamedtowithbathroom()": {
          "definition": "Add_ADA_room_named__to____with_bathroom__(string roomName, string buildingName, string floorName, string bathroomName)"
        },
        "editbuildingnamedchangingnameto()": {
          "definition": "Edit_building_named__changing_name_to__(string oldName, string newName)"
        },
        "addbathroomnamedtowithgenderrestriction()": {
          "definition": "Add_bathroom_named__to____with_gender_restriction__(string bathroomName, string buildingName, string floorName, string genderRestrictionDescription)"
        },
        "createoffcenterbuildingnamed()": {
          "definition": "Create_off_center_building_named__(string buildingName)"
        },
        "makefloorinactive()": {
          "definition": "Make_floor__inactive(string floorName)"
        },
        "inactivateallexistingrooms()": {
          "definition": "Inactivate_all_existing_rooms()"
        },
        "addroomnamedtowithprivatebathroomandgenderrestrictionandbeds()": {
          "definition": "Add_room_named__to____with_private_bathroom_and_gender_restriction__and__beds(string roomName, string buildingName, string floorName, string genderRestrictionDescription, int numBeds)"
        },
        "makeroominactive()": {
          "definition": "Make_room__inactive(string roomName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "HousingFacilityShortcuts"
    },
    "crossclassgradesexportpreferences": {
      "namespace": "",
      "methods": {
        "verifytextforisthecurrentfiscalyear()": {
          "definition": "Verify_text_for__is_the_current_fiscal_year(string label)"
        },
        "clickcontinue()": {
          "definition": "Click_Continue()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        }
      },
      "parent-name": null,
      "class-name": "CrossClassGradesExportPreferencesWorkflow"
    },
    "lotraceabilitymatrixdetails": {
      "namespace": "",
      "methods": {
        "verifythatthereareactivities()": {
          "definition": "Verify_that_there_are__activities(int numActivities)"
        },
        "bindtestingreferences()": {
          "definition": "BindTestingReferences(IEnumerable<DetailTestDTO> data)"
        },
        "verifythattlodescriptionis()": {
          "definition": "Verify_that_TLO_Description_is__(string description)"
        },
        "verifythattestisobservedwithquestions()": {
          "definition": "Verify_that_test_is_observed_with__questions(int numQuestions)"
        },
        "verifythateditiondetailsarenotlinked()": {
          "definition": "Verify_that_edition__details_are_not_linked(string editionName)"
        },
        "verifythatactivityhastimeblock()": {
          "definition": "Verify_that_activity_has_time_block__(string timeRange)"
        },
        "verifythateditiondetailsarelinked()": {
          "definition": "Verify_that_edition__details_are_linked(string editionName)"
        },
        "verifythattestdetailsarenotlinked()": {
          "definition": "Verify_that_test_details_are_not_linked()"
        },
        "bindinstructionalreferences()": {
          "definition": "BindInstructionalReferences(IEnumerable<DetailActivityDTO> data)"
        },
        "verifythatactivitiesinclude()": {
          "definition": "Verify_that_activities_include__(string activityName)"
        },
        "verifythattestdetailsarelinked()": {
          "definition": "Verify_that_test_details_are_linked()"
        },
        "verifythattestsinclude()": {
          "definition": "Verify_that_tests_include__(string testName)"
        },
        "browsetotraceabilitymatrixdetailsforcurriculumandelo()": {
          "definition": "browse_to_traceability_matrix_details_for_Curriculum__and_ELO__(string curriculumName, string eloName)"
        },
        "verifythateditionhasquestionsbutsomepreparedtestsdiffer()": {
          "definition": "Verify_that_edition__has__questions_but_some_prepared_tests_differ(string editionName, int numQuestions)"
        },
        "verifythattherearetests()": {
          "definition": "Verify_that_there_are__tests(int numTests)"
        },
        "verifythattestiswrittenwitheditions()": {
          "definition": "Verify_that_test_is_written_with__editions(int numEditions)"
        },
        "verifythattlonameis()": {
          "definition": "Verify_that_TLO_name_is__(string name)"
        },
        "verifythateditionhasquestions()": {
          "definition": "Verify_that_edition__has__questions(string editionName, int numQuestions)"
        },
        "verifythatelodescriptionis()": {
          "definition": "Verify_that_ELO_Description_is__(string description)"
        },
        "verifythatactivityhastimeblocks()": {
          "definition": "Verify_that_activity_has__time_blocks(int numSegments)"
        },
        "verifythatelonameis()": {
          "definition": "Verify_that_ELO_name_is__(string name)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "LOTraceabilityMatrixDetailsWorkflow"
    },
    "inventoryitemincident": {
      "namespace": "",
      "methods": {
        "enterincidentdateinfuture()": {
          "definition": "Enter_incident_date_in_future()"
        },
        "browsetoreportlostorstolenforfirearmfromorganization()": {
          "definition": "Browse_to_report_lost_or_stolen_for_firearm__from_organization__( string firearmName, string organization )"
        },
        "enterforincidentlocation()": {
          "definition": "Enter__for_incident_location(string location)"
        },
        "browsetoreportlostorstolenforvehiclefromorganization()": {
          "definition": "Browse_to_report_lost_or_stolen_for_vehicle__from_organization__(string vehicleName, string organization)"
        },
        "setupdatevalidator()": {
          "definition": "SetupDateValidator(DateTime today)"
        },
        "verifyinvalidverificationdateinfuture()": {
          "definition": "Verify_invalid_verification_date_in_future()"
        },
        "enterforincidentcomments()": {
          "definition": "Enter_for_incident_comments(string comments)"
        },
        "browsetoreportlostorstolenforaccountablepropertyfromorganization()": {
          "definition": "Browse_to_report_lost_or_stolen_for_accountable_property__from_organization__(string acctPropName, string organization)"
        },
        "setupinventoryitemdetails()": {
          "definition": "SetupInventoryItemDetails(string name, ResourceType type)"
        },
        "browsetoreportlostorstolenforanimalfromorganization()": {
          "definition": "Browse_to_report_lost_or_stolen_for_animal__from_organization__( string animalName, string organization )"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "selectresourcewas()": {
          "definition": "Select_resource_was__(string lostOrStolen)"
        },
        "enterforincidentnumber()": {
          "definition": "Enter__for_incident_number(string number)"
        },
        "enterforincidentdate()": {
          "definition": "Enter__for_incident_date(DateTime date)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "InventoryItemIncidentWorkflow"
    },
    "studentmanagement": {
      "namespace": "",
      "methods": {
        "setdateofbirthto()": {
          "definition": "Set_date_of_birth_to_( DateTime date)"
        },
        "setemergencycontactaddressto()": {
          "definition": "Set_emergency_contact_address_to_( string addressLine1, string addressLine2, string city, string county, string state, string zip )"
        },
        "verifythatstudentinclasshasemergencyphonenumberofextensionandtype()": {
          "definition": "Verify_that_student_in_class_has_emergency_phone_number_of_extension_and_type( string studentName, string className, int contactNumber, string phoneNumber, string extension, string phoneType )"
        },
        "verifythatstudentinhaspricelevel()": {
          "definition": "Verify_that_student__in__has_Price_Level__(string studentName, string className, string priceName)"
        },
        "setadarequirementsto()": {
          "definition": "Set_ADA_Requirements_to_(string ada)"
        },
        "verifythatstudentinhashousingotherorganization()": {
          "definition": "Verify_that_student__in__has_Housing_Other_Organization__(string studentName, string className, string orgName)"
        },
        "usingclassnamed()": {
          "definition": "Using_class_named( string className)"
        },
        "verifythathasstudentwithnosendingorg()": {
          "definition": "Verify_that_has_student_with_no_sending_org(string className, string studentName)"
        },
        "verifythatstudentinneedshousing()": {
          "definition": "Verify_that_student__in__needs_housing(string studentName, string className)"
        },
        "verifythatstudentinhasemergencycontactname()": {
          "definition": "Verify_that_student_in_has_Emergency_Contact_Name( string studentName, string className, string contactName )"
        },
        "verifythatstudentinhastuitiongrant()": {
          "definition": "Verify_that_student__in__has_Tuition_Grant__(string studentName, string className, string grantName)"
        },
        "verifythatstudentinhasnohousingotherorganization()": {
          "definition": "Verify_that_student__in__has_no_Housing_Other_Organization(string studentName, string className)"
        },
        "setsendingorganizationto()": {
          "definition": "Set_sending_organization_to__(string orgName)"
        },
        "sethealthissuesto()": {
          "definition": "Set_Health_issues_to_(string health)"
        },
        "verifythatstudentinhasemergencycontactrelationship()": {
          "definition": "Verify_that_student_in_has_Emergency_Contact_Relationship( string studentName, string className, string relationship )"
        },
        "verifythatstudentinhashousingbilltopartycategory()": {
          "definition": "Verify_that_student__in__has_Housing_Billto_Party_Category__(string studentName, string className, string categoryName)"
        },
        "setemergencycontactrelationshipto()": {
          "definition": "Set_emergency_contact_relationship_to_( string contactRelationship )"
        },
        "setreligiousneedsto()": {
          "definition": "Set_Religious_needs_to_(string needs)"
        },
        "verifythatstudentinhasnohousinggrant()": {
          "definition": "Verify_that_student__in__has_no_Housing_Grant(string studentName, string className)"
        },
        "studenthasawaiver()": {
          "definition": "Student_has_a_waiver()"
        },
        "verifythatstudentinhastrainingcategory()": {
          "definition": "Verify_that_student__in__has_training_category__( string studentName, string className, string trainingCategory )"
        },
        "usingstudentfromclass()": {
          "definition": "Using_student_from_class_( string studentLabel, string className )"
        },
        "saveenrollment()": {
          "definition": "Save_enrollment()"
        },
        "setemergencycontactphone1totypewithnumberext()": {
          "definition": "Set_emergency_contact_Phone_1_to_type_with_number_ext(string phoneType, string phoneNumber, string phoneExt)"
        },
        "verifythatstudentinhasemergencycontactcity()": {
          "definition": "Verify_that_student_in_has_Emergency_Contact_City( string studentName, string className, string city )"
        },
        "verifythatstudentinhasusagetype()": {
          "definition": "Verify_that_student__in__has_Usage_type__(string studentName, string className, string usageName)"
        },
        "verifyemergencycontactis()": {
          "definition": "Verify_emergency_contact_is_( string emergencyContact )"
        },
        "verifythatstudentinhasnotuitionotherorganization()": {
          "definition": "Verify_that_student__in__has_no_Tuition_Other_Organization(string studentName, string className)"
        },
        "verifythatstudentinhasemergencycontactstate()": {
          "definition": "Verify_that_student_in_has_Emergency_Contact_State( string studentName, string className, string state )"
        },
        "verifythathasstudentwithsendingorgandtitle()": {
          "definition": "Verify_that__has_student__with_sending_org__and_title__(string className, string studentName, string orgName, string title)"
        },
        "sethousingrequestedto()": {
          "definition": "Set_Housing_requested_to_(HousingOption housing)"
        },
        "verifythatstudentinhasemergencycontactzip()": {
          "definition": "Verify_that_student_in_has_Emergency_Contact_Zip( string studentName, string className, string zip )"
        },
        "settitleto()": {
          "definition": "Set_title_to__(string titleName)"
        },
        "verifyemergencycontactrelationshipis()": {
          "definition": "Verify_emergency_contact_relationship_is_(string value)"
        },
        "verifythatstudentindoesnothavephonenumber()": {
          "definition": "Verify_that_student_in_does_not_have_Phone_Number(string studentName, string className)"
        },
        "setcommentsto()": {
          "definition": "Set_comments_to__(string comment)"
        },
        "verifystudentstatusis()": {
          "definition": "Verify_student_status_is_( EnrollmentStatus status )"
        },
        "verifythatstudentindoeshavephonenumberoftypewithnumberandextensionandprimaryphonenumber()": {
          "definition": "Verify_that_student_in_does_have_Phone_Number_of_type_with_number_and_extension_and_primary_phone_number(string studentName, string className, string phoneNumberType, string phoneNumber, string extension, string isPrimary)"
        },
        "enrollpersoninclass()": {
          "definition": "Enroll_person__in_class__(string personName, string className)"
        },
        "verifythathasstudentwithsendingorg()": {
          "definition": "Verify_that__has_student__with_sending_org__(string className, string studentName, string orgName)"
        },
        "enrollperson()": {
          "definition": "Enroll_person__(string personName)"
        },
        "verifythatstudentinhasnotuitiongrant()": {
          "definition": "Verify_that_student__in__has_no_Tuition_Grant(string studentName, string className)"
        },
        "setemergencycontactphone2totypewithnumberext()": {
          "definition": "Set_emergency_contact_Phone_2_to_type_with_number_ext(string phoneType, string phoneNumber, string phoneExt)"
        },
        "verifythatstudentindoesnothaveemergencycontactphonenumber()": {
          "definition": "Verify_that_student__in__does_not_have_Emergency_Contact_Phone_Number__(string studentName, string className, int contactNumber)"
        },
        "addpersoninclasstostudentgroup()": {
          "definition": "Add_person_in_class_to_Student_Group(string student, string cls, string groupName)"
        },
        "verifythatstudentinhastuitionbilltopartycategory()": {
          "definition": "Verify_that_student__in__has_Tuition_Billto_Party_Category__(string studentName, string className, string categoryName)"
        },
        "setgenderto()": {
          "definition": "set_gender_to__(Gender gender)"
        },
        "setemergencycontactto()": {
          "definition": "Set_emergency_contact_to_( string emergencyContact )"
        },
        "setdietaryrequirementsto()": {
          "definition": "Set_Dietary_requirements_to_(string diet)"
        },
        "verifythathasstudent()": {
          "definition": "Verify_that_has_student( string className, string studentName )"
        },
        "verifystudentstatusdateis()": {
          "definition": "Verify_student_status_date_is__(DateTime statusDate)"
        },
        "verifythatstudentinhasemergencycontactaddress()": {
          "definition": "Verify_that_student_in_has_Emergency_Contact_Address( string studentName, string className, string address )"
        },
        "verifythatstudentinhashousinggrant()": {
          "definition": "Verify_that_student__in__has_Housing_Grant__(string studentName, string className, string grantName)"
        },
        "graduatestudentfromclasson()": {
          "definition": "Graduate_student__from_class__on_(string personName, string className, DateTime date)"
        },
        "verifythatstudentinhastuitionotherorganization()": {
          "definition": "Verify_that_student__in__has_Tuition_Other_Organization__(string studentName, string className, string orgName)"
        },
        "verifythatstudentinclassdoesnothaveemergencyphonenumber()": {
          "definition": "Verify_that_student_in_class_does_not_have_emergency_phone_number( string studentName, string className, int contactNumber )"
        },
        "verifythatstudentindoeshaveemergencycontactphonenumberoftypewithnumberandextension()": {
          "definition": "Verify_that_student__in__does_have_Emergency_Contact_Phone_Number__of_type__with_number__and_extension__(string studentName, string className, int contactNumber, string phoneNumberType, string phoneNumber, string extension)"
        },
        "studentinclassdoesnotcomplete()": {
          "definition": "Student__in_class__does_not_complete(string personName, string className)"
        },
        "verifythatstudentinhasspecialaccommodations()": {
          "definition": "Verify_that_student__in__has_Special_Accommodations__(string studentName, string className, string accommodationStr)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "StudentManagement"
    },
    "udfaddeditfields": {
      "namespace": "",
      "methods": {
        "enternewudfoftypethatisrequired()": {
          "definition": "Enter_new_UDF__of_type__that_is_required(string name, UdfType type)"
        },
        "browsetopageforudfs()": {
          "definition": "Browse_to_page_for__UDFs(string udfEntityName)"
        },
        "verifythatportaldisplaycolumnshowing()": {
          "definition": "Verify_that_portal_display_column__showing(string isIsNot)"
        },
        "makepagereadonly()": {
          "definition": "MakePageReadOnly()"
        },
        "verifythatdeletionauditdialogisdisplayed()": {
          "definition": "Verify_that_deletion_audit_dialog_is_displayed()"
        },
        "clickeditforudf()": {
          "definition": "Click_Edit_for_UDF__(string name)"
        },
        "verifyactiveudfmarkedtodisplayinsummarysection()": {
          "definition": "Verify_active_UDF__marked_to_display_in_summary_section(string isIsNot)"
        },
        "verifythatdeletingudfsisdisabled()": {
          "definition": "Verify_that_deleting_UDFs_is_disabled()"
        },
        "rundelete()": {
          "definition": "RunDelete(int? itemId)"
        },
        "requiredforactiveudf()": {
          "definition": "__required_for_active_UDF(string checkUncheck)"
        },
        "binditemsincludedlist()": {
          "definition": "BindItemsIncludedList(List<string> items)"
        },
        "verifyactiveudfhasfieldtypeof()": {
          "definition": "Verify_active_UDF_has_field_type_of__(UdfType fieldType)"
        },
        "enternewudfoftypethatisnotrequired()": {
          "definition": "Enter_new_UDF__of_type__that_is_not_required(string name, UdfType type)"
        },
        "selectforactiveudfportaldisplaysetting()": {
          "definition": "Select__for_active_UDF_portal_display_setting(UdfPortalViewability portalDisplay)"
        },
        "triggerdelete()": {
          "definition": "TriggerDelete()"
        },
        "selectforactiveudffieldtype()": {
          "definition": "Select__for_active_UDF_field_type(UdfType fieldType)"
        },
        "clickdeleteforudf()": {
          "definition": "Click_Delete_for_UDF__(string name)"
        },
        "clickcancel()": {
          "definition": "Click_Cancel()"
        },
        "showdeleteconfirmationdialog()": {
          "definition": "ShowDeleteConfirmationDialog(int fieldID, string fieldLabel, string tableName)"
        },
        "selectfornewudfportaldisplaysetting()": {
          "definition": "Select__for_new_UDF_portal_display_setting(UdfPortalViewability portalDisplay)"
        },
        "clickupdate()": {
          "definition": "Click_Update()"
        },
        "addnewudfoftypenamedthatrequired()": {
          "definition": "Add_new__UDF_of_type__named__that__required(string scope, UdfType type, string name, string isRequiredOrNot)"
        },
        "addnewdropdownitemtowithnameanddescription()": {
          "definition": "Add_new_dropdown_item_to__with_name__and_description__(string udfName, string udfItemName, string udfItemDesc)"
        },
        "displayinsummaryforactiveudf()": {
          "definition": "__display_in_summary_for_active_UDF(string checkUncheck)"
        },
        "verifythatlistcontainsoftypethatisrequired()": {
          "definition": "Verify_that_list_contains__of_type__that_is_required(string name, UdfType type)"
        },
        "bindudfsequence()": {
          "definition": "BindUdfSequence(UdfAddEditTableDTO tableDTO)"
        },
        "verifythatlistcontainsoftypethatisnotrequired()": {
          "definition": "Verify_that_list_contains__of_type__that_is_not_required(string name, UdfType type)"
        },
        "verifythateditdropdownlistcolumnshowing()": {
          "definition": "Verify_that_edit_dropdown_list_column__showing(string isIsNot)"
        },
        "verifythatdeletingudfsisenabled()": {
          "definition": "Verify_that_deleting_UDFs_is_enabled()"
        },
        "runpredelete()": {
          "definition": "RunPreDelete()"
        },
        "verifythatlistdoesnotcontain()": {
          "definition": "Verify_that_list_does_not_contain__(string name)"
        },
        "bindudffields()": {
          "definition": "BindUdfFields(IEnumerable<UdfAddEditFieldDTO> udfDTOs, int? activeFieldID)"
        },
        "verifyactiveudfhasportaldisplayvalueof()": {
          "definition": "Verify_active_UDF_has_Portal_Display_value_of__(UdfPortalViewability portalDisplay)"
        },
        "confirmdeletionwithreason()": {
          "definition": "Confirm_deletion_with_reason__(string reason)"
        },
        "show()": {
          "definition": "Show()"
        },
        "setactiveudftonameandtypeandnotrequired()": {
          "definition": "Set_active_UDF_to_name__and_type__and_not_required(string name, UdfType type)"
        },
        "clicksave()": {
          "definition": "Click_Save()"
        },
        "verifyactiveudfmarkedasrequired()": {
          "definition": "Verify_active_UDF__marked_as_required(string isIsNot)"
        },
        "enterforselectedudflabel()": {
          "definition": "Enter__for_selected_UDF_label(string label)"
        },
        "updaterowhighlighting()": {
          "definition": "UpdateRowHighlighting(int? activeFieldID)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "UdfAddEditFieldsWorkflow"
    },
    "surveyresponseanalysisreport": {
      "namespace": "",
      "methods": {
        "verifyitemmeanis()": {
          "definition": "Verify_item_mean_is__(decimal mean)"
        },
        "bindheaders()": {
          "definition": "BindHeaders(ReportHeaderDTO reportHeader)"
        },
        "verifyitemtextis()": {
          "definition": "Verify_item_text_is__(string text)"
        },
        "browsetopageforinclass()": {
          "definition": "Browse_to_page_for__in_class__(string surveyName, string className)"
        },
        "verifyitemresponsesare()": {
          "definition": "Verify_item_responses_are__(List<string> itemResponseTexts)"
        },
        "verifyresponsefilteritemsare()": {
          "definition": "Verify_response_filter_items_are__(List<string> expectedResponseFilterItems)"
        },
        "verifythereareitems()": {
          "definition": "Verify_there_are__items(int count)"
        },
        "binditems()": {
          "definition": "BindItems(List<SurveyResponseAnalysisDTO.Item> data)"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for__(string surveyName)"
        },
        "beginverifyingitem()": {
          "definition": "Begin_verifying_item__(int itemNumber)"
        },
        "verifyitemstandarddeviationis()": {
          "definition": "Verify_item_standard_deviation_is__(double stdDev)"
        },
        "verifyreporttitleis()": {
          "definition": "Verify_report_title_is__(string reportTitle)"
        },
        "verifyitemfreetextresponsesare()": {
          "definition": "Verify_item_freetext_responses_are__(List<string> responses)"
        },
        "verifyitemresponsecountsare()": {
          "definition": "Verify_item_response_counts_are__(List<int> counts)"
        },
        "verifyitemresponsepercentagesare()": {
          "definition": "Verify_item_response_percentages_are__(List<decimal> percentages)"
        },
        "bindresponsesfilteritems()": {
          "definition": "BindResponsesFilterItems(IEnumerable<string> filterItems)"
        },
        "verifyreportcriteriaforis()": {
          "definition": "Verify_report_criteria_for__is__(string label, string value)"
        },
        "verifyreportnameis()": {
          "definition": "Verify_report_name_is__(string reportName)"
        },
        "verifyitemmedianis()": {
          "definition": "Verify_item_median_is__(decimal median)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "SurveyResponseAnalysisReportWorkflow"
    },
    "assignresource": {
      "namespace": "",
      "methods": {
        "verifyverificationcomments()": {
          "definition": "Verify_verification_comments__( string expectedComments )"
        },
        "selectihaveverifiedassignment()": {
          "definition": "Select_I_have_verified_assignment()"
        },
        "assignresourcetopersonon()": {
          "definition": "Assign_resource_to_person__on__(string person, DateTime date)"
        },
        "browsetoassignresourceforvehiclefromorganization()": {
          "definition": "Browse_to_assign_resource_for_vehicle__from_organization__(string name, string organization)"
        },
        "setupdatevalidator()": {
          "definition": "SetupDateValidator(DateTime today)"
        },
        "entercomments()": {
          "definition": "Enter_comments(string comments)"
        },
        "verifyisanemployeeoption()": {
          "definition": "Verify_is_an_employee_option(string name)"
        },
        "verifyinvalidassignmentdateinfuture()": {
          "definition": "Verify_invalid_assignment_date_in_future()"
        },
        "browsetoassignresourceforaccountablepropertyfromorganization()": {
          "definition": "Browse_to_assign_resource_for_accountable_property__from_organization__(string acctPropName, string organization)"
        },
        "verifytherearelocations()": {
          "definition": "Verify_there_are__locations(int count)"
        },
        "verifythereareemployeeoptions()": {
          "definition": "Verify_there_are__employee_options(int count)"
        },
        "assignresourcetolocationon()": {
          "definition": "Assign_resource_to_location__on__(string location, DateTime date)"
        },
        "enterfuturedate()": {
          "definition": "Enter_future_date()"
        },
        "setupinventoryitemdetails()": {
          "definition": "SetupInventoryItemDetails(string name, ResourceType type)"
        },
        "verifyverificationdate()": {
          "definition": "Verify_verification_date__( DateTime date )"
        },
        "verifycomments()": {
          "definition": "Verify_comments__( string expectedComments )"
        },
        "selecthasverifiedassignment()": {
          "definition": "Select__has_verified_assignment(string person)"
        },
        "browsetoassignresourceforanimalfromorganization()": {
          "definition": "Browse_to_assign_resource_for_animal__from_organization__( string name, string organization )"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "enterverificationcomments()": {
          "definition": "Enter_verification_comments(string comments)"
        },
        "waitforclicktolandusoneditpage()": {
          "definition": "Wait_for_click_to_land_us_on_edit_page()"
        },
        "browsetoassignresourceforfirearmfromorganization()": {
          "definition": "Browse_to_assign_resource_for_firearm__from_organization__(string firearmName, string organization)"
        },
        "verifyisalocationoption()": {
          "definition": "Verify__is_a_location_option(string location)"
        },
        "verifyresourceassignedtopersonon()": {
          "definition": "Verify_resource_assigned_to_person__on__( string expectedUser, string expectedDate )"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AssignResourceWorkflow"
    },
    "deletestudenttests": {
      "namespace": "",
      "methods": {
        "begindelete()": {
          "definition": "Begin_delete()"
        },
        "alertusernothingselected()": {
          "definition": "AlertUserNothingSelected()"
        },
        "enterasreason()": {
          "definition": "Enter__as_reason(string reason)"
        },
        "verifythatrandomizedtestswarningishidden()": {
          "definition": "Verify_that_randomized_tests_warning_is_hidden()"
        },
        "verifythattestforinclassisnotinsearchresults()": {
          "definition": "Verify_that__test_for__in_class__is_not_in_search_results(string testName, string studentName, string className)"
        },
        "verifythatdeletegradesoptionisnotavailable()": {
          "definition": "Verify_that_delete_grades_option_is_not_available()"
        },
        "selectdeletegradesonly()": {
          "definition": "Select_delete_grades_only()"
        },
        "searchforclassnameequalto()": {
          "definition": "Search_for_class_name_equal_to__(string name)"
        },
        "delete()": {
          "definition": "Delete()"
        },
        "verifythatsearchresultswereupdated()": {
          "definition": "Verify_that_search_results_were_updated()"
        },
        "verifythatnothingselectedpromptwasshown()": {
          "definition": "Verify_that_nothing_selected_prompt_was_shown()"
        },
        "selectdeletetestandgrade()": {
          "definition": "Select_delete_test_and_grade()"
        },
        "verifythatselectedtestisinstatus()": {
          "definition": "Verify_that_selected_test_is_in__status(StudentExamStatus status)"
        },
        "verifythatselectedtestisnotgraded()": {
          "definition": "Verify_that_selected_test_is_not_graded()"
        },
        "searchforfirstnamecontaining()": {
          "definition": "Search_for_first_name_containing__(string name)"
        },
        "show()": {
          "definition": "Show(IEnumerable<int> selectedTestIds, string auditWhere)"
        },
        "verifythatconductandperformancewarningishidden()": {
          "definition": "Verify_that_conduct_and_performance_warning_is_hidden()"
        },
        "verifythatdeletegradesoptionisavailable()": {
          "definition": "Verify_that_delete_grades_option_is_available()"
        },
        "selecttestforinclass()": {
          "definition": "Select__test_for__in_class__(string test, string student, string className)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "DeleteStudentTestsWorkflow"
    },
    "peopledashboard": {
      "namespace": "",
      "methods": {
        "verifycansearchpeople()": {
          "definition": "Verify_can_search_people()"
        },
        "verifycannotaddpeople()": {
          "definition": "Verify_cannot_add_people()"
        },
        "verifycannotsearchorganizations()": {
          "definition": "Verify_cannot_search_organizations()"
        },
        "verifycanaddmaintenanceticket()": {
          "definition": "Verify_can_add_maintenance_ticket()"
        },
        "verifycanaddpeople()": {
          "definition": "Verify_can_add_people()"
        },
        "verifycansearchorganizations()": {
          "definition": "Verify_can_search_organizations()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PeopleDashboard"
    },
    "getpersoncompletedeventargs": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "GetPersonCompletedEventArgs"
    },
    "xadracadisbasictests": {
      "namespace": "",
      "methods": {
        "getscriptsafevalueignoresstandalonelessthansigns()": {
          "definition": "GetScriptSafeValueIgnoresStandaloneLessThanSigns()"
        },
        "getscriptsafevaluecodesscripttags()": {
          "definition": "GetScriptSafeValueCodesScriptTags()"
        },
        "getscriptsafevaluereturnskey()": {
          "definition": "GetScriptSafeValueReturnsKey()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "XadrAcadisBasicTests"
    },
    "inquiryresponsevehiclelistselection": {
      "namespace": "",
      "methods": {
        "verifytherearevehiclerecords()": {
          "definition": "Verify_there_are__vehicle_records(int numRecs)"
        },
        "selectvehicleforfulfillment()": {
          "definition": "Select_vehicle__for_fulfillment(string vehicleName)"
        },
        "bindrepeater()": {
          "definition": "BindRepeater(IEnumerable<SelectableInquiryVehicleListDto> existingDTOs)"
        },
        "verifyvehiclewithvinmakemodelyearhascertifications()": {
          "definition": "Verify_vehicle_with_VIN__make__model__year__has_certifications__(string vehicleName, string vin, string make, string model, string year, string certNames)"
        },
        "verifyvehicleisorisnotselected()": {
          "definition": "Verify_vehicle__is_or_is_not_selected(string vehicleName, bool isSelected)"
        },
        "initializecontrol()": {
          "definition": "InitializeControl()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "InquiryResponseVehicleListSelectionWorkflow"
    },
    "navigationtilereadonly": {
      "namespace": "",
      "methods": {
        "verifyimageis()": {
          "definition": "Verify_image_is__(ImageResources imageResource)"
        },
        "viewnavigationtileatpositionondashboard()": {
          "definition": "View_navigation_tile_at_position__on__dashboard(int position, AcadisTabs tab)"
        },
        "verifydisplayedtoolsare()": {
          "definition": "Verify_displayed_tools_are__(List<string> tools)"
        },
        "verifydescriptionis()": {
          "definition": "Verify_description_is__(string description)"
        },
        "verifytitleis()": {
          "definition": "Verify_title_is__(string title)"
        },
        "verifynoimageisdisplayed()": {
          "definition": "Verify_no_image_is_displayed()"
        },
        "verifynotoolsaredisplayed()": {
          "definition": "Verify_no_tools_are_displayed()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "NavigationTileReadOnlyWorkflow"
    },
    "organizationcertexpirationupdate": {
      "namespace": "",
      "methods": {
        "verifycertificationsareavailablefordisplay()": {
          "definition": "Verify__certifications_are_available_for_display(int count)"
        },
        "verifyisatrow()": {
          "definition": "Verify__is_at_row__(string cert, int rowNum)"
        },
        "verifyupdatelinkisvisible()": {
          "definition": "Verify_update_link_is_visible()"
        },
        "loadcertificationlistforwhileworkingwith()": {
          "definition": "Load_certification_list_for__while_working_with__(string orgName, string certName)"
        },
        "setexpirationdateonrowtofromtoday()": {
          "definition": "Set_expiration_date_on_row__to____from_today(int rowNum, int interval, CalendarTimeUnit timeUnit)"
        },
        "clickupdatelink()": {
          "definition": "Click_Update_link()"
        },
        "bindcertlist()": {
          "definition": "BindCertList(List<OrganizationCertExpirationUpdateDTO> data)"
        },
        "verifyexpirationdatetableisnotvisible()": {
          "definition": "Verify_expiration_date_table_is_not_visible()"
        },
        "verifyrowexpirationdateisinvalidbecauseitisbeforetheissuedate()": {
          "definition": "Verify_row__expiration_date_is_invalid_because_it_is_before_the_issue_date(int rowNum)"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "loadcertificationlistfor()": {
          "definition": "Load_certification_list_for__(string orgName)"
        },
        "verifystatuschangepromptshouldbeshown()": {
          "definition": "Verify_status_change_prompt_should_be_shown()"
        },
        "verifyexpirationdatetableisvisible()": {
          "definition": "Verify_expiration_date_table_is_visible()"
        },
        "verifyupdatelinktextis()": {
          "definition": "Verify_update_link_text_is__(string text)"
        },
        "verifyupdatelinkisnotvisible()": {
          "definition": "Verify_update_link_is_not_visible()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "OrganizationCertExpirationUpdate"
    },
    "trainingeventportal": {
      "namespace": "",
      "methods": {
        "browsetopagefortrainingeventwithhours()": {
          "definition": "Browse_to_page_for_training_event__with__hours(string trainingEventName, decimal hours)"
        },
        "verifyeventcanbedeleted()": {
          "definition": "Verify_event_can_be_deleted()"
        },
        "verifytrainingdatesare()": {
          "definition": "Verify_training_dates_are__(string dates)"
        },
        "verifyeventcannotbesubmitted()": {
          "definition": "Verify_event_cannot_be_submitted()"
        },
        "verifyprovidernameis()": {
          "definition": "Verify_provider_name_is__(string providerName)"
        },
        "verifythereattendeesinthelist()": {
          "definition": "Verify_there__attendees_in_the_list(string areAreNot)"
        },
        "verifycoursenumberis()": {
          "definition": "Verify_course_number_is__(string courseNumber)"
        },
        "verifycoursedescriptionis()": {
          "definition": "Verify_course_description_is__(string courseDescription)"
        },
        "verifyallattendeeshavetrainingcategory()": {
          "definition": "Verify_all_attendees_have_training_category__(string trainingCategory)"
        },
        "browsetopagefortrainingevent()": {
          "definition": "Browse_to_page_for_training_event(string trainingEventName)"
        },
        "redirecttoreturnurl()": {
          "definition": "RedirectToReturnUrl()"
        },
        "verifyeventcannotbedeleted()": {
          "definition": "Verify_event_cannot_be_deleted()"
        },
        "verifyeventisinstatus()": {
          "definition": "Verify_event_is_in__status(InServiceEventStatus status)"
        },
        "verifyeventcannotbeedited()": {
          "definition": "Verify_event_cannot_be_edited()"
        },
        "verifyprovideremailis()": {
          "definition": "Verify_provider_email_is__(string instructorEmail)"
        },
        "verifyeventcanbeedited()": {
          "definition": "Verify_event_can_be_edited()"
        },
        "verifyprovidertypeis()": {
          "definition": "Verify_provider_type_is__(string providerTypeLabel)"
        },
        "verifythatthetrackingstatusisandreads()": {
          "definition": "Verify_that_the__tracking_status_is__and_reads__(string trackingStatusOrdinal, string statusName, string statusDetails)"
        },
        "verifythattheattendeeiswithacademyidandhoursandtrainingcategory()": {
          "definition": "Verify_that_the__attendee_is__with_academy_id__and__hours_and_training_category__(string attendeeOrdinal, string attendeeName, string academyId, string hours, string trainingCategory)"
        },
        "verifyeventcanbesubmitted()": {
          "definition": "Verify_event_can_be_submitted()"
        },
        "verifytrainingisreportedto()": {
          "definition": "Verify_training_is_reported_to__(string academyName)"
        },
        "bindtrackingstatuses()": {
          "definition": "BindTrackingStatuses(IList<TrainingEventTrackingStatusDTO> trackingStatuses)"
        },
        "clicksubmit()": {
          "definition": "Click_submit()"
        },
        "verifythattheattendeeiswithacademyidandhoursandnotrainingcategory()": {
          "definition": "Verify_that_the__attendee_is__with_academy_id__and__hours_and_no_training_category(string attendeeOrdinal, string attendeeName, string academyId, string hours)"
        },
        "verifytrainingdateis()": {
          "definition": "Verify_training_date_is(string date)"
        },
        "verifycoursetitleis()": {
          "definition": "Verify_course_title_is__(string courseTitle)"
        },
        "verifythattheattendeeisandhastrainingcategory()": {
          "definition": "Verify_that_the__attendee_is__and_has_training_category__(string ordinal, string attendeeName, string trainingCategory)"
        },
        "verifytraininghoursis()": {
          "definition": "Verify_training_hours_is__(string trainingHours)"
        },
        "clickdelete()": {
          "definition": "Click_delete()"
        },
        "verifytheattendeelistshowsattendees()": {
          "definition": "Verify_the_attendee_list_shows__attendees(int expectedNumberOfAttendees)"
        },
        "verifythattheattendeeiswithacademyidandnotrainingcategory()": {
          "definition": "Verify_that_the__attendee_is__with_academy_id__and_no_training_category(string attendeeOrdinal, string attendeeName, string academyId)"
        },
        "verifyproviderphonenumberis()": {
          "definition": "Verify_provider_phone_number_is__(string phoneNumber)"
        },
        "verifyredirectedtoreturnurl()": {
          "definition": "Verify_redirected_to_return_url()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "TrainingEventPortalWorkflow"
    },
    "testopiathreadcontext": {
      "namespace": "",
      "methods": {
        "dispose()": {
          "definition": "Dispose()"
        }
      },
      "parent-name": null,
      "class-name": "TestopiaThreadContext"
    },
    "testopiastudentlistrow": {
      "namespace": "",
      "methods": {
        "allowpersonview()": {
          "definition": "AllowPersonView(bool canViewPeople)"
        },
        "showhousinglabel()": {
          "definition": "ShowHousingLabel(string housingStatus)"
        },
        "showcourseaveragelabel()": {
          "definition": "ShowCourseAverageLabel(string courseAverage)"
        },
        "showhousinginfo()": {
          "definition": "ShowHousingInfo(bool canViewHousingRecords)"
        },
        "showcourseaveragelink()": {
          "definition": "ShowCourseAverageLink(string courseAverage, string linkURL)"
        },
        "showeditstatus()": {
          "definition": "ShowEditStatus(bool canEditStatus)"
        },
        "showhousinglink()": {
          "definition": "ShowHousingLink(int? housingRosterID, string housingStatus)"
        }
      },
      "parent-name": null,
      "class-name": "TestopiaStudentListRow"
    },
    "editonlinestudentgrade": {
      "namespace": "",
      "methods": {
        "browsetoedittakeforstudentinevent()": {
          "definition": "Browse_to_edit_take__for_student__in_event__(int takeNumber, string studentName, string eventName)"
        },
        "verifycansetscoreis()": {
          "definition": "Verify_can_set_score_is__(bool value)"
        },
        "verifycansetpassfailis()": {
          "definition": "Verify_can_set_pass_fail_is__(bool value)"
        },
        "entertextfortime()": {
          "definition": "Enter_text__for_time(int hours, int minutes, int seconds)"
        },
        "setstartdate()": {
          "definition": "SetStartDate(DateTime startDate)"
        },
        "verifytextfortimeis()": {
          "definition": "Verify_text_for_time_is__(int hours, int minutes, int seconds)"
        },
        "verifycansetstatusis()": {
          "definition": "Verify_can_set_status_is__(bool value)"
        },
        "verifytextforenddateis()": {
          "definition": "Verify_text_for_end_date_is__(string date)"
        },
        "verifytextforstartdateis()": {
          "definition": "Verify_text_for_start_date_is__(string date)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EditOnlineStudentGradeWorkflow"
    },
    "billingitemsexport": {
      "namespace": "",
      "methods": {
        "writeexport()": {
          "definition": "WriteExport(string fileName, IList<string> exportData)"
        },
        "dispose()": {
          "definition": "Dispose()"
        },
        "verifythereareitems()": {
          "definition": "Verify_there_are__items(int count)"
        },
        "excludebaselinefromresults()": {
          "definition": "Exclude_baseline_from_results()"
        },
        "exportallbillingitems()": {
          "definition": "Export_all_billing_items()"
        },
        "verifyrow()": {
          "definition": "Verify_row__(int row)"
        },
        "verifyisequaltotoday()": {
          "definition": "Verify__is_equal_to_today(string fieldName)"
        },
        "verifyisblank()": {
          "definition": "Verify__is_blank(string fieldName)"
        },
        "deleteallbillingitems()": {
          "definition": "Delete_all_billing_items()"
        }
      },
      "parent-name": "MVBaseExportHandlerWorkflow",
      "class-name": "BillingItemsExportWorkflow"
    },
    "deferredrosterapprovalconfirmation": {
      "namespace": "",
      "methods": {
        "verifytrainingcompletionsurveysbesent()": {
          "definition": "Verify_training_completion_surveys__be_sent(string willOrWillNot)"
        },
        "verifycertificationsbeconferred()": {
          "definition": "Verify_certifications__be_conferred(string willOrWillNot)"
        },
        "showapprovalconfirmationforclass()": {
          "definition": "Show_approval_confirmation_for_class__(string className)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "DeferredRosterApprovalConfirmationWorkflow"
    },
    "editudfs": {
      "namespace": "",
      "methods": {
        "verifythatudfwithlabelhasvalue()": {
          "definition": "Verify_that_UDF_with_label__has_value__(string label, string value)"
        },
        "setclassudftoon()": {
          "definition": "Set_class_udf__to__on__(string udfName, string value, string classDefinitionName)"
        },
        "editudfsforactivityin()": {
          "definition": "Edit_udfs_for_activity__in__(string activityName, string classDefinitionName)"
        },
        "verifythatudfwithlabelexist()": {
          "definition": "Verify_that_UDF_with_label____exist(string label, string doesDoesNot)"
        },
        "setactivityudftoonin()": {
          "definition": "Set_activity_udf__to__on__in__(string udfName, string value, string activityName, string classDefinitionName)"
        },
        "verifythatthereareudfs()": {
          "definition": "Verify_that_there_are__UDFs(int count)"
        },
        "editudfsforclassdefinition()": {
          "definition": "Edit_udfs_for_class_definition__(string classDefinitionName)"
        },
        "createudfcontrols()": {
          "definition": "CreateUdfControls(List<UdfDTO> udfs)"
        },
        "setvalueofudfwithlabelto()": {
          "definition": "Set_value_of_UDF_with_label__to__(string label, string value)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EditUdfsWorkflow"
    },
    "schedulingmanagement": {
      "namespace": "",
      "methods": {
        "verifyequipmentisassignedtoon()": {
          "definition": "Verify_equipment__is_assigned_to__on__(string equipmentName, string className, string blockName)"
        },
        "clearschedule()": {
          "definition": "Clear_schedule()"
        },
        "verifyschedulewillstartona()": {
          "definition": "Verify_schedule_will_start_on_a(string layoutName, ScheduleLayoutType layoutType)"
        },
        "authorizefor()": {
          "definition": "Authorize__for__(string instructorFullName, string activityName)"
        },
        "placeblockatondayinmode()": {
          "definition": "Place_block__at__on_day__in__mode(string blockName, string time, int day, string placementMode)"
        },
        "assignto()": {
          "definition": "Assign__to__( string instructorName, string blockName )"
        },
        "verifyinstructorisassignedasamanualassignment()": {
          "definition": "Verify_instructor__is_assigned_as_a_manual_assignment( string instructorName )"
        },
        "verifyscheduledclasswaspersisted()": {
          "definition": "verify_scheduled_class__was_persisted(string className)"
        },
        "createblockforactivityschedule()": {
          "definition": "Create_block_for_activity_schedule__(string activityName)"
        },
        "verifyisassignedtoclassfororbutnotboth()": {
          "definition": "Verify_is_assigned_to_class_for__or__but_not_both(string assignableName, string className, string block1, string block2)"
        },
        "assigntoon()": {
          "definition": "Assign__to__on__( string instructorName, string blockName, string className )"
        },
        "placeblockaton()": {
          "definition": "Place_block__at__on__(string blockName, string time, DateTime date)"
        },
        "verifyclassschedulenamedexistsforclasstemplate()": {
          "definition": "Verify_class_schedule_named__exists_for_class_template__(string scheduleName, string templateName)"
        },
        "verifyclasshastrainingcategory()": {
          "definition": "Verify_class__has_training_category_(string className, string trainingCategoryString)"
        },
        "assigninstructor()": {
          "definition": "Assign_instructor_(string instructorName)"
        },
        "verifyfacilityisassignedasamanualassignment()": {
          "definition": "Verify_facility__is_assigned_as_a_manual_assignment( string facilityName )"
        },
        "reflowschedule()": {
          "definition": "Reflow_schedule()"
        },
        "assignbaselineavailabiltyprofiletoclassschedule()": {
          "definition": "Assign_baseline_availabilty_profile__to_class_schedule( string profileName )"
        },
        "removeassignmentsonforin()": {
          "definition": "Remove_assignments_on__for__in(string blockName, string ruleName, string className)"
        },
        "scheduletobeginonanywithprofile()": {
          "definition": "Schedule__to_begin_on_any__with_profile__( string layoutName, string dayOfWeek, string profileName )"
        },
        "verifyschedulehasactivity()": {
          "definition": "Verify_schedule__has_activity__(string scheduleTemplateName, string scheduleActivityName)"
        },
        "unassignfromon()": {
          "definition": "Unassign__from__on__(string instructorName, string blockName, string className)"
        },
        "assignavailabiltyprofiletoclassschedule()": {
          "definition": "Assign_availabilty_profile__to_class_schedule(string profileName)"
        },
        "placeblocklastinghoursatondayinmode()": {
          "definition": "Place_block__lasting__hours_at__on_day__in__mode(string blockName, int hours, string time, int day, string placementMode)"
        },
        "verifyfacilitiesareassignedtoontofulfill()": {
          "definition": "Verify__facilities_are_assigned_to__on__to_fulfill__(int assignmentCount, string className, string blockName, string ruleName)"
        },
        "verifynoinstructorsareassigned()": {
          "definition": "Verify_no_instructors_are_assigned()"
        },
        "verifyinstructorsareassignedtoontofulfill()": {
          "definition": "Verify__instructors_are_assigned_to__on__to_fulfill__(int assignmentCount, string className, string blockName, string ruleName)"
        },
        "assignfacilitytoontofulfill()": {
          "definition": "Assign_facility__to__on__to_fulfill__(int quantity, string facilityName, string blockName, string className, string ruleName)"
        },
        "usingactivity()": {
          "definition": "using_Activity_( string activityName )"
        },
        "verifyscheduledclasshasactivity()": {
          "definition": "Verify_scheduled_class__has_activity__(string className, string activityName)"
        },
        "verifyinstructorisassigned()": {
          "definition": "Verify_instructor__is_assigned( string instructorName )"
        },
        "verifyschedulingclassendson()": {
          "definition": "Verify_scheduling_class_ends_on__(string className, DateTime end)"
        },
        "placeblockatoninmode()": {
          "definition": "Place_block__at__on__in__mode(string blockName, string time, DateTime date, string placementMode)"
        },
        "placeblocklastinghoursatinmode()": {
          "definition": "Place_block__lasting__hours_at__in__mode(string blockName, int hours, string time, string placementMode)"
        },
        "createworkweekprofilenamedwithavailabilitiesonat()": {
          "definition": "Create_workweek_profile_named__with_availabilities_on__at__(string profileName, string weekDays, string times)"
        },
        "verifyschedulehasactivitywithblock()": {
          "definition": "Verify_schedule__has_activity__with_block__(string layoutName, string activityName, string blockName)"
        },
        "verifyscheduledclasshasblockinactivity()": {
          "definition": "Verify_scheduled_class__has_block__in_activity__(string className, string blockName, string activityName)"
        },
        "authorizeforexpiringon()": {
          "definition": "Authorize__for__expiring_on(string instructorFullName, string activityName, DateTime expirationDate)"
        },
        "verifyschedulewaspersisted()": {
          "definition": "Verify_schedule__was_persisted(string scheduleTemplateName)"
        },
        "verifyschedulestartsona()": {
          "definition": "Verify_schedule_starts_on_a__(string layoutName, string dayOfWeek)"
        },
        "usingblock()": {
          "definition": "using_Block_( string blockName )"
        },
        "verifynofacilitiesareassigned()": {
          "definition": "Verify_no_facilities_are_assigned()"
        },
        "placeblockatinmode()": {
          "definition": "Place_block__at__in__mode(string blockName, string time, string placementMode)"
        },
        "assignequipmenttoontofulfill()": {
          "definition": "Assign__equipment__to__on__to_fulfill__(int quantity, string equipmentName, string blockName, string className, string ruleName)"
        },
        "verifyblockhastimeblockondaystartingatendingat()": {
          "definition": "Verify_block_has_time_block_on_day__starting_at__ending_at__(int day, string startTime, string endTime)"
        },
        "assigntoontofulfill()": {
          "definition": "Assign__to__on__to_fulfill__( string instructorName, string blockName, string className, string ruleName )"
        },
        "createtimestampwithcurrentsystemtime()": {
          "definition": "Create_time_stamp_with_current_system_time(string timeStampName)"
        },
        "assigntotofulfill()": {
          "definition": "Assign__to__to_fulfill__( string instructorName, string blockName, string ruleName )"
        },
        "createstandardworkweekprofilenamed()": {
          "definition": "Create_standard_workweek_profile_named_(string profileName)"
        },
        "verifyisassignedtoclassforblock()": {
          "definition": "Verify_is_assigned_to_class_for_block(string assignableName, string className, string blockName)"
        },
        "createscheduleforclasstemplate()": {
          "definition": "Create_schedule__for_class_template_( string scheduleName, string classTemplateName )"
        },
        "verifynoequipmentisassignedtoon()": {
          "definition": "Verify_no_equipment_is_assigned_to__on__(string className, string blockName)"
        },
        "verifyisassignedtotofulfill()": {
          "definition": "Verify__is_assigned_to__to_fulfill__(string instructorName, string blockName, string ruleName)"
        },
        "moveblockto()": {
          "definition": "Move__block__to(string scheduleName, string blockName, DateTime startTime)"
        },
        "verifyinstructorhasconflictson()": {
          "definition": "Verify_instructor_has_conflicts_on(string instructorName, DateTime start)"
        },
        "verifyisassignedtoonasamanualassignment()": {
          "definition": "Verify__is_assigned_to__on__as_a_manual_assignment( string instructorName, string blockName, string className )"
        },
        "autoassignpersonnelfor()": {
          "definition": "AutoAssign_Personnel_for( string schedulingClassName )"
        },
        "verifyscheduledblockoccursto()": {
          "definition": "Verify_scheduled_block__occurs__to_( string blockName, DateTime startTime, DateTime endTime )"
        },
        "createscheduledclassfromscheduletemplatewithprofilewhichstarts()": {
          "definition": "Create_scheduled_class_from_schedule_template_with_profile_which_starts_(string className, string layoutName, string profileName, DateTime start)"
        },
        "createscheduledclassfromschedule()": {
          "definition": "Create_scheduled_class__from_schedule__(string className, string layoutName)"
        },
        "splitactivityintoblocks()": {
          "definition": "Split_activity__into__blocks(string activityName, int numSplit)"
        },
        "blockhastimeblocks()": {
          "definition": "Block__has_timeblocks__(string blockName, string timeblocks)"
        },
        "verifyblockonclassstartsat()": {
          "definition": "Verify_block__on_class__starts_at(string blockName, string className, DateTime startDateTime)"
        },
        "loadblockonclassas()": {
          "definition": "Load_block_on_class_as_(string blockName, string className, string classBlockName)"
        },
        "scheduletobeginonwithprofile()": {
          "definition": "Schedule__to_begin_on__with_profile__(string layoutName, DateTime startingDate, string profileName)"
        },
        "usingclassschedule()": {
          "definition": "using_class_schedule( string classScheduleName )"
        },
        "changeprofiletowithreflowing()": {
          "definition": "Change_profile_to__with_reflowing(string profileName)"
        },
        "verifyisnotassignedto()": {
          "definition": "Verify__is_not_assigned_to__(string instructorName, string blockName)"
        },
        "assignfacility()": {
          "definition": "Assign_facility_( string facilityName )"
        },
        "verifyfacilityisassigned()": {
          "definition": "Verify_facility__is_assigned( string facilityName )"
        },
        "placeblocksatondayinmode()": {
          "definition": "Place_blocks__at__on_day__in__mode(string blockNames, string time, int day, string placementMode)"
        },
        "usingclass()": {
          "definition": "using_Class_( string className )"
        },
        "verifyisnotassignedtoclassforblock()": {
          "definition": "Verify_is_not_assigned_to_class_for_block(string assignableName, string className, string blockName)"
        },
        "changeprofileto()": {
          "definition": "Change_profile_to__(string profileName)"
        },
        "placeblockatonday()": {
          "definition": "Place_block__at__on_day__(string blockName, string time, int day)"
        },
        "deletescheduleforclasstemplate()": {
          "definition": "Delete_schedule__for_class_template_(string scheduleName, string classTemplateName)"
        },
        "unassignfacilityfromon()": {
          "definition": "Unassign_facility__from__on__(string facilityName, string blockName, string className)"
        },
        "assignequipmenttoonmanually()": {
          "definition": "Assign__equipment__to__on__manually(int quantity, string equipmentName, string blockName, string className)"
        },
        "verifyequipmentisassignedtoontofulfill()": {
          "definition": "Verify_equipment__is_assigned_to__on__to_fulfill__(string equipmentName, string className, string blockName, string ruleName)"
        },
        "verifyschedulestartson()": {
          "definition": "Verify_schedule_starts_on__(string layoutName, DateTime startingDate)"
        },
        "assignfacilitytoon()": {
          "definition": "Assign_facility_to_on(string facilityName, string blockName, string className)"
        },
        "verifyinstructorisassignedtoontofulfill()": {
          "definition": "Verify_instructor__is_assigned_to__on__to_fulfill__(string instructorName, string className, string blockName, string ruleName)"
        },
        "autoassignequipmentfor()": {
          "definition": "Auto_assign_equipment_for(string schedulingClassName)"
        },
        "loadactivityonclassas()": {
          "definition": "Load_activity_on_class_as_(string activityName, string className, string classActivityName)"
        },
        "verifyfacilityisassignedtoontofulfill()": {
          "definition": "Verify_facility__is_assigned_to__on__to_fulfill__(string facilityName, string className, string blockName, string ruleName)"
        },
        "authorizeforat()": {
          "definition": "Authorize__for__at__(string instructorFullName, string activityName, string authLevelName)"
        },
        "verifythereareclassschedulesforclasstemplate()": {
          "definition": "Verify_there_are__class_schedules_for_class_template_(int numberExpected, string templateName)"
        },
        "unassignequipmentfromon()": {
          "definition": "Unassign_equipment__from__on__(string equipmentName, string blockName, string className)"
        },
        "setdivisionofactivityinclassto()": {
          "definition": "Set_Division_of_Activity__in_Class__to__(string activityName, string className, string trainingDivisionName)"
        },
        "authorizeforatpriority()": {
          "definition": "Authorize__for__at_priority__(string instructorFullName, string activityName, int priority)"
        },
        "autoassignfacilitiesfor()": {
          "definition": "AutoAssign_facilities_for(string schedulingClassName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "SchedulingManagement"
    },
    "activity": {
      "namespace": "",
      "methods": {
        "verifycanaddsubactivity()": {
          "definition": "Verify_can_add_sub_activity()"
        },
        "verifycandeleteactivity()": {
          "definition": "Verify_can_delete_activity()"
        },
        "verifycaneditonlineproperties()": {
          "definition": "Verify_can_edit_online_properties()"
        },
        "verifydynamiclabelswereapplied()": {
          "definition": "Verify_dynamic_labels_were_applied()"
        },
        "verifycannotassigntest()": {
          "definition": "Verify_cannot_assign_test()"
        },
        "verifyauthorizationswereloaded()": {
          "definition": "Verify_authorizations_were_loaded()"
        },
        "verifycannoteditcertifications()": {
          "definition": "Verify_cannot_edit_certifications()"
        },
        "verifycansequenceitems()": {
          "definition": "Verify_can_sequence_items()"
        },
        "verifycannotsequenceitems()": {
          "definition": "Verify_cannot_sequence_items()"
        },
        "verifycaneditactivity()": {
          "definition": "Verify_can_edit_activity()"
        },
        "verifycaneditcertifications()": {
          "definition": "Verify_can_edit_certifications()"
        },
        "verifymiscellaneousdatawasloaded()": {
          "definition": "Verify_miscellaneous_data_was_loaded()"
        },
        "browsetoviewactivityonclass()": {
          "definition": "Browse_to_view_activity__on_class__(string activityName, string className)"
        },
        "verifycanassigntest()": {
          "definition": "Verify_can_assign_test()"
        },
        "verifycanviewportalavailability()": {
          "definition": "Verify_can_view_portal_availability()"
        },
        "initializedocuments()": {
          "definition": "InitializeDocuments()"
        },
        "verifycertificationswereloaded()": {
          "definition": "Verify_certifications_were_loaded()"
        },
        "initializeauthorizations()": {
          "definition": "InitializeAuthorizations(bool hasHigherLevelAuthorizations, bool canAdd, bool canEdit, bool canDelete)"
        },
        "verifycannoteditmiscellaneousdata()": {
          "definition": "Verify_cannot_edit_miscellaneous_data()"
        },
        "verifylabelfordueisempty()": {
          "definition": "Verify_label_for_Due_is_empty()"
        },
        "browsetoviewactivityonclasstemplate()": {
          "definition": "Browse_to_view_activity__on_class_template__(string activityName, string classTemplateName)"
        },
        "verifycannotaddsubactivity()": {
          "definition": "Verify_cannot_add_sub_activity()"
        },
        "verifycannotviewportalavailability()": {
          "definition": "Verify_cannot_view_portal_availability()"
        },
        "bindactivitysequencer()": {
          "definition": "BindActivitySequencer(List<ActivitySummaryItemDTO> activities)"
        },
        "verifyactivitysummarywasloaded()": {
          "definition": "Verify_activity_summary_was_loaded()"
        },
        "verifyleftmenurefreshed()": {
          "definition": "Verify_left_menu_refreshed()"
        },
        "verifyactivitysequencerwasloaded()": {
          "definition": "Verify_activity_sequencer_was_loaded()"
        },
        "verifycaneditmiscellaneousdata()": {
          "definition": "Verify_can_edit_miscellaneous_data()"
        },
        "verifycannoteditonlineproperties()": {
          "definition": "Verify_cannot_edit_online_properties()"
        },
        "bindcertifications()": {
          "definition": "BindCertifications(List<string> certifications)"
        },
        "verifycannotdeleteactivity()": {
          "definition": "Verify_cannot_delete_activity()"
        },
        "verifycannoteditactivity()": {
          "definition": "Verify_cannot_edit_activity()"
        },
        "verifydocumentswereloaded()": {
          "definition": "Verify_documents_were_loaded()"
        },
        "applydynamiclabels()": {
          "definition": "ApplyDynamicLabels()"
        },
        "bindactivitysummary()": {
          "definition": "BindActivitySummary(List<ActivitySummaryItemDTO> activities)"
        },
        "redirectafterdelete()": {
          "definition": "RedirectAfterDelete()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ActivityWorkflow"
    },
    "vehiclereadonly": {
      "namespace": "",
      "methods": {
        "redirecttoincidentpage()": {
          "definition": "RedirectToIncidentPage(int inventoryItemID)"
        },
        "verifydocumentsbandisvisible()": {
          "definition": "Verify_documents_band_is_visible()"
        },
        "verifyfullsizeimageis()": {
          "definition": "Verify_fullsize_image_is__(string fileName)"
        },
        "verifydocumentlistwasloaded()": {
          "definition": "Verify_document_list_was_loaded()"
        },
        "verifyasnimskind()": {
          "definition": "Verify_as_NIMS_Kind(string value)"
        },
        "verifyasmodel()": {
          "definition": "Verify__as_model(string value)"
        },
        "verifyasnimstier()": {
          "definition": "Verify_as_NIMS_Tier(string value)"
        },
        "verifyvehiclerecordforunderdoesnotexist()": {
          "definition": "Verify_vehicle_record_for_under_does_not_exist(string vehicleName, string organizationName)"
        },
        "verifyascolorscheme()": {
          "definition": "Verify__as_color_scheme(string value)"
        },
        "verifyvehicleisnotrentable()": {
          "definition": "Verify_vehicle_is_not_rentable()"
        },
        "verifyasmake()": {
          "definition": "Verify__as_make(string value)"
        },
        "verifyasdateenteredservice()": {
          "definition": "Verify__as_date_entered_service(string value)"
        },
        "verifyasvehicletype()": {
          "definition": "Verify__as_vehicle_type( string value )"
        },
        "verifyasnimsresource()": {
          "definition": "Verify_as_NIMS_Resource(string value)"
        },
        "verifyasstatus()": {
          "definition": "Verify__as_Status(string value)"
        },
        "verifythatnoprintpreferencesarerequestedandreportwindowisvisible()": {
          "definition": "Verify_that_no_print_preferences_are_requested_and_report_window_is_visible()"
        },
        "verifynomileageisrecorded()": {
          "definition": "Verify_no_mileage_is_recorded()"
        },
        "verifycertificationsbandishidden()": {
          "definition": "Verify_certifications_band_is_hidden()"
        },
        "verifyvehicleisrentable()": {
          "definition": "Verify_vehicle_is_rentable()"
        },
        "verifydescriptionis()": {
          "definition": "Verify_description_is__(string value)"
        },
        "verifyvehicleisnotschedulable()": {
          "definition": "Verify_vehicle_is_not_schedulable()"
        },
        "verifyvehicleisschedulable()": {
          "definition": "Verify_vehicle_is_schedulable()"
        },
        "initcertifications()": {
          "definition": "InitCertifications()"
        },
        "initdocuments()": {
          "definition": "InitDocuments()"
        },
        "verifythatisnotemailable()": {
          "definition": "Verify_that__is_not_emailable(string certName)"
        },
        "print()": {
          "definition": "Print(string certName)"
        },
        "showassignedinformation()": {
          "definition": "ShowAssignedInformation(string assigneeName, string statusChangeName, string statusChangeDate)"
        },
        "browsetovehiclerecordforunder()": {
          "definition": "Browse_to_vehicle_record_for__under__(string vehicleName, string organizationName)"
        },
        "redirecttovehiclelistpage()": {
          "definition": "RedirectToVehicleListPage(int? organizationID)"
        },
        "verifyasvin()": {
          "definition": "Verify__as_VIN(string value)"
        },
        "rememberresourceid()": {
          "definition": "Remember__Resource_Id(string name)"
        },
        "verifyasresourceid()": {
          "definition": "Verify__as_Resource_Id(string value)"
        },
        "verifythatlistcontainscertifications()": {
          "definition": "Verify_that_list_contains__certifications(int numCerts)"
        },
        "verifyresourceidisincrementedfrom()": {
          "definition": "Verify__Resource_Id_is_incremented_from__(string name, string key)"
        },
        "verifydocumentsbandishidden()": {
          "definition": "Verify_documents_band_is_hidden()"
        },
        "verifycertificationsbandisvisible()": {
          "definition": "Verify_certifications_band_is_visible()"
        },
        "verifythatisnotprintable()": {
          "definition": "Verify_that__is_not_printable(string certName)"
        },
        "verifythatisrenewable()": {
          "definition": "Verify_that__is_renewable(string certName)"
        },
        "verifythatisnotviewable()": {
          "definition": "Verify_that__is_not_viewable(string certName)"
        },
        "verifyasyear()": {
          "definition": "Verify__as_year(string value)"
        },
        "verifycertificationlistwasloaded()": {
          "definition": "Verify_certification_list_was_loaded()"
        },
        "verifyasmileageenteredon()": {
          "definition": "Verify_as_Mileage_entered_on(string mileage, string date)"
        },
        "verifyasdateremovedfromservice()": {
          "definition": "Verify__as_date_removed_from_service(string value)"
        },
        "showloststoleninformation()": {
          "definition": "ShowLostStolenInformation(string status, string statusChangeName, string statusChangeDate)"
        },
        "verifythatcertificationsrestricted()": {
          "definition": "Verify_that_certifications__restricted(string certsAreRestrictedString)"
        },
        "verifyasowner()": {
          "definition": "Verify__as_Owner(string value)"
        },
        "verifythatlistcontains()": {
          "definition": "Verify_that_list_contains__(string certName)"
        },
        "promptuserwithdeleteconfirmation()": {
          "definition": "PromptUserWithDeleteConfirmation()"
        },
        "verifyasnimsavailability()": {
          "definition": "Verify_as_NIMS_Availability(string value)"
        },
        "verifyasnamenumber()": {
          "definition": "Verify__as_NameNumber(string value)"
        },
        "redirecttoassignmentpage()": {
          "definition": "RedirectToAssignmentPage(int inventoryItemID)"
        },
        "verifyasnimstype()": {
          "definition": "Verify_as_NIMS_Type(string value)"
        },
        "verifythatuserissuecertifications()": {
          "definition": "Verify_that_user__issue_certifications(string canIssueCertsString)"
        },
        "verifythatisnotrenewable()": {
          "definition": "Verify_that__is_not_renewable(string certName)"
        },
        "promptuserwithdeletealternatives()": {
          "definition": "PromptUserWithDeleteAlternatives(InventoryUsageDTO usageDTO)"
        },
        "verifythatisprintable()": {
          "definition": "Verify_that__is_printable(string certName)"
        },
        "deletevehicle()": {
          "definition": "Delete_vehicle()"
        },
        "verifyasnimscategory()": {
          "definition": "Verify_as_NIMS_Category(string value)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "VehicleReadOnly"
    },
    "portaltraininghome": {
      "namespace": "",
      "methods": {
        "considerrowwithcoursetitle()": {
          "definition": "Consider_row_with_course_title__(string courseTitle)"
        },
        "verifystatusatindexis()": {
          "definition": "Verify_status_at_index__is__(int index, string status)"
        },
        "verifytotalattendeesatindexis()": {
          "definition": "Verify_total_attendees_at_index__is__(int index, string totalAttendees)"
        },
        "considerthefirstrow()": {
          "definition": "Consider_the_first_Row()"
        },
        "verifyprinttraininglinkisvisible()": {
          "definition": "Verify_Print_Training_link_is_visible()"
        },
        "verifynoresultsmessageisvisible()": {
          "definition": "Verify_No_Results_message_is_visible()"
        },
        "verifycoursenumberis()": {
          "definition": "Verify_course_number_is__(string courseNumber)"
        },
        "verifycoursenumberatindexis()": {
          "definition": "Verify_course_number_at_index__is__(int index, string courseNumber)"
        },
        "bindtraining()": {
          "definition": "BindTraining(List<PortalTrainingHomeDTO> dtos)"
        },
        "verifyendingis()": {
          "definition": "Verify_ending_is__(string starting)"
        },
        "verifypeoplependingapprovalis()": {
          "definition": "Verify_people_pending_approval_is__(string peoplePendingApproval)"
        },
        "verifylaststatuschangeatindexiswithinlast30days()": {
          "definition": "Verify_last_status_change_at_index__is_within_last_30_days(int index)"
        },
        "verifytotalattendeesis()": {
          "definition": "Verify_total_attendees_is__(string totalAttendees)"
        },
        "verifylaststatuschangeiswithinlast30days()": {
          "definition": "Verify_last_status_change_is_within_last_30_days()"
        },
        "verifycoursenumberisblank()": {
          "definition": "Verify_course_number_is_blank()"
        },
        "verifystartingis()": {
          "definition": "Verify_starting_is__(string starting)"
        },
        "verifybrowsetraininglinkishidden()": {
          "definition": "Verify_Browse_Training_link_is_hidden()"
        },
        "verifycoursetitleatindexis()": {
          "definition": "Verify_course_title_at_index__is__(int index, string courseTitle)"
        },
        "verifytherearerecentlyreportedtrainingevents()": {
          "definition": "Verify_there_are__recently_reported_training_events(int numEvents)"
        },
        "verifystartingatindexis()": {
          "definition": "Verify_starting_at_index__is__(int index, string starting)"
        },
        "verifyprinttraininglinkishidden()": {
          "definition": "Verify_Print_Training_link_is_hidden()"
        },
        "verifycoursehasstatusof()": {
          "definition": "Verify_course__has_status_of__(string courseName, string statusName)"
        },
        "verifybrowsetraininglinkisvisible()": {
          "definition": "Verify_Browse_Training_link_is_visible()"
        },
        "verifycoursehasattendees()": {
          "definition": "Verify_course__has__attendees(string courseName, int numAttendees)"
        },
        "verifystatusis()": {
          "definition": "Verify_status_is__(string status)"
        },
        "verifycourseisinlist()": {
          "definition": "Verify_course__is_in_list(string courseName)"
        },
        "verifypeoplependingapprovalatindexis()": {
          "definition": "Verify_people_pending_approval_at_index__is__(int index, string peoplePendingApproval)"
        },
        "considerrow()": {
          "definition": "Consider_Row__(int rowNumber)"
        },
        "verifynoresultsmessageishidden()": {
          "definition": "Verify_No_Results_message_is_hidden()"
        },
        "browsetoportaltrainingtab()": {
          "definition": "Browse_to_portal_training_tab()"
        },
        "verifycoursenumberatindexisblank()": {
          "definition": "Verify_course_number_at_index__is_blank(int index)"
        },
        "verifycoursetitleis()": {
          "definition": "Verify_course_title_is__(string courseTitle)"
        },
        "considerthesecondrow()": {
          "definition": "Consider_the_second_Row()"
        },
        "verifyendingatindexis()": {
          "definition": "Verify_ending_at_index__is__(int index, string ending)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalTrainingHomeWorkflow"
    },
    "acadisoutside": {
      "namespace": "",
      "methods": {
        "changeportalpasswordwithexistingpasswordfromwelcomeemailandnewpassword()": {
          "definition": "Change_portal_password_with_existing_password_from_welcome_email_and_new_password__(string newPassword)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "AcadisOutsideWorkflow"
    },
    "taskmonitor": {
      "namespace": "",
      "methods": {
        "verifyhasrun()": {
          "definition": "Verify__has_run(string taskDescription)"
        },
        "taskwasinitiatedon()": {
          "definition": "Task__was_initiated_on__(int taskNumber, string text)"
        },
        "therearetasks()": {
          "definition": "There_are__tasks(int number)"
        },
        "taskdurationis()": {
          "definition": "Task__duration_is__(int taskNumber, string text)"
        },
        "changetodays()": {
          "definition": "Change_to__days(int days)"
        },
        "taskcompletedon()": {
          "definition": "Task__completed_on__(int taskNumber, string text)"
        },
        "verifyhasnotrun()": {
          "definition": "Verify__has_not_run(string taskDescription)"
        },
        "clicksortby()": {
          "definition": "Click_sort_by__(TaskMonitorSortColumn sort)"
        },
        "bindtasks()": {
          "definition": "BindTasks(List<TaskMonitorTaskDTO> tasks)"
        },
        "taskwassuccessful()": {
          "definition": "Task__was_successful(int taskNumber)"
        },
        "taskfailedwithreason()": {
          "definition": "Task__failed_with_reason__(int taskNumber, string failureReason)"
        },
        "taskis()": {
          "definition": "Task__is__(int taskNumber, string taskDescription)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "TaskMonitorWorkflow"
    },
    "attemplatequestionsequence": {
      "namespace": "",
      "methods": {
        "showrandomizedperstudent()": {
          "definition": "ShowRandomizedPerStudent()"
        },
        "verifyrandomperstudentshown()": {
          "definition": "Verify_random_per_student__shown(string isisnot)"
        },
        "selectreverseorder()": {
          "definition": "Select_Reverse_order()"
        },
        "browsetotemplatequestionsequencepagefortemplate()": {
          "definition": "Browse_to_Template_question_sequence_page_for_template__(string templateName)"
        },
        "savesequencechanges()": {
          "definition": "Save_sequence_changes()"
        },
        "bindquestiondetail()": {
          "definition": "BindQuestionDetail(QuestionDetailDto detail)"
        },
        "setsequencenumberforquestionto()": {
          "definition": "Set_sequence_number_for_question__to__(string questionText, int sequence)"
        },
        "verifyquestionsequenceis()": {
          "definition": "Verify_question_sequence_is__(string questions)"
        },
        "selectrandomizeperstudent()": {
          "definition": "Select_Randomize_per_student()"
        },
        "selectcustomizethesequence()": {
          "definition": "Select_Customize_the_sequence()"
        },
        "selectquestion()": {
          "definition": "Select_question_(int index)"
        },
        "selectedition()": {
          "definition": "Select_edition(string name)"
        },
        "bindquestions()": {
          "definition": "BindQuestions(IList<QuestionOrderDto> questions)"
        },
        "selectcontinue()": {
          "definition": "Select_Continue()"
        },
        "shuffleordernow()": {
          "definition": "Shuffle_order_now()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ATTemplateQuestionSequenceWorkflow"
    },
    "updatestudentprerequisite": {
      "namespace": "",
      "methods": {
        "checkthecheckbox()": {
          "definition": "Check_the_checkbox()"
        },
        "cancelprerequisiteupdate()": {
          "definition": "Cancel_prerequisite_update()"
        },
        "browsetoupdateprerequisiteonstudentclassregistrationfor()": {
          "definition": "Browse_to_update__prerequisite__on_student__class_registration_for__(string category, string reqText, string studentName, string className)"
        },
        "setdateofbirthto()": {
          "definition": "Set_date_of_birth_to__(DateTime dob)"
        },
        "manuallyrecordfulfillmentoptionwithcomment()": {
          "definition": "Manually_record_fulfillment_option_with_comment(string comment)"
        },
        "verifyemploymentisnotselected()": {
          "definition": "Verify_employment__is_not_selected(string employerName)"
        },
        "verifytrainingisavailableforselection()": {
          "definition": "Verify_training__is_available_for_selection(string className)"
        },
        "verifyalertappearswarninguserthattheitemwillnotbeautofulfilled()": {
          "definition": "Verify_alert_appears_warning_user_that_the_item_will_not_be_autofulfilled()"
        },
        "saveprerequisiteasfulfilled()": {
          "definition": "Save_prerequisite_as_fulfilled()"
        },
        "clickcontinueonalerttosave()": {
          "definition": "Click_Continue_on_alert_to_save()"
        },
        "selectemployeeforfulfillment()": {
          "definition": "Select_employee__for_fulfillment(string employeeName)"
        },
        "verifyemploymentisselected()": {
          "definition": "Verify_employment__is_selected(string employerName)"
        },
        "selectcertificationforfulfillment()": {
          "definition": "Select_certification__for_fulfillment(string certName)"
        },
        "selectvehicleforfulfillment()": {
          "definition": "Select_vehicle__for_fulfillment(string vehicleName)"
        },
        "verifytrainingrecordsareloadedandtherearerecords()": {
          "definition": "Verify_training_records_are_loaded_and_there_are__records(int numRecs)"
        },
        "selectfilewithdescriptionandfilename()": {
          "definition": "Select_file_with_description__and_filename__(string descr, string fileName)"
        },
        "verifytrainingcannotbeselected()": {
          "definition": "Verify_training__cannot_be_selected(string className)"
        },
        "selectemploymentforfulfillment()": {
          "definition": "Select_employment__for_fulfillment(string employmentOrgName)"
        },
        "removeoptionselection()": {
          "definition": "Remove__option_selection(string optionText)"
        },
        "selectwaivefulfillmentoptionwithcomment()": {
          "definition": "Select_waive_fulfillment_option_with_comment__(string comment)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "clicktoattachdocument()": {
          "definition": "Click_to_attach_document()"
        },
        "uploadandselectnewfilewithdescriptionandclickdone()": {
          "definition": "Upload_and_select_new_file__with_description__and_click_Done(string fileName, string descr)"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "cancelalert()": {
          "definition": "Cancel_alert()"
        },
        "enterfulfillmentcommentof()": {
          "definition": "Enter_fulfillment_comment_of__(string comment)"
        },
        "selectoption()": {
          "definition": "Select__option(string optionText)"
        },
        "verifyreturnedtostudentreg()": {
          "definition": "Verify_returned_to_student_reg()"
        },
        "enterfreeformanswerof()": {
          "definition": "Enter_freeform_answer_of__(string answer)"
        },
        "saveprerequisiteasunfulfilled()": {
          "definition": "Save_prerequisite_as_unfulfilled()"
        },
        "selecttrainingforfulfillment()": {
          "definition": "Select_training__for_fulfillment(string trainingName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "UpdateStudentPrerequisiteWorkflow"
    },
    "taskrunner": {
      "namespace": "",
      "methods": {
        "runtask()": {
          "definition": "Run_task_( AcadisTaskType taskType )"
        },
        "tasktookzerotime()": {
          "definition": "Task_took_zero_time()"
        },
        "runcerttask()": {
          "definition": "Run_cert_task_(AcadisTaskType certTaskType)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "TaskRunnerWorkflow"
    },
    "trainingeventtesthelpers": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "TrainingEventTestHelpers"
    },
    "scenarioexception": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "ScenarioException"
    },
    "maintenanceticketinformation": {
      "namespace": "",
      "methods": {
        "browsetopagefromlistscreen()": {
          "definition": "Browse_to_page_from_list_screen()"
        },
        "clickupdateticket()": {
          "definition": "Click_update_ticket()"
        },
        "verifyworkhistoryitemnoteis()": {
          "definition": "Verify__work_history_item_note_is__(string ordinal, string expectedNote)"
        },
        "verifylastactivityisnotblank()": {
          "definition": "Verify_last_activity_is_not_blank()"
        },
        "verifyresourcetypeaheadresultsoneditpopovercontainsnamed()": {
          "definition": "Verify_resource_type_ahead_results_on_edit_popover_contains__named__(ResourceType resourceType, string name)"
        },
        "verifyworkhistoryitemstatusis()": {
          "definition": "Verify__work_history_item_status_is__(string ordinal, string expectedStatus)"
        },
        "verifyworkhistoryitemhilighted()": {
          "definition": "Verify__work_history_item__hilighted(string ordinal, string isOrNot)"
        },
        "verifyworkhistoryitemwasrecordedby()": {
          "definition": "Verify__work_history_item_was_recorded_by__(string ordinal, string expectedRecordedBy)"
        },
        "editticket()": {
          "definition": "Edit_ticket()"
        },
        "bindtickethistory()": {
          "definition": "BindTicketHistory(List<MaintenanceTicketHistoryItemDTO> data)"
        },
        "enterinresourcetypeaheadoneditpopover()": {
          "definition": "Enter__in_resource_type_ahead_on_edit_popover(string text)"
        },
        "selectnamedinresourcetypeaheadoneditpopover()": {
          "definition": "Select__named__in_resource_type_ahead_on_edit_popover(ResourceType resourceType, string name)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "MaintenanceTicketInformationWorkflow"
    },
    "addeditstaffassignment": {
      "namespace": "",
      "methods": {
        "enterintopersontypeahead()": {
          "definition": "Enter__into_person_type_ahead(string partialNameOrAcademyID)"
        },
        "clearsavedstate()": {
          "definition": "Clear_saved_state()"
        },
        "verifyselectedpersonis()": {
          "definition": "Verify_selected_person_is__(string name)"
        },
        "browsetoeditexistingassignmentforonclass()": {
          "definition": "Browse_to_edit_existing_assignment_for__on_class__(string personName, string className)"
        },
        "browsetoaddnewassignmentforactivityonclasstemplate()": {
          "definition": "Browse_to_add_new_assignment_for_activity__on_class_template__(string activityName, string templateName)"
        },
        "browsetoaddnewassignmentforclass()": {
          "definition": "Browse_to_add_new_assignment_for_class__(string className)"
        },
        "selectassignee()": {
          "definition": "Select_assignee__(string assigneeName)"
        },
        "assigntoclassasprimary()": {
          "definition": "Assign__to_class__as_primary__(string personName, string className, string roleName)"
        },
        "verifythisaduplicateassignment()": {
          "definition": "Verify_this__a_duplicate_assignment(string isOrNot)"
        },
        "assigntoclassas()": {
          "definition": "Assign__to_class__as__(string personName, string className, string roleName)"
        },
        "browsetoaddnewassignmentforactivityonclass()": {
          "definition": "Browse_to_add_new_assignment_for_activity__on_class__(string activityName, string className)"
        },
        "assigntoactivityinas()": {
          "definition": "Assign__to_activity__in__as__(string personName, string activityName, string className, string roleName)"
        },
        "browsetoaddnewassignmentforclasstemplate()": {
          "definition": "Browse_to_add_new_assignment_for_class_template__(string templateName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AddEditStaffAssignmentWorkflow"
    },
    "trainingeventdetails": {
      "namespace": "",
      "methods": {
        "verifyrequestregistration()": {
          "definition": "Verify__request_registration(string can)"
        },
        "verifydocumentslistisnotvisible()": {
          "definition": "Verify_documents_list_is_not_visible()"
        },
        "browsetodetailsfornonregistrationclass()": {
          "definition": "Browse_to_details_for_non_registration_class(string className)"
        },
        "browsetodetailsforacademyclass()": {
          "definition": "Browse_to_details_for_academy_class(string className)"
        },
        "browsetodetailsforonlineevent()": {
          "definition": "Browse_to_details_for_online_event(string className)"
        },
        "browsetodetailsforacademyclassasportaluser()": {
          "definition": "Browse_to_details_for_academy_class_as_portal_user__(string className, string emailAddress)"
        },
        "verifynotificationmessageisnotdisplayed()": {
          "definition": "Verify_notification_message_is_not_displayed()"
        },
        "showeventassignedpopover()": {
          "definition": "ShowEventAssignedPopover(int enrollmentID)"
        },
        "verifydocumentslistisempty()": {
          "definition": "Verify_documents_list_is_empty()"
        },
        "binddocuments()": {
          "definition": "BindDocuments(List<DocumentDTO> trainingDocuments)"
        },
        "verifydocumentslistisvisible()": {
          "definition": "Verify_documents_list_is_visible()"
        },
        "verifynotificationmessageisdisplayed()": {
          "definition": "Verify_notification_message_is_displayed(string message)"
        },
        "browsetodetailsforacademyclassasportalnonuser()": {
          "definition": "Browse_to_details_for_academy_class_as_portal_nonuser__(string className)"
        },
        "verifydocumentslisthasdocuments()": {
          "definition": "Verify_documents_list_has__documents(int numberOfDocuments)"
        },
        "browsetodetailsforonlineeventasportaluser()": {
          "definition": "Browse_to_details_for_online_event_as_portal_user__(string className, string emailAddress)"
        },
        "verifyeditroster()": {
          "definition": "Verify__edit_roster(string can)"
        },
        "verifyrequestwaitlist()": {
          "definition": "Verify__request_waitlist(string can)"
        },
        "browsetodetailsforonlineeventasportalnonuser()": {
          "definition": "Browse_to_details_for_online_event_as_portal_nonuser__(string className)"
        },
        "verifydocumentslisthasdocumentnamed()": {
          "definition": "Verify_documents_list_has_document_named__(string documentName)"
        },
        "verifycanrequestwaitlist()": {
          "definition": "Verify_can_request_waitlist()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "TrainingEventDetailsWorkflow"
    },
    "portaleventrequestlist": {
      "namespace": "",
      "methods": {
        "verifytherearenonapprovedeventrequestslisted()": {
          "definition": "Verify_there_are__non_approved_event_requests_listed(int numberOfRequests)"
        },
        "verifythereareapprovedeventrequestslisted()": {
          "definition": "Verify_there_are__approved_event_requests_listed(int numberOfRequests)"
        },
        "verifythenonapprovedeventonlineisnamedhasstatusandstartsonandendson()": {
          "definition": "Verify_the_non_approved_event_on_line__is_named__has_status__and_starts_on_and_ends_on(int line, string eventName, string status, DateTime startDate, DateTime endDate)"
        },
        "bindapprovedrequests()": {
          "definition": "BindApprovedRequests(IEnumerable<EventRequestListDTO> eventRequests)"
        },
        "verifytheapprovedeventonlineisnamedandstartsonandendson()": {
          "definition": "Verify_the_approved_event_on_line__is_named__and_starts_on_and_ends_on(int line, string eventName, DateTime startDate, DateTime endDate)"
        },
        "bindnonapprovedrequests()": {
          "definition": "BindNonApprovedRequests(IEnumerable<EventRequestListDTO> eventRequests)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalEventRequestListWorkflow"
    },
    "portalregistrationorientation": {
      "namespace": "",
      "methods": {
        "markdonotshowagainonregistrationorientationmodal()": {
          "definition": "Mark_do_not_show_again_on_registration_orientation_modal()"
        },
        "verifyregistrationorientationmodalisdisplayed()": {
          "definition": "Verify_registration_orientation_modal_is_displayed()"
        },
        "verifyregistrationorientationmodalisnotdisplayed()": {
          "definition": "Verify_registration_orientation_modal_is_not_displayed()"
        },
        "displayregistrationorientationmodal()": {
          "definition": "DisplayRegistrationOrientationModal()"
        },
        "closeregistrationorientationmodal()": {
          "definition": "Close_registration_orientation_modal()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalRegistrationOrientationWorkflow"
    },
    "animalread": {
      "namespace": "",
      "methods": {
        "verifybrandnumberis()": {
          "definition": "Verify_Brand_Number_is__(string value)"
        },
        "verifyphysicaldescriptionis()": {
          "definition": "Verify_Physical_Description_is__(string value)"
        },
        "verifyfullsizeimageis()": {
          "definition": "Verify_fullsize_image_is__(string fileName)"
        },
        "verifydocumentsbandisvisible()": {
          "definition": "Verify_documents_band_is_visible()"
        },
        "redirecttoincidentpage()": {
          "definition": "RedirectToIncidentPage(int inventoryItemID)"
        },
        "verifynimsavailabilityis()": {
          "definition": "Verify_NIMS_Availability_is__(string value)"
        },
        "verifynameis()": {
          "definition": "Verify_Name_is__(string value)"
        },
        "verifydateremovedfromserviceis()": {
          "definition": "Verify_Date_Removed_from_Service_is__(string value)"
        },
        "rememberresourceid()": {
          "definition": "Remember__Resource_Id(string name)"
        },
        "verifygenderis()": {
          "definition": "Verify_Gender_is__(string value)"
        },
        "verifythatalternativesdialogshowsresourcerecordedbyason()": {
          "definition": "Verify_that_alternatives_dialog_shows_resource_recorded_by__as__on__(string statusChangeName, string lostOrStolenStatus, string statusChangeDate)"
        },
        "verifycertificationsbandisvisible()": {
          "definition": "Verify_certifications_band_is_visible()"
        },
        "verifydocumentsbandishidden()": {
          "definition": "Verify_documents_band_is_hidden()"
        },
        "verifydateofbirthis()": {
          "definition": "Verify_Date_of_Birth_is__(string value)"
        },
        "verifybreedis()": {
          "definition": "Verify_Breed_is__(string value)"
        },
        "verifyresourceidisincrementedfrom()": {
          "definition": "Verify__Resource_Id_is_incremented_from__(string name, string key)"
        },
        "verifyowneris()": {
          "definition": "Verify_Owner_is(string value)"
        },
        "selectmaketheresourceinactive()": {
          "definition": "Select_Make_the_resource_inactive()"
        },
        "verifyusernavigatedtolistpage()": {
          "definition": "Verify_user_navigated_to_list_page()"
        },
        "showloststoleninformation()": {
          "definition": "ShowLostStolenInformation(string status, string statusChangeName, string statusChangeDate)"
        },
        "verifynimstieris()": {
          "definition": "Verify_NIMS_Tier_is__(string value)"
        },
        "selectchangetheresourceassignment()": {
          "definition": "Select_Change_the_resource_assignment()"
        },
        "verifydeleteconfirmationdialogwasdisplayed()": {
          "definition": "Verify_delete_confirmation_dialog_was_displayed()"
        },
        "verifynimstypeis()": {
          "definition": "Verify_NIMS_Type_is__(string value)"
        },
        "redirecttolistpage()": {
          "definition": "RedirectToListPage(int organizationID)"
        },
        "verifynimsresourceis()": {
          "definition": "Verify_NIMS_Resource_is__(string value)"
        },
        "verifyusernavigatedtoincidentpage()": {
          "definition": "Verify_user_navigated_to_incident_page()"
        },
        "verifycertificationsbandishidden()": {
          "definition": "Verify_certifications_band_is_hidden()"
        },
        "promptuserwithdeleteconfirmation()": {
          "definition": "PromptUserWithDeleteConfirmation()"
        },
        "verifyusernavigatedtoassignmentpage()": {
          "definition": "Verify_user_navigated_to_assignment_page()"
        },
        "verifydescriptionis()": {
          "definition": "Verify_Description_is(string value)"
        },
        "verifystatusis()": {
          "definition": "Verify_Status_is__(string value)"
        },
        "verifynimscategoryis()": {
          "definition": "Verify_NIMS_Category_is__(string value)"
        },
        "verifythatalternativesdialogshowsresourceassignedbytoon()": {
          "definition": "Verify_that_alternatives_dialog_shows_resource_assigned_by__to__on__(string statusChangeName, string assigneeName, string statusChangeDate)"
        },
        "clickcontinueindeletealternativesdialog()": {
          "definition": "Click_Continue_in_delete_alternatives_dialog()"
        },
        "initdocuments()": {
          "definition": "InitDocuments()"
        },
        "viewanimalfromorganization()": {
          "definition": "View_animal__from_organization__(string animalName, string organizationName)"
        },
        "initcertifications()": {
          "definition": "InitCertifications()"
        },
        "verifyanimaltypeis()": {
          "definition": "Verify_Animal_Type_is__(string value)"
        },
        "redirecttoassignmentpage()": {
          "definition": "RedirectToAssignmentPage(int inventoryItemID)"
        },
        "verifydeleteisdenied()": {
          "definition": "Verify_Delete_is_denied()"
        },
        "promptuserwithdeletealternatives()": {
          "definition": "PromptUserWithDeleteAlternatives(InventoryUsageDTO usageDTO)"
        },
        "verifydateenteredserviceis()": {
          "definition": "Verify_Date_Entered_Service_is__(string value)"
        },
        "verifymarkingsis()": {
          "definition": "Verify_Markings_is__(string value)"
        },
        "selectreporttheresourceaslostorstolen()": {
          "definition": "Select_Report_the_resource_as_lost_or_stolen()"
        },
        "verifydeletealternativesdialogwasdisplayed()": {
          "definition": "Verify_delete_alternatives_dialog_was_displayed()"
        },
        "verifynimskindis()": {
          "definition": "Verify_NIMS_Kind_is__(string value)"
        },
        "clickdelete()": {
          "definition": "Click_Delete()"
        },
        "showassignedinformation()": {
          "definition": "ShowAssignedInformation(string assigneeName, string statusChangeName, string statusChangeDate)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AnimalRead"
    },
    "issuedcertificationdetail": {
      "namespace": "",
      "methods": {
        "verifycertnameis()": {
          "definition": "Verify_cert_name_is(string value)"
        },
        "returntoinventorycompliancesearchresults()": {
          "definition": "ReturnToInventoryComplianceSearchResults()"
        },
        "returntoclassdefpage()": {
          "definition": "ReturnToClassDefPage()"
        },
        "redirecttorenewalapplication()": {
          "definition": "RedirectToRenewalApplication()"
        },
        "verifythereareactions()": {
          "definition": "Verify_there_are__actions(int count)"
        },
        "verifyusercannotdeletecertification()": {
          "definition": "Verify_user_cannot_delete_certification()"
        },
        "browsetotheissuedcertdetailpageforcertificationonfirearm()": {
          "definition": "Browse_to_the_issued_cert_detail_page_for_certification__on_firearm__(string certName, string firearmSN)"
        },
        "returntomergepage()": {
          "definition": "ReturnToMergePage()"
        },
        "returntofacilitypage()": {
          "definition": "ReturnToFacilityPage()"
        },
        "loadcertificationhistory()": {
          "definition": "LoadCertificationHistory(List<IssuedCertificationActionDTO> history)"
        },
        "requesttoupdateothernumberid()": {
          "definition": "Request_to_update_other_number_id()"
        },
        "verifyothernumberidis()": {
          "definition": "Verify_other_number_id_is(string value)"
        },
        "browsetotheissuedcertdetailpageforpersonandcert()": {
          "definition": "Browse_to_the_issued_cert_detail_page_for_person__and_cert__(string personKey, string certName)"
        },
        "returntoorganizationpage()": {
          "definition": "ReturnToOrganizationPage()"
        },
        "verifyrecipientnameis()": {
          "definition": "Verify_recipient_name_is(string value)"
        },
        "showdeletecertrenewalconfirmation()": {
          "definition": "ShowDeleteCertRenewalConfirmation(string actionType, int actionId)"
        },
        "returntopreviouspage()": {
          "definition": "Return_to_previous_page()"
        },
        "deleteactioneffectiveon()": {
          "definition": "Delete_action_effective_on(CertRecordAction actionType, DateTime date)"
        },
        "deleteissuedcert()": {
          "definition": "Delete_issued_cert()"
        },
        "verifythatnoprintpreferencesarerequestedandreportwindowisvisible()": {
          "definition": "Verify_that_no_print_preferences_are_requested_and_report_window_is_visible()"
        },
        "verifystatusis()": {
          "definition": "Verify_status_is( string value)"
        },
        "deletecertaction()": {
          "definition": "Delete_cert_action(string certActionKey)"
        },
        "verifyinreadmodeofothernumber()": {
          "definition": "Verify_in_read_mode_of_other_number()"
        },
        "showdeletecertactionconfirmation()": {
          "definition": "ShowDeleteCertActionConfirmation(string actionType)"
        },
        "verifythereisanactionmatching()": {
          "definition": "Verify_there_is_an_action_matching(string actionString)"
        },
        "verifynoprinttemplatemessageshown()": {
          "definition": "Verify_no_print_template_message_shown()"
        },
        "deletecertrenewalwithid()": {
          "definition": "Delete_cert_renewal_with_ID__(int renewalID)"
        },
        "displayeditotherid()": {
          "definition": "DisplayEditOtherID()"
        },
        "canceleditotherid()": {
          "definition": "Cancel_edit_other_id()"
        },
        "returntoorganizationsearchpage()": {
          "definition": "ReturnToOrganizationSearchPage()"
        },
        "browsetotheissuedcertdetailpageforcertificationonorganization()": {
          "definition": "Browse_to_the_issued_cert_detail_page_for_certification__on_Organization__(string certName, string organizationName)"
        },
        "verifythereisaction()": {
          "definition": "Verify_there_is_action(int count)"
        },
        "clickprintbuttononprinthistoryband()": {
          "definition": "Click_Print_button_on_print_history_band()"
        },
        "returntovehiclepage()": {
          "definition": "ReturnToVehiclePage()"
        },
        "redirecttorenewcertification()": {
          "definition": "RedirectToRenewCertification()"
        },
        "returntopersoncompliancemonitor()": {
          "definition": "ReturnToPersonComplianceMonitor()"
        },
        "displayreadotherid()": {
          "definition": "DisplayReadOtherID()"
        },
        "returntopersonpage()": {
          "definition": "ReturnToPersonPage()"
        },
        "returntovehiclesearchpage()": {
          "definition": "ReturnToVehicleSearchPage()"
        },
        "setaddactionbuttonvisible()": {
          "definition": "SetAddActionButtonVisible(bool bShow)"
        },
        "verifythatprintpreferencesisvisiblerequestingmailingaddresspreference()": {
          "definition": "Verify_that_Print_Preferences_is_visible_requesting_Mailing_Address_preference()"
        },
        "returntoorganizationcompliancemonitor()": {
          "definition": "ReturnToOrganizationComplianceMonitor()"
        },
        "browsetotheissuedcertdetailpageforcertificationonanimal()": {
          "definition": "Browse_to_the_issued_cert_detail_page_for_certification__on_animal__(string certName, string animalName)"
        },
        "browsetotheissuedcertdetailpageforcertificationonfacility()": {
          "definition": "Browse_to_the_issued_cert_detail_page_for_certification__on_facility__(string certName, string facilityName)"
        },
        "editotherid()": {
          "definition": "Edit_other_id()"
        },
        "saveotherid()": {
          "definition": "Save_other_id()"
        },
        "verifycertificatecannotbeselectedforprinting()": {
          "definition": "Verify_certificate_cannot_be_selected_for_printing()"
        },
        "removemarkforprinting()": {
          "definition": "Remove_mark_for_printing()"
        },
        "verifycertificatehasbeenprintedtimes()": {
          "definition": "Verify_certificate_has_been_printed__times(int numPrints)"
        },
        "markforprinting()": {
          "definition": "Mark_for_printing()"
        },
        "verifyineditmodeofothernumber()": {
          "definition": "Verify_in_edit_mode_of_other_number()"
        },
        "verifyusercandeletecertification()": {
          "definition": "Verify_user_can_delete_certification()"
        },
        "verifycertificatecanbeselectedforprinting()": {
          "definition": "Verify_certificate_can_be_selected_for_printing()"
        },
        "verifycertificatewasprintedtodayby()": {
          "definition": "Verify_certificate_was_printed_today_by__(string personName)"
        },
        "submitothernumberidupdate()": {
          "definition": "Submit_other_number_id_update()"
        },
        "verifyusercannoteditotheridfield()": {
          "definition": "Verify_user_cannot_edit_other_id_field()"
        },
        "loadprinthistory()": {
          "definition": "LoadPrintHistory(List<IssuedCertificationPrintHistoryDTO> history)"
        },
        "returntofirearmpage()": {
          "definition": "ReturnToFirearmPage()"
        },
        "browsetotheissuedcertdetailpageforcertificationonvehicle()": {
          "definition": "Browse_to_the_issued_cert_detail_page_for_certification__on_vehicle__(string certName, string vehicleName)"
        },
        "returntoaccountablepropertypage()": {
          "definition": "ReturnToAccountablePropertyPage()"
        },
        "verifyexpirationdateis()": {
          "definition": "Verify_expiration_date_is_(string value)"
        },
        "setothernumberidto()": {
          "definition": "Set_other_number_id_to(string value)"
        },
        "returntopersonsearchpage()": {
          "definition": "ReturnToPersonSearchPage()"
        },
        "returntoanimalpage()": {
          "definition": "ReturnToAnimalPage()"
        },
        "returntocompliancemonitor()": {
          "definition": "ReturnToComplianceMonitor()"
        },
        "returntoresourcecompliancemonitor()": {
          "definition": "ReturnToResourceComplianceMonitor()"
        },
        "verifyissuedateis()": {
          "definition": "Verify_issue_date_is(string value)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "IssuedCertificationDetail"
    },
    "employmentcriteriapanel": {
      "namespace": "",
      "methods": {
        "bindassignmentsearchmodes()": {
          "definition": "BindAssignmentSearchModes(IEnumerable<DutyAssignmentSearchMode> modes)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EmploymentCriteriaPanelWorkflow"
    },
    "certificationqualificationdata": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "CertificationQualificationData"
    },
    "performancereportsignatureoptions": {
      "namespace": "",
      "methods": {
        "setapproverlinelabelto()": {
          "definition": "Set_approver_line_label_to(string label)"
        },
        "verifyapproverlinelabelis()": {
          "definition": "Verify_approver_line_label_is(string label)"
        },
        "setauthorlinelabelto()": {
          "definition": "Set_author_line_label_to(string label)"
        },
        "setsubjectlinelabelto()": {
          "definition": "Set_subject_line_label_to(string label)"
        },
        "verifynameis()": {
          "definition": "Verify_name_is(string name)"
        },
        "verifyapproverlinelabelisblank()": {
          "definition": "Verify_approver_line_label_is_blank()"
        },
        "setauthorsignaturedisplayto()": {
          "definition": "Set_author_signature_display_to(AuthorSignatureDisplayOption displaySignature)"
        },
        "verifyshowsubjectprintlineis()": {
          "definition": "Verify_show_subject_print_line_is(bool printLine)"
        },
        "setapproversignaturedisplayto()": {
          "definition": "Set_approver_signature_display_to(AuthorSignatureDisplayOption displaySignature)"
        },
        "verifyauthorsignaturedisplayissetto()": {
          "definition": "Verify_author_signature_display_is_set_to(AuthorSignatureDisplayOption displaySignature)"
        },
        "setsubjectsignaturedisplayto()": {
          "definition": "Set_subject_signature_display_to(SubjectSignatureDisplayOption displaySignature)"
        },
        "setshowauthorprintlineto()": {
          "definition": "Set_show_author_print_line_to(bool printLine)"
        },
        "browsetosignatureoptionsfor()": {
          "definition": "Browse_to_signature_options_for(string reportLabel)"
        },
        "setshowapproverprintlineto()": {
          "definition": "Set_show_approver_print_line_to(bool printLine)"
        },
        "verifyshowapproverprintlineis()": {
          "definition": "Verify_show_approver_print_line_is(bool printLine)"
        },
        "verifyauthorlinelabelisblank()": {
          "definition": "Verify_author_line_label_is_blank()"
        },
        "verifyshowauthorprintlineis()": {
          "definition": "Verify_show_author_print_line_is(bool printLine)"
        },
        "setshowsubjectprintlineto()": {
          "definition": "Set_show_subject_print_line_to(bool printLine)"
        },
        "verifyapproversignaturedisplayissetto()": {
          "definition": "Verify_approver_signature_display_is_set_to(ApproverSignatureDisplayOption displaySignature)"
        },
        "verifyauthorlinelabelis()": {
          "definition": "Verify_author_line_label_is(string label)"
        },
        "verifysubjectsignaturedisplayissetto()": {
          "definition": "Verify_subject_signature_display_is_set_to(SubjectSignatureDisplayOption displaySignature)"
        },
        "savesignatureoptions()": {
          "definition": "Save_signature_options()"
        },
        "verifysubjectlinelabelisblank()": {
          "definition": "Verify_subject_line_label_is_blank()"
        },
        "verifysubjectlinelabelis()": {
          "definition": "Verify_subject_line_label_is(string label)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PerformanceReportSignatureOptionsWorkflow"
    },
    "firearmrecord": {
      "namespace": "",
      "methods": {
        "verifycaliberis()": {
          "definition": "Verify_caliber_is__(string caliber)"
        },
        "verifyaccessoriesis()": {
          "definition": "Verify_accessories_is__(string accessories)"
        },
        "verifyredirectedtoincidentpage()": {
          "definition": "Verify_redirected_to_incident_page()"
        },
        "verifyfullsizeimageis()": {
          "definition": "Verify_fullsize_image_is__(string fileName)"
        },
        "redirecttoincidentpage()": {
          "definition": "RedirectToIncidentPage(int inventoryItemID)"
        },
        "verifydocumentsbandisvisible()": {
          "definition": "Verify_documents_band_is_visible()"
        },
        "confirmdeletewithcomment()": {
          "definition": "Confirm_Delete_with_comment( string deleteComment )"
        },
        "verifynameis()": {
          "definition": "Verify_name_is__( string name )"
        },
        "requestdelete()": {
          "definition": "Request_Delete()"
        },
        "verifyredirectedtoassignmentpage()": {
          "definition": "Verify_redirected_to_assignment_page()"
        },
        "verifyredirectedtofirearmlistpage()": {
          "definition": "Verify_redirected_to_firearm_list_page()"
        },
        "verifycertificationsbandisvisible()": {
          "definition": "Verify_certifications_band_is_visible()"
        },
        "verifydocumentsbandishidden()": {
          "definition": "Verify_documents_band_is_hidden()"
        },
        "verifyserialnumberis()": {
          "definition": "Verify_serial_number_is__(string serial)"
        },
        "verifyassetnumberis()": {
          "definition": "Verify_asset_number_is__(string asset)"
        },
        "choosereportfirearmlostorstolenoption()": {
          "definition": "Choose_report_firearm_lost_or_stolen_option()"
        },
        "verifyowneris()": {
          "definition": "Verify_owner_is__(string owner)"
        },
        "chooseinactivateoption()": {
          "definition": "Choose_inactivate_option()"
        },
        "redirecttofirearmlistpage()": {
          "definition": "RedirectToFirearmListPage(int organizationID)"
        },
        "showloststoleninformation()": {
          "definition": "ShowLostStolenInformation(string status, string statusChangeName, string statusChangeDate)"
        },
        "verifypurchasedateis()": {
          "definition": "Verify_purchase_date_is__(string date)"
        },
        "browsetofirearmrecordwithserialnumber()": {
          "definition": "Browse_to_firearm_record_with_serial_number__(string serial)"
        },
        "verifycertificationsbandishidden()": {
          "definition": "Verify_certifications_band_is_hidden()"
        },
        "promptuserwithdeleteconfirmation()": {
          "definition": "PromptUserWithDeleteConfirmation()"
        },
        "verifydescriptionis()": {
          "definition": "Verify_description_is__(string descr)"
        },
        "verifystatusis()": {
          "definition": "Verify_status_is__(string status)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifypurchasepriceis()": {
          "definition": "Verify_purchase_price_is__(string price)"
        },
        "initdocuments()": {
          "definition": "InitDocuments()"
        },
        "initcertifications()": {
          "definition": "InitCertifications()"
        },
        "verifyuserpromptedwithdeleteconfirmation()": {
          "definition": "Verify_user_prompted_with_delete_confirmation()"
        },
        "redirecttoassignmentpage()": {
          "definition": "RedirectToAssignmentPage(int inventoryItemID)"
        },
        "browsetofirearmrecordfor()": {
          "definition": "Browse_to_firearm_record_for__(string firearmName)"
        },
        "verifydeleteisdenied()": {
          "definition": "Verify_Delete_is_denied()"
        },
        "promptuserwithdeletealternatives()": {
          "definition": "PromptUserWithDeleteAlternatives(InventoryUsageDTO usageDTO)"
        },
        "verifyuserpromtedwithdeletealternativesbecausefirearminuse()": {
          "definition": "Verify_user_promted_with_delete_alternatives_because_firearm_in_use()"
        },
        "choosereassignfirearmoption()": {
          "definition": "Choose_reassign_firearm_option()"
        },
        "showassignedinformation()": {
          "definition": "ShowAssignedInformation(string assigneeName, string statusChangeName, string statusChangeDate)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "FirearmRecord"
    },
    "loginsimulator": {
      "namespace": "",
      "methods": {
        "verifyacadisloginsucceeded()": {
          "definition": "Verify_acadis_login_succeeded()"
        },
        "signinasproctorwithusernameandpassword()": {
          "definition": "Sign_in_as_proctor_with_username__and_password(string userName, string password)"
        },
        "logintoacadisaswithpassword()": {
          "definition": "Login_to_acadis_as__with_password__(string userName, string password)"
        },
        "logintoportalaswithpassword()": {
          "definition": "Login_to_portal_as__with_password(string userName, string password)"
        },
        "verifyportalloginsucceeded()": {
          "definition": "Verify_portal_login_succeeded()"
        },
        "verifyacadisloginfailed()": {
          "definition": "Verify_acadis_login_failed()"
        },
        "verifyproctorloginsucceeded()": {
          "definition": "Verify_proctor_login_succeeded()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "LoginSimulatorWorkflow"
    },
    "documentimportverification": {
      "namespace": "",
      "methods": {
        "verifypersonwithacademyiddocument()": {
          "definition": "Verify_person_with_academy_id____document__(string owner, string hasOrNot, string documentName)"
        },
        "processallimports()": {
          "definition": "Process_all_imports()"
        },
        "verifyactivityinclasstemplateinprograminacademyhasdocument()": {
          "definition": "Verify_activity__in_class_template__in_program__in_academy__has_document(string owner, string @class, string program, string academy, string documentName)"
        },
        "verifypersonwithacademyidhasdocument()": {
          "definition": "Verify_person_with_academy_id__has_document__(string owner, string documentName)"
        },
        "verifyclasstemplateinprograminacademyhasdocument()": {
          "definition": "Verify_class_template__in_program__in_academy__has_document(string owner, string program, string academy, string documentName)"
        },
        "verifyclassinprograminacademyhasdocument()": {
          "definition": "Verify_class__in_program__in_academy__has_document(string owner, string program, string academy, string documentName)"
        },
        "verifyorganizationwithnamehasdocument()": {
          "definition": "Verify_organization_with_name__has_document__(string owner, string documentName)"
        },
        "verifytrainingeventhasdocument()": {
          "definition": "Verify_training_event__has_document__( string ownerName, string documentName )"
        },
        "verifypersonwithacademyidhasdocumentsnamed()": {
          "definition": "Verify_person_with_academy_id___has___documents_named____(string owner, int count, string documentName)"
        },
        "verifyactivityinclassinprograminacademyhasdocument()": {
          "definition": "Verify_activity__in_class__in_program__in_academy__has_document(string owner, string @class, string program, string academy, string documentName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "DocumentImportVerification"
    },
    "portalhomepage": {
      "namespace": "",
      "methods": {
        "browsetoportalhometab()": {
          "definition": "Browse_to_portal_home_tab()"
        },
        "verifytraininglistcontainsitems()": {
          "definition": "Verify_Training_List_contains_items(int numItems)"
        },
        "bindpersondata()": {
          "definition": "BindPersonData(int personId)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalHomePageWorkflow"
    },
    "lotraceabilitymatrix": {
      "namespace": "",
      "methods": {
        "verifythatelohasnotests()": {
          "definition": "Verify_that_ELO_has_no_tests()"
        },
        "verifythatelohastests()": {
          "definition": "Verify_that_ELO_has_tests__(List<string> tests)"
        },
        "verifythatmatrixcontainstlo()": {
          "definition": "Verify_that_matrix_contains_TLO__(string tloName)"
        },
        "verifythatmatrixcontainstlos()": {
          "definition": "Verify_that_matrix_contains__TLOs(int numTLOs)"
        },
        "verifythateloistaughtandtested()": {
          "definition": "Verify_that_ELO_is_taught_and_tested()"
        },
        "verifythattlocontainselos()": {
          "definition": "Verify_that_TLO_contains__ELOs(int numELOs)"
        },
        "verifythateloistaughtonly()": {
          "definition": "Verify_that_ELO_is_taught_only()"
        },
        "browsetopageforcurriculum()": {
          "definition": "Browse_to_page_for_curriculum__(string curriculumName)"
        },
        "bindlearningobjectives()": {
          "definition": "BindLearningObjectives(List<TloDto> data)"
        },
        "verifythattlocontainselo()": {
          "definition": "Verify_that_TLO_contains_ELO__(string eloName)"
        },
        "verifythateloistestedonly()": {
          "definition": "Verify_that_ELO_is_tested_only()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "LOTraceabilityMatrixWorkflow"
    },
    "facilityrecord": {
      "namespace": "",
      "methods": {
        "verifydocumentsbandisvisible()": {
          "definition": "Verify_documents_band_is_visible()"
        },
        "browsetofacilityrecordfor()": {
          "definition": "Browse_to__facility_record_for__(string orgName, string propertyDisplayName)"
        },
        "verifyfacilityisrentable()": {
          "definition": "Verify_facility_is_rentable()"
        },
        "verifydocumentsbandishidden()": {
          "definition": "Verify_documents_band_is_hidden()"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for(string facilityName)"
        },
        "verifycertificationbandsarehidden()": {
          "definition": "Verify_certification_bands_are_hidden()"
        },
        "verifyfacilityisnotschedulable()": {
          "definition": "Verify_facility_is_not_schedulable()"
        },
        "verifyfacilityisnotrentable()": {
          "definition": "Verify_facility_is_not_rentable()"
        },
        "initdocuments()": {
          "definition": "InitDocuments()"
        },
        "initcertifications()": {
          "definition": "InitCertifications()"
        },
        "verifycertificationbandsarevisible()": {
          "definition": "Verify_certification_bands_are_visible()"
        },
        "verifyfacilityisschedulable()": {
          "definition": "Verify_facility_is_schedulable()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "FacilityRecordWorkflow"
    },
    "addeditlessonplan": {
      "namespace": "",
      "methods": {
        "verifyeffectivedateerrorisnotshown()": {
          "definition": "Verify_effective_date_error_is_not_shown()"
        },
        "browsetopageforlessonplan()": {
          "definition": "Browse_to_page_for_lesson_plan__(string lessonPlanTitle)"
        },
        "verifyexistsinlistwithdescription()": {
          "definition": "Verify__exists_in_list_with_description__( string fileName, string fileDescription )"
        },
        "verifycandeletedocuments()": {
          "definition": "Verify_can_delete_documents()"
        },
        "verifyoptionsforapprovingorganizationare()": {
          "definition": "Verify_options_for_Approving_Organization_are__(List<string> orgNames)"
        },
        "verifycannotdeletedocuments()": {
          "definition": "Verify_cannot_delete_documents()"
        },
        "verifyuserwasnavigatedtothelessonplanlisthighlighting()": {
          "definition": "Verify_user_was_navigated_to_the_lesson_plan_list_highlighting__(string highlightedLessonPlanName)"
        },
        "addinstructorwithroleandhours()": {
          "definition": "Add_Instructor__with_role__and__hours(string personName, string roleName, decimal hours)"
        },
        "browsetopagefornewversionoflessonplan()": {
          "definition": "Browse_to_page_for_new_version_of_lesson_plan__(string lessonPlanTitle)"
        },
        "verifyisnotprotected()": {
          "definition": "Verify__is_not_protected( string fileName )"
        },
        "verifycanbeedited()": {
          "definition": "Verify__can_be_edited( string fileName )"
        },
        "verifycannotadddocument()": {
          "definition": "Verify_cannot_add_document()"
        },
        "verifyusernavigatedtoaddadocument()": {
          "definition": "Verify_user_navigated_to_add_a_document()"
        },
        "verifycannotbeedited()": {
          "definition": "Verify__cannot_be_edited( string fileName )"
        },
        "verifycanbeopenedforviewing()": {
          "definition": "Verify__can_be_opened_for_viewing( string fileName )"
        },
        "clickadddocument()": {
          "definition": "Click_Add_Document()"
        },
        "bindhistoryitems()": {
          "definition": "BindHistoryItems(IList<LessonPlanRequestHistoryItemDTO> items)"
        },
        "bindinstructorlist()": {
          "definition": "BindInstructorList(List<TrainingEventInstructorDTO> dtos)"
        },
        "verifycanadddocument()": {
          "definition": "Verify_can_add_document()"
        },
        "verifytherearedocumentsinthelist()": {
          "definition": "Verify_there_are__documents_in_the_list( int count )"
        },
        "verifyeffectivedatewarningisshown()": {
          "definition": "Verify_effective_date_warning_is_shown()"
        },
        "navigatetolessonplanlist()": {
          "definition": "NavigateToLessonPlanList(int? activeLessonPlanID)"
        },
        "verifyusernavigatedtothelessonplanlist()": {
          "definition": "Verify_user__navigated_to_the_lesson_plan_list(string wasWasNotString)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AddEditLessonPlanWorkflow"
    },
    "testopiadatetimeprovider": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "TestopiaDateTimeProvider"
    },
    "analysisofstudentperformancereport": {
      "namespace": "",
      "methods": {
        "verifyactivityandtestnameis()": {
          "definition": "Verify_activity_and_test_name_is__(string activityAndTestName)"
        },
        "verifymeanplusonestandarddeviationis()": {
          "definition": "Verify_Mean_Plus_One_Standard_Deviation_is__(decimal meanValue)"
        },
        "verifyscoremeanis()": {
          "definition": "Verify_Score_Mean_is__(string meanScore)"
        },
        "verifyminimumpassinggradeis()": {
          "definition": "Verify_Minimum_Passing_Grade_is__(decimal minimumPassingGrade)"
        },
        "verifygradedistributiontableshowstakecolumns()": {
          "definition": "Verify_Grade_distribution_table_shows__take_columns(int expectedNumberOfTakeColumns)"
        },
        "browsetoreportfor()": {
          "definition": "Browse_to_Report_for__(string testName)"
        },
        "verifygradestandarddeviationis()": {
          "definition": "Verify_Grade_Standard_Deviation_is__(decimal deviation)"
        },
        "verifygradedistributiontablerowgraderangeisandshowstakecounts()": {
          "definition": "Verify_Grade_distribution_table_row__grade_range_is__and_shows_take_counts__(int rowNum, string gradeRange, List<int> values)"
        },
        "verifyscoreskewnessis()": {
          "definition": "Verify_Score_Skewness_is__(string skewness)"
        },
        "verifygradedistributiontabletotalsrowshowstakecounts()": {
          "definition": "Verify_Grade_distribution_table_Totals_row_shows_take_counts__(List<int> values)"
        },
        "verifygradeskewnessis()": {
          "definition": "Verify_Grade_Skewness_is__(string skewnessString)"
        },
        "verifygradekurtosisis()": {
          "definition": "Verify_Grade_Kurtosis_is__(string kurtosisString)"
        },
        "verifyscorevarianceis()": {
          "definition": "Verify_Score_Variance_is__(string variance)"
        },
        "verifygrademeanis()": {
          "definition": "Verify_Grade_Mean_is__(decimal mean)"
        },
        "verifygradevarianceis()": {
          "definition": "Verify_Grade_Variance_is__(string varianceString)"
        },
        "verifymeanminusonestandarddeviationis()": {
          "definition": "Verify_Mean_Minus_One_Standard_Deviation_is__(decimal meanValue)"
        },
        "verifyscoremedianis()": {
          "definition": "Verify_Score_Median_is__(string medianScore)"
        },
        "verifygradedistributiontablerowgraderangeisandscorerangeisandshowstakecounts()": {
          "definition": "Verify_Grade_distribution_table_row__grade_range_is__and_score_range_is__and_shows_take_counts__(int rowNum, string gradeRange, string scoreRange, List<int> values)"
        },
        "binddatasource()": {
          "definition": "BindDataSource(AnalysisOfStudentPerformanceReportDTO dto)"
        },
        "verifyscoresshowing()": {
          "definition": "Verify_Scores__showing(string areAreNotString)"
        },
        "verifyscorekurtosisis()": {
          "definition": "Verify_Score_Kurtosis_is__(string kurtosis)"
        },
        "verifygrademedianis()": {
          "definition": "Verify_Grade_Median_is__(decimal median)"
        },
        "verifyscorestandarddeviationis()": {
          "definition": "Verify_Score_Standard_Deviation_is__(string deviation)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AnalysisOfStudentPerformanceReportWorkflow"
    },
    "persontraininginprogress": {
      "namespace": "",
      "methods": {
        "verifynoresultsmessageisvisible()": {
          "definition": "Verify_no_results_message_is_visible()"
        },
        "bindtraining()": {
          "definition": "BindTraining(List<PersonTrainingEventDTO> personTraining)"
        },
        "verifyonlineelementofblendedclasscanbelaunched()": {
          "definition": "Verify_online_element__of_blended_class__can_be_launched(string testName, string className)"
        },
        "launchonlineassessment()": {
          "definition": "LaunchOnlineAssessment(StudentLearnDTO learnDTO)"
        },
        "verifytrainingcompletedisnotvisible()": {
          "definition": "Verify_training_completed_is_not_visible()"
        },
        "verifyonlineelementofblendedclasscannotbelaunched()": {
          "definition": "Verify_online_element__of_blended_class__cannot_be_launched(string testName, string className)"
        },
        "verifytraininginprogressisvisible()": {
          "definition": "Verify_training_in_progress_is_visible()"
        },
        "verifytraininginprogressisnotvisible()": {
          "definition": "Verify_training_in_progress_is_not_visible()"
        },
        "verifytrainingcompletedisvisible()": {
          "definition": "Verify_training_completed_is_visible()"
        },
        "launchonlineelementofblendedclassandworkonforminutesbutdonotcomplete()": {
          "definition": "Launch_online_element__of_blended_class__and_work_on_for__minutes_but_do_not_complete(string testName, string className, double minutes)"
        },
        "verifyonlinetrainingeventcannotbelaunched()": {
          "definition": "Verify_online_training_event__cannot_be_launched(string onlineEventName)"
        },
        "launchonlinetrainingeventandcompletewithpercentinminutes()": {
          "definition": "Launch_online_training_event__and_complete_with__percent_in__minutes(string onlineEventName, double grade, double minutes)"
        },
        "launchonlinetrainingeventandworkonforminutesbutdonotcomplete()": {
          "definition": "Launch_online_training_event__and_work_on_for__minutes_but_do_not_complete(string onlineEventName, double minutes)"
        },
        "refreshpersontraining()": {
          "definition": "Refresh_person_training()"
        },
        "verifyonlinetrainingeventcanbelaunched()": {
          "definition": "Verify_online_training_event__can_be_launched(string onlineEventName)"
        },
        "verifynoresultsmessageisnotvisible()": {
          "definition": "Verify_no_results_message_is_not_visible()"
        },
        "verifypersontrainingwasrefreshed()": {
          "definition": "Verify_person_training_was_refreshed()"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifyonlineelementofblendedclasshasduedate()": {
          "definition": "Verify_online_element__of_blended_class__has_due_date__(string testName, string className, DateTime dueDate)"
        },
        "launchonlineelementofblendedclassandcompletewithpercentinminutes()": {
          "definition": "Launch_online_element__of_blended_class__and_complete_with__percent_in__minutes(string testName, string className, double grade, double minutes)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PersonTrainingInProgressWorkflow"
    },
    "addeditgoal": {
      "namespace": "",
      "methods": {
        "verifynameis()": {
          "definition": "Verify_Name_is__(string goalName)"
        },
        "verifyorganizationis()": {
          "definition": "Verify_organization_is__(string orgName)"
        },
        "browsetopageforof()": {
          "definition": "Browse_to_page_for__of__(string action, string goalName)"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for(string goal)"
        },
        "browsetopageforadd()": {
          "definition": "Browse_to_page_for_Add()"
        },
        "clickcontinuebutton()": {
          "definition": "Click_Continue_Button()"
        },
        "verifydescriptionis()": {
          "definition": "Verify_Description_is__(string description)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "showdialog()": {
          "definition": "ShowDialog(bool load)"
        },
        "verifyduplicatenamenotallowed()": {
          "definition": "Verify_duplicate_name_not_allowed()"
        },
        "resetdialog()": {
          "definition": "ResetDialog()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AddEditGoalWorkflow"
    },
    "trainingeventstart": {
      "namespace": "",
      "methods": {
        "selectforselecteddeferredroster()": {
          "definition": "Select__for_selected_deferred_roster(string selectedCourseTitle)"
        },
        "verifyredirectedtotrainingeventeditor()": {
          "definition": "Verify_redirected_to_training_event_editor()"
        },
        "setlessonplanreporticonid()": {
          "definition": "SetLessonPlanReportIconId(int id)"
        },
        "verifyapprovedlessonplanscontains()": {
          "definition": "Verify_approved_lesson_plans_contains__(string courseTitle)"
        },
        "verifyapprovedlessonplansdoesnotcontain()": {
          "definition": "Verify_approved_lesson_plans_does_not_contain__(string courseTitle)"
        },
        "verifyselectacoursefromtheapprovedcoursetitlesisselected()": {
          "definition": "Verify_select_a_course_from_the_approved_course_titles_is_selected()"
        },
        "selectforselectedcoursetitle()": {
          "definition": "Select__for_selected_course_title(string selectedCourseTitle)"
        },
        "enterforcoursetitletypeahead()": {
          "definition": "Enter__for_course_title_typeahead(string searchText)"
        },
        "verifyredirectedtodeferredroster()": {
          "definition": "Verify_redirected_to_deferred_roster()"
        },
        "verifyredirectedtoediteventdetailspagewithlessonplanmaster()": {
          "definition": "Verify_redirected_to_Edit_Event_Details_page_with_lesson_plan_master()"
        },
        "selectsubmitcompletedtrainingforapprovalfromportalmenu()": {
          "definition": "Select_Submit_Completed_Training_For_Approval_from_portal_menu()"
        },
        "clickcontinuebutton()": {
          "definition": "Click_Continue_Button()"
        },
        "redirect()": {
          "definition": "Redirect(string path)"
        },
        "verifyapprovedcoursetitlescontains()": {
          "definition": "Verify_approved_course_titles_contains__(string courseTitle)"
        },
        "verifyredirectedtoediteventdetailspagewithclasstemplate()": {
          "definition": "Verify_redirected_to_Edit_Event_Details_page_with_class_template()"
        },
        "selectforselectedtemplatefromlessonplan()": {
          "definition": "Select__for_selected_template_from_lesson_plan(string selectedCourseTitle)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "TrainingEventStartWorkflow"
    },
    "bulkresourceaddedit": {
      "namespace": "",
      "methods": {
        "selectowner()": {
          "definition": "Select_owner__(string ownerName)"
        },
        "verifyowneris()": {
          "definition": "Verify_owner_is__(string ownerName)"
        },
        "disableownerchange()": {
          "definition": "DisableOwnerChange()"
        },
        "browsetopagefromdashboard()": {
          "definition": "Browse_to_page_from_dashboard()"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for(string BulkResourceName)"
        },
        "returntorecord()": {
          "definition": "ReturnToRecord(int BulkResourceID)"
        },
        "verifycannotmakerentable()": {
          "definition": "Verify_cannot_make_rentable()"
        },
        "verifycanmakerentable()": {
          "definition": "Verify_can_make_rentable()"
        },
        "selectcategories()": {
          "definition": "Select_categories(string categories)"
        },
        "selectforavailabilityprofile()": {
          "definition": "Select__for_availability_profile(string profile)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "BulkResourceAddEditWorkflow"
    },
    "mvbase": {
      "namespace": "",
      "methods": {
        "click()": {
          "definition": "Click__(string buttonName)"
        },
        "verifyoptionsfordoesnotinclude()": {
          "definition": "Verify_options_for__does_not_include__(string fieldLabel, string option)"
        },
        "check()": {
          "definition": "Check__( string label )"
        },
        "verifyisselectedfor()": {
          "definition": "Verify__is_selected_for__(string selectedOption, string fieldLabel)"
        },
        "verifyaccessdenied()": {
          "definition": "Verify_access_denied()"
        },
        "verifyusernavigatedto()": {
          "definition": "Verify_user__navigated_to__(string wasWasNot, string featureName)"
        },
        "clickbutton()": {
          "definition": "Click_button__(string buttonName)"
        },
        "cleartextfor()": {
          "definition": "Clear_text_for_(string label)"
        },
        "verifyoptionsforinclude()": {
          "definition": "Verify_options_for__include__(string fieldLabel, string option)"
        },
        "verifytextforis()": {
          "definition": "Verify_text_for__is__(string fieldLabel, string expectedValue)"
        },
        "setupchild()": {
          "definition": "SetupChildWorkflow(MVBaseWorkflow childWorkflow)"
        },
        "verifyfeatureavailable()": {
          "definition": "Verify_feature____available(string featureName, string isOrNot)"
        },
        "initialload()": {
          "definition": "InitialLoad()"
        },
        "selectfor()": {
          "definition": "Select__for__(string selectedText, string fieldLabel)"
        },
        "verifyischecked()": {
          "definition": "Verify__is_checked(string fieldLabel)"
        },
        "debugbreak()": {
          "definition": "Debug_break()"
        },
        "verifylabelforisempty()": {
          "definition": "Verify_label_for__is_empty(string fieldLabel)"
        },
        "verifyoptionsforare()": {
          "definition": "Verify_options_for__are__(string fieldLabel, List<string> expectedOptions)"
        },
        "uncheck()": {
          "definition": "Uncheck__(string label)"
        },
        "accessdenied()": {
          "definition": "AccessDenied()"
        },
        "prerender()": {
          "definition": "PreRender()"
        },
        "verifyshowing()": {
          "definition": "Verify__showing(string featureName, string isOrNot)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifyoptionforis()": {
          "definition": "Verify_option_for__is__(string label, string expectedValue)"
        },
        "verifyaccessgranted()": {
          "definition": "Verify_access_granted()"
        },
        "enterfor()": {
          "definition": "Enter__for__(string value, string label)"
        },
        "debuggerbreak()": {
          "definition": "Debugger_break()"
        },
        "postback()": {
          "definition": "PostBack()"
        },
        "entertextfor()": {
          "definition": "Enter_text__for__(string value, string label)"
        },
        "verifyenabled()": {
          "definition": "Verify__enabled(string featureName, string isOrNot)"
        },
        "chooseoptionfor()": {
          "definition": "Choose_option__for_(string value, string label)"
        },
        "setvalue()": {
          "definition": "SetValue(string value)"
        },
        "verifylabelforis()": {
          "definition": "Verify_label_for__is__( string fieldLabel, string expectedValue )"
        },
        "verifytextforisempty()": {
          "definition": "Verify_text_for__is_empty(string fieldLabel)"
        },
        "verifyisunchecked()": {
          "definition": "Verify__is_unchecked(string fieldLabel)"
        }
      },
      "parent-name": null,
      "class-name": "MVBaseWorkflow"
    },
    "pointsofcontact": {
      "namespace": "",
      "methods": {
        "verifyisnotasearchoption()": {
          "definition": "Verify_is_not_a_search_option(string personName)"
        },
        "verifyorganizationnameis()": {
          "definition": "Verify_organization_name_is__(string organizationName)"
        },
        "selectcontactrole()": {
          "definition": "Select_Contact_Role__(string roleName)"
        },
        "verifyisasearchoption()": {
          "definition": "Verify__is_a_search_option(string personName)"
        },
        "entertosearchforpointsofcontact()": {
          "definition": "Enter__to_search_for_Points_of_Contact(string searchText)"
        },
        "verifynotprimarycontact()": {
          "definition": "Verify_not_primary_contact()"
        },
        "addascontactfor()": {
          "definition": "Add__as__contact_for__(string personName, string roleName, string orgName)"
        },
        "makethispersonaprimarycontact()": {
          "definition": "Make_this_person_a_primary_contact()"
        },
        "browsetoeditpointofcontactforunder()": {
          "definition": "Browse_to_Edit_Point_Of_Contact_for__under__(string personName, string orgName)"
        },
        "opentheemployeelisttypeahead()": {
          "definition": "Open_the_employee_list_type_ahead()"
        },
        "verifyisacontactroleoption()": {
          "definition": "Verify__is_a_Contact_Role_option(string roleName)"
        },
        "verifyisnotapointofcontactoption()": {
          "definition": "Verify__is_not_a_Point_of_Contact_option(string optionName)"
        },
        "bindcontactroles()": {
          "definition": "BindContactRoles(IList<ContactRoleDTO> rolesDTO)"
        },
        "addasaprimarycontactwithrolefor()": {
          "definition": "Add__as_a_primary_contact_with_role__for__(string personName, string roleName, string orgName)"
        },
        "verifytherearesearchoptions()": {
          "definition": "Verify_there_are__search_options(int number)"
        },
        "verifycontactnameisandemailisandphoneis()": {
          "definition": "Verify_Contact_Name_is__and_Email_is__and_Phone_is__(string personName, string email, string phone)"
        },
        "selectfromsearchoptions()": {
          "definition": "Select__from_search_options(string personName)"
        },
        "verifycontactroleis()": {
          "definition": "Verify_Contact_Role_is__(string roleName)"
        },
        "enterintheemployeelisttypeahead()": {
          "definition": "Enter__in_the_employee_list_type_ahead(string text)"
        },
        "select()": {
          "definition": "Select__(string personName)"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "browsetoaddpointofcontactfor()": {
          "definition": "Browse_to_Add_Point_Of_Contact_for__(string orgName)"
        },
        "bindexistingcontact()": {
          "definition": "BindExistingContact(ViewPointOfContactSingleDTO contactInfo)"
        },
        "verifyisapointofcontactoption()": {
          "definition": "Verify__is_a_Point_of_Contact_option(string optionName)"
        },
        "makethispersonnotaprimarycontact()": {
          "definition": "Make_this_person_not_a_primary_contact()"
        },
        "verifythathaspocwithrole()": {
          "definition": "Verify_that__has_POC__with_role__(string orgName, string pocName, string pocRole)"
        },
        "verifyprimarycontact()": {
          "definition": "Verify_primary_contact()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PointsOfContactWorkflow"
    },
    "enableddisabledattribute": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "EnabledDisabledAttribute"
    },
    "inquirycheckbox": {
      "namespace": "",
      "methods": {
        "initializecontrol()": {
          "definition": "InitializeControl(PerformanceReportRatingDTO dto)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "InquiryCheckBox"
    },
    "portalwebformlist": {
      "namespace": "",
      "methods": {
        "verifythankyoumessagedisplayed()": {
          "definition": "Verify_thank_you_message__displayed(string wasWasNotDisplayedStr)"
        },
        "verifylistdoesnotcontain()": {
          "definition": "Verify_list_does_not_contain__(string name)"
        },
        "verifylistcontainswithdescription()": {
          "definition": "Verify_list_contains__with_description__(string formName, string formDescription)"
        },
        "browsetopagefromsubmissionofwebform()": {
          "definition": "Browse_to_page_from_submission_of_webform__(string webFormName)"
        },
        "removebaselinewebforms()": {
          "definition": "Remove_baseline_webforms()"
        },
        "verifyconfirmationtextis()": {
          "definition": "Verify_confirmation_text_is__(string text)"
        },
        "bindwebforms()": {
          "definition": "BindWebForms(IList<PortalWebFormListItemDTO> webForms)"
        },
        "verifyemptylistmessageis()": {
          "definition": "Verify_empty_list_message_is__(string message)"
        },
        "showthankyoumessage()": {
          "definition": "ShowThankYouMessage()"
        },
        "verifyemptylistmessagevisible()": {
          "definition": "Verify_empty_list_message__visible(string isIsNotVisibleStr)"
        },
        "verifylistcontainswebforms()": {
          "definition": "Verify_list_contains__webforms(int numWebForms)"
        },
        "setnowebformsmessage()": {
          "definition": "SetNoWebFormsMessage(string message)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalWebFormListWorkflow"
    },
    "trainingeventmanagement": {
      "namespace": "",
      "methods": {
        "considerinserviceeventnamed()": {
          "definition": "Consider_inservice_event_named__(string name)"
        },
        "addtoeventundertrainingcategoryof()": {
          "definition": "Add_to_event_under_training_category_of( string attendee, string eventName, string trainingCategory )"
        },
        "findeventwithstartdate()": {
          "definition": "Find_event_with_start_date(string eventName, DateTime startDate)"
        },
        "verifyeventinstructorphoneis()": {
          "definition": "Verify_event_Instructor_Phone__is__(string value)"
        },
        "considerinserviceattendee()": {
          "definition": "Consider_inservice_attendee__(string name)"
        },
        "createtrainingeventwithtitlestartingonendingonwithvariablehours()": {
          "definition": "create_training_event_with_title__starting_on__ending_on__with_variable_hours(string eventTitle, DateTime startDate, DateTime endDate)"
        },
        "verifyattendeedidnotpass()": {
          "definition": "Verify_attendee_did_not_pass()"
        },
        "verifyattendeepassed()": {
          "definition": "Verify_attendee_passed()"
        },
        "addtrainingeventto()": {
          "definition": "add_training_event_to(string eventName, string personName)"
        },
        "findunderapproved()": {
          "definition": "Find_under_Approved(string eventName)"
        },
        "dispose()": {
          "definition": "Dispose()"
        },
        "verifyeventstartdateis()": {
          "definition": "Verify_event_StartDate_is__(DateTime value)"
        },
        "saveevent()": {
          "definition": "Save_event()"
        },
        "verifyeventenddateis()": {
          "definition": "Verify_event_EndDate_is__(DateTime value)"
        },
        "rejecttrainingeventwithcomment()": {
          "definition": "Reject_training_event__with_comment_(string status, string comment)"
        },
        "verifyeventvariablehours()": {
          "definition": "Verify_event__Variable_Hours(string hasHasNot)"
        },
        "verifyeventcommentsare()": {
          "definition": "Verify_event_Comments_are__(string value)"
        },
        "verifyeventofficialprovideris()": {
          "definition": "Verify_event_Official_Provider_is__(string value)"
        },
        "addtoevent()": {
          "definition": "Add__to_event__(string attendee, string eventName)"
        },
        "verifyemailmessagesweresentto()": {
          "definition": "Verify__email_messages_were_sent_to__(int num, string emailAddress)"
        },
        "findevent()": {
          "definition": "Find_event(string eventName)"
        },
        "verifyeventhasattendees()": {
          "definition": "Verify_event_has__Attendees(int count)"
        },
        "verifyemailmessagesweresent()": {
          "definition": "Verify__email_messages_were_sent(int num)"
        },
        "verifyeventhoursis()": {
          "definition": "Verify_event_Hours_is__(string value)"
        },
        "createtrainingeventwithtitlestartingonendingonwithdurationofhours()": {
          "definition": "create_training_event_with_title_starting_on_ending_on_with_duration_of_hours( string eventTitle, DateTime startDate, DateTime endDate, string eventDuration )"
        },
        "verifythattheemailsenttocontains()": {
          "definition": "Verify_that_the_email_sent_to__contains__(string emailAddress, string compareStr)"
        },
        "verifyeventisreportedto()": {
          "definition": "Verify_event_is_reported_to__(string value)"
        },
        "considerinserviceeventnamedwithcoursenumber()": {
          "definition": "Consider_inservice_event_named__with_course_number__(string name, string courseNumber)"
        },
        "createtrainingeventwithtitlefortodaywithdurationofhours()": {
          "definition": "create_training_event_with_title_for_today_with_duration_of_hours( string eventTitle, string eventDuration )"
        },
        "verifyattendeeaninstructor()": {
          "definition": "Verify_attendee__an_instructor(string isIsNot)"
        },
        "verifyattendeetrainingcategoryis()": {
          "definition": "Verify_attendee_Training_Category_is__(string value)"
        },
        "verifyeventdescriptionis()": {
          "definition": "Verify_event_Description_is__(string value)"
        },
        "verifycoursenumberhoursstartingonendingonattendees()": {
          "definition": "Verify_Course_Number_hours_starting_on_ending_on_attendees(string coursenumber, string hours, DateTime starting, DateTime ending, int attendees)"
        },
        "addtoeventwithstartdate()": {
          "definition": "Add__to_event__with_start_date__(string attendee, string eventName, DateTime startDate)"
        },
        "saveeventasdraft()": {
          "definition": "Save_event_as_draft()"
        },
        "verifyeventotherprovideris()": {
          "definition": "Verify_event_Other_Provider_is__(string value)"
        },
        "verifyattendeepassfailisnotspecified()": {
          "definition": "Verify_attendee_pass_fail_is_not_specified()"
        },
        "selecttrainingcategorynamed()": {
          "definition": "Select_training_category_named_( string name )"
        },
        "verifyeventinstructorphonetypeis()": {
          "definition": "Verify_event_Instructor_Phone_Type_is__(string value)"
        },
        "loadmonitor()": {
          "definition": "Load_monitor()"
        },
        "verifyeventvariabletrainingcategories()": {
          "definition": "Verify_event__Variable_Training_Categories(string hasHasNot)"
        },
        "verifyattendeehashoursrecorded()": {
          "definition": "Verify_attendee_has__Hours_recorded(decimal hours)"
        },
        "verifyeventinstructoris()": {
          "definition": "Verify_event_Instructor_is__(string value)"
        },
        "verifytrackingstatuscontains()": {
          "definition": "Verify_tracking_status_contains(string list)"
        },
        "verifyattendeecommentis()": {
          "definition": "Verify_attendee_comment_is__(string value)"
        },
        "createtrainingeventwithtitleforownerstartingonendingonwithdurationofhours()": {
          "definition": "create_training_event_with_title_for_owner_starting_on_ending_on_with_duration_of_hours( string eventTitle, string ownerName, DateTime startDate, DateTime endDate, string eventDuration )"
        },
        "verify1emailmessagewassentto()": {
          "definition": "Verify_1_email_message_was_sent_to__(string emailAddress)"
        },
        "selectotherprovidernameorg()": {
          "definition": "Select_Other_Provider_name_org(string name, string org)"
        },
        "verifyevent()": {
          "definition": "verify_event()"
        },
        "verifyeventinstructoremailis()": {
          "definition": "Verify_event_Instructor_Email_is__(string value)"
        },
        "verifyeventcoursenumberis()": {
          "definition": "Verify_event_CourseNumber_is__(string value)"
        },
        "verifyattendeegradeis()": {
          "definition": "Verify_attendee_grade_is__(string value)"
        },
        "selectofficialprovidernamed()": {
          "definition": "Select_Official_Provider_named(string name)"
        },
        "verifyeventtrainingcategoryis()": {
          "definition": "Verify_event_Training_Category_is__(string value)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "TrainingEventManagement"
    },
    "bulkresourcerecord": {
      "namespace": "",
      "methods": {
        "verifydocumentsbandisvisible()": {
          "definition": "Verify_documents_band_is_visible()"
        },
        "verifybulkresourceisnotschedulable()": {
          "definition": "Verify_BulkResource_is_not_schedulable()"
        },
        "verifybulkresourceisschedulable()": {
          "definition": "Verify_BulkResource_is_schedulable()"
        },
        "verifydocumentsbandishidden()": {
          "definition": "Verify_documents_band_is_hidden()"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for(string BulkResourceName)"
        },
        "browsetobulkresourcerecordfor()": {
          "definition": "Browse_to__bulk_resource_record_for__(string orgName, string propertyDisplayName)"
        },
        "initdocuments()": {
          "definition": "InitDocuments()"
        },
        "verifybulkresourceisrentable()": {
          "definition": "Verify_BulkResource_is_rentable()"
        },
        "verifybulkresourceisnotrentable()": {
          "definition": "Verify_BulkResource_is_not_rentable()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "BulkResourceRecordWorkflow"
    },
    "proctorstudentsearch": {
      "namespace": "",
      "methods": {
        "enterforlastname()": {
          "definition": "Enter_for_last_name(string lastName)"
        },
        "enterfortestname()": {
          "definition": "Enter_for_test_name(string testName)"
        },
        "verifystudenttestsincludeclassandtest()": {
          "definition": "Verify_student_tests__include_class__and_test__(string doOrDoNot, string className, string testName)"
        },
        "clickloginstudentforclassandtest()": {
          "definition": "Click_login_student_for_class__and_test__(string className, string testName)"
        },
        "verifyresultcountis()": {
          "definition": "Verify_result_count_is__(int count)"
        },
        "verifyresultsinclude()": {
          "definition": "Verify_results__include(string doOrDoNot, string fullNameWithSuffix)"
        },
        "enterforclassname()": {
          "definition": "Enter_for_class_name(string className)"
        },
        "clickverifystudentfor()": {
          "definition": "Click_verify_student_for__(string fullNameWithSuffix)"
        },
        "enterforacademyid()": {
          "definition": "Enter_for_academy_id(string academyId)"
        },
        "clicksearch()": {
          "definition": "Click_search()"
        },
        "verifystudentloginwassuccessfulandproctorloggedout()": {
          "definition": "Verify_student_login_was_successful_and_proctor_logged_out()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "ProctorStudentSearchWorkflow"
    },
    "changepassword": {
      "namespace": "",
      "methods": {
        "verifyredirecttouseracceptancepagewasnotcalled()": {
          "definition": "Verify_Redirect_to_user_acceptance_page_was_not_called()"
        },
        "verifyredirecttohomepagewasnotcalled()": {
          "definition": "Verify_Redirect_to_home_page_was_not_called()"
        },
        "verifyredirecttohomepagewascalled()": {
          "definition": "Verify_Redirect_to_home_page_was_called()"
        },
        "bindrules()": {
          "definition": "BindRules(List<PasswordRuleDTO> rules)"
        },
        "entertemporarypasswordforcurrentuserintooldpassword()": {
          "definition": "Enter_temporary_password_for_current_user_into_old_password()"
        },
        "signintoacadis()": {
          "definition": "SignIntoAcadis(int userID, SSOMode ssoMode)"
        },
        "closepopover()": {
          "definition": "ClosePopover()"
        },
        "redirecttohomepage()": {
          "definition": "RedirectToHomePage()"
        },
        "verifyrulescontain()": {
          "definition": "Verify_rules_contain(string ruleName)"
        },
        "redirecttouappage()": {
          "definition": "RedirectToUAPPage(Guid expiringUAPValue)"
        },
        "verifyredirecttouseracceptancepagewascalledforuser()": {
          "definition": "Verify_Redirect_to_user_acceptance_page_was_called_for_user__(string personName)"
        },
        "removeuseridfromsession()": {
          "definition": "RemoveUserIDFromSession()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ChangePasswordWorkflow"
    },
    "testsetretakelimitpersistence": {
      "namespace": "",
      "methods": {
        "canroundtripatestsetretakelimit()": {
          "definition": "Can_roundtrip_a_TestSetRetakeLimit()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "TestSetRetakeLimitPersistence"
    },
    "housingrequesteditor": {
      "namespace": "",
      "methods": {
        "verifythatpurposecollected()": {
          "definition": "Verify_that_Purpose__collected(string isIsNotCollectedStr)"
        },
        "selectforspecialaccommodation()": {
          "definition": "Select__for_special_accommodation(string accom)"
        },
        "bindusagetypes()": {
          "definition": "BindUsageTypes(UsageTypesByGroupDTO usageTypes, bool isHousingRequiredForClass, bool disableGrouping, bool allowDeclineHousing)"
        },
        "verifythathousingrequestedhasnopublishedoptions()": {
          "definition": "Verify_that_Housing_Requested_has_no_published_options()"
        },
        "selectforhousingotherorganization()": {
          "definition": "Select__for_Housing_Other_Organization(string organizationName)"
        },
        "verifythatexpectedcheckinis()": {
          "definition": "Verify_that_Expected_Checkin_is__(DateTime expectedCheckIn)"
        },
        "verifythatspecialinstructionsis()": {
          "definition": "Verify_that_Special_Instructions_is__(string specialInstructions)"
        },
        "verifythatcheckedinwarningisdisplayed()": {
          "definition": "Verify_that_Checked_In_warning_is_displayed()"
        },
        "verifythatexpectedcheckoutis()": {
          "definition": "Verify_that_Expected_Checkout_is__(DateTime expectedCheckOut)"
        },
        "selectforpricelevel()": {
          "definition": "Select__for_price_level(string priceLevelDescription)"
        },
        "enterforpurpose()": {
          "definition": "Enter__for_Purpose(string purpose)"
        },
        "verifythathousingrequestedisusage()": {
          "definition": "Verify_that_Housing_Requested_is_usage__(string usageTypeName)"
        },
        "enterdateforexpectedcheckout()": {
          "definition": "Enter_date__for_Expected_Checkout(DateTime expectedCheckOut)"
        },
        "verifythatpurposeis()": {
          "definition": "Verify_that_Purpose_is__(string purpose)"
        },
        "verifythathousingrequestedhaspublishedoptions()": {
          "definition": "Verify_that_Housing_Requested_has_published_options__(List<string> usageTypeNames)"
        },
        "verifythatspecialaccommodationis()": {
          "definition": "Verify_that_Special_Accommodation_is__(string accom)"
        },
        "selectforspecialaccommodations()": {
          "definition": "Select__for_Special_Accommodations(string specialAccommodationsDesc)"
        },
        "selectforhousingbilltoparty()": {
          "definition": "Select__for_Housing_Bill_to_Party(string billToParty)"
        },
        "showfieldsforlegacyrate()": {
          "definition": "ShowFieldsForLegacyRate(string legacyUsageType, string legacyPriceLevel)"
        },
        "selectforresidenttype()": {
          "definition": "Select__for_Resident_Type(string residentTypeDesc)"
        },
        "togglecheckinreadonly()": {
          "definition": "ToggleCheckInReadOnly(bool show)"
        },
        "enterdateforexpectedcheckin()": {
          "definition": "Enter_date__for_Expected_Checkin(DateTime expectedCheckIn)"
        },
        "discardoldpriceandselect()": {
          "definition": "Discard_old_price_and_select____(string usageTypeName, string priceLevelDescription)"
        },
        "entertextforspecialinstructions()": {
          "definition": "Enter_text__for_Special_Instructions(string specialInstructions)"
        },
        "verifythatspecialaccommodationsis()": {
          "definition": "Verify_that_Special_Accommodations_is__(string specialAccommodationsDesc)"
        },
        "verifythatresidenttypeis()": {
          "definition": "Verify_that_Resident_Type_is__(string residentTypeDesc)"
        },
        "verifythatspecialinstructionsisblank()": {
          "definition": "Verify_that_Special_Instructions_is_blank()"
        },
        "verifythatpurposeisblank()": {
          "definition": "Verify_that_Purpose_is_blank()"
        },
        "verifythatassignedwarningisdisplayed()": {
          "definition": "Verify_that_Assigned_warning_is_displayed()"
        },
        "verifythatpricelevelisreadonlywithtext()": {
          "definition": "Verify_that_price_level_is_read_only_with_text(string text)"
        },
        "verifythathousingrequestedhasnoselection()": {
          "definition": "Verify_that_Housing_Requested_has_no_selection()"
        },
        "verifythatpricelevelhasnoselection()": {
          "definition": "Verify_that_Price_Level_has_no_selection()"
        },
        "showfieldsforcurrentrate()": {
          "definition": "ShowFieldsForCurrentRate()"
        },
        "bindpricestructure()": {
          "definition": "BindPriceStructure(HousingPriceStructureDTO priceStructureDTO)"
        },
        "verifythathousingrequestedhasunpublishedoptions()": {
          "definition": "Verify_that_Housing_Requested_has_unpublished_options__(List<string> usageTypeNames)"
        },
        "verifyhousingbillingvisible()": {
          "definition": "Verify_Housing_Billing__Visible(string isIsNotString)"
        },
        "enterforhousingotherorganizationtypeahead()": {
          "definition": "Enter__for_Housing_Other_Organization_typeahead(string searchText)"
        },
        "selectforhousinggrant()": {
          "definition": "Select__for_Housing_Grant(string grant)"
        },
        "verifythathousingrequestedhasnounpublishedoptions()": {
          "definition": "Verify_that_Housing_Requested_has_no_unpublished_options()"
        },
        "verifythatpriceleveloptionsforare()": {
          "definition": "Verify_that_Price_Level_options_for__are__(string usageTypeName, List<string> priceLevelDescriptions)"
        },
        "verifythatpricelevelis()": {
          "definition": "Verify_that_Price_Level_is__(string priceLevelDescription)"
        },
        "selectforusagetype()": {
          "definition": "Select__for_usage_type(string usageTypeName)"
        },
        "verifythathousingrequestedisreadonlywithtext()": {
          "definition": "Verify_that_housing_requested_is_read_only_with_text__(string text)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "HousingRequestEditorWorkflow"
    },
    "testopiadocumentstorageproviderfactory": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "TestopiaDocumentStorageProviderFactory"
    },
    "resourcemanagement": {
      "namespace": "",
      "methods": {
        "inactivate()": {
          "definition": "Inactivate(string resourceName)"
        },
        "scenariosetup()": {
          "definition": "ScenarioSetUp()"
        },
        "createfacilitynamed()": {
          "definition": "Create_facility_named(string facilityName)"
        },
        "scheduleforfromto()": {
          "definition": "Schedule_for_from_to(string resourceName, string unavailableReason, DateTime starting, DateTime ending)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "ResourceManagement"
    },
    "globalsettingmanagement": {
      "namespace": "",
      "methods": {
        "setdependentfunddescriptionto()": {
          "definition": "Set_dependent_fund_description_to__(string description)"
        },
        "setwebformsubmissiondelayto()": {
          "definition": "Set_WebForm_submission_delay_to__(int seconds)"
        },
        "verifyrentableresourcesmodeis()": {
          "definition": "Verify_rentable_resources_mode_is__(string mode)"
        },
        "iwantportaluserstousesinglesignonusingactivedirectory()": {
          "definition": "I_want_portal_users_to_use_single_sign_on_using_Active_Directory()"
        },
        "setclasseswillbenamed()": {
          "definition": "Set_classes_will_be__named(string manualOrAuto)"
        },
        "enableselecthousingassignmentstartingfloor()": {
          "definition": "Enable_select_housing_assignment_starting_floor()"
        },
        "verifyproctorswillbeusedtoverifystudentswith()": {
          "definition": "Verify_proctors_will_be_used_to_verify_students_with__(string fields)"
        },
        "allowoverridingofdefaultendofclassstaffsurvey()": {
          "definition": "Allow_overriding_of_default_end_of_class_staff_survey()"
        },
        "setupdateclassstatustoauto()": {
          "definition": "Set_update_class_status_to_auto()"
        },
        "setportalpersonaccessforregistrationto()": {
          "definition": "Set_portal_person_access_for_registration_to__(PortalPersonAccess access)"
        },
        "setactivecertificationtorenewoncurrentexpirationdate()": {
          "definition": "Set_active_certification_to_renew_on_current_expiration_date()"
        },
        "setinstructorwarningthresholdto()": {
          "definition": "Set_instructor_warning_threshold_to(int threshold)"
        },
        "sethousingavailabilitytosamedayascheckout()": {
          "definition": "Set_Housing_Availability_to_same_day_as_check_out()"
        },
        "verifyautomaticallygeneratednameswillstartatnumber()": {
          "definition": "Verify_automatically_generated_names_will_start_at_number_(int startingNumber)"
        },
        "singlesignondirectorydomainis()": {
          "definition": "Single_Sign_On_Directory_Domain_is(string domain)"
        },
        "disallowoverridingofdefaultendofclassstudentsurvey()": {
          "definition": "Disallow_overriding_of_default_end_of_class_student_survey()"
        },
        "setupdateclassstatustomanual()": {
          "definition": "Set_update_class_status_to_manual()"
        },
        "setautomaticallygeneratednameswillstartatnumber()": {
          "definition": "Set_automatically_generated_names_will_start_at_number(int startingNumber)"
        },
        "iwanttousesinglesignonusingsaml()": {
          "definition": "I_want_to_use_single_sign_on_using_SAML()"
        },
        "setfiscalyearstartmonthtowithyearoffsetof()": {
          "definition": "Set_fiscal_year_start_month_to__with_year_offset_of__(int month, int offset)"
        },
        "verifysubmissionofbankinginformationisdisabled()": {
          "definition": "Verify_submission_of_banking_information_is_disabled()"
        },
        "verifywebformsubmissiondelayis()": {
          "definition": "Verify_WebForm_submission_delay_is__(int seconds)"
        },
        "disallowoverridingofdefaultendofclasssendingorgsurvey()": {
          "definition": "Disallow_overriding_of_default_end_of_class_sending_org_survey()"
        },
        "setrentableresourcesmodeto()": {
          "definition": "Set_rentable_resources_mode_to__(string mode)"
        },
        "idonotwantportaluserstousesinglesignon()": {
          "definition": "I_do_not_want_portal_users_to_use_single_sign_on()"
        },
        "setacademyidcreationtoauto()": {
          "definition": "Set_AcademyID_Creation_to_Auto()"
        },
        "allowoverridingofdefaultendofclassstudentsurvey()": {
          "definition": "Allow_overriding_of_default_end_of_class_student_survey()"
        },
        "verifyproctorswillnotbeused()": {
          "definition": "Verify_proctors_will_not_be_used()"
        },
        "enabledatapartitioning()": {
          "definition": "Enable_Data_Partitioning()"
        },
        "verifybillingtrackingisenabled()": {
          "definition": "Verify_billing_tracking_is_enabled()"
        },
        "verifyfiscalyearstartforyearis()": {
          "definition": "Verify_fiscal_year_start_for_year__is__(int requestedYear, DateTime expectedDate)"
        },
        "iwanttousesinglesignonusingactivedirectory()": {
          "definition": "I_want_to_use_single_sign_on_using_Active_Directory()"
        },
        "disabledatapartitioning()": {
          "definition": "Disable_Data_Partitioning()"
        },
        "setfiscalyearstartmonthto()": {
          "definition": "Set_fiscal_year_start_month_to(int month)"
        },
        "verifyfiscalyearstartmonthis()": {
          "definition": "Verify_fiscal_year_start_month_is__(int month)"
        },
        "disabledutylocations()": {
          "definition": "Disable_Duty_Locations()"
        },
        "setportalpersonaccessforinserviceto()": {
          "definition": "Set_portal_person_access_for_inservice_to__(PortalPersonAccess access)"
        },
        "disableselecthousingassignmentstartingfloor()": {
          "definition": "Disable_select_housing_assignment_starting_floor()"
        },
        "verifybillingtrackingisdisabled()": {
          "definition": "Verify_billing_tracking_is_disabled()"
        },
        "setdependentfundinstructionsto()": {
          "definition": "Set_dependent_fund_instructions_to__(string instructions)"
        },
        "disallowoverridingofdefaultendofclassstaffsurvey()": {
          "definition": "Disallow_overriding_of_default_end_of_class_staff_survey()"
        },
        "idonotwanttousesinglesignonusingactivedirectory()": {
          "definition": "I_do_not_want_to_use_single_sign_on_using_Active_Directory()"
        },
        "verifyupdateclassstatusismanual()": {
          "definition": "Verify_update_class_status_is_manual()"
        },
        "sethousingavailabilitytodayaftercheckout()": {
          "definition": "Set_Housing_Availability_to_day_after_check_out()"
        },
        "verifyactivecertificationsrenewonrenewaldate()": {
          "definition": "Verify_active_certifications_renew_on_renewal_date()"
        },
        "verifyhousingavailabilityisdayaftercheckout()": {
          "definition": "Verify_Housing_Availability_is_day_after_check_out()"
        },
        "iwantportaluserstousesinglesignonusingsaml()": {
          "definition": "I_want_portal_users_to_use_single_sign_on_using_SAML()"
        },
        "verifysubmissionofbankinginformationisenabled()": {
          "definition": "Verify_submission_of_banking_information_is_enabled()"
        },
        "verifyactivecertificationsrenewoncurrentexpiration()": {
          "definition": "Verify_active_certifications_renew_on_current_expiration()"
        },
        "verifyfiscalyearstartmonthiswithyearoffsetof()": {
          "definition": "Verify_fiscal_year_start_month_is__with_year_offset_of__(int month, int offset)"
        },
        "verifyclasseswillbenamed()": {
          "definition": "Verify_classes_will_be__named(string manualOrAuto)"
        },
        "verifyhousingavailabilityissamedayascheckout()": {
          "definition": "Verify_Housing_Availability_is_same_day_as_check_out()"
        },
        "setactivecertificationtorenewonrenewaldate()": {
          "definition": "Set_active_certification_to_renew_on_renewal_date()"
        },
        "setenrollmentimporttouseassendingorganizationifomittedfromimportfile()": {
          "definition": "Set_Enrollment_Import_to_use__as_sending_organization_if_omitted_from_import_file(string orgOption)"
        },
        "allowoverridingofdefaultendofclasssendingorgsurvey()": {
          "definition": "Allow_overriding_of_default_end_of_class_sending_org_survey()"
        },
        "enabledutylocations()": {
          "definition": "Enable_Duty_Locations()"
        },
        "setgraceperiodtodays()": {
          "definition": "Set_grace_period_to__days(int days)"
        },
        "verifyupdateclassstatusisauto()": {
          "definition": "Verify_update_class_status_is_auto()"
        },
        "turndependentfund()": {
          "definition": "Turn_dependent_fund__(string onOrOff)"
        },
        "setacademyidcreationtomanual()": {
          "definition": "Set_AcademyID_Creation_to_Manual()"
        },
        "verifyfiscalyearstartforis()": {
          "definition": "Verify_fiscal_year_start_for__is__(DateTime requestedDate, DateTime expectedDate)"
        },
        "setinstructormaxhourstopermonthandperquarter()": {
          "definition": "Set_instructor_max_hours_to_per_month_and_per_quarter(int perMonth, int perQuarter)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "GlobalSettingManagement"
    },
    "variabletraininghoursentryview": {
      "namespace": "",
      "methods": {
        "bindattendeerecords()": {
          "definition": "BindAttendeeRecords(IList<InServiceTrainingRecordDTO> attendeeRecords)"
        },
        "verifythatattendeehastraininghours()": {
          "definition": "Verify_that_attendee__has_training_hours__(int index, string hours)"
        },
        "entercategoryforattendeenamed()": {
          "definition": "Enter__category_for_attendee_named__(string category, string name)"
        },
        "settrainingcategories()": {
          "definition": "SetTrainingCategories(IList<TrainingCategoryDTO> categories, string singleCategory)"
        },
        "verifythatcoursetitleis()": {
          "definition": "Verify_that_course_title_is__(string title)"
        },
        "enterhoursforattendeenamed()": {
          "definition": "Enter__hours_for_attendee_named__(string hours, string name)"
        },
        "verifythatattendeesarelisted()": {
          "definition": "Verify_that__attendees_are_listed(int count)"
        },
        "verifythatvariablehoursdisplayed()": {
          "definition": "Verify_that_variable_hours__displayed(string status)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "useeventnamed()": {
          "definition": "Use_event_named__(string eventName)"
        },
        "verifythatvariablecategoriesdisplayed()": {
          "definition": "Verify_that_variable_categories__displayed(string status)"
        },
        "verifythatattendeehastrainingcategory()": {
          "definition": "Verify_that_attendee__has_training_category__(int index, string key)"
        },
        "verifythatbandtitleis()": {
          "definition": "Verify_that_band_title_is__(string title)"
        },
        "verifythatattendeehasname()": {
          "definition": "Verify_that_attendee__has_name__(int index, string name)"
        },
        "clickthesavebutton()": {
          "definition": "Click_the_save_button()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "VariableTrainingHoursEntryView"
    },
    "rentablelist": {
      "namespace": "",
      "methods": {
        "verifylistcontainsfirearms()": {
          "definition": "Verify_list_contains__firearms(int count)"
        },
        "verifylistcontainsfacilities()": {
          "definition": "Verify_list_contains__facilities(int count)"
        },
        "verifyitemdefaultpriceis()": {
          "definition": "Verify_item_default_price_is(string price)"
        },
        "findaccountablepropertynamedinlist()": {
          "definition": "Find_accountable_property_named__in_list(string name)"
        },
        "findfirearmnamedinlist()": {
          "definition": "Find_firearm_named__in_list(string name)"
        },
        "verifyitemthumbnailimageisdefault()": {
          "definition": "Verify_item_thumbnail_image_is_default()"
        },
        "findvehiclenamedinlist()": {
          "definition": "Find_vehicle_named__in_list(string name)"
        },
        "verifyitemdescriptionis()": {
          "definition": "Verify_item_description_is__(string description)"
        },
        "findserviceanimalnamedinlist()": {
          "definition": "Find_service_animal_named__in_list(string name)"
        },
        "verifylistcontainsvehicles()": {
          "definition": "Verify_list_contains__vehicles(int count)"
        },
        "verifylistcontainsserviceanimals()": {
          "definition": "Verify_list_contains__service_animals(int count)"
        },
        "bindgroups()": {
          "definition": "BindGroups(List<InventoryItemGroupDTO> groups)"
        },
        "findfacilitynamedinlist()": {
          "definition": "Find_facility_named__in_list(string name)"
        },
        "verifyitemthumbnailimageiscustom()": {
          "definition": "Verify_item_thumbnail_image_is_custom()"
        },
        "verifylistcontainsaccountableproperties()": {
          "definition": "Verify_list_contains__accountable_properties(int count)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "RentableListWorkflow"
    },
    "acadisdataservices": {
      "namespace": "",
      "methods": {
        "validatetheemployingagencyis()": {
          "definition": "Validate_the_employing_agency_is(string agency)"
        },
        "validatetheappointmenttypeis()": {
          "definition": "Validate_the_appointment_type_is(string type)"
        },
        "validatethemiddlenameis()": {
          "definition": "Validate_the_middle_name_is(string initial)"
        },
        "validatetheeyecoloris()": {
          "definition": "Validate_the_eye_color_is(string color)"
        },
        "validatethebloodtypeis()": {
          "definition": "Validate_the_blood_type_is(string type)"
        },
        "setup()": {
          "definition": "SetUp()"
        },
        "teardown()": {
          "definition": "TearDown()"
        },
        "validatetheemployercontactaddress1is()": {
          "definition": "Validate_the_employer_contact_address1_is(string address1)"
        },
        "getpersondatawithusernamepasswordandacademyid()": {
          "definition": "Get_person_data_with_username__password__and_academy_id__(string username, string password, string academyId)"
        },
        "validatethehaircoloris()": {
          "definition": "Validate_the_hair_color_is(string color)"
        },
        "validatethegenderis()": {
          "definition": "Validate_the_Gender_is(string gender)"
        },
        "validatethefirstnameis()": {
          "definition": "Validate_the_first_name_is__(string firstName)"
        },
        "getanypersondatafromthenewwebservicewithusernamepassword()": {
          "definition": "Get_any_person_data_from_the_new_webservice_with_username__password__(string username, string password)"
        },
        "validatetheemployercontacttitleis()": {
          "definition": "Validate_the_employer_contact_title_is(string title)"
        },
        "getpersondatawithacademyid()": {
          "definition": "get_person_data_with_academy_id(string academyId)"
        },
        "validatethedateofbirthis()": {
          "definition": "Validate_the_date_of_birth_is(DateTime date)"
        },
        "validatetheemploymenttypeis()": {
          "definition": "Validate_the_employment_type_is(string type)"
        },
        "validatethelastnameis()": {
          "definition": "Validate_the_Last_Name_is(string name)"
        },
        "attempthttpsconnectionwithacadisdataserviceswithusernameandpassword()": {
          "definition": "Attempt_https_connection_with_AcadisDataServices_with_username__and_password__(string username, string password)"
        },
        "getanypersondatawithusernamepassword()": {
          "definition": "Get_any_person_data_with_username_password(string username, string password)"
        },
        "validatethepublicsafetyidis()": {
          "definition": "Validate_the_Public_Safety_ID_is__(string academyId)"
        },
        "configuredtousessl()": {
          "definition": "Configured_to_use_SSL()"
        },
        "validatetheweightis()": {
          "definition": "Validate_the_weight_is(string weight, string units)"
        },
        "configuredtonotusessl()": {
          "definition": "Configured_to_not_use_SSL()"
        },
        "validatethesuffixis()": {
          "definition": "Validate_the_Suffix_is(string suffix)"
        },
        "validatethenewacadisdataservicespublicsafetyidiscorrect()": {
          "definition": "Validate_the_new_AcadisDataServices_Public_Safety_ID_is_correct()"
        },
        "validatetheheightis()": {
          "definition": "Validate_the_height_is(string height, string units)"
        },
        "validatetheemploymenttitleis()": {
          "definition": "Validate_the_employment_title_is(string title)"
        },
        "validatetheemployercontactphonenumberis()": {
          "definition": "Validate_the_employer_contact_phone_number_is(string phoneNumber)"
        },
        "validatethestatusis()": {
          "definition": "Validate_the_status_is(string status)"
        },
        "validatethedriverslicenseforis()": {
          "definition": "Validate_the_Drivers_license_for_is(string state, string number)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "AcadisDataServicesWorkflow"
    },
    "vehiclelist": {
      "namespace": "",
      "methods": {
        "verifyvehiclelistcontainsitems()": {
          "definition": "Verify_vehicle_list_contains__items(int count)"
        },
        "verifyinisunchecked()": {
          "definition": "Verify__in__is_unchecked( string itemName, string groupName )"
        },
        "checkin()": {
          "definition": "Check__in_( string itemName, string groupName )"
        },
        "showfilters()": {
          "definition": "Show_Filters()"
        },
        "browsetovehiclelistfororganization()": {
          "definition": "Browse_to_Vehicle_List_for_Organization__(string organizationName)"
        },
        "verifyinischecked()": {
          "definition": "Verify__in__is_checked( string itemName, string groupName )"
        },
        "uncheckin()": {
          "definition": "Uncheck__in_( string itemName, string groupName )"
        },
        "verifylistcontainsannamedwithvin()": {
          "definition": "Verify_list_contains_an______named__with_Vin__(string status, string year, string make, string model, string name, string vin)"
        },
        "savefilters()": {
          "definition": "Save_filters()"
        },
        "bindvehiclelist()": {
          "definition": "BindVehicleList(IEnumerable<VehicleListItemDto> items)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "VehicleList"
    },
    "surveyaddeditwizardstart": {
      "namespace": "",
      "methods": {
        "verifytheduplicatenamevalidationerrorisdisplayed()": {
          "definition": "Verify_the_duplicate_name_validation_error_is_displayed()"
        },
        "verifyusernavigatedtothefieldselector()": {
          "definition": "Verify_user_navigated_to_the_field_selector(string hasHasNotString)"
        },
        "navigatetostartinglocation()": {
          "definition": "NavigateToStartingLocation()"
        },
        "navigatetofieldselector()": {
          "definition": "NavigateToFieldSelector()"
        },
        "clickcontinue()": {
          "definition": "Click_Continue()"
        },
        "bindowneroptions()": {
          "definition": "BindOwnerOptions(List<DropDownItem> ownerOptions)"
        },
        "browsetopagetosurvey()": {
          "definition": "Browse_to_page_to__survey__(AddEditMode addEditMode, string formName)"
        },
        "clickcancel()": {
          "definition": "Click_Cancel()"
        },
        "verifyusernavigatedtothestartinglocation()": {
          "definition": "Verify_user__navigated_to_the_starting_location(string hasHasNotString)"
        },
        "clickcreatesurvey()": {
          "definition": "Click_Create_Survey()"
        },
        "browsetopageforsurvey()": {
          "definition": "Browse_to_page_for_survey__(string formName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "SurveyAddEditWizardStartWorkflow"
    },
    "addeditfloor": {
      "namespace": "",
      "methods": {
        "browsetoaddfloorin()": {
          "definition": "Browse_to_add_floor_in__(string buildingName)"
        },
        "browsetoeditfloorin()": {
          "definition": "Browse_to_edit_floor__in__(string floorName, string buildingName)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AddEditFloorWorkflow"
    },
    "portaltrainingdocumentlist": {
      "namespace": "",
      "methods": {
        "verifydocumentlistnotavailable()": {
          "definition": "Verify_document_list_not_available()"
        },
        "verifyexistsinlistwithdescription()": {
          "definition": "Verify__exists_in_list_with_description__(string filename, string fileDescription)"
        },
        "verifycandeletedocuments()": {
          "definition": "Verify_can_delete_documents()"
        },
        "verifydeleteconfirmationwindowhastext()": {
          "definition": "Verify_delete_confirmation_window_has_text(string message)"
        },
        "verifycannotdeletedocuments()": {
          "definition": "Verify_cannot_delete_documents()"
        },
        "showreplacedocument()": {
          "definition": "ShowReplaceDocument()"
        },
        "verifycannotbeopenedforviewing()": {
          "definition": "Verify__cannot_be_opened_for_viewing(string filename)"
        },
        "verifyuserhasrestrictedaccesswithmessage()": {
          "definition": "Verify_user_has_restricted_access_with_message__(string message)"
        },
        "verifyisnotprotected()": {
          "definition": "Verify__is_not_protected(string filename)"
        },
        "verifycannotadddocument()": {
          "definition": "Verify_cannot_add_document()"
        },
        "verifycanbeedited()": {
          "definition": "Verify_can_be_edited(string filename)"
        },
        "verifycannotbeedited()": {
          "definition": "Verify_cannot_be_edited(string filename)"
        },
        "verifyisprotected()": {
          "definition": "Verify__is_protected(string filename)"
        },
        "binddocuments()": {
          "definition": "BindDocuments(List<DocumentListItemDTO> documents)"
        },
        "verifycanbeopenedforviewing()": {
          "definition": "Verify__can_be_opened_for_viewing(string filename)"
        },
        "enterdeletereasonandclickdelete()": {
          "definition": "Enter_delete_reason__and_click_delete(string reason)"
        },
        "verifydeleteconfirmationwindowisvisible()": {
          "definition": "Verify_delete_confirmation_window_is_visible()"
        },
        "verifycannotbeopenedforviewingbyprospectivestudentsintheportal()": {
          "definition": "Verify_cannot_be_opened_for_viewing_by_prospective_students_in_the_portal(string filename)"
        },
        "verifycanbeopenedforviewingbystudentsintheportal()": {
          "definition": "Verify_can_be_opened_for_viewing_by_students_in_the_portal(string filename)"
        },
        "verifycanbeopenedforviewingbyprospectivestudentsintheportal()": {
          "definition": "Verify_can_be_opened_for_viewing_by_prospective_students_in_the_portal(string filename)"
        },
        "clicktoview()": {
          "definition": "Click_to_view__(string filename)"
        },
        "verifycanadddocument()": {
          "definition": "Verify_can_add_document()"
        },
        "verifycannotbeopenedforviewingbystudentsintheportal()": {
          "definition": "Verify_cannot_be_opened_for_viewing_by_students_in_the_portal(string filename)"
        },
        "verifytherearedocumentsinthelist()": {
          "definition": "Verify_there_are__documents_in_the_list(int numDocs)"
        },
        "browsetodocumentlistfor()": {
          "definition": "Browse_to_document_list_for__(string ownerType, string ownerName)"
        },
        "clickdelete()": {
          "definition": "Click_delete__(string filename)"
        },
        "verifydeleteconfirmationwindowisfordeletingwithdescriptionfromowner()": {
          "definition": "Verify_delete_confirmation_window_is_for_deleting__with_description__from_owner__(string filename, string description, string ownerName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalTrainingDocumentListWorkflow"
    },
    "comparabletraininglist": {
      "namespace": "",
      "methods": {
        "bindcomparabletraining()": {
          "definition": "BindComparableTraining(IList<ComparableTrainingListItemDTO> comparableTraining)"
        },
        "verifythereareclasstemplateswithcomparabletraining()": {
          "definition": "Verify_there_are__class_templates_with_comparable_training(int numberOfClassTemplates)"
        },
        "verifyclasstemplateis()": {
          "definition": "Verify_class_template__is__(int rowOrdinal, string classTemplateName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ComparableTrainingListWorkflow"
    },
    "autoupdateclassstatusmanagement": {
      "namespace": "",
      "methods": {
        "updateclassesthatstartonorbeforetoactive()": {
          "definition": "Update_classes_that_start_on_or_before__to_active(DateTime startDate)"
        },
        "verifyclassstatusesshouldbeupdatedmanually()": {
          "definition": "Verify_class_statuses_should_be_updated_manually()"
        },
        "updateclassesthatendbeforetocompleted()": {
          "definition": "Update_classes_that_end_before__to_completed(DateTime endDate)"
        },
        "verifyclassstatusesshouldbeupdatedautomatically()": {
          "definition": "Verify_class_statuses_should_be_updated_automatically()"
        }
      },
      "parent-name": "Workflow",
      "class-name": "AutoUpdateClassStatusManagement"
    },
    "surveyresponseanalysis": {
      "namespace": "",
      "methods": {
        "verifyitemmeanis()": {
          "definition": "Verify_item_mean_is__(decimal mean)"
        },
        "verifyitemtextis()": {
          "definition": "Verify_item_text_is__(string text)"
        },
        "browsetopageforinclass()": {
          "definition": "Browse_to_page_for__in_class__(string surveyName, string className)"
        },
        "verifyitemresponsesare()": {
          "definition": "Verify_item_responses_are__(List<string> itemResponseTexts)"
        },
        "verifyresponsefilteritemsare()": {
          "definition": "Verify_response_filter_items_are__(List<string> expectedResponseFilterItems)"
        },
        "verifythereareitems()": {
          "definition": "Verify_there_are__items(int count)"
        },
        "binditems()": {
          "definition": "BindItems(List<SurveyResponseAnalysisDTO.Item> data)"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for__(string surveyName)"
        },
        "beginverifyingitem()": {
          "definition": "Begin_verifying_item__(int itemNumber)"
        },
        "verifyitemstandarddeviationis()": {
          "definition": "Verify_item_standard_deviation_is__(double stdDev)"
        },
        "verifyitemfreetextresponsesare()": {
          "definition": "Verify_item_freetext_responses_are__(List<string> responses)"
        },
        "verifyitemresponsecountsare()": {
          "definition": "Verify_item_response_counts_are__(List<int> counts)"
        },
        "verifyitemresponsepercentagesare()": {
          "definition": "Verify_item_response_percentages_are__(List<decimal> percentages)"
        },
        "bindresponsesfilteritems()": {
          "definition": "BindResponsesFilterItems(IEnumerable<string> filterItems)"
        },
        "verifyitemmedianis()": {
          "definition": "Verify_item_median_is__(decimal median)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "SurveyResponseAnalysisWorkflow"
    },
    "maintenanceticketresourcetypeaheadhelper": {
      "namespace": "",
      "methods": {
        "verifyresultsincluderesource()": {
          "definition": "VerifyResultsIncludeResource(ResourceType equipmentType, string name)"
        },
        "search()": {
          "definition": "Search(string text)"
        }
      },
      "parent-name": null,
      "class-name": "MaintenanceTicketResourceTypeAheadHelper"
    },
    "proctorsettings": {
      "namespace": "",
      "methods": {
        "verifyproctorswillbeused()": {
          "definition": "Verify_proctors_will_be_used()"
        },
        "bindverificationfields()": {
          "definition": "BindVerificationFields(List<DropDownItem> fields)"
        },
        "verifyproctorswillnotbeused()": {
          "definition": "Verify_proctors_will_not_be_used()"
        },
        "markthatproctorswillbeused()": {
          "definition": "Mark_that_proctors_will_be_used()"
        },
        "returntoglobalsettings()": {
          "definition": "ReturnToGlobalSettings()"
        },
        "verifyreturnedtoglobalsettings()": {
          "definition": "Verify_returned_to_global_settings()"
        },
        "markthatproctorswillnotbeused()": {
          "definition": "Mark_that_proctors_will_not_be_used()"
        },
        "clicksave()": {
          "definition": "Click_Save()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ProctorSettingsWorkflow"
    },
    "basecertsearchcriteria": {
      "namespace": "",
      "methods": {
        "selectcertification()": {
          "definition": "Select_certification__(string certificationName)"
        },
        "entercertificationactionbetweenand()": {
          "definition": "Enter_certification_action_between__and__(DateTime start, DateTime end)"
        },
        "selectcertificationstatus()": {
          "definition": "Select_certification_status__(string certStatus)"
        },
        "enterexpirationbetweenand()": {
          "definition": "Enter_expiration_between__and__(DateTime start, DateTime end)"
        },
        "selectcertificationaction()": {
          "definition": "Select_certification_action__(CertRecordAction actionType)"
        },
        "enterissuedbetweenand()": {
          "definition": "Enter_issued_between__and__(DateTime start, DateTime end)"
        },
        "selectsearchforcertifications()": {
          "definition": "Select_search_for__certifications(CertSearchInclusionOptions inclusionOption)"
        }
      },
      "parent-name": null,
      "class-name": "BaseCertSearchCriteriaWorkflow"
    },
    "testopiauserdetaileditor": {
      "namespace": "",
      "methods": {
        "bindmodel()": {
          "definition": "BindModel(AcadisUserDetailsEditorVM model)"
        }
      },
      "parent-name": null,
      "class-name": "TestopiaUserDetailEditor"
    },
    "portalpersondataaccess": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalPersonDataAccessWorkflow"
    },
    "listmanagementfnh": {
      "namespace": "",
      "methods": {
        "sequenceforis()": {
          "definition": "Sequence_for__is__(LookupType lookupType, List<string> names)"
        },
        "edititemnamedsetnametoanddescriptionto()": {
          "definition": "Edit__item_named__set_name_to__and_description_to__(LookupType lookupType, string name, string newName, string description)"
        },
        "edititemnamedsetdescriptionto()": {
          "definition": "Edit__item_named__set_description_to__(LookupType lookupType, string name, string description)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "ListManagementFNH"
    },
    "inventorysearchcriteria": {
      "namespace": "",
      "methods": {
        "bindresultsperpage()": {
          "definition": "BindResultsPerPage(IList<int> options)"
        },
        "selectcertification()": {
          "definition": "Select_certification__(string certificationName)"
        },
        "redirecttocompliancesearchresults()": {
          "definition": "RedirectToComplianceSearchResults(InventorySearchTerms terms)"
        },
        "entercertificationactionbetweenand()": {
          "definition": "Enter_certification_action_between__and__(DateTime start, DateTime end)"
        },
        "selectcertificationstatus()": {
          "definition": "Select_certification_status__(string certStatus)"
        },
        "enterexpirationbetweenand()": {
          "definition": "Enter_expiration_between__and__(DateTime start, DateTime end)"
        },
        "selectcertificationaction()": {
          "definition": "Select_certification_action__(CertRecordAction actionType)"
        },
        "redirecttosearchresults()": {
          "definition": "RedirectToSearchResults(InventorySearchTerms terms)"
        },
        "clearcertificationscriteria()": {
          "definition": "ClearCertificationsCriteria()"
        },
        "redirecttocapability()": {
          "definition": "RedirectToCapability()"
        },
        "browsetopageforcompliancesearch()": {
          "definition": "Browse_to_Page_for_Compliance_Search()"
        },
        "browsetopageforforecastinggoalforcapabilityfor()": {
          "definition": "Browse_to_Page_for_Forecasting_Goal__for_Capability__for__(string forecastingGoal, string forecastingCapability, string resourceTypeString)"
        },
        "enterissuedbetweenand()": {
          "definition": "Enter_issued_between__and__(DateTime start, DateTime end)"
        },
        "selectsearchforcertifications()": {
          "definition": "Select_search_for__certifications(CertSearchInclusionOptions inclusionOption)"
        },
        "bindonlypermittedorganization()": {
          "definition": "BindOnlyPermittedOrganization(int organizationID, string organizationName)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "savedisplayoptions()": {
          "definition": "SaveDisplayOptions()"
        },
        "selectowningorganizations()": {
          "definition": "Select_owning_organizations__(List<string> owningOrganizationsToSelect)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "InventorySearchCriteriaWorkflow"
    },
    "register": {
      "namespace": "",
      "methods": {
        "entertextfordietaryrestrictions()": {
          "definition": "Enter_text__for_dietary_restrictions(string s)"
        },
        "entertextfornonhousingaccomodations()": {
          "definition": "Enter_text__for_non_housing_accomodations(string s)"
        },
        "verifytuitionbilltoisnotdisplayed()": {
          "definition": "Verify_tuition_bill_to_is_not_displayed()"
        },
        "verifythatspecialinstructionsis()": {
          "definition": "Verify_that_Special_Instructions_is__(string s)"
        },
        "verifythatexpectedcheckoutis()": {
          "definition": "Verify_that_Expected_Checkout_is__(DateTime d)"
        },
        "verifynosendingorganizationisselected()": {
          "definition": "Verify_no_sending_organization_is_selected()"
        },
        "changesendingorganizationtonone()": {
          "definition": "Change_sending_organization_to_none()"
        },
        "verifythereisnorestrictedalert()": {
          "definition": "Verify_there_is_no_restricted_alert()"
        },
        "clicktoeditprerequisite()": {
          "definition": "Click_to_edit_prerequisite(string type, string desc)"
        },
        "entertextforreligiousneeds()": {
          "definition": "Enter_text__for_religious_needs(string s)"
        },
        "verifydateofbirthis()": {
          "definition": "Verify_date_of_birth_is__(string dob)"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for__(string className)"
        },
        "verifythatspecialaccommodationis()": {
          "definition": "Verify_that_Special_Accommodation_is__(string text)"
        },
        "verifymailingaddressisempty()": {
          "definition": "Verify_Mailing_Address_is_empty()"
        },
        "clickfinishlater()": {
          "definition": "Click_finish_later()"
        },
        "verifyphysicaladdressiswithtype()": {
          "definition": "Verify_Physical_Address_is___with_type_(string addressLine1, string addressLine2, string city, string state, string zip, string addressType)"
        },
        "verifyemergencycontactisempty()": {
          "definition": "Verify_Emergency_Contact_is_empty()"
        },
        "browsetocontinuerequestforforclass()": {
          "definition": "Browse_to_continue_request_for__for_class__(string name, string className)"
        },
        "registeranother()": {
          "definition": "RegisterAnother()"
        },
        "browsetopageforexpectingaccessgranted()": {
          "definition": "Browse_to_page_for__expecting_access_granted(string className)"
        },
        "enterwithtypeformailingaddress()": {
          "definition": "Enter___with_type_for_Mailing_address(string addressLine1, string addressLine2, string city, string state, string zip, string addressType)"
        },
        "browsetopageforexpectingaccessdenied()": {
          "definition": "Browse_to_page_for__expecting_access_denied(string className)"
        },
        "selectfortrainingcategory()": {
          "definition": "Select__for_training_category(string catName)"
        },
        "browsetopagefromavailabletraininglistregisteringfor()": {
          "definition": "Browse_to_page_from_available_training_list_registering_for__(string className)"
        },
        "verifypersonisselected()": {
          "definition": "Verify_person__is_selected(string name)"
        },
        "verifysendingorganizationiswithtitle()": {
          "definition": "Verify_sending_organization_is__with_title__(string org, string title)"
        },
        "verifythereareprerequisites()": {
          "definition": "Verify_there_are__prerequisites(int n)"
        },
        "selectforgender()": {
          "definition": "Select__for_gender(string gender)"
        },
        "enterfordateofbirth()": {
          "definition": "Enter__for_date_of_birth(string dob)"
        },
        "verifyemergencycontactnameis()": {
          "definition": "Verify_Emergency_Contact_Name_is_(string val)"
        },
        "verifytextformedicalissuesisempty()": {
          "definition": "Verify_text_for_medical_issues_is_empty()"
        },
        "selectorgforbillingotherorganization()": {
          "definition": "Select_org__for_billing_other_organization(string org)"
        },
        "verifyemergencycontactrelationshipis()": {
          "definition": "Verify_Emergency_Contact_relationship_is_(string val)"
        },
        "enterforcontactname()": {
          "definition": "Enter_for_Contact_Name(string name)"
        },
        "selectforspecialaccommodation()": {
          "definition": "Select__for_special_accommodation(string acc)"
        },
        "verifygenderis()": {
          "definition": "Verify_gender_is__(string gender)"
        },
        "leavepage()": {
          "definition": "LeavePage()"
        },
        "clickinregistranttypeahead()": {
          "definition": "Click_in_registrant_type_ahead()"
        },
        "verifyemergencycontactaddressis()": {
          "definition": "Verify_Emergency_Contact_Address_is_(string addressLine1, string addressLine2, string city, string state, string zip)"
        },
        "enterwithtypeforphysicaladdress()": {
          "definition": "Enter___with_type_for_Physical_address(string addressLine1, string addressLine2, string city, string state, string zip, string addressType)"
        },
        "enterforemergencycontactprimaryphone()": {
          "definition": "Enter___for_Emergency_Contact_Primary_Phone(string number, string extension)"
        },
        "verifystudentdataisvisible()": {
          "definition": "Verify_student_data_is_visible()"
        },
        "verifymailingaddressiswithtype()": {
          "definition": "Verify_Mailing_Address_is___with_type_(string addressLine1, string addressLine2, string city, string state, string zip, string addressType)"
        },
        "verifyphysicaladdressisempty()": {
          "definition": "Verify_Physical_Address_is_empty()"
        },
        "verifycannotsubmitenrollmentrequest()": {
          "definition": "Verify_cannot_submit_enrollment_request()"
        },
        "entertextformedicalissues()": {
          "definition": "Enter_text__for_medical_issues(string s)"
        },
        "verifythatpricelevelis()": {
          "definition": "Verify_that_Price_Level_is__(string p)"
        },
        "entertextforadditionalcomments()": {
          "definition": "Enter_text__for_additional_comments(string s)"
        },
        "verifyhousinginformationisdisplayed()": {
          "definition": "Verify_housing_information_is_displayed()"
        },
        "verifytextfornonhousingaccommodationsisempty()": {
          "definition": "Verify_text_for_non_housing_accommodations_is_empty()"
        },
        "enterforrelationship()": {
          "definition": "Enter_for_Relationship(string relationship)"
        },
        "verifytextforadditionalcommentsisempty()": {
          "definition": "Verify_text_for_additional_comments_is_empty()"
        },
        "verifycapacityalertisnotvisible()": {
          "definition": "Verify_capacity_alert_is_not_visible()"
        },
        "verifyhousinginformationisnotdisplayed()": {
          "definition": "Verify_housing_information_is_not_displayed()"
        },
        "verifytuitionbilltoisdisplayed()": {
          "definition": "Verify_tuition_bill_to_is_displayed()"
        },
        "verifyprerequisiteisfulfilledbywithfulfillmentofanddateof()": {
          "definition": "Verify__prerequisite__is_Fulfilled_by__with_fulfillment_of__and_date_of__(string type, string name, string fulfilledBy, string fulfillment, DateTime date)"
        },
        "clickregister()": {
          "definition": "Click_register()"
        },
        "verifyrequestedstatusis()": {
          "definition": "Verify_requested_status_is__(StudentRegistrationStatus stat)"
        },
        "selectforhousingbilltoparty()": {
          "definition": "Select__for_housing_bill_to_party(string type)"
        },
        "browsetopagefromavailabletraininglistwaitlistingfor()": {
          "definition": "Browse_to_page_from_available_training_list_waitlisting_for__(string className)"
        },
        "verifyemergencycontactprimaryphoneis()": {
          "definition": "Verify_Emergency_Contact_primary_phone_is_(string val)"
        },
        "verifyisselectedfortrainingcategory()": {
          "definition": "Verify__is_selected_for_training_category(string catName)"
        },
        "entertextforadditionalcontactemail()": {
          "definition": "Enter_text__for_additional_contact_email(string str)"
        },
        "selectforbilltoparty()": {
          "definition": "Select__for_bill_to_party(string type)"
        },
        "entertextforspecialinstructions()": {
          "definition": "Enter_text__for_special_instructions(string s)"
        },
        "verifythatspecialinstructionsisblank()": {
          "definition": "Verify_that_Special_Instructions_is_blank()"
        },
        "selectregistrant()": {
          "definition": "Select_registrant__(string name)"
        },
        "verifytextforreligiousneedsisempty()": {
          "definition": "Verify_text_for_religious_needs_is_empty()"
        },
        "changesendingorganizationtowithnotitle()": {
          "definition": "Change_sending_organization_to__with_no_title(string orgName)"
        },
        "verifyprerequisiteisunfulfilled()": {
          "definition": "Verify__prerequisite__is_Unfulfilled(string type, string name)"
        },
        "verifythatexpectedcheckinis()": {
          "definition": "Verify_that_Expected_Checkin_is__(DateTime d)"
        },
        "verifyemergencycontactrequired()": {
          "definition": "Verify_Emergency_Contact__required(string status)"
        },
        "verifycapacityalertisvisible()": {
          "definition": "Verify_capacity_alert_is_visible()"
        },
        "selectforpricelevel()": {
          "definition": "Select__for_price_level(string type)"
        },
        "verifytextfordietaryrestrictionsisempty()": {
          "definition": "Verify_text_for_dietary_restrictions_is_empty()"
        },
        "verifyisnotavailabletoselectfromthedropdownasregistrant()": {
          "definition": "Verify__is_not_available_to_select_from_the_dropdown_as_registrant(string name)"
        },
        "verifytrainingcategoriesavailableare()": {
          "definition": "Verify_training_categories_available_are__(string cats)"
        },
        "verifyisavailabletoselectfromthedropdownasregistrant()": {
          "definition": "Verify__is_available_to_select_from_the_dropdown_as_registrant(string name)"
        },
        "verifythathousingrequestedisusage()": {
          "definition": "Verify_that_Housing_Requested_is_usage__(string usage)"
        },
        "enterforemergencycontactaddress()": {
          "definition": "Enter___for_Emergency_Contact_Address(string addressLine1, string addressLine2, string city, string state, string zip)"
        },
        "verifywaitforinvoicesmodaldisplayed()": {
          "definition": "Verify_wait_for_invoices_modal__displayed(string isornot)"
        },
        "changesendingorganizationtowithtitle()": {
          "definition": "Change_sending_organization_to__with_title__(string orgName, string titleName)"
        },
        "verifycansubmitenrollmentrequest()": {
          "definition": "Verify_can_submit_enrollment_request()"
        },
        "verifyemergencycontactalternatephoneis()": {
          "definition": "Verify_Emergency_Contact_alternate_phone_is_(string val)"
        },
        "enterforemergencycontactalternatephone()": {
          "definition": "Enter___for_Emergency_Contact_Alternate_Phone(string number, string extension)"
        },
        "verifyemergencycontactalternatephoneextensionis()": {
          "definition": "Verify_Emergency_Contact_alternate_phone_extension_is_(string val)"
        },
        "typeintoregistrantselectionexpectingresults()": {
          "definition": "Type__into_registrant_selection_expecting__results(string prefix, int expectedCount)"
        },
        "verifyselectedregistrantis()": {
          "definition": "Verify_selected_registrant_is__(string name)"
        },
        "verifystudentdataisnotvisible()": {
          "definition": "Verify_student_data_is_not_visible()"
        },
        "verifythereisrestrictedalertwithreason()": {
          "definition": "Verify_there_is_restricted_alert_with_reason(string reason)"
        },
        "selectforusagetype()": {
          "definition": "Select__for_usage_type(string type)"
        },
        "verifyemergencycontactprimaryphoneextensionis()": {
          "definition": "Verify_Emergency_Contact_primary_phone_extension_is_(string val)"
        },
        "verifynopersonisselected()": {
          "definition": "Verify_no_person_is_selected()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "RegisterWorkflow"
    },
    "performancereportexport": {
      "namespace": "",
      "methods": {
        "writeexport()": {
          "definition": "WriteExport(string filename, IList<string> exportData)"
        },
        "verifyvalueinrowcolumnistoday()": {
          "definition": "Verify_value_in_row__column__is_today(int row, int column)"
        },
        "verifyheaderis()": {
          "definition": "Verify_header__is__(int column, string header)"
        },
        "verifyvalueinrowcolumnisempty()": {
          "definition": "Verify_value_in_row__column__is_empty(int row, int column)"
        },
        "verifyvalueinrowcolumnis()": {
          "definition": "Verify_value_in_row__column__is__(int row, int column, string value)"
        },
        "exportstudentevaluationsfor()": {
          "definition": "Export_student_evaluations_for__(string performanceReportVersionName)"
        },
        "verifythereareexportrows()": {
          "definition": "Verify_there_are__export_rows(int rows)"
        }
      },
      "parent-name": "MVBaseExportHandlerWorkflow",
      "class-name": "PerformanceReportExportWorkflow"
    },
    "orderedcollectionequivalentconstraint": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "OrderedCollectionEquivalentConstraint"
    },
    "editprogram": {
      "namespace": "",
      "methods": {
        "setclasseswillbenamed()": {
          "definition": "Set_classes_will_be__named(string manualOrAuto)"
        },
        "setclassautonamingprefixto()": {
          "definition": "Set_class_autonaming_prefix_to__(string prefix)"
        },
        "setprogramnameto()": {
          "definition": "Set_program_name_to__(string name)"
        },
        "selectascategory()": {
          "definition": "Select__as_category(string category)"
        },
        "createprograminwithabbreviation()": {
          "definition": "Create_program__in__with_abbreviation__(string programName, string academyName, string abbreviation)"
        },
        "verifyclassautonamingprefixis()": {
          "definition": "Verify_class_autonaming_prefix_is__(string prefix)"
        },
        "bindprogramcategories()": {
          "definition": "BindProgramCategories(IList<ProgramCategoryDTO> categories)"
        },
        "setabbreviationto()": {
          "definition": "Set_abbreviation_to__(string abbreviation)"
        },
        "setprogramactive()": {
          "definition": "Set_program__active(string isIsNot)"
        },
        "verifyautomaticallygeneratednameswillstartatnumber()": {
          "definition": "Verify_automatically_generated_names_will_start_at_number__(int startingNumber)"
        },
        "browsetopagefromorganization()": {
          "definition": "Browse_to_page_from_organization__(string orgName)"
        },
        "setclassautonamingminimumwidthto()": {
          "definition": "Set_class_autonaming_minimum_width_to__(int minimumWidth)"
        },
        "setclassnamingstartingnumberto()": {
          "definition": "Set_class_naming_starting_number_to__(int startingNumber)"
        },
        "verifyprogramnameis()": {
          "definition": "Verify_program_name_is__(string programName)"
        },
        "createprogramin()": {
          "definition": "Create_program__in__(string programName, string academyName)"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for__(string programName)"
        },
        "verifyclassautonamingminimumwidthis()": {
          "definition": "Verify_class_autonaming_minimum_width_is__(int minimumWidth)"
        },
        "browsetopagefromorganizationfor()": {
          "definition": "Browse_to_page_from_organization__for__(string orgName, string programName)"
        },
        "verifyclasseswillbenamed()": {
          "definition": "Verify_classes_will_be__named(string manualOrAuto)"
        },
        "save()": {
          "definition": "Save()"
        },
        "verifyabbreviationis()": {
          "definition": "Verify_abbreviation_is(string abbreviation)"
        },
        "verifyclassnamingstartingnumberis()": {
          "definition": "Verify_class_naming_starting_number_is__(int startingNumber)"
        },
        "verifyprogramactive()": {
          "definition": "Verify_program__active(string isIsNot)"
        },
        "verifyisselectedascategory()": {
          "definition": "Verify__is_selected_as_category(string category)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EditProgramWorkflow"
    },
    "persontrainingcompleted": {
      "namespace": "",
      "methods": {
        "verifyonlinetrainingeventcannotbereviewed()": {
          "definition": "Verify_online_training_event__cannot_be_reviewed(string onlineEventName)"
        },
        "verifyonlinetrainingeventcanbereviewed()": {
          "definition": "Verify_online_training_event__can_be_reviewed(string onlineEventName)"
        },
        "verifyonlineelementofblendedclasswasnotcompleted()": {
          "definition": "Verify_online_element__of_blended_class__was_not_completed(string testName, string className)"
        },
        "retakeonlineelementofblendedclassandworkonforminutesbutdonotcomplete()": {
          "definition": "Retake_online_element__of_blended_class__and_work_on_for__minutes_but_do_not_complete(string testName, string className, double minutes)"
        },
        "verifyonlineelementofblendedclasscanbereviewed()": {
          "definition": "Verify_online_element__of_blended_class__can_be_reviewed(string testName, string className)"
        },
        "bindtraining()": {
          "definition": "BindTraining(List<PersonTrainingEventDTO> personTraining)"
        },
        "verifyshownoresultsmessageisnotvisible()": {
          "definition": "Verify_show_no_results_message_is_not_visible()"
        },
        "launchonlineassessment()": {
          "definition": "LaunchOnlineAssessment(Acadis.MVAcadis.People.StudentLearnDTO learnDTO)"
        },
        "verifyonlinetrainingeventwasnotcompleted()": {
          "definition": "Verify_online_training_event__was_not_completed(string onlineEventName)"
        },
        "verifyonlinetrainingeventcannotberetaken()": {
          "definition": "Verify_online_training_event__cannot_be_retaken(string onlineEventName)"
        },
        "verifyonlineelementofblendedclasswascompleted()": {
          "definition": "Verify_online_element__of_blended_class__was_completed(string testName, string className)"
        },
        "verifyonlinetrainingeventwascompleted()": {
          "definition": "Verify_online_training_event__was_completed(string onlineEventName)"
        },
        "retakeonlinetrainingeventandworkonforminutesbutdonotcomplete()": {
          "definition": "Retake_online_training_event__and_work_on_for__minutes_but_do_not_complete(string onlineEventName, double minutes)"
        },
        "verifyonlineelementofblendedclasscannotberetaken()": {
          "definition": "Verify_online_element__of_blended_class__cannot_be_retaken(string testName, string className)"
        },
        "retakeonlinetrainingeventandcompletewithpercentinminutes()": {
          "definition": "Retake_online_training_event__and_complete_with__percent_in__minutes(string onlineEventName, double grade, double minutes)"
        },
        "verifyonlinetrainingeventcanberetaken()": {
          "definition": "Verify_online_training_event__can_be_retaken(string onlineEventName)"
        },
        "verifyonlineelementofblendedclasscanberetaken()": {
          "definition": "Verify_online_element__of_blended_class__can_be_retaken(string testName, string className)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "verifyonlineelementofblendedclasscannotbereviewed()": {
          "definition": "Verify_online_element__of_blended_class__cannot_be_reviewed(string testName, string className)"
        },
        "retakeonlineelementofblendedclassandcompletewithpercentinminutes()": {
          "definition": "Retake_online_element__of_blended_class__and_complete_with__percent_in__minutes(string testName, string className, double grade, double minutes)"
        },
        "verifyshownoresultsmessageisvisible()": {
          "definition": "Verify_show_no_results_message_is_visible()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PersonTrainingCompletedWorkflow"
    },
    "surveylist": {
      "namespace": "",
      "methods": {
        "verifyaddsurveybuttonvisible()": {
          "definition": "Verify_Add_Survey_button__visible(string isIsNotString)"
        },
        "clickcontinueontheclosesurveydialog()": {
          "definition": "Click_Continue_on_the_Close_Survey_Dialog()"
        },
        "showclosedialog()": {
          "definition": "ShowCloseDialog(int surveyID)"
        },
        "verifyuserwasshowntheclosedialogfor()": {
          "definition": "Verify_user_was_shown_the_Close_dialog_for__(string surveyName)"
        },
        "verifyrownumbersurveyhasowner()": {
          "definition": "Verify_row_number__survey_has_owner__(int rowNumber, string expectedOwner)"
        },
        "bindsurveylist()": {
          "definition": "BindSurveyList(IList<SurveyListItemDTO> surveys)"
        },
        "verifyrownumbersurveycopyactionvisible()": {
          "definition": "Verify_row_number__survey_copy_action__visible(int rowNumber, string isOrNotVisible)"
        },
        "verifyrownumbersurveyeditlinkvisible()": {
          "definition": "Verify_row_number__survey_edit_link__visible(int rowNumber, string isOrNotVisible)"
        },
        "verifyrownumbersurveyviewdatalinkvisible()": {
          "definition": "Verify_row_number__survey_view_data_link__visible(int rowNumber, string isOrNotVisible)"
        },
        "verifysurveylisthasitems()": {
          "definition": "Verify_survey_list_has__items(int count)"
        },
        "copydialogbindowneroptions()": {
          "definition": "CopyDialogBindOwnerOptions(List<DropDownItem> ownerOptions)"
        },
        "verifyrownumbersurveyhasname()": {
          "definition": "Verify_row_number__survey_has_name__(int rowNumber, string expectedName)"
        },
        "hidecopydialog()": {
          "definition": "HideCopyDialog()"
        },
        "verifyrownumbersurveyhasdescription()": {
          "definition": "Verify_row_number__survey_has_description__(int rowNumber, string expectedDescription)"
        },
        "hideclosedialog()": {
          "definition": "HideCloseDialog()"
        },
        "trysetcopydialogselectedowner()": {
          "definition": "TrySetCopyDialogSelectedOwner(int? ownerId)"
        },
        "verifysurveylisthasitem()": {
          "definition": "Verify_survey_list_has__item(int count)"
        },
        "clickdeletesurveyonrowwithreason()": {
          "definition": "Click_Delete_Survey_on_row__with_reason__(int rowNumber, string delteReason)"
        },
        "verifyuserwasshownthecopydialogfor()": {
          "definition": "Verify_user_was_shown_the_Copy_dialog_for__(string surveyName)"
        },
        "verifyrownumbersurveyhasstatus()": {
          "definition": "Verify_row_number__survey_has_status__(int rowNumber, string expectedStatus)"
        },
        "verifycopydialogowneroptionsare()": {
          "definition": "Verify_copy_dialog_owner_options_are(List<string> optionText)"
        },
        "verifynodatamessageisvisible()": {
          "definition": "verify_no_data_message_is_visible()"
        },
        "clickcopysurveyonrow()": {
          "definition": "Click_Copy_Survey_on_row__(int rowNumber)"
        },
        "clickcontinueonthecopysurveydialog()": {
          "definition": "Click_Continue_on_the_Copy_Survey_Dialog()"
        },
        "showcopydialog()": {
          "definition": "ShowCopyDialog(int surveyID)"
        },
        "verifyrownumbersurveypreviewactionvisible()": {
          "definition": "Verify_row_number__survey_preview_action__visible(int rowNumber, string isOrNotVisible)"
        },
        "verifyrownumbersurveycloseactionvisible()": {
          "definition": "Verify_row_number__survey_close_action__visible(int rowNumber, string isOrNotVisible)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "SurveyListWorkflow"
    },
    "organizationsearchcriteria": {
      "namespace": "",
      "methods": {
        "excludeinactiveorganizations()": {
          "definition": "Exclude_inactive_organizations()"
        },
        "setup()": {
          "definition": "SetUp()"
        },
        "enterasnamecriteria()": {
          "definition": "Enter__as_Name_Criteria(string name)"
        },
        "chooseasthematchesoption()": {
          "definition": "Choose__as_the_Matches_option(SearchComparison matchMode)"
        },
        "includeastypetosearch()": {
          "definition": "Include__as_type_to_search(string type)"
        },
        "excludeactiveorganizations()": {
          "definition": "Exclude_active_organizations()"
        },
        "enterasorganizationreferencecriteria()": {
          "definition": "Enter__as_Organization_Reference_Criteria(string organizationReference)"
        },
        "includeasdisciplinetosearch()": {
          "definition": "Include__as_discipline_to_search(string disciplineName)"
        },
        "enterasabbreviationcriteria()": {
          "definition": "Enter__as_Abbreviation_Criteria(string abbreviation)"
        },
        "includeinactiveorganizations()": {
          "definition": "Include_inactive_organizations()"
        },
        "includeactiveorganizations()": {
          "definition": "Include_active_organizations()"
        }
      },
      "parent-name": "BaseCertSearchCriteriaWorkflow",
      "class-name": "OrganizationSearchCriteria"
    },
    "registerindividual": {
      "namespace": "",
      "methods": {
        "verifytuitionbilltoisnotdisplayed()": {
          "definition": "Verify_tuition_bill_to_is_not_displayed()"
        },
        "verifyhousinginformationisdisplayed()": {
          "definition": "Verify_housing_information_is_displayed()"
        },
        "verifyexactmatchinfolinkisvisible()": {
          "definition": "Verify_exact_match_infolink_is_visible()"
        },
        "verifythatexpectedcheckoutis()": {
          "definition": "Verify_that_Expected_Checkout_is__(DateTime expectedCheckOut)"
        },
        "verifytuitionbilltoisdisplayed()": {
          "definition": "Verify_tuition_bill_to_is_displayed()"
        },
        "verifyhousinginformationisnotdisplayed()": {
          "definition": "Verify_housing_information_is_not_displayed()"
        },
        "showalreadywaitlistedalert()": {
          "definition": "ShowAlreadyWaitlistedAlert()"
        },
        "dispose()": {
          "definition": "Dispose()"
        },
        "verifyemploymentprerequisiteisfulfilledby()": {
          "definition": "Verify_employment_prerequisite__is_fulfilled_by__(string reqText, string employmentOrgName)"
        },
        "verifyregistrationorientationmodalisdisplayed()": {
          "definition": "Verify_registration_orientation_modal_is_displayed()"
        },
        "verifyprerequisiteisfulfilledbywithfulfillmentofanddateof()": {
          "definition": "Verify__prerequisite__is_Fulfilled_by__with_fulfillment_of__and_date_of__(string category, string reqText, string fulfiller, string fulfillmentText, DateTime fulfillmentDate)"
        },
        "clickregister()": {
          "definition": "Click_Register()"
        },
        "clicktoeditprerequisite()": {
          "definition": "Click_to_edit_prerequisite(string prereqType, string prereqDescr)"
        },
        "setregistrantsearchcontext()": {
          "definition": "SetRegistrantSearchContext(string context)"
        },
        "clickfinishlater()": {
          "definition": "Click_Finish_Later()"
        },
        "verifythatspecialaccommodationis()": {
          "definition": "Verify_that_Special_Accommodation_is__(string accom)"
        },
        "selectforhousingbilltoparty()": {
          "definition": "Select__for_housing_bill_to_party(string billToParty)"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_Page_for__(string trainingEventName)"
        },
        "clickaddtowaitlist()": {
          "definition": "Click_Add_To_Waitlist()"
        },
        "showdatachangealert()": {
          "definition": "ShowDataChangeAlert(SaveAction action)"
        },
        "browsetocontinuerequestforforclass()": {
          "definition": "Browse_to_Continue_Request_for__for_class__(string personName, string trainingClassName)"
        },
        "browsetopageforexpectingaccessgranted()": {
          "definition": "Browse_to_Page_for__expecting_access_granted(string trainingEventName)"
        },
        "entertextforspecialinstructions()": {
          "definition": "Enter_text__for_Special_Instructions(string specialInstructions)"
        },
        "selectforbilltoparty()": {
          "definition": "Select__for_Bill_to_Party(string partyName)"
        },
        "selectregistrant()": {
          "definition": "Select_registrant__(string personName)"
        },
        "verifyanypersonmatchinfolinkisnotvisible()": {
          "definition": "Verify_any_person_match_infolink_is_not_visible()"
        },
        "verifythisisthecorrectpagetowaitlist()": {
          "definition": "Verify_this_is_the_correct_page_to_waitlist()"
        },
        "verifythatspecialinstructionsisblank()": {
          "definition": "Verify_that_Special_Instructions_is_blank()"
        },
        "browsetopageforexpectingaccessdenied()": {
          "definition": "Browse_to_Page_for__expecting_access_denied(string trainingEventName)"
        },
        "verifyprerequisitesarenotdisplayed()": {
          "definition": "Verify_prerequisites_are_not_displayed()"
        },
        "verifyenrollmentinformationisdisplayed()": {
          "definition": "Verify_enrollment_information_is_displayed()"
        },
        "closeregistrationorientationmodal()": {
          "definition": "Close_registration_orientation_modal()"
        },
        "showclassfullnowaitlistalert()": {
          "definition": "ShowClassFullNoWaitlistAlert()"
        },
        "verifyprerequisiteisunfulfilled()": {
          "definition": "Verify__prerequisite__is_Unfulfilled(string category, string reqText)"
        },
        "verifythereareprerequisites()": {
          "definition": "Verify_there_are__prerequisites(int count)"
        },
        "verifythatexpectedcheckinis()": {
          "definition": "Verify_that_Expected_Checkin_is__(DateTime expectedCheckIn)"
        },
        "selectorgforbillingotherorganization()": {
          "definition": "Select_org__for_billing_other_organization(string orgName)"
        },
        "verifyredirectedtoeditprerequisite()": {
          "definition": "Verify_redirected_to_edit_prerequisite()"
        },
        "verifyenrollmentinformationisnotdisplayed()": {
          "definition": "Verify_enrollment_information_is_not_displayed()"
        },
        "verifyisavailabletoselectfromthedropdownasregistrant()": {
          "definition": "Verify__is_available_to_select_from_the_dropdown_as_registrant(string personName)"
        },
        "verifywaitlistalertisshown()": {
          "definition": "Verify_waitlist_alert_is_shown()"
        },
        "selectforpricelevel()": {
          "definition": "Select__for_price_level(string priceLevel)"
        },
        "verifyexactmatchinfolinkisnotvisible()": {
          "definition": "Verify_exact_match_infolink_is_not_visible()"
        },
        "markdonotshowagainonregistrationorientationmodal()": {
          "definition": "Mark_do_not_show_again_on_registration_orientation_modal()"
        },
        "verifyisnotavailabletoselectfromthedropdownasregistrant()": {
          "definition": "Verify__is_not_available_to_select_from_the_dropdown_as_registrant(string personName)"
        },
        "verifyanypersonmatchinfolinkisvisible()": {
          "definition": "Verify_any_person_match_infolink_is_visible()"
        },
        "browsetopagetowaitlistfor()": {
          "definition": "Browse_to_Page_to_waitlist_for__(string trainingEventName)"
        },
        "verifywaitforinvoicesmodaldisplayed()": {
          "definition": "Verify_wait_for_invoices_modal__displayed(string isOrNot)"
        },
        "showregisteredsincedraftstartedalert()": {
          "definition": "ShowRegisteredSinceDraftStartedAlert()"
        },
        "verifythisisthecorrectpagetoregister()": {
          "definition": "Verify_this_is_the_correct_page_to_register()"
        },
        "showclasswaitlistalert()": {
          "definition": "ShowClassWaitlistAlert()"
        },
        "verifyprerequisitesaredisplayed()": {
          "definition": "Verify_prerequisites_are_displayed()"
        },
        "setregistrant()": {
          "definition": "SetRegistrant(int? id, string value)"
        },
        "verifythathousingrequestedisusage()": {
          "definition": "Verify_that_Housing_Requested_is_usage__(string usageTypeName)"
        },
        "verifyshouldvalidatetuitionbillingotherorganization()": {
          "definition": "Verify_should_validate_tuition_billing_other_organization()"
        },
        "verifycansubmitenrollmentrequest()": {
          "definition": "Verify_can_submit_enrollment_request()"
        },
        "verifyshouldnotvalidatetuitionbillinggrant()": {
          "definition": "Verify_should_not_validate_tuition_billing_grant()"
        },
        "verifyshouldnotvalidatetuitionbillingotherorganization()": {
          "definition": "Verify_should_not_validate_tuition_billing_other_organization()"
        },
        "verifynoregistrantselected()": {
          "definition": "Verify_no_registrant_selected()"
        },
        "redirecttoregistrationslist()": {
          "definition": "RedirectToRegistrationsList()"
        },
        "typeintoregistrantselectionexpectingresults()": {
          "definition": "Type__into_registrant_selection_Expecting__results(string prefixText, int numResults)"
        },
        "verifyselectedregistrantis()": {
          "definition": "Verify_selected_registrant_is__(string personName)"
        },
        "verifythatpricelevelis()": {
          "definition": "Verify_that_Price_Level_is__(string priceLevelDescription)"
        },
        "selectforusagetype()": {
          "definition": "Select__for_usage_type(string usageTypeName)"
        },
        "verifycannotsubmitenrollmentrequest()": {
          "definition": "Verify_cannot_submit_enrollment_request()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "RegisterIndividualWorkflow"
    },
    "contactinfoedit": {
      "namespace": "",
      "methods": {
        "makemailingaddress()": {
          "definition": "Make_mailing_address()"
        },
        "selectforphonetype()": {
          "definition": "Select__for_phone_type(string value)"
        },
        "updateaddress()": {
          "definition": "Update__address(string ordinal)"
        },
        "addemailaddressoftoorganization()": {
          "definition": "Add_email_address_of__to_organization__(string email, string organizationName)"
        },
        "updatewebsite()": {
          "definition": "Update__website(string ordinal)"
        },
        "deleteemailaddress()": {
          "definition": "Delete_email_address()"
        },
        "verifyemergencycontactphone1is()": {
          "definition": "verify_emergency_contact_phone_1_is__(string value)"
        },
        "enterforemergencycontactzip()": {
          "definition": "Enter__for_emergency_contact_zip(string value)"
        },
        "enterforemergencycontactphone1()": {
          "definition": "Enter__for_emergency_contact_phone_1(string value)"
        },
        "chooseasnewprimaryemail()": {
          "definition": "Choose__as_new_primary_email(string email)"
        },
        "makeprimaryemailaddress()": {
          "definition": "Make_primary_email_address()"
        },
        "verifyemergencycontactstateis()": {
          "definition": "verify_emergency_contact_state_is__(string value)"
        },
        "verifydeleteprimaryphonepopoverisnotshown()": {
          "definition": "Verify_delete_primary_phone_popover_is_not_shown()"
        },
        "verifydeleteprimaryaddresspopoverisshown()": {
          "definition": "Verify_delete_primary_address_popover_is_shown()"
        },
        "enterforemergencycontactphoneextension2()": {
          "definition": "Enter__for_emergency_contact_phone_extension_2(string value)"
        },
        "saveall()": {
          "definition": "Save_all()"
        },
        "verifydeleteprimaryemailpopoverisnotshown()": {
          "definition": "Verify_delete_primary_email_popover_is_not_shown()"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for__(string personName)"
        },
        "chooseasnewprimaryaddress()": {
          "definition": "Choose__as_new_primary_address(string formattedAddress)"
        },
        "enterforstreet1()": {
          "definition": "Enter__for_street_1(string value)"
        },
        "enterforemergencycontactcity()": {
          "definition": "Enter__for_emergency_contact_city(string value)"
        },
        "selectforemergencycontactstate()": {
          "definition": "Select__for_emergency_contact_state(string value)"
        },
        "enterforstreet2()": {
          "definition": "Enter__for_street_2(string value)"
        },
        "deleteaddress()": {
          "definition": "Delete_address()"
        },
        "enterforphonenumber()": {
          "definition": "Enter__for_phone_number(string value)"
        },
        "enterfordescription()": {
          "definition": "Enter__for_description(string value)"
        },
        "verifyemergencycontactstreetline1is()": {
          "definition": "verify_emergency_contact_street_line_1_is__(string value)"
        },
        "deletephone()": {
          "definition": "Delete_phone()"
        },
        "enterforwebsiteurl()": {
          "definition": "Enter__for_website_url(string value)"
        },
        "bindaddresses()": {
          "definition": "BindAddresses(IEnumerable<AddressDto> dtos)"
        },
        "deleteaddressat()": {
          "definition": "Delete_address_at__(string line1)"
        },
        "bindwebsites()": {
          "definition": "BindWebsites(IEnumerable<WebsiteDto> dtos)"
        },
        "enterforemergencycontactname()": {
          "definition": "Enter__for_emergency_contact_name(string value)"
        },
        "enterforemergencycontactphoneextension1()": {
          "definition": "Enter__for_emergency_contact_phone_extension_1(string value)"
        },
        "bindphones()": {
          "definition": "BindPhones(IEnumerable<PhoneDto> dtos)"
        },
        "makeprimaryphone()": {
          "definition": "Make_primary_phone()"
        },
        "verifydeleteprimaryemailpopoverisshown()": {
          "definition": "Verify_delete_primary_email_popover_is_shown()"
        },
        "selectforaddresstype()": {
          "definition": "Select__for_address_type(string value)"
        },
        "verifyemergencycontactphone2is()": {
          "definition": "verify_emergency_contact_phone_2_is__(string value)"
        },
        "addprimaryemailaddressoftoorganization()": {
          "definition": "Add_primary_email_address_of__to_organization__(string email, string organizationName)"
        },
        "addemailaddressoftoperson()": {
          "definition": "Add_email_address_of__to_person__(string email, string personName)"
        },
        "selectforstate()": {
          "definition": "Select__for_state(string value)"
        },
        "enterforcity()": {
          "definition": "Enter__for_city(string value)"
        },
        "browsetopagefororganization()": {
          "definition": "Browse_to_page_for_organization__(string organizationName)"
        },
        "updateemailaddress()": {
          "definition": "Update__email_address(string ordinal)"
        },
        "bindemailaddresses()": {
          "definition": "BindEmailAddresses(IEnumerable<EmailDto> dtos)"
        },
        "enterforzip()": {
          "definition": "Enter__for_zip(string value)"
        },
        "selectforcounty()": {
          "definition": "Select__for_county(string value)"
        },
        "verifydeletemailingaddresspopoverisnotshown()": {
          "definition": "Verify_delete_mailing_address_popover_is_not_shown()"
        },
        "enterforemergencycontactrelationship()": {
          "definition": "Enter__for_emergency_contact_relationship(string value)"
        },
        "verifyemergencycontactrelationshipis()": {
          "definition": "verify_emergency_contact_relationship_is__(string value)"
        },
        "enterforemergencycontactstreet2()": {
          "definition": "Enter__for_emergency_contact_street_2(string value)"
        },
        "verifyemergencycontactnameis()": {
          "definition": "verify_emergency_contact_name_is__(string value)"
        },
        "verifydeleteprimaryaddresspopoverisnotshown()": {
          "definition": "Verify_delete_primary_address_popover_is_not_shown()"
        },
        "browsetopageforbuilding()": {
          "definition": "Browse_to_page_for_building__(string buildingName)"
        },
        "addprimaryemailaddressoftoperson()": {
          "definition": "Add_primary_email_address_of__to_person__(string email, string personName)"
        },
        "deletewebsite()": {
          "definition": "Delete_website()"
        },
        "chooseasnewmailingaddress()": {
          "definition": "Choose__as_new_mailing_address(string formattedAddress)"
        },
        "enterforphoneextension()": {
          "definition": "Enter__for_phone_extension(string value)"
        },
        "enterforemergencycontactstreet1()": {
          "definition": "Enter__for_emergency_contact_street_1(string value)"
        },
        "addwebsite()": {
          "definition": "Add_website()"
        },
        "verifydeleteprimaryphonepopoverisshown()": {
          "definition": "Verify_delete_primary_phone_popover_is_shown()"
        },
        "addphone()": {
          "definition": "Add_phone()"
        },
        "verifyaddressatbedeleted()": {
          "definition": "Verify_address_at___be_deleted(string line1, string canOrNot)"
        },
        "chooseasnewprimaryphone()": {
          "definition": "Choose__as_new_primary_phone(string formattedPhone)"
        },
        "bindemergencycontact()": {
          "definition": "BindEmergencyContact(PersonEmergencyContactEditDto dto)"
        },
        "enterforemailaddress()": {
          "definition": "Enter__for_email_address(string value)"
        },
        "addemailaddress()": {
          "definition": "Add_email_address()"
        },
        "addprimaryemailaddressof()": {
          "definition": "Add_primary_email_address_of__(string email)"
        },
        "verifyemergencycontactzipcodeis()": {
          "definition": "verify_emergency_contact_zip_code_is__(string value)"
        },
        "verifyemergencycontactstreetline2is()": {
          "definition": "verify_emergency_contact_street_line_2_is__(string value)"
        },
        "updatephone()": {
          "definition": "Update__phone(string ordinal)"
        },
        "verifyemergencycontactcityis()": {
          "definition": "verify_emergency_contact_city_is__(string value)"
        },
        "enterforemergencycontactphone2()": {
          "definition": "Enter__for_emergency_contact_phone_2(string value)"
        },
        "verifydeletemailingaddresspopoverisshown()": {
          "definition": "Verify_delete_mailing_address_popover_is_shown()"
        },
        "makeprimaryaddress()": {
          "definition": "Make_primary_address()"
        },
        "addaddress()": {
          "definition": "Add_address()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ContactInfoEditWorkflow"
    },
    "ohiovfdfview": {
      "namespace": "",
      "methods": {
        "getdatafororganizationview()": {
          "definition": "Get_data_for_organization_view()"
        },
        "getdataforbeneficiaryview()": {
          "definition": "Get_data_for_beneficiary_view()"
        }
      },
      "parent-name": "CustomerViewWorkflowBase",
      "class-name": "OhioVFDFView"
    },
    "implementationhelper": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": "Workflow",
      "class-name": "ImplementationHelper"
    },
    "classregistrationroster": {
      "namespace": "",
      "methods": {
        "verifymemberdoesnotrequireattention()": {
          "definition": "Verify_member_does_not_require_attention()"
        },
        "performsearch()": {
          "definition": "Perform_search()"
        },
        "verifymembersubmittedtimeis()": {
          "definition": "Verify_member_submitted_time_is__(string str)"
        },
        "verifycheckrequestswarnsaboutforbeingalreadyinhousingwithstatus()": {
          "definition": "Verify_check_requests_warns_about__for_being_already_in_housing_with_status(string name, string status)"
        },
        "clickdenyrequestforstudent()": {
          "definition": "Click_deny_request_for_student(string name)"
        },
        "verifymemberrequiresattentionwithcomments()": {
          "definition": "Verify_member_requires_attention_with_comments(string str)"
        },
        "clickemailselected()": {
          "definition": "Click_email_selected()"
        },
        "dispose()": {
          "definition": "Dispose()"
        },
        "clickexportselected()": {
          "definition": "Click_export_selected()"
        },
        "forrow()": {
          "definition": "For_row__(int num)"
        },
        "uncheckallfilters()": {
          "definition": "Uncheck_all_filters()"
        },
        "verifymembernameis()": {
          "definition": "Verify_member_name_is__(string str)"
        },
        "verifyclassnameis()": {
          "definition": "Verify_class_name_is__(string name)"
        },
        "verifymemberstatusis()": {
          "definition": "Verify_member_status_is__(string str)"
        },
        "verifymembersubstatusis()": {
          "definition": "Verify_member_substatus_is__(string str)"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for__(string name)"
        },
        "verifymemberisnoteligible()": {
          "definition": "Verify_member_is_not_eligible()"
        },
        "checkfilter()": {
          "definition": "Check__filter__(string filtergroup, string filter)"
        },
        "checkallfilters()": {
          "definition": "Check_all_filters()"
        },
        "verifycheckrequestswarnsaboutforbeingenrolledwithstatus()": {
          "definition": "Verify_check_requests_warns_about__for_being_enrolled_with__status(string name, string status)"
        },
        "verifymemberhasnosubstatus()": {
          "definition": "Verify_member_has_no_substatus()"
        },
        "savefilters()": {
          "definition": "Save_filters()"
        },
        "clicktrackingstatusdialogsave()": {
          "definition": "Click_tracking_status_dialog_save()"
        },
        "unselectstudent()": {
          "definition": "Unselect_student__(string name)"
        },
        "clickoverridecapacity()": {
          "definition": "Click_override_capacity()"
        },
        "clickproceedfornomatchinghousing()": {
          "definition": "Click_proceed_for_no_matching_housing()"
        },
        "verifymemberhousingoptionisnotrequested()": {
          "definition": "Verify_member_housing_option_is_not_requested()"
        },
        "verifytherearecomments()": {
          "definition": "Verify_there_are__comments(int num)"
        },
        "forstudent()": {
          "definition": "For_student__(string name)"
        },
        "setsearchcriterionlastnameto()": {
          "definition": "Set_search_criterion_last_name_to__(string lastName)"
        },
        "unselectallstudents()": {
          "definition": "Unselect_all_students()"
        },
        "verifystudentssuccessfullyupdated()": {
          "definition": "Verify__students_successfully_updated(int num)"
        },
        "selectallstudents()": {
          "definition": "Select_all_students()"
        },
        "verifymemberrequiresattentionwithoutcomments()": {
          "definition": "Verify_member_requires_attention_without_comments()"
        },
        "verifythereareclassprerequisites()": {
          "definition": "Verify_there_are__class_prerequisites(int num)"
        },
        "verifymemberorganizationisblank()": {
          "definition": "Verify_member_organization_is_blank()"
        },
        "verifydoesnotcontinuetocheckcapacity()": {
          "definition": "Verify_does_not_continue_to_check_capacity()"
        },
        "showcommentsdialogforstudent()": {
          "definition": "Show_comments_dialog_for_student___(string name)"
        },
        "clickcommentsdialogaddcomment()": {
          "definition": "Click_comments_dialog_add_comment()"
        },
        "verifycheckrequestswarnsaboutfornomatchinghousing()": {
          "definition": "Verify_check_requests_warns_about__for_no_matching_housing(string name)"
        },
        "verifymemberiseligible()": {
          "definition": "Verify_member_is_eligible()"
        },
        "setsearchcriterionfirstnameto()": {
          "definition": "Set_search_criterion_first_name_to__(string firstName)"
        },
        "movestudenttostatus()": {
          "definition": "Move_student__to_status__(string name, string status)"
        },
        "verifycheckrequestswarnsaboutforbeingalreadyinstatus()": {
          "definition": "Verify_check_requests_warns_about__for_being_already_in__status(string name, string status)"
        },
        "verifynextexportcolumnis()": {
          "definition": "Verify_next_export_column_is__(string name)"
        },
        "verifymemberhousingoptionisrequested()": {
          "definition": "Verify_member_housing_option_is_requested()"
        },
        "clickexportsearchresults()": {
          "definition": "Click_export_search_results()"
        },
        "clickskipfornomatchinghousing()": {
          "definition": "Click_skip_for_no_matching_housing()"
        },
        "verifyexportvalueisfor()": {
          "definition": "Verify_export_value_is__for__(string value, string colName)"
        },
        "showtrackingstatusdialog()": {
          "definition": "Show_tracking_status_dialog()"
        },
        "clickcancelrequestforstudent()": {
          "definition": "Click_cancel_request_for_Student(string name)"
        },
        "verifymemberhascomments()": {
          "definition": "Verify_member_has_comments()"
        },
        "verifycheckcapacityrequiresmanualoverride()": {
          "definition": "Verify_check_capacity_requires_manual_override()"
        },
        "verifycheckcapacitypasses()": {
          "definition": "Verify_check_capacity_passes()"
        },
        "selectstudent()": {
          "definition": "Select_student__(string name)"
        },
        "verifymemberprerequisitestextis()": {
          "definition": "Verify_member_prerequisites_text_is__(string expected)"
        },
        "clicktrackingdialogsave()": {
          "definition": "Click_tracking_dialog_save()"
        },
        "verifymemberorganizationis()": {
          "definition": "Verify_member_organization_is__(string str)"
        },
        "verifymemberhousingoptionisundefined()": {
          "definition": "Verify_member_housing_option_is_undefined()"
        },
        "verifycheckrequestswarnsaboutforbeingcancelledordeniedwithstatus()": {
          "definition": "Verify_check_requests_warns_about__for_being_cancelled_or_denied_with_status(string name, string status)"
        },
        "showtrackingdialogforstudent()": {
          "definition": "Show_tracking_dialog_for_student__(string name)"
        },
        "verifymembertrackingstatusis()": {
          "definition": "Verify_member_tracking_status_is(string str)"
        },
        "verifycommentsdialogcommentsinclude()": {
          "definition": "Verify_comments_dialog_comments_include__(string str)"
        },
        "verifycheckrequestsresultedinwarnings()": {
          "definition": "Verify_check_requests_resulted_in__warnings(int num)"
        },
        "uncheckfilter()": {
          "definition": "Uncheck__filter__(string filtergroup, string filter)"
        },
        "moveselectedstudentstostatus()": {
          "definition": "Move_selected_students_to_status__(string status)"
        },
        "verifyexportcolumnis()": {
          "definition": "Verify_export_column__is__(int colNum, string name)"
        },
        "verifymembersubmitteddateis()": {
          "definition": "Verify_member_submitted_date_is__(string str)"
        },
        "verifymembermissingprerequisitesis()": {
          "definition": "Verify_member_missing_prerequisites_is__(int num)"
        },
        "verifyrowis()": {
          "definition": "Verify_row__is__(int num, string name)"
        },
        "sortmembersbyname()": {
          "definition": "Sort_members_by_name()"
        },
        "verifytherearemembersshown()": {
          "definition": "Verify_there_are__members_shown(int num)"
        },
        "clicksavecancelordeny()": {
          "definition": "Click_save_cancel_or_deny()"
        },
        "verifymemberhasnocomments()": {
          "definition": "Verify_member_has_no_comments()"
        },
        "forexportrow()": {
          "definition": "For_export_row__(int rowNum)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ClassRegistrationRosterWorkflow"
    },
    "facilityaddedit": {
      "namespace": "",
      "methods": {
        "selectowner()": {
          "definition": "Select_owner__(string ownerName)"
        },
        "verifyowneris()": {
          "definition": "Verify_owner_is__(string ownerName)"
        },
        "disableownerchange()": {
          "definition": "DisableOwnerChange()"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for(string facilityName)"
        },
        "returntorecord()": {
          "definition": "ReturnToRecord(int facilityID)"
        },
        "verifycannotmakerentable()": {
          "definition": "Verify_cannot_make_rentable()"
        },
        "verifycanmakerentable()": {
          "definition": "Verify_can_make_rentable()"
        },
        "selectcategories()": {
          "definition": "Select_categories(string categories)"
        },
        "selectforavailabilityprofile()": {
          "definition": "Select__for_availability_profile(string profile)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "FacilityAddEditWorkflow"
    },
    "atlisttemplates": {
      "namespace": "",
      "methods": {
        "verifytemplatesreturned()": {
          "definition": "Verify__templates_returned(int numTemplates)"
        },
        "bindtemplates()": {
          "definition": "BindTemplates(IList<TestTemplateListDto> templates, bool multipleOwnersExist, bool filtersApplied)"
        },
        "verifyprogramfilterdropdowndoesnotcontainowner()": {
          "definition": "Verify_program_filter_dropdown_does_not_contain_owner__(string owner)"
        },
        "addprogramfilterfor()": {
          "definition": "Add_program_filter_for__(string programName)"
        },
        "verifyprogramfilterdropdowncontainsownerwithprogram()": {
          "definition": "Verify_program_filter_dropdown_contains_owner__with_program__(string owner, string program)"
        },
        "browsetolisttesttemplates()": {
          "definition": "Browse_to_List_Test_Templates()"
        },
        "verifytemplateprogramis()": {
          "definition": "Verify_template_Program_is__(string programName)"
        },
        "clearfilters()": {
          "definition": "Clear_filters()"
        },
        "verifylistincludestemplatenamed()": {
          "definition": "Verify_list_includes_template_named__(string templateName)"
        },
        "savefilters()": {
          "definition": "Save_filters()"
        },
        "verifylistdoesnotincludetemplatenamed()": {
          "definition": "Verify_list_does_not_include_template_named__(string templateName)"
        },
        "verifydatapartitioningis()": {
          "definition": "Verify_Data_Partitioning_is__(string status)"
        },
        "verifytemplateownernameis()": {
          "definition": "Verify_template_Owner_name_is__(string ownerName)"
        },
        "addownerfilterfor()": {
          "definition": "Add_owner_filter_for__(string orgName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ATListTemplatesWorkflow"
    },
    "inventoryitempricingstructure": {
      "namespace": "",
      "methods": {
        "verifypriceforatlevelisempty()": {
          "definition": "Verify_price_for__at_level__is__empty(string periodOfUse, string level)"
        },
        "clicksaveperiodofuse()": {
          "definition": "Click_Save_Period_of_Use()"
        },
        "clicksavelevel()": {
          "definition": "Click_Save_Level()"
        },
        "verifylevelexistsinposition()": {
          "definition": "Verify_level__exists_in_position__(string level, int position)"
        },
        "clearpriceforatlevel()": {
          "definition": "Clear_price_for__at_level__(string periodOfUse, string level)"
        },
        "browsetopricingstructureeditfornamed()": {
          "definition": "Browse_to_pricing_structure_edit_for__named__(ResourceType type, string name)"
        },
        "verifypriceforatlevelis()": {
          "definition": "Verify_price_for__at_level__is__(string periodOfUse, string level, decimal price)"
        },
        "verifyperiodofuseexists()": {
          "definition": "Verify_period_of_use__exists(string periodOfUse)"
        },
        "enterpriceofforatlevel()": {
          "definition": "Enter_price_of__for__at_level__(decimal price, string periodOfUse, string level)"
        },
        "bindpricingstructure()": {
          "definition": "BindPricingStructure(List<UsageTypeDTO> usages, List<PriceLevelDTO> levels)"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "clickaddperiodofuse()": {
          "definition": "Click_Add_Period_of_Use()"
        },
        "clickaddlevel()": {
          "definition": "Click_Add_Level()"
        },
        "verifyperiodofuseexistsinposition()": {
          "definition": "Verify_period_of_use_exists_in_position__(string periodOfUse, int position)"
        },
        "verifylevelexists()": {
          "definition": "Verify_level__exists(string level)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "InventoryItemPricingStructureWorkflow"
    },
    "rentablerecordavailabilities": {
      "namespace": "",
      "methods": {
        "dispose()": {
          "definition": "Dispose()"
        },
        "verifyavailabilitiescontainalldatesbetweenandwithtime()": {
          "definition": "Verify_availabilities_contain_all_dates_between__and__with_time__(DateTime start, DateTime end, string time)"
        },
        "clearselections()": {
          "definition": "Clear_selections()"
        },
        "verifyallbetweenandhavecssclass()": {
          "definition": "Verify_all__between__and__have_css_class(DayOfWeek dow, DateTime start, DateTime end, string css)"
        },
        "verifythereareavailabilities()": {
          "definition": "Verify_there_are__availabilities(int num)"
        },
        "verifyavailabilitiesdonotcontainanybetweenand()": {
          "definition": "Verify_availabilities_do_not_contain_any__between__and___(DayOfWeek dow, DateTime start, DateTime end)"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for__(string itemName)"
        },
        "verifyavailabilitiesdonotcontaindate()": {
          "definition": "Verify_availabilities_do_not_contain_date__(DateTime date)"
        },
        "gotonextsixmonths()": {
          "definition": "Goto_next_six_months()"
        },
        "verifyavailabilitiescontaindatewithtime()": {
          "definition": "Verify_availabilities_contain_date__with_time__(DateTime date, string time)"
        },
        "verifyavailabilitiescontainallbetweenandwithtime()": {
          "definition": "Verify_availabilities_contain_all__between__and__with_time__(DayOfWeek dow, DateTime start, DateTime end, string time)"
        },
        "selectdate()": {
          "definition": "Select_date(DateTime date)"
        },
        "selectalldatesbetweenand()": {
          "definition": "Select_all_dates_between__and__(DateTime start, DateTime end)"
        },
        "verifydatehascssclass()": {
          "definition": "Verify_date__has_css_class__(DateTime date, string css)"
        },
        "gotoprevioussixmonths()": {
          "definition": "Goto_previous_six_months()"
        },
        "verifyalldatesbetweenandhavecssclass()": {
          "definition": "Verify_all_dates_between__and__have_css_class(DateTime start, DateTime end, string css)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "RentableRecordAvailabilitiesWorkflow"
    },
    "testopiareadonlydbconnectionfactory": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "TestopiaReadonlyDBConnectionFactory"
    },
    "heightdata": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "HeightData"
    },
    "onlineeventmanagement": {
      "namespace": "",
      "methods": {
        "setonlineeventavailabilitytobeavailablebeginningandhasnoenddate()": {
          "definition": "Set_online_event_availability_to_be_available_beginning__and_has_no_end_date(DateTime beginDate)"
        },
        "verifyonlineeventnamedhascost()": {
          "definition": "Verify_online_event_named_has_cost(string eventName, int cost)"
        },
        "setonlineeventreferenceto()": {
          "definition": "Set_online_event_reference_to(string reference)"
        },
        "setonlineeventavailabilitytonotbeavailableintheportal()": {
          "definition": "Set_online_event_availability_to_not_be_available_in_the_portal()"
        },
        "addemailaddresstoperson()": {
          "definition": "Add_email_address__to_person__(string emailAddress, string personName)"
        },
        "verifyonlineeventnamedhasreference()": {
          "definition": "Verify_online_event_named_has_reference(string eventName, string reference)"
        },
        "addpersontoonlineeventwithduedateindaysandtrainingcategory()": {
          "definition": "Add_person__to_online_event__with_due_date_in__days_and_training_category(string studentName, string onlineEventName, int daysInFuture, string trainingCategory)"
        },
        "verifyonlineeventnamedhasdescription()": {
          "definition": "Verify_online_event_named_has_description(string eventName, string description)"
        },
        "setonlineeventdescriptionto()": {
          "definition": "Set_online_event_description_to(string description)"
        },
        "createonlineeventwithnamewithownerunderprogram()": {
          "definition": "Create__online_event_with_name__with_owner__under_program__(string eventStatus, string eventName, string eventOwner, string programName)"
        },
        "addpersontoonlineevent()": {
          "definition": "Add_person_to_online_event(string studentName, string onlineEventName)"
        },
        "setonlineeventavailabilitytobeavailablebeginningtodayandhasnoenddate()": {
          "definition": "Set_online_event_availability_to_be_available_beginning_today_and_has_no_end_date()"
        },
        "verifyonlineeventhascertification()": {
          "definition": "Verify_online_event_has_certification(string onlineEventName, string certMasterName)"
        },
        "settheaveragegrademinimumpassingscoreto()": {
          "definition": "Set_the_average_grade_minimum_passing_score_to(int minimumPassingScore)"
        },
        "setonlineeventtraininghourstohoursandminutes()": {
          "definition": "Set_online_event_training_hours_to_hours_and_minutes(int hours, int minutes)"
        },
        "verifypersonhasnoduedatefor()": {
          "definition": "Verify_person__has_no_due_date_for__(string studentName, string onlineEventName)"
        },
        "addpersontoonlineeventwithduedateindays()": {
          "definition": "Add_person__to_online_event__with_due_date_in__days(string studentName, string onlineEventName, int daysInFuture)"
        },
        "setonlineeventretakesto()": {
          "definition": "Set_online_event_retakes_to__(string allowedDescription)"
        },
        "verifypersonhasnotrainingcategoryfor()": {
          "definition": "Verify_person__has_no_training_category_for__(string studentName, string onlineEventName)"
        },
        "setonlineeventcompletionrequirementto()": {
          "definition": "Set_online_event_completion_requirement_to(string completionRequirement)"
        },
        "verifypersonexistsforonlineevent()": {
          "definition": "Verify_person_exists_for_online_event(string personName, string eventName)"
        },
        "verifypersonhastrainingcategoryfor()": {
          "definition": "Verify_person__has_training_category__for(string studentName, string trainingCategory, string onlineEventName)"
        },
        "setonlineeventinstructionmethodto()": {
          "definition": "Set_online_event_instruction_method_to__(string methodName)"
        },
        "verifyonlineeventnamedisavailablebeginningtodayandhasnoenddate()": {
          "definition": "Verify_online_event_named_is_available_beginning_today_and_has_no_end_date(string eventName)"
        },
        "saveonlineevent()": {
          "definition": "Save_online_event(string eventName)"
        },
        "setonlineeventretakecoursegradeto()": {
          "definition": "Set_online_event_retake_course_grade_to__(string courseGradeDescription)"
        },
        "addpersontoonlineeventwithduedateindaysandreminderdaysbeforedueandtrainingcategory()": {
          "definition": "Add_person__to_online_event__with_due_date_in__days_and_reminder__days_before_due_and_training_category(string studentName, string onlineEventName, int daysInFuture, int daysBeforeDue, string trainingCategory)"
        },
        "verifyonlineeventnamedhascontent()": {
          "definition": "Verify_online_event_named_has_content(string eventName, string contentName)"
        },
        "setonlineeventretaketimeincourseto()": {
          "definition": "Set_online_event_retake_time_in_course_to__(string timeInCourseDescription)"
        },
        "setonlineeventavailabilitytobeavailablebeginningandending()": {
          "definition": "Set_online_event_availability_to_be_available_beginning__and_ending__(DateTime beginDate, DateTime endDate)"
        },
        "removepersonfromonlineevent()": {
          "definition": "Remove_person_from_online_event(string personName, string eventName)"
        },
        "addcertificationtoonlineevent()": {
          "definition": "Add_certification_to_online_event(string certMasterName, string onlineEventName)"
        },
        "verifypersonshouldberemindedtotakeindays()": {
          "definition": "Verify_person__should_be_reminded_to_take__in__days(string studentName, string onlineEventName, int daysInFuture)"
        },
        "verifyonlineeventnamedexistsandis()": {
          "definition": "Verify_online_event_named_exists_and_is_(string eventName, string eventStatus)"
        },
        "verifyonlineeventnamedhasstatusof()": {
          "definition": "Verify_online_event_named_has_status_of(string eventName, string statusName)"
        },
        "verifypersondoesnotexistforonlineevent()": {
          "definition": "Verify_person_does_not_exist_for_online_event(string personName, string eventName)"
        },
        "addpersontoonlineeventwithduedateindaysandreminderdaysbeforedue()": {
          "definition": "Add_person__to_online_event__with_due_date_in__days_and_reminder__days_before_due(string studentName, string onlineEventName, int daysInFuture, int daysBeforeDue)"
        },
        "verifypersonshouldnotberemindedtotake()": {
          "definition": "Verify_person__should_not_be_reminded_to_take__(string studentName, string onlineEventName)"
        },
        "addpersontoonlineeventwithtrainingcategory()": {
          "definition": "Add_person_to_online_event__with_training_category(string studentName, string onlineEventName, string trainingCategory)"
        },
        "setonlineeventcontentto()": {
          "definition": "Set_online_event_content_to(string contentName)"
        },
        "setonlineeventcostto()": {
          "definition": "Set_online_event_cost_to(int cost)"
        },
        "setceucreditsequalto()": {
          "definition": "Set_ceu_credits_equal_to__(string ceuCredits)"
        },
        "verifypersonhasdueindays()": {
          "definition": "Verify_person__has__due_in__days(string studentName, string onlineEventName, int daysInFuture)"
        },
        "verifyonlineeventnamedisnotavailable()": {
          "definition": "Verify_online_event_named__is_not_available(string eventName)"
        },
        "verifyonlineeventnamedhascompletionrequirement()": {
          "definition": "Verify_online_event_named_has_completion_requirement(string eventName, string completionRequirementName)"
        },
        "verifyonlineeventnamedhastraininghoursofhoursandminutes()": {
          "definition": "Verify_online_event_named_has_training_hours_of_hours_and_minutes(string eventName, int numHours, int numMinutes)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "OnlineEventManagement"
    },
    "certificationrenewalwizardaffirmation": {
      "namespace": "",
      "methods": {
        "browsetocertportalrenewalforforperson()": {
          "definition": "Browse_to_Cert_Portal_Renewal_for__for_person__(string certVersionName, string personName)"
        },
        "browsetocertportalrenewalforfororganization()": {
          "definition": "Browse_to_Cert_Portal_Renewal_for__for_organization__(string certVersionName, string orgName)"
        },
        "verifycertnameis()": {
          "definition": "Verify_cert_name_is(string certName)"
        },
        "sethascriminaloffensesto()": {
          "definition": "Set_has_criminal_offenses_to_(bool hasCriminalOffenses)"
        },
        "showrejection()": {
          "definition": "ShowRejection()"
        },
        "cancelportalrenewalprocess()": {
          "definition": "Cancel_Portal_renewal_process()"
        },
        "verifyrejectionstatementscontain()": {
          "definition": "Verify_rejection_statements_contain(string statement)"
        },
        "showaudited()": {
          "definition": "ShowAudited()"
        },
        "bindrejectedstatements()": {
          "definition": "BindRejectedStatements(IEnumerable<string> statements)"
        },
        "redirecttostartinglocation()": {
          "definition": "RedirectToStartingLocation(int recipientID)"
        },
        "setmeetsallrequirementsto()": {
          "definition": "Set_meets_all_requirements_to_(bool meetsRequirements)"
        },
        "verifyrejectionshown()": {
          "definition": "Verify_rejection_shown()"
        },
        "bindrequirements()": {
          "definition": "BindRequirements(List<InquiryItemResponseDTO> requirements)"
        },
        "browsetopage()": {
          "definition": "Browse_to_Page()"
        },
        "submitforrenewal()": {
          "definition": "Submit_for_renewal()"
        },
        "finishportalrenewallater()": {
          "definition": "Finish_Portal_renewal_later()"
        },
        "verifyuserredirectedtoinitiallocation()": {
          "definition": "Verify_user_redirected_to_initial_location()"
        },
        "showapproval()": {
          "definition": "ShowApproval()"
        },
        "verifyapprovalshown()": {
          "definition": "Verify_approval_shown()"
        },
        "enterfortherequirementsnotmetexplanation()": {
          "definition": "Enter_for_the_requirements_not_met_explanation(string explanation)"
        },
        "submitforrenewaltimesverifyingareaudited()": {
          "definition": "Submit_for_renewal_times_verifying_are_audited(int attempts, int audited)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "CertificationRenewalWizardAffirmation"
    },
    "customviewhelpers": {
      "namespace": "",
      "methods": {
        "createperson()": {
          "definition": "Create_person( string personName )"
        },
        "issuecertto()": {
          "definition": "Issue__cert_to_( string certName, string personName )"
        },
        "prepareenvironmentforwestvirginaviewrenewal()": {
          "definition": "Prepare_environment_for_West_Virgina_View_Renewal()"
        },
        "recordhoursofinservice()": {
          "definition": "Record___hours_of__Inservice( string personName, decimal hours, string trainingCategory )"
        }
      },
      "parent-name": "Workflow",
      "class-name": "CustomViewHelpers"
    },
    "complianceleftmenu": {
      "namespace": "",
      "methods": {
        "verifycanaccesscertificationssection()": {
          "definition": "Verify_can_access_certifications_section()"
        },
        "verifycanissueorganizationcertifications()": {
          "definition": "Verify_can_issue_organization_certifications()"
        },
        "verifycansearchpersoncertifications()": {
          "definition": "Verify_can_search_person_certifications()"
        },
        "verifycannotsearchorganizationcertifications()": {
          "definition": "Verify_cannot_search_organization_certifications()"
        },
        "verifycannotaccesspersoncertificationssection()": {
          "definition": "Verify_cannot_access_person_certifications_section()"
        },
        "verifycannotreviewpendingorganizationaudits()": {
          "definition": "Verify_cannot_review_pending_organization_audits()"
        },
        "verifycanaccessorganizationcertificationssection()": {
          "definition": "Verify_can_access_organization_certifications_section()"
        },
        "verifycannotprintpersoncertifications()": {
          "definition": "Verify_cannot_print_person_certifications()"
        },
        "verifycannotaccessanysetupitems()": {
          "definition": "Verify_cannot_access_any_setup_items()"
        },
        "verifycannotprintorganizationcertifications()": {
          "definition": "Verify_cannot_print_organization_certifications()"
        },
        "verifycannotsearchinventorycertifications()": {
          "definition": "Verify_cannot_search_inventory_certifications()"
        },
        "verifycannotsearchpersoncertifications()": {
          "definition": "Verify_cannot_search_person_certifications()"
        },
        "verifycanaddacertification()": {
          "definition": "Verify_can_add_a_certification()"
        },
        "verifycannotaccessvehiclecertificationssection()": {
          "definition": "Verify_cannot_access_vehicle_certifications_section()"
        },
        "verifycanissuepersoncertifications()": {
          "definition": "Verify_can_issue_person_certifications()"
        },
        "verifycannotaccesscertificationssection()": {
          "definition": "Verify_cannot_access_certifications_section()"
        },
        "verifycanissuevehiclecertifications()": {
          "definition": "Verify_can_issue_vehicle_certifications()"
        },
        "verifycanviewlistofcertifications()": {
          "definition": "Verify_can_view_list_of_certifications()"
        },
        "verifycannotviewlistofcertifications()": {
          "definition": "Verify_cannot_view_list_of_certifications()"
        },
        "verifycannotaccessorganizationcertificationssection()": {
          "definition": "Verify_cannot_access_organization_certifications_section()"
        },
        "verifycansearchinventorycertifications()": {
          "definition": "Verify_can_search_inventory_certifications()"
        },
        "verifycanprintvehiclecertifications()": {
          "definition": "Verify_can_print_vehicle_certifications()"
        },
        "verifycannotissuevehiclecertifications()": {
          "definition": "Verify_cannot_issue_vehicle_certifications()"
        },
        "verifycannotreviewpendingpersonaudits()": {
          "definition": "Verify_cannot_review_pending_person_audits()"
        },
        "verifycanviewcompliancemonitor()": {
          "definition": "Verify_can_view_compliance_monitor()"
        },
        "verifycannotaddacertification()": {
          "definition": "Verify_cannot_add_a_certification()"
        },
        "verifycanaccesspersoncertificationssection()": {
          "definition": "Verify_can_access_person_certifications_section()"
        },
        "verifycanaccessvehiclecertificationssection()": {
          "definition": "Verify_can_access_vehicle_certifications_section()"
        },
        "verifycanprintpersoncertifications()": {
          "definition": "Verify_can_print_person_certifications()"
        },
        "verifycannotprintvehiclecertifications()": {
          "definition": "Verify_cannot_print_vehicle_certifications()"
        },
        "verifycannotissuepersoncertifications()": {
          "definition": "Verify_cannot_issue_person_certifications()"
        },
        "verifycanreviewpendingpersonaudits()": {
          "definition": "Verify_can_review_pending_person_audits()"
        },
        "verifycannotissueorganizationcertifications()": {
          "definition": "Verify_cannot_issue_organization_certifications()"
        },
        "verifycanaccesssetupitems()": {
          "definition": "Verify_can_access_setup_items()"
        },
        "verifycannotviewcompliancemonitor()": {
          "definition": "Verify_cannot_view_compliance_monitor()"
        },
        "verifycansearchorganizationcertifications()": {
          "definition": "Verify_can_search_organization_certifications()"
        },
        "verifycanprintorganizationcertifications()": {
          "definition": "Verify_can_print_organization_certifications()"
        },
        "verifycanreviewpendingorganizationaudits()": {
          "definition": "Verify_can_review_pending_organization_audits()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ComplianceLeftMenu"
    },
    "roomassignmentoptions": {
      "namespace": "",
      "methods": {
        "bindfloors()": {
          "definition": "BindFloors(List<EnhancerResultGroupDTO> results)"
        },
        "verifyoptionsforfloordoesnotinclude()": {
          "definition": "Verify_options_for_floor_does_not_include__(string floorName)"
        },
        "verifyfirstexpectedcheckinis()": {
          "definition": "Verify_first_expected_check_in_is__(DateTime date)"
        },
        "verifylastassignedroomis()": {
          "definition": "Verify_last_assigned_room_is__(string room)"
        },
        "verifywenttodefaultrecommendations()": {
          "definition": "Verify_went_to_default_recommendations()"
        },
        "verifylastexpectedcheckoutis()": {
          "definition": "Verify_last_expected_check_out_is__(DateTime date)"
        },
        "verifyresidentstoassignis()": {
          "definition": "Verify_residents_to_assign_is__(int num)"
        },
        "opendialogon()": {
          "definition": "Open_dialog_on_(string reservationName)"
        },
        "verifyoptionsforfloorincludeunder()": {
          "definition": "Verify_options_for_floor_include__under__(string floorName, string groupName)"
        },
        "verifyoptionsforfloorinclude()": {
          "definition": "Verify_options_for_floor_include__(string floorName)"
        },
        "selectfloorundergroup()": {
          "definition": "Select_floor__under_group__(string floorName, string groupName)"
        },
        "verifydidnotgotodefaultrecommendations()": {
          "definition": "Verify_did_not_go_to_default_recommendations()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "RoomAssignmentOptionsWorkflow"
    },
    "webformaddeditwizardfieldselector": {
      "namespace": "",
      "methods": {
        "setblockfieldlabelto()": {
          "definition": "Set_block__field__label_to__(int blockIndex, int fieldIndex, string newLabel)"
        },
        "clickback()": {
          "definition": "Click_Back()"
        },
        "moveblocktobeforeblock()": {
          "definition": "Move_block__to_before_block__(int sourceIndex, int targetIndex)"
        },
        "verifyusernavigatedtothepreviouspage()": {
          "definition": "Verify_user_navigated_to_the_previous_page()"
        },
        "navigateback()": {
          "definition": "NavigateBack()"
        },
        "clickdoneondeletewarning()": {
          "definition": "Click_Done_on_Delete_warning()"
        },
        "clickcancelondeletewarning()": {
          "definition": "Click_Cancel_on_Delete_warning()"
        },
        "bindfieldpicker()": {
          "definition": "BindFieldPicker(FormBuilderFieldPickerDTO fieldPickerDto)"
        },
        "bindwebform()": {
          "definition": "BindWebForm(FormBuilderFormDTO formDto)"
        },
        "setfieldlabelto()": {
          "definition": "Set_field__label_to__(int fieldIndex, string newLabel)"
        },
        "setfielddescriptionto()": {
          "definition": "Set_field__description_to__(int fieldIndex, string newDescription)"
        },
        "deletelikertoptionfromfield()": {
          "definition": "Delete_likert_option_from_field(int optionIndex, int fieldIndex)"
        },
        "navigatecontinue()": {
          "definition": "NavigateContinue()"
        },
        "verifyblockfieldhasdescription()": {
          "definition": "Verify_block__field__has_description__(int blockIndex, int fieldIndex, string description)"
        },
        "setfielddropdownlistto()": {
          "definition": "Set_field__dropdown_list_to__(int fieldIndex, string newOptions)"
        },
        "clickcontinue()": {
          "definition": "Click_Continue()"
        },
        "addfieldfromtab()": {
          "definition": "Add_field__from_tab__(string fieldName, string tabName)"
        },
        "setfieldlistoptionsto()": {
          "definition": "Set_field__list_options_to__(int fieldIndex, string newOptions)"
        },
        "verifyblockfieldhasdropdownlistoptions()": {
          "definition": "Verify_block__field__has_dropdown_list_options__(int blockIndex, int fieldIndex, string options)"
        },
        "verifyblockhasfields()": {
          "definition": "Verify_block__has__fields(int blockIndex, int numberOfFields)"
        },
        "verifyblockfieldisnotrequired()": {
          "definition": "Verify_block__field__is_not_required(int blockIndex, int fieldIndex)"
        },
        "setfieldhelptextto()": {
          "definition": "Set_field__help_text_to__(int fieldIndex, string newHelpText)"
        },
        "verifydeletewarningmessageisshowingwithmessage()": {
          "definition": "Verify_delete_warning_message_is_showing_with_message__(string message)"
        },
        "verifytryingtosavecausesserversidevalidationtoreturnanerrormessage()": {
          "definition": "Verify_trying_to_save_causes_server_side_validation_to_return_an_error_message__(string message)"
        },
        "verifydeletewarningmessageisnotshowing()": {
          "definition": "Verify_delete_warning_message_is_not_showing()"
        },
        "makefieldnotrequired()": {
          "definition": "Make_field__not_required(int fieldIndex)"
        },
        "verifyusernavigatedtothenextpage()": {
          "definition": "Verify_user_navigated_to_the_next_page()"
        },
        "verifyblockfieldisrequired()": {
          "definition": "Verify_block__field__is_required(int blockIndex, int fieldIndex)"
        },
        "makefieldrequired()": {
          "definition": "Make_field__required(int fieldIndex)"
        },
        "deletefieldofblock()": {
          "definition": "Delete_field___of_block__(int fieldIndex, int blockIndex)"
        },
        "browsetopageforwebformversion()": {
          "definition": "Browse_to_page_for_WebForm__version__(string formName, int versionNumber)"
        },
        "addlikertoptiontofieldwithtext()": {
          "definition": "Add_likert_option_to_field__with_text__(int fieldIndex, string optionText)"
        },
        "verifyformhasblocks()": {
          "definition": "Verify_form_has__blocks(int numberOfBlocks)"
        },
        "verifyfieldfromtabavailable()": {
          "definition": "Verify_field__from_tab____available(string fieldName, string tabName, string isIsNotAvailable)"
        },
        "setfieldbulletedlistto()": {
          "definition": "Set_field__bulleted_list_to__(int fieldIndex, string newOptions)"
        },
        "verifyblockfieldhaslabel()": {
          "definition": "Verify_block__field__has_label__(int blockIndex, int fieldIndex, string label)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "WebFormAddEditWizardFieldSelectorWorkflow"
    },
    "inquiryresponsecertselectionlist": {
      "namespace": "",
      "methods": {
        "verifycertificationhasstatusof()": {
          "definition": "Verify_certification__has_status_of__(string certName, string statusName)"
        },
        "selectcertificationforfulfillment()": {
          "definition": "Select_certification__for_fulfillment(string certName)"
        },
        "bindrepeater()": {
          "definition": "BindRepeater(List<SelectableIssuedCertificationDTO> existingDTOs)"
        },
        "verifycertificationhasissueof()": {
          "definition": "Verify_certification__has_issue_of__(string certName, string issueDate)"
        },
        "verifycertificationisselected()": {
          "definition": "Verify_certification__is_selected(string certName)"
        },
        "verifycertificationalerticonhastextof()": {
          "definition": "Verify_certification__alert_icon_has_text_of__(string certName, string alertText)"
        },
        "verifytherearecertificationrecords()": {
          "definition": "Verify_there_are__certification_records(int numRecs)"
        },
        "verifycertificationisindicatedasinactiveordeleted()": {
          "definition": "Verify_certification__is_indicated_as_inactive_or_deleted(string certName)"
        },
        "verifycertificationisnotindicatedasinactiveordeleted()": {
          "definition": "Verify_certification__is_not_indicated_as_inactive_or_deleted(string certName)"
        },
        "initializecontrol()": {
          "definition": "InitializeControl()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "InquiryResponseCertSelectionListWorkflow"
    },
    "questionperformancemanagement": {
      "namespace": "",
      "methods": {
        "verifytheperformancerowshowsanswerdetailrows()": {
          "definition": "Verify_the__performance_row_shows__answer_detail_rows(string performanceRowOrdinal, int expectedRowCount)"
        },
        "verifytheperformancerowisforversionwhichis()": {
          "definition": "Verify_the__performance_row_is_for_version__which_is__(string rowOrdinal, int versionNumber, string versionStatus)"
        },
        "verifyperformancedatawasfoundforquestionversions()": {
          "definition": "Verify_performance_data_was_found_for__question_versions(int expectedRowCount)"
        },
        "lookupquestionperformancedetailsforquestion()": {
          "definition": "Lookup_question_performance_details_for_question__(string questionText)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "QuestionPerformanceManagement"
    },
    "employmentcriteriabuilder": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EmploymentCriteriaBuilderWorkflow"
    },
    "bankinginformation": {
      "namespace": "",
      "methods": {
        "choosetoallowsubmissionofbankinginformation()": {
          "definition": "Choose_to_allow_submission_of_banking_information()"
        },
        "choosenottoallowsubmissionofbankinginformation()": {
          "definition": "Choose_not_to_allow_submission_of_banking_information()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "BankingInformationWorkflow"
    },
    "attributecontainer": {
      "namespace": "",
      "methods": {
        "add()": {
          "definition": "Add(string key, object value)"
        }
      },
      "parent-name": null,
      "class-name": "AttributeContainer"
    },
    "listattendance": {
      "namespace": "",
      "methods": {
        "addattendancewithstatusandcomment()": {
          "definition": "Add_attendance_with_status__and_comment__(string presentAbsentOrExcusedAbsent, string commentText)"
        },
        "verifyattendancerecordexists()": {
          "definition": "Verify_attendance_record_exists()"
        },
        "verifymakeupverifiedby()": {
          "definition": "Verify_makeup_verified_by__(string verifiedBy)"
        },
        "verifyverifiedbylisthasentries()": {
          "definition": "Verify_verified_by_list_has__entries(int count)"
        },
        "verifyexporthasdatarows()": {
          "definition": "Verify_export_has__data_rows(int rowCount)"
        },
        "writeexport()": {
          "definition": "WriteExport(string export)"
        },
        "clickaddmakeup()": {
          "definition": "Click_add_makeup()"
        },
        "verifyhasmakeuprecorded()": {
          "definition": "Verify_has_makeup_recorded()"
        },
        "verifyexportbuttonishidden()": {
          "definition": "Verify_export_button_is_hidden()"
        },
        "selectverifiedbystaffmember()": {
          "definition": "Select_verified_by_staff_member__(string name)"
        },
        "clicksavemakeup()": {
          "definition": "Click_save_makeup()"
        },
        "verifyvalueincolumnnamedis()": {
          "definition": "Verify_value_in_column_named__is__(string colName, string value)"
        },
        "verifywasmarkedexcused()": {
          "definition": "Verify_was_marked_excused()"
        },
        "verifydoesnothavemakeuprecorded()": {
          "definition": "Verify_does_not_have_makeup_recorded()"
        },
        "selectverifiedbyother()": {
          "definition": "Select_verified_by_other(string name)"
        },
        "considerattendancetakenonwithdescription()": {
          "definition": "Consider_attendance_taken_on__with_description__(DateTime attendanceDate, string desc)"
        },
        "verifymakeupdateis()": {
          "definition": "Verify_makeup_date_is__(DateTime makeupDate)"
        },
        "verifyvalueincolumnis()": {
          "definition": "Verify_value_in_column__is__(int colIdx, string value)"
        },
        "verifynoattendancerecordexists()": {
          "definition": "Verify_no_attendance_record_exists()"
        },
        "verifyexporthascolumns()": {
          "definition": "Verify_export_has__columns(int colCount)"
        },
        "verifyaddmakeupbuttonisnotshown()": {
          "definition": "Verify_add_makeup_button_is_not_shown()"
        },
        "verifydeletemakeupbuttonisshown()": {
          "definition": "Verify_delete_makeup_button_is_shown()"
        },
        "verifyaddnewrecordis()": {
          "definition": "Verify_add_new_record_is__(string enabledOrDisabled)"
        },
        "editattendancetowithcommentdeletingmakeup()": {
          "definition": "Edit_attendance_to__with_comment__deleting_makeup(string presentAbsentOrExcusedAbsent, string commentText)"
        },
        "checkmakeupforattendancetakenonwithdescription()": {
          "definition": "Check_makeup_for_attendance_taken_on__with_description__(DateTime attendanceDate, string desc)"
        },
        "verifyexportbuttonisshown()": {
          "definition": "Verify_export_button_is_shown()"
        },
        "verifythereareinstances()": {
          "definition": "Verify_there_are__instances(int instanceCount)"
        },
        "clickdeletemakeup()": {
          "definition": "Click_delete_makeup()"
        },
        "verifymakeupcommentis()": {
          "definition": "Verify_makeup_comment_is__(string makeupComment)"
        },
        "uncheckmakeupforattendancetakenonwithdescription()": {
          "definition": "Uncheck_makeup_for_attendance_taken_on__with_description__(DateTime attendanceDate, string desc)"
        },
        "considerexportrow()": {
          "definition": "Consider_export_row__(int idx)"
        },
        "verifywasmarkedunexcused()": {
          "definition": "Verify_was_marked_unexcused()"
        },
        "verifyeditrecordis()": {
          "definition": "Verify_edit_record_is__(string enabledOrDisabled)"
        },
        "considerrowforstudent()": {
          "definition": "Consider_row_for_student__(string studentName)"
        },
        "verifymakeupabsencelisthasentries()": {
          "definition": "Verify_makeup_absence_list_has__entries(int count)"
        },
        "verifyexcusereasonis()": {
          "definition": "Verify_excuse_reason_is__(string reason)"
        },
        "verifywasmarkedabsent()": {
          "definition": "Verify_was_marked_absent()"
        },
        "verifystudentismarkeddeparted()": {
          "definition": "Verify_student_is_marked_departed()"
        },
        "verifyvalueincolumnnamedisnumeric()": {
          "definition": "Verify_value_in_column_named__is_numeric(string colName)"
        },
        "editattendancetowithcomment()": {
          "definition": "Edit_attendance_to__with_comment__(string presentAbsentOrExcusedAbsent, string commentText)"
        },
        "verifyexcusereasonisblank()": {
          "definition": "Verify_excuse_reason_is_blank()"
        },
        "verifymakeupwarningisshown()": {
          "definition": "Verify_makeup_warning_is_shown()"
        },
        "verifywasmarkedpresent()": {
          "definition": "Verify_was_marked_present()"
        },
        "verifyaddmakeupbuttonisshown()": {
          "definition": "Verify_add_makeup_button_is_shown()"
        },
        "browsetopagefortrainingclass()": {
          "definition": "Browse_to_page_for_training_class__(string className)"
        },
        "verifytherearestudents()": {
          "definition": "Verify_there_are__students(int studentCount)"
        },
        "bindpersonnel()": {
          "definition": "BindPersonnel(List<AttendanceStaffAssignmentDTO> personnel)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ListAttendanceWorkflow"
    },
    "curriculumfnhmanagement": {
      "namespace": "",
      "methods": {
        "createtrainingclassnamedfromstartingonendingon()": {
          "definition": "Create_training_class_named__from__starting_on__ending_on_( string className, string templateName, DateTime start, DateTime end )"
        },
        "setcost()": {
          "definition": "Set_cost(int value)"
        },
        "setactivityweightto()": {
          "definition": "Set_Activity_Weight_to__( int activityWeight )"
        },
        "changeactivityonclasslengthtohours()": {
          "definition": "Change_Activity__on_Class__Length_to_hours(string activityName, string className, int hours)"
        },
        "verifytrainingclasshasnocertifications()": {
          "definition": "Verify_training_class__has_no_certifications(string trainingClassName)"
        },
        "addtrainingcategorytoclass()": {
          "definition": "Add_training_category__to_class__(string trainingCategoryName, string className)"
        },
        "verifythatstudentgroupinclasshassubgroup()": {
          "definition": "Verify_that_student_group_in_class_has_subgroup( string groupName, string className, string subGroupName )"
        },
        "verifylistcontainstestnamedwithstudenttestsrecordedforinitialtake()": {
          "definition": "verify_list_contains_test_named__with__student_tests_recorded_for_initial_take(string testName, int studentTestCount)"
        },
        "setfees()": {
          "definition": "Set_fees(decimal value)"
        },
        "verifyweightsare()": {
          "definition": "Verify_weights_are(string strValid)"
        },
        "createclasstemplate()": {
          "definition": "Create_class_template( string templateName )"
        },
        "exchangetestwithtemplatewithreasoninclass()": {
          "definition": "Exchange_test__with__template__with_reason__in_class__(string testName, string templateName, string reason, string className)"
        },
        "verifythattestonactivityinclasshascertification()": {
          "definition": "Verify_that_test__on_activity__in_class__has_certification__( string testName, string activityName, string className, string certName )"
        },
        "addactivitywithlengthofhours()": {
          "definition": "Add_activity__with_length_of__hours( string activityName, int numHours )"
        },
        "saveactivity()": {
          "definition": "Save_Activity_( string activityName )"
        },
        "verifyhousingreservationfortrainingclassisdeleted()": {
          "definition": "Verify_housing_reservation_for_training_class__is_deleted(string trainingClassName)"
        },
        "setenrollmenttypeforclasstodeferredmanagedbyorganization()": {
          "definition": "Set_enrollment_type_for_class__to_deferred_managed_by_organization_(string className, string organizationName)"
        },
        "verifythatclassnameinprograminuse()": {
          "definition": "Verify_that_class_name__in_program___in_use( string className, string programName, string conditionString )"
        },
        "verifythatclasshasstatus()": {
          "definition": "Verify_that_class__has_status_(string className, string status)"
        },
        "addsubactivityunderactivityonclass()": {
          "definition": "Add_subactivity__under_activity__on_class__(string subActivityName, string activityName, string trainingClassName)"
        },
        "deleteactivityfromclass()": {
          "definition": "Delete_Activity__from_Class__(string activityName, string className)"
        },
        "verifyactivityontemplatehastestwithminpassinggrade()": {
          "definition": "Verify_activity__on_template__has_test__with_min_passing_grade__(string actName, string templateName, string testName, decimal minPassingGrade)"
        },
        "setclasstemplateinstructiontypeto()": {
          "definition": "Set_Class_Template_Instruction_Type_to__( string instructionTypeName )"
        },
        "setenddateforclassto()": {
          "definition": "Set_end_date_for_class_to(DateTime date)"
        },
        "addretestgroupnamedwithmaxoftotrainingclass()": {
          "definition": "Add_retest_group_named__with_max_of__to_training_class__(string groupName, int max, string trainingClassName)"
        },
        "setclasstemplatetypeto()": {
          "definition": "Set_Class_Template_Type_to__( string templateTypeName )"
        },
        "verifyclasstemplatehasactivity()": {
          "definition": "verify_class_template__has_activity( string templateName, string activityName )"
        },
        "addtrainingcategorytoclasstemplate()": {
          "definition": "Add_training_category__to_class_template__(string trainingCategoryName, string classTemplateName)"
        },
        "verifyactivityreferenceis()": {
          "definition": "Verify_Activity_Reference_is( string activityName, string reference )"
        },
        "addcertificationtoclasstemplate()": {
          "definition": "Add_certification__to_class_template__(string certMasterName, string templateName)"
        },
        "setactivitytonotmandatory()": {
          "definition": "Set_Activity_to_not_mandatory()"
        },
        "usingactivity()": {
          "definition": "Using_activity_( string activityName )"
        },
        "addcertificationtoclass()": {
          "definition": "Add_certification__to_class__(string certMasterName, string className)"
        },
        "usingacademy()": {
          "definition": "Using_Academy_( string academyName )"
        },
        "verifyactivitytrainingdivisionis()": {
          "definition": "Verify_Activity_Training_Division_is( string activityName, string divisionName )"
        },
        "selectendofclasssendingorganizationfor()": {
          "definition": "Select_end_of_class_sending_organization_for(string surveyName, string className)"
        },
        "setactivitydoesnotcountastraining()": {
          "definition": "Set_Activity_does_not_count_as_training()"
        },
        "verifythatactivityinclasshascertification()": {
          "definition": "Verify_that_activity__in_class__has_certification__( string activityName, string className, string certName )"
        },
        "verifythathasstudentsenrolled()": {
          "definition": "Verify_that__has__students_enrolled(string className, int numStudents)"
        },
        "setstartdateforclassto()": {
          "definition": "Set_start_date_for_class_to(DateTime date)"
        },
        "addschedulableactivitywithlengthofhours()": {
          "definition": "Add_schedulable_activity_with_length_of_hours( string activityName, int numHours )"
        },
        "setbriefdescription()": {
          "definition": "Set_brief_description(string value)"
        },
        "verifythathasactivityorsubactivity()": {
          "definition": "Verify_that_has_activity_or_subactivity(string className, string activityName)"
        },
        "considertrainingclass()": {
          "definition": "Consider_training_class__(string className)"
        },
        "setendofclasstoautoconfercertificationsfortemplate()": {
          "definition": "Set_End_of_Class_to_auto_confer_certifications_for_template__(string templateName)"
        },
        "verifythathasactivity()": {
          "definition": "Verify_that_has_activity(string className, string activityName)"
        },
        "addsubactivitywithlengthofhours()": {
          "definition": "Add_subactivity__with_length_of__hours( string activityName, int numHours )"
        },
        "addstudentgrouptoclasstemplate()": {
          "definition": "Add_student_group_to_class_template( string groupName, string templateName )"
        },
        "selectendofclasssurveyfor()": {
          "definition": "Select_end_of_class_survey__for__(string surveyName, string className)"
        },
        "verifyactivityontrainingclasshasnocertifications()": {
          "definition": "Verify_activity__on_training_class__has_no_certifications(string actName, string trainingClassName)"
        },
        "makeactivitymandatoryonclasstemplate()": {
          "definition": "Make_activity__mandatory_on_class_template__(string activityName, string templateName)"
        },
        "saveclasstemplate()": {
          "definition": "Save_Class_Template_(string classTemplateName)"
        },
        "setactivitycostto()": {
          "definition": "Set_Activity_Cost_to( int activityCost )"
        },
        "verifyactivityinstructionmethodis()": {
          "definition": "Verify_Activity_Instruction_Method_is( string activityName, string instructionMethodName )"
        },
        "graduatefromclasson()": {
          "definition": "Graduate__from_class__on__(string personName, string className, DateTime graduationDate)"
        },
        "setclasstemplatecostto()": {
          "definition": "Set_Class_Template_Cost_to__( string cost )"
        },
        "verifyclasstemplatehasactivitywithsubactivity()": {
          "definition": "verify_class_template_has_activity_with_subactivity( string templateName, string activityName, string subActivityName )"
        },
        "verifydoesnotcontainconductandperformancereport()": {
          "definition": "Verify_does_not_contain_Conduct_and_Performance_Report(string classDefinitionName, string reportName)"
        },
        "makeactivityinclasstemplateschedulable()": {
          "definition": "Make_activity_in_class_template_schedulable(string activityName, string classTemplateName)"
        },
        "addtesttoactivityinclass()": {
          "definition": "Add_test__to_activity__in_class__(string testName, string activityName, string className)"
        },
        "verifylistcontainstestnamedwithstudenttestsrecordedfortakenumber()": {
          "definition": "verify_list_contains_test_named__with__student_tests_recorded_for_take_number_( string testName, int studentTestCount, int takeNumber )"
        },
        "addsubactivitywithlengthofminutes()": {
          "definition": "Add_subactivity__with_length_of__minutes( string activityName, int numMinutes )"
        },
        "validateclasstemplatenamed()": {
          "definition": "Validate_Class_Template_named__(string templateName)"
        },
        "verifythathasenrollmentudfinclassofwithvalue()": {
          "definition": "Verify_that__has_enrollment_udf_in_class__of__with_value__(string personName, string className, string udfLabel, string udfValue)"
        },
        "verifyendofclassautograduationwillsetgraduationdatetoforclass()": {
          "definition": "Verify_End_of_Class_auto_graduation_will_set_graduation_date_to__for_class__(string gradDateOption, string className)"
        },
        "verifyactivitydoesnotexist()": {
          "definition": "Verify_Activity_does_not_exist( string activityName )"
        },
        "verifyendofclassautograduationwillsetgraduationdatetofortemplate()": {
          "definition": "Verify_End_of_Class_auto_graduation_will_set_graduation_date_to__for_template__(string gradDateOption, string templateName)"
        },
        "changeactivityonclassnameto()": {
          "definition": "Change_Activity__on_Class__Name_to(string activityName, string className, string newName)"
        },
        "createclasstemplatenamedinprogram()": {
          "definition": "Create_Class_Template_named__in_Program(string templateName, string programName)"
        },
        "addtesttoactivityinclasstemplate()": {
          "definition": "Add_test__to_activity__in_class_template__(string testName, string activityName, string templateName)"
        },
        "verifythattrainingclasshasretestgroupwithmaxof()": {
          "definition": "Verify_that_training_class_has_retest_group_with_max_of( string className, string groupName, int max )"
        },
        "verifythatclasshascomments()": {
          "definition": "Verify_that_class__has_comments(string className, string comments)"
        },
        "markactivityonclasstocountastraining()": {
          "definition": "Mark_activity__on_class__to_count_as_training(string activityName, string className)"
        },
        "setactivitypassfailbasetoonclasstemplate()": {
          "definition": "Set_activity__pass_fail_base_to__on_class_template__(string activityName, int passFailBase, string templateName)"
        },
        "verifyactivityminimumpassingscoreispercent()": {
          "definition": "Verify_Activity_minimum_passing_score_is_percent( string activityName, int minPassing )"
        },
        "setendofclasstoautograduatestudentsfortemplate()": {
          "definition": "Set_End_of_Class_to_auto_graduate_students__for_template__(string gradDateOption, string templateName)"
        },
        "setactivitytrainingdivisionto()": {
          "definition": "Set_Activity_Training_Division_to(string trainingDivisionName)"
        },
        "setceucredits()": {
          "definition": "Set_CEU_credits(decimal value)"
        },
        "addcertificationtoassessmenttestonactivityontemplate()": {
          "definition": "Add_certification__to_assessment_test__on_activity__on_template__(string certMasterName, string testName, string activityName, string templateName)"
        },
        "addpercentagetesttoactivityinclass()": {
          "definition": "Add_percentage_test__to_activity__in_class__(string testName, string activityName, string className)"
        },
        "addretestgroupnamedwithmaxoftoclasstemplate()": {
          "definition": "Add_retest_group_named_with_max_of_to_class_template( string groupName, int max, string templateName )"
        },
        "setactivityminimumpassingscoretopercent()": {
          "definition": "Set_Activity_minimum_passing_score_to_percent( int minPassScore )"
        },
        "makeactivityinclasstemplatecountastraining()": {
          "definition": "Make_activity_in_class_template_count_as_training(string activityName, string classTemplateName)"
        },
        "verifythathasenrollmentinclasswithhealthissuesof()": {
          "definition": "Verify_that__has_enrollment_in_class__with_health_issues_of__(string personName, string className, string healthIssues)"
        },
        "editretestgroupnamedwithmaxofretestsfor()": {
          "definition": "Edit_retest_group_named__with_max_of__retests_for__(string groupName, int max, string trainingClassName)"
        },
        "addanactivitynamedtoclasstemplate()": {
          "definition": "Add_an_activity_named_to_class_template( string activityName, string templateName )"
        },
        "verifythatdoesnothaveactivityorsubactivity()": {
          "definition": "Verify_that_does_not_have_activity_or_subactivity(string className, string activityName)"
        },
        "createclasstemplatenamedinprogramfororganization()": {
          "definition": "Create_Class_Template_named__in_Program_for_organization_(string templateName, string programName, string orgName)"
        },
        "deleteclass()": {
          "definition": "Delete_class__(string className)"
        },
        "verifythatactivityinhaschildactivity()": {
          "definition": "Verify_that_activity_in_has_child_activity(string parentActivityName, string className, string childActivityName)"
        },
        "createaclasstemplatenamed()": {
          "definition": "Create_a_class_template_named( string name )"
        },
        "verifycontainsconductandperformancereport()": {
          "definition": "Verify_contains_Conduct_and_Performance_Report(string classDefinitionName, string reportName)"
        },
        "addschedulablesubactivitywithlengthofhours()": {
          "definition": "Add_schedulable_subactivity__with_length_of__hours( string activityName, int numHours )"
        },
        "usingclasstemplatefromacademy()": {
          "definition": "Using_class_template__from_academy__( string classTemplateName, string academyName )"
        },
        "addcertificationtoactivity()": {
          "definition": "Add_certification__to_activity__(string certMasterName, string activityName)"
        },
        "verifythatendson()": {
          "definition": "Verify_that_ends_on( string className, DateTime date )"
        },
        "validateclasstemplatenamedinprogram()": {
          "definition": "Validate_Class_Template_named__in_Program__(string templateName, string programName)"
        },
        "sethousingoptiontofortrainingclass()": {
          "definition": "Set_housing_option_to__for_training_class__(string option, string trainingClassName)"
        },
        "verifytestonactivityontrainingclasshascertification()": {
          "definition": "Verify_test__on_activity__on_training_class__has_certification__(string testName, string actName, string trainingClassName, string certMaster)"
        },
        "usingclassnamed()": {
          "definition": "using_class_named__(string className)"
        },
        "addactivitytoclasstemplatewithlengthofhours()": {
          "definition": "Add_activity__to_class_template__with_length_of__hours( string activityName, string templateName, int lengthInHours )"
        },
        "verifyactivityontrainingclasshascertification()": {
          "definition": "Verify_activity__on_training_class__has_certification__(string actName, string trainingClassName, string certMaster)"
        },
        "saveactivityinclass()": {
          "definition": "Save_Activity__in_class__( string activityName, string className )"
        },
        "setactivitylengthtohoursandminutes()": {
          "definition": "Set_Activity_length_to__hours_and__minutes( int numHours, int numMinutes )"
        },
        "verifyactivitycostis()": {
          "definition": "Verify_Activity_Cost_is( string activityName, int cost )"
        },
        "setactivityreferenceto()": {
          "definition": "Set_Activity_Reference_to__( string activityReference )"
        },
        "deletetestfromactivity()": {
          "definition": "Delete_test__from_activity__(string testName, string activityName)"
        },
        "verifythatexists()": {
          "definition": "Verify_that_exists( string className )"
        },
        "setsignupdetails()": {
          "definition": "Set_signup_details(string value)"
        },
        "removeendofclasssurveyfor()": {
          "definition": "Remove_end_of_class_survey_for__(string className)"
        },
        "addactivitytoclasstemplate()": {
          "definition": "Add_activity_to_class_template( string activityName, string templateName )"
        },
        "setcomments()": {
          "definition": "Set_comments(string value)"
        },
        "verifyclasstemplatewaspersisted()": {
          "definition": "verify_class_template__was_persisted( string templateName )"
        },
        "verifyendofclassautoconfercertificationsforclass()": {
          "definition": "Verify_End_of_Class__auto_confer_certifications_for_class__(string willWillNot, string trainingClassName)"
        },
        "verifyactivityrequirementsare()": {
          "definition": "Verify_Activity_Requirements_are( string activityName, string requirements )"
        },
        "addstudentsubgrouptoinclasstemplate()": {
          "definition": "Add_student_subgroup_to_in_class_template( string subGroupName, string groupName, string templateName )"
        },
        "createactivityonclasstemplate()": {
          "definition": "Create_Activity__on_Class_Template__( string activityName, string classTemplateName )"
        },
        "verifylistcontainstests()": {
          "definition": "verify_list_contains__tests(int testCount)"
        },
        "verifyclasstemplatehasactivityorsubactivitywithlengthhoursandminutes()": {
          "definition": "verify_class_template__has_activity_or_subactivity_with_length__hours_and__minutes(string templateName, string activityName, int hours, int minutes)"
        },
        "verifyclasstemplatehascertification()": {
          "definition": "Verify_class_template__has_certification__(string classTemplate, string certMaster)"
        },
        "authorizeforschedulableactivityinclasstemplateexpiringon()": {
          "definition": "Authorize_for_schedulable_activity_in_class_template_expiring_on( string instructorName, string activityName, string templateName, DateTime expirationDate )"
        },
        "verifythatisenrolledinclass()": {
          "definition": "Verify_that__is_enrolled_in_class__(string personName, string className)"
        },
        "verifythatschedulableactivityinclasshasauthorizationforexpiringon()": {
          "definition": "Verify_that_schedulable_activity_in_class_has_authorization_for_expiring_on( string activityName, string className, string instructorName, DateTime expirationDate )"
        },
        "gettestlistforclass()": {
          "definition": "get_test_list_for_class__(string className)"
        },
        "selectendofclassstaffsurveyfor()": {
          "definition": "Select_end_of_class_staff_survey__for__(string surveyName, string className)"
        },
        "setactivityrequirementsto()": {
          "definition": "Set_Activity_Requirements_to( string activityRequirements )"
        },
        "addcertificationtoactivityontemplate()": {
          "definition": "Add_certification__to_activity__on_template__(string certMasterName, string activityName, string templateName)"
        },
        "verifyactivitylengthishoursandminutes()": {
          "definition": "Verify_Activity_length_is_hours_and_minutes( string activityName, int numHours, int numMinutes )"
        },
        "setactivitytomandatory()": {
          "definition": "Set_Activity_to_mandatory()"
        },
        "createtrainingclassnamedfromstartingonendingonwithstudents()": {
          "definition": "Create_training_class_named__from__starting_on__ending_on__with__students(string className, string templateName, DateTime start, DateTime end, int numberOfProjectedStudents)"
        },
        "cancelclass()": {
          "definition": "Cancel_class__( string className )"
        },
        "verifyactivityexists()": {
          "definition": "Verify_Activity_exists( string activityName )"
        },
        "verifythathoursforclassis()": {
          "definition": "Verify_that_hours_for_class__is__(string className, string length)"
        },
        "verifythatclasshasstudentgroup()": {
          "definition": "Verify_that_class_has_student_group( string className, string groupName )"
        },
        "sethousingdatesfortrainingclasstosameasclassdatesandreservefor()": {
          "definition": "Set_housing_dates_for_training_class__to_same_as_class_dates_and_reserve_for__(string trainingClassName, int numReservations)"
        },
        "createalldefaultedclasstemplate()": {
          "definition": "Create_All_Defaulted_Class_Template()"
        },
        "usingclasstemplate()": {
          "definition": "Using_class_template_( string classTemplateName )"
        },
        "verifythatclasshasprojectedstudents()": {
          "definition": "Verify_that_class_has_projected_students(string className, int count)"
        },
        "setlocationnameforclassto()": {
          "definition": "Set_location_name_for_class__to__(string className, string locationName)"
        },
        "setendofclasstoautoconfercertificationsforclass()": {
          "definition": "Set_End_of_Class_to_auto_confer_certifications_for_class__(string trainingClassName)"
        },
        "addschedulablesubactivitywithlengthofminutes()": {
          "definition": "Add_schedulable_subactivity__with_length_of__minutes( string activityName, int numMinutes )"
        },
        "setendofclasstoautograduatestudentsforclass()": {
          "definition": "Set_End_of_Class_to_auto_graduate_students__for_class__(string gradDateOption, string trainingClassName)"
        },
        "verifyactivityontemplatehastestwithallowproctoraccess()": {
          "definition": "Verify_activity__on_template__has_test__with_allow_proctor_access__(string actName, string templateName, string testName, bool allowProctorAccess)"
        },
        "createtimestampwithcurrentsystemtime()": {
          "definition": "Create_time_stamp_with_current_system_time(string timeStampName)"
        },
        "verifythatisnotenrolledinclass()": {
          "definition": "Verify_that__is_not_enrolled_in_class__(string personName, string className)"
        },
        "removecertificationfromactivity()": {
          "definition": "Remove_certification__from_activity__(string certMasterName, string activityName)"
        },
        "setactivitycountsastraining()": {
          "definition": "Set_Activity_counts_as_training()"
        },
        "createtrainingclassnamedfromstartingonendingonwithstatus()": {
          "definition": "Create_training_class_named__from__starting_on__ending_on__with_status_( string className, string templateName, DateTime start, DateTime end, ClassStatus status )"
        },
        "verifyendofclassautoconfercertificationsfortemplate()": {
          "definition": "Verify_End_of_Class__auto_confer_certifications_for_template__(string willWillNot, string templateName)"
        },
        "verifyclasstemplatehasactivitywithlengthhoursandminutes()": {
          "definition": "verify_class_template__has_activity_with_length__hours_and__minutes(string templateName, string activityName, int hours, int minutes)"
        },
        "verifyactivityontemplatehascertification()": {
          "definition": "Verify_activity__on_template__has_certification__(string actName, string templateName, string certMaster)"
        },
        "verifyendofclassisgraduatestudentsfortemplate()": {
          "definition": "Verify_End_of_Class_is__graduate_students_for_template__(string endOfClassAction, string templateName)"
        },
        "verifyactivityismandatory()": {
          "definition": "Verify_Activity_is_mandatory( string activityName )"
        },
        "selectconductandperformancereportfor()": {
          "definition": "Select_Conduct_and_Performance_Report_for_(string reportName, string classDefinitionName)"
        },
        "saveclass()": {
          "definition": "Save_class()"
        },
        "verifyclasstemplatehasactivitywithsubactivitywithsubactivity()": {
          "definition": "verify_class_template_has_activity_with_subactivity_with_subactivity(string templateName, string activityName, string subActivityName1, string subActivityName2)"
        },
        "getclasstemplate()": {
          "definition": "Get_class_template( string templateName )"
        },
        "verifyactivityisnotmandatory()": {
          "definition": "Verify_Activity_is_not_mandatory( string activityName )"
        },
        "addactivitytoclass()": {
          "definition": "Add_activity__to_class__( string activityName, string className )"
        },
        "verifytestonactivityontemplatehascertification()": {
          "definition": "Verify_test__on_activity__on_template__has_certification__(string testName, string actName, string templateName, string certMaster)"
        },
        "createprogramcategory()": {
          "definition": "Create_program_category__(string categoryName)"
        },
        "verifyactivityontemplatehastest()": {
          "definition": "Verify_activity__on_template__has_test__(string actName, string templateName, string testName)"
        },
        "verifyclassactivitywaspersisted()": {
          "definition": "verify_class_activity__was_persisted( string activityName )"
        },
        "setactivityinstructionmethodto()": {
          "definition": "Set_Activity_Instruction_Method_to( string instructionTypeName )"
        },
        "weightforactivityis()": {
          "definition": "Weight_for_activity__is__(string activityName, decimal weight)"
        },
        "setenrollmenttypeforclasstodirect()": {
          "definition": "Set_enrollment_type_for_class__to_direct(string className)"
        },
        "verifyendofclassisgraduatestudentsforclass()": {
          "definition": "Verify_End_of_Class_is__graduate_students_for_class__(string endOfClassAction, string trainingClassName)"
        },
        "verifytestonactivityontrainingclasshasnocertifications()": {
          "definition": "Verify_test__on_activity__on_training_class__has_no_certifications(string testName, string actName, string trainingClassName)"
        },
        "setactivitypassfailbaseto()": {
          "definition": "Set_activity_pass_fail_base_to__(int passFailBase)"
        },
        "deleteactivityfromclasstemplate()": {
          "definition": "Delete_Activity__from_Class_template__( string activityName, string classTemplateName )"
        },
        "verifytrainingclasshascertifications()": {
          "definition": "Verify_training_class__has_certifications__(string trainingClassName, List<string> certifications)"
        },
        "createactivityonclass()": {
          "definition": "Create_Activity__on_Class__( string activityName, string className )"
        },
        "verifythatstartson()": {
          "definition": "Verify_that_starts_on( string className, DateTime date )"
        },
        "graduatefromclass()": {
          "definition": "Graduate__from_class__(string personName, string className)"
        },
        "verifytrainingclasshascertification()": {
          "definition": "Verify_training_class__has_certification__(string trainingClassName, string certMaster)"
        },
        "usingclass()": {
          "definition": "Using_class__(string className)"
        },
        "verifyactivitycountsastraining()": {
          "definition": "Verify_Activity_counts_as_training( string activityName )"
        },
        "addanactivitynamedtoactivityinclasstemplate()": {
          "definition": "Add_an_activity_named_to_activity_in_class_template( string childActivityName, string parentActivityName, string templateName )"
        },
        "verifyactivitydoesnotcountastraining()": {
          "definition": "Verify_Activity_does_not_count_as_training( string activityName )"
        },
        "weightfortestis()": {
          "definition": "Weight_for_test__is__(string testName, decimal weight)"
        },
        "setfulldescription()": {
          "definition": "Set_full_description(string value)"
        },
        "addcertificationtoassessmenttest()": {
          "definition": "Add_certification__to_assessment_test__(string certMasterName, string testName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "CurriculumFNHManagement"
    },
    "eventrequestdetail": {
      "namespace": "",
      "methods": {
        "verifypagerefreshed()": {
          "definition": "Verify_page_refreshed()"
        },
        "refreshpage()": {
          "definition": "RefreshPage()"
        },
        "verifydenialcandeletereservation()": {
          "definition": "Verify_denial_can_delete_reservation()"
        },
        "verifydenialcannotdeletereservation()": {
          "definition": "Verify_denial_cannot_delete_reservation()"
        },
        "verifyviewreservationbuttonvisible()": {
          "definition": "Verify_View_Reservation_button__visible(string isIsNotVisible)"
        },
        "verifyfacilitylistcontainsrequests()": {
          "definition": "Verify_facility_list_contains__requests(int count)"
        },
        "clickapproverequest()": {
          "definition": "Click_approve_request()"
        },
        "verifyequipmentlistcontainsrequests()": {
          "definition": "Verify_equipment_list_contains__requests(int count)"
        },
        "verifyfacilityrequestisandschedulable()": {
          "definition": "Verify_facility_request_is_and__schedulable(int index, string text, string isIsNot)"
        },
        "bindfacilityrequests()": {
          "definition": "BindFacilityRequests(List<EventRequestInventoryDetailDTO> facilities)"
        },
        "verifyrejectrequestbuttonvisible()": {
          "definition": "Verify_Reject_Request_button__visible(string isIsNotVisible)"
        },
        "clickapproverequestwithcomments()": {
          "definition": "Click_approve_request_with_comments__(string comments)"
        },
        "verifytextforeventstatusis()": {
          "definition": "Verify_text_for_Event_Status_is__(string statusText)"
        },
        "clickrejectrequestwithreason()": {
          "definition": "Click_reject_request_with_reason__(string reason)"
        },
        "verifyequipmentrequestisandschedulable()": {
          "definition": "Verify_equipment_request_is_and__schedulable(int index, string text, string isIsNot)"
        },
        "verifycheckavailabilitybuttonvisible()": {
          "definition": "Verify_Check_Availability_button__visible(string isIsNotVisible)"
        },
        "bindequipmentrequests()": {
          "definition": "BindEquipmentRequests(List<EventRequestInventoryDetailDTO> equipment)"
        },
        "bindbillables()": {
          "definition": "BindBillables(List<EventRequestBillingItemDTO> dtos)"
        },
        "browsetodetailpageforeventrequest()": {
          "definition": "Browse_to_detail_page_for_event_request(string eventRequestName)"
        },
        "verifyapproverequestbuttonvisible()": {
          "definition": "Verify_Approve_Request_button__visible(string isIsNotVisible)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "EventRequestDetailWorkflow"
    },
    "certificationlist": {
      "namespace": "",
      "methods": {
        "browsetoclasstemplateinreadonlymode()": {
          "definition": "Browse_to_class_template__in_read_only_mode(string name)"
        },
        "gotoacadisrenewalapplication()": {
          "definition": "GoToAcadisRenewalApplication(int issuedCertID)"
        },
        "browsetovehicle()": {
          "definition": "Browse_to_vehicle__(string vehicleName)"
        },
        "verifythatlistcontainscertifications()": {
          "definition": "Verify_that_list_contains__certifications(int numCerts)"
        },
        "browsetoorganization()": {
          "definition": "Browse_to_organization__(string name)"
        },
        "verifythatuserredirectedtoportalcertrenewalpage()": {
          "definition": "Verify_that_user_redirected_to_Portal_Cert_Renewal_page()"
        },
        "verifythatcertificationshidden()": {
          "definition": "Verify_that_certifications__hidden(string certsAreRestrictedString)"
        },
        "browsetopersoninreadonlymode()": {
          "definition": "Browse_to_person__in_read_only_mode(string name)"
        },
        "verifythatprintpreferencesisvisiblerequestingmailingaddresspreference()": {
          "definition": "Verify_that_Print_Preferences_is_visible_requesting_Mailing_Address_preference()"
        },
        "gotoportalrenewcertification()": {
          "definition": "GoToPortalRenewCertification(int issuedCertID)"
        },
        "verifythatisnotprintable()": {
          "definition": "Verify_that__is_not_printable(string certName)"
        },
        "browsetoportalhometab()": {
          "definition": "Browse_to_portal_home_tab()"
        },
        "verifythatisrenewable()": {
          "definition": "Verify_that__is_renewable(string certName)"
        },
        "verifythatisnotviewable()": {
          "definition": "Verify_that__is_not_viewable(string certName)"
        },
        "browsetoorganizationinreadonlymode()": {
          "definition": "Browse_to_organization__in_read_only_mode(string name)"
        },
        "renew()": {
          "definition": "Renew__(string certName)"
        },
        "verifythatuserredirectedtoportalrenewalpage()": {
          "definition": "Verify_that_user_redirected_to_Portal_Renewal_page()"
        },
        "verifythatcertificationsrestricted()": {
          "definition": "Verify_that_certifications__restricted(string certsAreRestrictedString)"
        },
        "verifythatlistcontains()": {
          "definition": "Verify_that_list_contains__(string certName)"
        },
        "verifythatnoprintpreferencesarerequestedandreportwindowisvisible()": {
          "definition": "Verify_that_no_print_preferences_are_requested_and_report_window_is_visible()"
        },
        "verifythatisemailable()": {
          "definition": "Verify_that__is_emailable(string certName)"
        },
        "browsetovehicleinreadonlymode()": {
          "definition": "Browse_to_vehicle__in_read_only_mode(string vehicleName)"
        },
        "verifythatuserredirectedtorenewalapplicationpage()": {
          "definition": "Verify_that_user_redirected_to_Renewal_Application_page()"
        },
        "browsetoclasstemplate()": {
          "definition": "Browse_to_class_template__(string name)"
        },
        "verifythatuserredirectedtoupdatecertpage()": {
          "definition": "Verify_that_user_redirected_to_Update_Cert_page()"
        },
        "gotoacadisrenewcertification()": {
          "definition": "GoToAcadisRenewCertification(int certID)"
        },
        "verifythatisprintable()": {
          "definition": "Verify_that__is_printable(string certName)"
        },
        "verifythatisnotrenewable()": {
          "definition": "Verify_that__is_not_renewable(string certName)"
        },
        "verifythatuserissuecertifications()": {
          "definition": "Verify_that_user__issue_certifications(string canIssueCertsString)"
        },
        "browsetoperson()": {
          "definition": "Browse_to_person__(string name)"
        },
        "bindcertifications()": {
          "definition": "BindCertifications(List<IssuedCertificationListItemDTO> certifications)"
        },
        "print()": {
          "definition": "Print__(string certName)"
        },
        "verifythatisnotemailable()": {
          "definition": "Verify_that__is_not_emailable(string certName)"
        },
        "showcertsrestrictedmessage()": {
          "definition": "ShowCertsRestrictedMessage()"
        },
        "gotoportalrenewal()": {
          "definition": "GoToPortalRenewal(int issuedCertID)"
        },
        "verifythatisviewable()": {
          "definition": "Verify_that__is_viewable(string certName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "CertificationList"
    },
    "accountablepropertyaddedit": {
      "namespace": "",
      "methods": {
        "markasinactive()": {
          "definition": "Mark_as_inactive()"
        },
        "verifyaccessoriesis()": {
          "definition": "Verify_accessories_is_(string accessories)"
        },
        "selectnomodel()": {
          "definition": "Select_no_model()"
        },
        "verifyitemisnotanavailableaccountablepropertytype()": {
          "definition": "Verify_item_is_not_an_available_AccountableProperty_type(string type)"
        },
        "enterforaccessories()": {
          "definition": "Enter_for_accessories(string accessories)"
        },
        "selectmodel()": {
          "definition": "Select_model(string model)"
        },
        "enternoname()": {
          "definition": "Enter_no_name()"
        },
        "verifyactiveis()": {
          "definition": "Verify_active_is(bool active)"
        },
        "verifyserialnumberis()": {
          "definition": "Verify_serial_number_is_(string serialNumber)"
        },
        "verifyownerisprepopulatedas()": {
          "definition": "Verify_owner_is_pre_populated_as__(string owner)"
        },
        "verifyassetnumberis()": {
          "definition": "Verify_asset_number_is_(string assetNumber)"
        },
        "verifyowneris()": {
          "definition": "Verify_owner_is_(string owner)"
        },
        "verifycannotsavebecausenoidentifierentered()": {
          "definition": "Verify_cannot_save_because_no_identifier_entered()"
        },
        "verifypurchasedateis()": {
          "definition": "Verify_purchase_date_is_(string purchaseDate)"
        },
        "browsetopagefromdashboard()": {
          "definition": "Browse_to_page_from_dashboard()"
        },
        "enterforowner()": {
          "definition": "Enter__for_owner(string owner)"
        },
        "browsetopagetoeditfromaccountablepropertylist()": {
          "definition": "Browse_to_page_to_edit__from__accountable_property_list(string propertyName, string orgName)"
        },
        "enterforserialnumber()": {
          "definition": "Enter__for_serial_number(string serial)"
        },
        "enterforname()": {
          "definition": "Enter__for_name(string propertyName)"
        },
        "enterforpurchaseprice()": {
          "definition": "Enter_for_purchase_price(string purchasePrice)"
        },
        "verifypagetitleis()": {
          "definition": "Verify_page_title_is(string title)"
        },
        "enterforcomments()": {
          "definition": "Enter_for_comments(string comments)"
        },
        "enterforpurchasedate()": {
          "definition": "Enter_for_purchase_date(string purchaseDate)"
        },
        "enterforexpirationdate()": {
          "definition": "Enter_for_expiration_date(DateTime expDate)"
        },
        "enterfordescription()": {
          "definition": "Enter__for_description(string value)"
        },
        "returntorecord()": {
          "definition": "ReturnToRecord()"
        },
        "markasactive()": {
          "definition": "Mark_as_active()"
        },
        "browsetopagefromaccountablepropertylist()": {
          "definition": "Browse_to_page_from__accountable_property_list(string orgName)"
        },
        "verifycanselectowner()": {
          "definition": "Verify_can_select_owner()"
        },
        "verifypurchasepriceis()": {
          "definition": "Verify_purchase_price_is_(string purchasePrice)"
        },
        "enterforassetnumber()": {
          "definition": "Enter_for_asset_number(string assetNumber)"
        },
        "enternoserialnumber()": {
          "definition": "Enter_no_serial_number()"
        },
        "verifyselectedtypeis()": {
          "definition": "Verify_selected_type_is(string type)"
        },
        "verifycommentsis()": {
          "definition": "Verify_comments_is_(string comments)"
        },
        "verifyresourceidis()": {
          "definition": "Verify_resourceid_is(string resourceid)"
        },
        "verifyexpirationdateis()": {
          "definition": "Verify_expiration_date_is_(DateTime expDate)"
        },
        "saveaccountableproperty()": {
          "definition": "Save_Accountable_Property()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "AccountablePropertyAddEdit"
    },
    "webformaddeditwizardstart": {
      "namespace": "",
      "methods": {
        "verifytheduplicatenamevalidationerrorisdisplayed()": {
          "definition": "Verify_the_duplicate_name_validation_error_is_displayed()"
        },
        "verifyusernavigatedtothefieldselector()": {
          "definition": "Verify_user_navigated_to_the_field_selector(string hasHasNotString)"
        },
        "navigatetostartinglocation()": {
          "definition": "NavigateToStartingLocation()"
        },
        "navigatetofieldselector()": {
          "definition": "NavigateToFieldSelector()"
        },
        "verifyausermustbeloggedintotheportaltocompletethiswebform()": {
          "definition": "Verify_a_user_must_be_logged_in_to_the_portal_to_complete_this_WebForm()"
        },
        "clickcreatewebform()": {
          "definition": "Click_Create_WebForm()"
        },
        "clickcontinue()": {
          "definition": "Click_Continue()"
        },
        "selectausermustbeloggedintotheportaltocompletethiswebform()": {
          "definition": "Select_a_user_must_be_logged_in_to_the_portal_to_complete_this_WebForm()"
        },
        "clickcancel()": {
          "definition": "Click_Cancel()"
        },
        "verifyanyoneontheinternetcancompletethiswebform()": {
          "definition": "Verify_anyone_on_the_internet_can_complete_this_WebForm()"
        },
        "selectanyoneontheinternetcancompletethiswebform()": {
          "definition": "Select_Anyone_on_the_Internet_can_complete_this_WebForm()"
        },
        "verifyusernavigatedtothestartinglocation()": {
          "definition": "Verify_user__navigated_to_the_starting_location(string hasHasNotString)"
        },
        "browsetopageforwebformversion()": {
          "definition": "Browse_to_page_for_WebForm__version__(string formName, int versionNumber)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "WebFormAddEditWizardStartWorkflow"
    },
    "testopiasmtpclientfactory": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "TestopiaSmtpClientFactory"
    },
    "schedulingsetup": {
      "namespace": "",
      "methods": {
        "placeblockinatonday()": {
          "definition": "Place_block__in__at__on_day__(string blockName, string scheduleName, string time, int dayNumber)"
        },
        "createneverprofilenamed()": {
          "definition": "Create_never_profile_named_(string profileName)"
        },
        "createresourcecategory()": {
          "definition": "Create_resource_category__(string categoryName)"
        },
        "assigntodivision()": {
          "definition": "Assign__to_division(string activityName, string divisionName)"
        },
        "createstandardworkweekprofilenamed()": {
          "definition": "Create_standard_workweek_profile_named_(string profileName)"
        },
        "subdivideintosubdivisions()": {
          "definition": "Subdivide__into__subdivisions(string activityName, int numSubdivisions)"
        },
        "makeequipmentactive()": {
          "definition": "Make_equipment__active(string equipmentName)"
        },
        "createscheduletemplateforusing()": {
          "definition": "Create_schedule_template__for__using__(string scheduleName, string templateName, string profileName)"
        },
        "placeanchoredsplittingblockinatonday()": {
          "definition": "Place_anchored_splitting_block__in__at__on_day__(string blockName, string scheduleName, string time, int dayNumber)"
        },
        "createclasstemplateunderwithactivitieseachhourslong()": {
          "definition": "Create_class_template__under__with_activities__each__hours_long(string templateName, string programName, string activities, int hours)"
        },
        "createuserwithusername()": {
          "definition": "Create_user__with_username__(string personName, string userName)"
        },
        "changeequipmenttouseprofile()": {
          "definition": "Change_equipment__to_use_profile__(string equipmentName, string profileName)"
        },
        "createalwaysprofilenamed()": {
          "definition": "Create_always_profile_named_(string profileName)"
        },
        "createequipmentnamedincategoryusingprofile()": {
          "definition": "Create_equipment_named__in_category__using_profile__(string equipmentName, string categoryName, string profileName)"
        },
        "makeequipmentinactive()": {
          "definition": "Make_equipment__inactive(string equipmentName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "SchedulingSetup"
    },
    "personnelreadinessrecord": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "PersonnelReadinessRecord"
    },
    "performancereportqualitycontrolblock": {
      "namespace": "",
      "methods": {
        "enableprintingoptionmode()": {
          "definition": "EnablePrintingOptionMode()"
        },
        "verifynameis()": {
          "definition": "Verify_name_is( string name )"
        },
        "verifyqualitycontrolblockwillnotbeprintedonreports()": {
          "definition": "Verify_quality_control_block_will_not_be_printed_on_reports()"
        },
        "verifyqualitycontrolblockitemsarenotdisplayed()": {
          "definition": "Verify_quality_control_block_items_are_not_displayed()"
        },
        "enablerequirementoptionmode()": {
          "definition": "EnableRequirementOptionMode()"
        },
        "setqualitycontrolblockprintingto()": {
          "definition": "Set_quality_control_block_printing_to(bool printQCBlock)"
        },
        "verifyrequirementoptionsarevisible()": {
          "definition": "Verify_requirement_options_are_visible()"
        },
        "verifyqualitycontrolblockwillbeprintedonreports()": {
          "definition": "Verify_quality_control_block_will_be_printed_on_reports()"
        },
        "setqualitycontrolblockitemtorequired()": {
          "definition": "set_quality_control_block_item_to_required()"
        },
        "setqualitycontrolblockitemtooptional()": {
          "definition": "set_quality_control_block_item_to_optional()"
        },
        "browsetoqualitycontrolblocktosetprintingoptionfor()": {
          "definition": "Browse_to_quality_control_block_to_set_printing_option_for( string reportLabel )"
        },
        "verifyqualitycontrolblockitemsarerequired()": {
          "definition": "Verify_quality_control_block_items_are_required()"
        },
        "setqualitycontrolblockitemtonotdisplayed()": {
          "definition": "set_quality_control_block_item_to_not_displayed()"
        },
        "browsetoqualitycontrolblocktosetrequirementoptionfor()": {
          "definition": "Browse_to_quality_control_block_to_set_requirement_option_for( string reportLabel )"
        },
        "verifyprintingoptionsarevisible()": {
          "definition": "Verify_printing_options_are_visible()"
        },
        "verifyqualitycontrolblockitemsareoptional()": {
          "definition": "Verify_quality_control_block_items_are_optional()"
        },
        "savequalitycontrolblock()": {
          "definition": "Save_quality_control_block()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PerformanceReportQualityControlBlockWorkflow"
    },
    "customerviewbase": {
      "namespace": "",
      "methods": {
        "dispose()": {
          "definition": "Dispose()"
        },
        "verifyrowvalueforblank()": {
          "definition": "Verify_row__value_for__blank(int row, string columnName, string isOrNot)"
        },
        "verifyis()": {
          "definition": "Verify__is__(string columnName, string expectedValue)"
        },
        "verifyviewcontainsrecords()": {
          "definition": "Verify_view_contains__records(int count)"
        },
        "verifyrowvalueforis()": {
          "definition": "Verify_row__value_for__is__(int row, string columnName, string expectedValue)"
        },
        "verifyblank()": {
          "definition": "Verify__blank(string columnName, string isOrNot)"
        },
        "verifyrow()": {
          "definition": "Verify_row__(int rowNum)"
        },
        "verifyrowvalueforisblank()": {
          "definition": "Verify_row__value_for__is_blank(int row, string columnName)"
        },
        "verifyisblank()": {
          "definition": "Verify__is_blank(string columnName)"
        }
      },
      "parent-name": null,
      "class-name": "CustomerViewWorkflowBase"
    },
    "profilesummary": {
      "namespace": "",
      "methods": {
        "editphones()": {
          "definition": "Edit_phones()"
        },
        "verifyemergencycontactnameis()": {
          "definition": "Verify_emergency_contact_name_is(string name)"
        },
        "verifyemergencycontactrelationshipis()": {
          "definition": "Verify_emergency_contact_relationship_is(string relationship)"
        },
        "verifypersonseephones()": {
          "definition": "Verify_person__see_phones(string canCannot)"
        },
        "verifypersonaprimaryemailaddress()": {
          "definition": "Verify_person__a_primary_email_address(string hasDoesNotHave)"
        },
        "verifypersoneditphones()": {
          "definition": "Verify_person__edit_phones(string canCannot)"
        },
        "verifythereisnoemergencycontact()": {
          "definition": "Verify_there_is_no_emergency_contact()"
        },
        "verifypersonseeaddresses()": {
          "definition": "Verify_person__see_addresses(string canCannot)"
        },
        "editemergencycontact()": {
          "definition": "Edit_emergency_contact()"
        },
        "bindprofilesummary()": {
          "definition": "BindProfileSummary(ProfileDTO dto)"
        },
        "verifyemergencycontactphone1is()": {
          "definition": "Verify_emergency_contact_phone_1_is(string phone)"
        },
        "verifypersonseessn()": {
          "definition": "Verify_person__see_ssn(string canCannot)"
        },
        "verifypersonseeemergencycontact()": {
          "definition": "verify_person_see_emergency_contact(string canCannot)"
        },
        "editemails()": {
          "definition": "Edit_emails()"
        },
        "setemergencycontactcityto()": {
          "definition": "Set_emergency_contact_city_to(string city)"
        },
        "browsetoportalhometab()": {
          "definition": "Browse_to_portal_home_tab()"
        },
        "verifyemergencycontactaddressis()": {
          "definition": "Verify_emergency_contact_address_is(string addr)"
        },
        "editaddresses()": {
          "definition": "Edit_addresses()"
        },
        "verifypersoneditaddresses()": {
          "definition": "Verify_person__edit_addresses(string canCannot)"
        },
        "verifypersonmailingaddressis()": {
          "definition": "Verify_person_MailingAddress_is(string value)"
        },
        "setemergencycontactprimaryphoneto()": {
          "definition": "Set_emergency_contact_primary_phone_to(string phone)"
        },
        "verifypersoneditprofile()": {
          "definition": "Verify_person__edit_profile(string canCannot)"
        },
        "verifypersonprimaryemailaddressis()": {
          "definition": "Verify_person_PrimaryEmail_address_is(string value)"
        },
        "setemergencycontactrelationshipto()": {
          "definition": "Set_emergency_contact_relationship_to(string relationship)"
        },
        "verifypersonssnis()": {
          "definition": "Verify_person_SSN_is(string value)"
        },
        "verifypersonacademyidis()": {
          "definition": "Verify_person_AcademyID_is(string value)"
        },
        "verifypersonprimaryaddressis()": {
          "definition": "Verify_person_PrimaryAddress_is(string value)"
        },
        "verifypersoneditemails()": {
          "definition": "Verify_person__edit_emails(string canCannot)"
        },
        "verifypersoneditgeneralinformation()": {
          "definition": "Verify_person__edit_general_information(string canCannot)"
        },
        "verifypersonprimaryphonetypeis()": {
          "definition": "Verify_person_PrimaryPhoneType_is(string value)"
        },
        "browsetopersonnelprofilefor()": {
          "definition": "Browse_to_personnel_profile_for(string name)"
        },
        "setemergencycontactaddressline1to()": {
          "definition": "Set_emergency_contact_address_line_1_to(string addr)"
        },
        "setemergencycontactnameto()": {
          "definition": "Set_emergency_contact_name_to(string name)"
        },
        "verifypersonseeemails()": {
          "definition": "Verify_person__see_emails(string canCannot)"
        },
        "verifypersonnameis()": {
          "definition": "Verify_person_Name_is(string value)"
        },
        "editgeneralinformation()": {
          "definition": "Edit_general_information()"
        },
        "verifypersoneditemergencycontact()": {
          "definition": "verify_person_edit_emergency_contact(string canCannot)"
        },
        "setemergencycontactstateto()": {
          "definition": "Set_emergency_contact_state_to(string state)"
        },
        "verifypersonsameprimaryandmailingaddress()": {
          "definition": "Verify_person__same_primary_and_mailing_address(string hasDoesNotHave)"
        },
        "verifypersonprimaryphonenumberis()": {
          "definition": "Verify_person_PrimaryPhone_number_is(string value)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ProfileSummaryWorkflow"
    },
    "debugassertfailedexception": {
      "namespace": "",
      "methods": {
        
      },
      "parent-name": null,
      "class-name": "DebugAssertFailedException"
    },
    "importmatching": {
      "namespace": "",
      "methods": {
        "verifywarningthatacadisserviceisunavailableisshown()": {
          "definition": "Verify_warning_that_acadis_service_is_unavailable_is_shown()"
        },
        "verifymatchisnotenabled()": {
          "definition": "Verify_match__is_not_enabled(string matchName)"
        },
        "setacadisserviceisrunningto()": {
          "definition": "Set_acadis_service_is_running_to__(bool isRunning)"
        },
        "verifymatchischecked()": {
          "definition": "Verify_match__is_checked(string matchName)"
        },
        "verifymatchisenabled()": {
          "definition": "Verify_match__is_enabled(string matchName)"
        },
        "verifymatchisnotchecked()": {
          "definition": "Verify_match__is_not_checked(string matchName)"
        },
        "verifyheaderis()": {
          "definition": "Verify_Header_is( string headerText )"
        },
        "bindmatchingfields()": {
          "definition": "BindMatchingFields(IEnumerable<MatchingGroupItemDTO> matchingGroups)"
        },
        "clickcontinue()": {
          "definition": "Click_continue()"
        },
        "proceedtomatching()": {
          "definition": "Proceed_to_matching()"
        },
        "donotmatchon()": {
          "definition": "Do_not_Match_on__(string matchName)"
        },
        "navigatetopage()": {
          "definition": "NavigateToPage(ImportWizardPage page)"
        },
        "matchon()": {
          "definition": "Match_on_(string matchName)"
        },
        "showimportjobreallocated()": {
          "definition": "ShowImportJobReallocated()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ImportMatchingWorkflow"
    },
    "contingentcerthistory": {
      "namespace": "",
      "methods": {
        "verifyrecipienthaswarningflags()": {
          "definition": "Verify_recipient_has_warning_flags__(List<string> expectedFlags)"
        },
        "ongeneratecertificationhistoryfor()": {
          "definition": "On__generate_certification_history_for__(DateTime today, string certName)"
        },
        "verifycertification()": {
          "definition": "Verify_certification__(string certName)"
        },
        "verifythereareactions()": {
          "definition": "Verify_there_are__actions(int actionCount)"
        },
        "verifycertificationwasissuedon()": {
          "definition": "Verify_certification_was_issued_on__(DateTime expectedIssue)"
        },
        "verifyrecipienthasnowarningflags()": {
          "definition": "Verify_recipient_has_no_warning_flags()"
        },
        "ongraduatefromrefreshercourse()": {
          "definition": "On__graduate_from_refresher_course__(DateTime graduationDate, string classTemplateName)"
        },
        "verifystatusis()": {
          "definition": "Verify_status_is__(string statusName)"
        },
        "onseparatefrom()": {
          "definition": "On__separate_from__(DateTime separationDate, string orgName)"
        },
        "createnewperson()": {
          "definition": "Create_new_person()"
        },
        "ongraduatefrom()": {
          "definition": "On__graduate_from__(DateTime graduationDate, string classTemplateName)"
        }
      },
      "parent-name": "Workflow",
      "class-name": "ContingentCertHistoryWorkflow"
    },
    "performancereportslist": {
      "namespace": "",
      "methods": {
        "verifycanviewevaluationreportedon()": {
          "definition": "Verify_can_view_evaluation__reported_on__(string evaluationName, DateTime reportDate)"
        },
        "verifythatevaluationlistcontainsreportedon()": {
          "definition": "Verify_that_evaluation_list_contains__reported_on__(string evaluationName, DateTime reportDate)"
        },
        "bindevaluationlist()": {
          "definition": "BindEvaluationList(IList<PerformanceReportListDTO> data)"
        },
        "browsetoorganization()": {
          "definition": "Browse_to_organization__(string orgName)"
        },
        "verifypendingreportsdisplayed()": {
          "definition": "Verify_Pending_Reports__displayed(string status)"
        },
        "verifycannotprintevaluationreportedon()": {
          "definition": "Verify_cannot_print_evaluation__reported_on__(string evaluationName, DateTime reportDate)"
        },
        "verifycontinueincompletereportsdisplayed()": {
          "definition": "Verify_Continue_Incomplete_Reports__displayed(string status)"
        },
        "verifyapprovesubmittedreportsdisplayed()": {
          "definition": "Verify_Approve_Submitted_Reports__displayed(string status)"
        },
        "verifythattheactionmenutoevaluateperformanceisnotvisible()": {
          "definition": "Verify_that_the_action_menu_to_evaluate_performance_is_not_visible()"
        },
        "verifycannoteditevaluationreportedon()": {
          "definition": "Verify_cannot_edit_evaluation__reported_on__(string evaluationName, DateTime reportDate)"
        },
        "verifythattheactionmenutoevaluateperformanceisvisible()": {
          "definition": "Verify_that_the_action_menu_to_evaluate_performance_is_visible()"
        },
        "verifynonespecifieddisplayed()": {
          "definition": "Verify_None_Specified__displayed(string status)"
        },
        "verifycannotviewevaluationreportedon()": {
          "definition": "Verify_cannot_view_evaluation__reported_on__(string evaluationName, DateTime reportDate)"
        },
        "navigatetoeditreport()": {
          "definition": "NavigateToEditReport(int itemToEdit)"
        },
        "verifythatevaluationlistisnotvisible()": {
          "definition": "Verify_that_evaluation_list_is_not_visible()"
        },
        "verifycanprintevaluationreportedon()": {
          "definition": "Verify_can_print_evaluation__reported_on__(string evaluationName, DateTime reportDate)"
        },
        "verifycaneditevaluationreportedon()": {
          "definition": "Verify_can_edit_evaluation__reported_on__(string evaluationName, DateTime reportDate)"
        },
        "verifythatisincludedinlistofavailableperformancereports()": {
          "definition": "Verify_that__is_included_in_list_of_available_performance_reports(string reportName)"
        },
        "browsetoperson()": {
          "definition": "Browse_to_person__(string personName)"
        },
        "verifyactionlinksforincompleteorpendingreportsdisplayed()": {
          "definition": "Verify_action_links_for_incomplete_or_pending_reports__displayed(string isIsNotString)"
        },
        "bindavailableperformancereports()": {
          "definition": "BindAvailablePerformanceReports(IList<PerformanceReportAvailableToAddDTO> AvailablePerformanceReports)"
        },
        "verifythatevaluationlistdoesnotcontainreportedon()": {
          "definition": "Verify_that_evaluation_list_does_not_contain__reported_on__(string evaluationName, DateTime reportDate)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PerformanceReportsListWorkflow"
    },
    "performancereportcertaddedit": {
      "namespace": "",
      "methods": {
        "selectcertification()": {
          "definition": "Select_certification__(string certName)"
        },
        "browsetopagetoaddcerttoreportnamed()": {
          "definition": "Browse_to_page_to_add_cert_to_report_named__(string reportName)"
        },
        "verifycertificationisnotinlist()": {
          "definition": "Verify_certification__is_not_in_list(string certName)"
        },
        "browsetopagetoeditcertonreportnamed()": {
          "definition": "Browse_to_page_to_edit_cert__on_report_named__(string certName, string reportName)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PerformanceReportCertAddEditWorkflow"
    },
    "qualifiedbyorganization": {
      "namespace": "",
      "methods": {
        "verifyorganizationislisted()": {
          "definition": "Verify_organization__is_listed(string orgName)"
        },
        "verifyprimarycontactisundefined()": {
          "definition": "Verify_primary_contact_is_undefined()"
        },
        "bindorganizations()": {
          "definition": "BindOrganizations(List<QualifiedByOrganizationDTO> dtos)"
        },
        "verifyorganizationphoneis()": {
          "definition": "Verify_organization_phone_is__(string phone)"
        },
        "browsetopagefor()": {
          "definition": "Browse_to_page_for__(string capabilityName)"
        },
        "verifyprimarycontactis()": {
          "definition": "Verify_primary_contact_is__(string contact)"
        },
        "verifynumberofqualifiedis()": {
          "definition": "Verify_number_of_qualified_is__(int qualified)"
        },
        "verifylastrequestedisblank()": {
          "definition": "Verify_last_requested_is_blank()"
        },
        "navigatetosearchresults()": {
          "definition": "NavigateToSearchResults(PersonSearchTerms personSearchTerms)"
        },
        "sendrequestemail()": {
          "definition": "Send_request_email()"
        },
        "verifyprimarycontactcanbeemailed()": {
          "definition": "Verify_primary_contact_can_be_emailed()"
        },
        "verifyorganizationaddressis()": {
          "definition": "Verify_organization_address_is__(string address)"
        },
        "verifylastrequestedis()": {
          "definition": "Verify_last_requested_is__(DateTime date)"
        },
        "verifyheaderonrequestemailis()": {
          "definition": "Verify_header_on_request_email_is(string header)"
        },
        "verifyprimarycontactcannotbeemailed()": {
          "definition": "Verify_primary_contact_cannot_be_emailed()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "QualifiedByOrganizationWorkflow"
    },
    "issuecertification": {
      "namespace": "",
      "methods": {
        "selectcertification()": {
          "definition": "Select_certification__(string certVersionName)"
        },
        "returntoclassdefpage()": {
          "definition": "ReturnToClassDefPage()"
        },
        "verifyavailablecertficationsareoftype()": {
          "definition": "Verify_available_certfications_are_of_type__(string certTypeName)"
        },
        "verifycannotsearchforrecipient()": {
          "definition": "Verify_cannot_search_for_recipient()"
        },
        "verifycanchangerecipient()": {
          "definition": "Verify_can_change_recipient()"
        },
        "selectcertificationtypeof()": {
          "definition": "Select_certification_type_of__(string certTypeName)"
        },
        "verifycertexpirationupdatecontrolisnotvisible()": {
          "definition": "Verify_cert_expiration_update_control_is_not_visible()"
        },
        "returntodashboard()": {
          "definition": "ReturnToDashboard()"
        },
        "verifyspecificexpirationisselected()": {
          "definition": "Verify_specific_expiration_is_selected()"
        },
        "browsetoissuecertificationfromclasstemplate()": {
          "definition": "Browse_to_Issue_Certification_from_class_template__(string classTemplateName)"
        },
        "savesuccessful()": {
          "definition": "SaveSuccessful()"
        },
        "returntofacilitypage()": {
          "definition": "ReturnToFacilityPage()"
        },
        "verifyredirectedtoclassdefpage()": {
          "definition": "Verify_redirected_to_class_def_page()"
        },
        "verifyexpirationdaterequiredvalidationfails()": {
          "definition": "Verify_expiration_date_required_validation_fails()"
        },
        "verifycertificationselectionrequiredvalidationfails()": {
          "definition": "Verify_certification_selection_required_validation_fails()"
        },
        "verifycertexpirationupdatecontrolisvisible()": {
          "definition": "Verify_cert_expiration_update_control_is_visible()"
        },
        "verifyselectedcertificationstatusis()": {
          "definition": "Verify_selected_certification_status_is(string statusName)"
        },
        "clickdoneandconfirmstatuschange()": {
          "definition": "Click_Done_and_confirm_status_change()"
        },
        "issuetogroup()": {
          "definition": "Issue__to_group__(string cert, string groupName)"
        },
        "verifynocertificationrecipientnameisdisplayed()": {
          "definition": "Verify_no_certification_recipient_name_is_displayed()"
        },
        "verifyredirectedtocompliancedashboard()": {
          "definition": "Verify_redirected_to_Compliance_dashboard()"
        },
        "browsetoissuecertificationfromaccountablepropertywithserialnumber()": {
          "definition": "Browse_to_issue_certification_from_accountable_property_with_serial_number__(string serialNumber)"
        },
        "confirmstatuschange()": {
          "definition": "Confirm_status_change()"
        },
        "browsetoissuecertificationfromfirearmwithserialnumber()": {
          "definition": "Browse_to_issue_certification_from_firearm_with_serial_number__(string serialNumber)"
        },
        "verifycannotchangerecipient()": {
          "definition": "Verify_cannot_change_recipient()"
        },
        "verifycertificationisreadonlyandsettolatestversionofmaster()": {
          "definition": "Verify_certification_is_read_only_and_set_to_latest_version_of_master__(string certMasterName)"
        },
        "setexpirationtolastdayoffiscalyear()": {
          "definition": "Set_expiration_to_last_day_of_fiscal_year()"
        },
        "cancelcertificationissuance()": {
          "definition": "Cancel_certification_issuance()"
        },
        "verifycansearchforrecipient()": {
          "definition": "Verify_can_search_for_recipient()"
        },
        "verifynoexpirationdateisentered()": {
          "definition": "Verify_no_expiration_date_is_entered()"
        },
        "shouldshowexpirationcontrol()": {
          "definition": "ShouldShowExpirationControl(bool visible)"
        },
        "verifyredirectedtopersonpage()": {
          "definition": "Verify_redirected_to_person_page()"
        },
        "verifysaveincompleteduetostatuschangeconfirmation()": {
          "definition": "Verify_save_incomplete_due_to_status_change_confirmation()"
        },
        "returntoorgpage()": {
          "definition": "ReturnToOrgPage()"
        },
        "verifypagevalidationfailsonsave()": {
          "definition": "Verify_page_validation_fails_on_save()"
        },
        "verifycannotselectcertificationstatusof()": {
          "definition": "Verify_cannot_select_certification_status_of__(string statusName)"
        },
        "verifynoexpirationintervalisentered()": {
          "definition": "Verify_no_expiration_interval_is_entered()"
        },
        "browsetoissuecertificationfromperson()": {
          "definition": "Browse_to_Issue_Certification_from_person__(string personName)"
        },
        "clicksaveandissueanother()": {
          "definition": "Click_Save_and_Issue_Another()"
        },
        "verifynoexpirationtimeunitisselected()": {
          "definition": "Verify_no_expiration_time_unit_is_selected()"
        },
        "returntovehiclepage()": {
          "definition": "ReturnToVehiclePage()"
        },
        "verifyissuedateistoday()": {
          "definition": "Verify_issue_date_is_today()"
        },
        "setissuedatetotodayplus()": {
          "definition": "Set_issue_date_to_today_plus____(int interval, string calendarTimeUnit)"
        },
        "verifyissuedatebeforeexpirationvalidationfails()": {
          "definition": "Verify_issue_date_before_expiration_validation_fails()"
        },
        "setexpirationto()": {
          "definition": "Set_expiration_to____(int expireInterval, string expireTimeUnit)"
        },
        "setissuedateto()": {
          "definition": "Set_issue_date_to__(DateTime issueDate)"
        },
        "selectspecificexpiration()": {
          "definition": "Select_specific_expiration()"
        },
        "browsetoissuecertificationfromfacility()": {
          "definition": "Browse_to_issue_certification_from_facility__(string facility)"
        },
        "browsetoissuecertificationfromvehicle()": {
          "definition": "Browse_to_issue_certification_from_vehicle__(string vehicleName)"
        },
        "verifyexpirationintervaldefaultsto()": {
          "definition": "Verify_expiration_interval_defaults_to__(int expireInterval)"
        },
        "returntopersonpage()": {
          "definition": "ReturnToPersonPage()"
        },
        "reloadissuepage()": {
          "definition": "ReloadIssuePage()"
        },
        "issueto()": {
          "definition": "Issue__to__(string cert, string person)"
        },
        "verifyredirectedtofirearmpage()": {
          "definition": "Verify_redirected_to_firearm_page()"
        },
        "setissuedatetonull()": {
          "definition": "Set_issue_date_to_null()"
        },
        "verifyselectedcertificationexpirationiscontingentonemployment()": {
          "definition": "Verify_selected_certification_expiration_is_contingent_on_employment()"
        },
        "verifynocertificationtypeisselected()": {
          "definition": "Verify_no_certification_type_is_selected()"
        },
        "verifyduplicatecertificationvalidationappears()": {
          "definition": "Verify_duplicate_certification_validation_appears()"
        },
        "verifycertificationrecipientnameis()": {
          "definition": "Verify_certification_recipient_name_is(string recipientName)"
        },
        "setexpirationtotodayplus()": {
          "definition": "Set_expiration_to_today_plus____(int interval, string calendarTimeUnit)"
        },
        "verifyredirectedtoorgpage()": {
          "definition": "Verify_redirected_to_org_page()"
        },
        "verifynocertificationisselected()": {
          "definition": "Verify_no_certification_is_selected()"
        },
        "browsetoissuecertificationfromanimal()": {
          "definition": "Browse_to_issue_certification_from_animal__(string animalName)"
        },
        "clickdone()": {
          "definition": "Click_Done()"
        },
        "verifyredirectedtovehiclepage()": {
          "definition": "Verify_redirected_to_vehicle_page()"
        },
        "verifyexpirationtimeunitdefaultsto()": {
          "definition": "Verify_expiration_time_unit_defaults_to__(string expireTimeUnit)"
        },
        "verifyredirectedtoanimalpage()": {
          "definition": "Verify_redirected_to_animal_page()"
        },
        "verifyexpirationdatedefaultstofromtodayforselectedcertification()": {
          "definition": "Verify_expiration_date_defaults_to____from_today_for_selected_certification(int expireInterval, string expireTimeUnit)"
        },
        "searchforperson()": {
          "definition": "Search_for_person(string personName)"
        },
        "browsetoissuecertificationforpersonfromcompliancedashboard()": {
          "definition": "Browse_to_Issue_Certification_for_person_from_Compliance_dashboard()"
        },
        "showstatusconfirmation()": {
          "definition": "ShowStatusConfirmation()"
        },
        "verifyrecipientrequiredvalidationfails()": {
          "definition": "Verify_recipient_required_validation_fails()"
        },
        "returntoaccountablepropertypage()": {
          "definition": "ReturnToAccountablePropertyPage()"
        },
        "browsetoissuecertificationfromorganization()": {
          "definition": "Browse_to_Issue_Certification_from_organization(string orgName)"
        },
        "returntofirearmpage()": {
          "definition": "ReturnToFirearmPage()"
        },
        "setothernumberidto()": {
          "definition": "Set_other_number_id_to__(string otherNumber)"
        },
        "verifyselectedcertificationneverexpires()": {
          "definition": "Verify_selected_certification_never_expires()"
        },
        "selectperiodexpiration()": {
          "definition": "Select_period_expiration()"
        },
        "selectcertificationstatusof()": {
          "definition": "Select_certification_status_of__(string certStatusName)"
        },
        "clearandenableexpirationtypevalidators()": {
          "definition": "ClearAndEnableExpirationTypeValidators()"
        },
        "verifyissuedaterequiredvalidationfails()": {
          "definition": "Verify_issue_date_required_validation_fails()"
        },
        "returntoanimalpage()": {
          "definition": "ReturnToAnimalPage()"
        },
        "verifyredirectedtoaccountablepropertypage()": {
          "definition": "Verify_redirected_to_accountable_property_page()"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "IssueCertification"
    },
    "portalchangepassword": {
      "namespace": "",
      "methods": {
        "verifynewuserpasswordchangetokenwasaccepted()": {
          "definition": "Verify_new_user_password_change_token_was_accepted()"
        },
        "bindpasswordrules()": {
          "definition": "BindPasswordRules(List<PasswordRuleDTO> dtos)"
        },
        "redirecttonextpage()": {
          "definition": "RedirectToNextPage(string nextPage)"
        },
        "logintheproctoruser()": {
          "definition": "LogInTheProctorUser(PortalAccountAccessDTO access)"
        },
        "browsetopagefornewuser()": {
          "definition": "Browse_to_page_for_new_user__(string emailAddress)"
        },
        "rejecttoken()": {
          "definition": "RejectToken()"
        },
        "logintheportaluser()": {
          "definition": "LogInThePortalUser(PortalAccountAccessDTO access)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "PortalChangePasswordWorkflow"
    },
    "examgradelistreport": {
      "namespace": "",
      "methods": {
        "verifythatcolumnsincludeattemptlabeled()": {
          "definition": "Verify_that_columns_include_attempt_labeled__(string attemptLabel)"
        },
        "verifyreporthasstudentgroups()": {
          "definition": "Verify_report_has__student_groups(int numGroups)"
        },
        "verifyreporthasrowsingroup()": {
          "definition": "Verify_report_has__rows_in_group__(int numRows, int groupNum)"
        },
        "verifygroupaveragerowisvisible()": {
          "definition": "Verify_Group_Average_Row_is_visible()"
        },
        "removegroupaveragerow()": {
          "definition": "RemoveGroupAverageRow()"
        },
        "verifythatrowhascolumunwithvalueof()": {
          "definition": "verify_that_row_has_columun__with_value_of(int rowNum, string colName, string value)"
        },
        "verifyaveragescorecolumnisnotvisible()": {
          "definition": "Verify_Average_Score_Column_is_not_visible()"
        },
        "verifyaveragegradecolumnisvisible()": {
          "definition": "Verify_Average_Grade_Column_is_visible()"
        },
        "verifynumberofdiplayedcolumnsis()": {
          "definition": "Verify_Number_Of_Diplayed_Columns_is__(int colCount)"
        },
        "verifyreporthasstudentgroup()": {
          "definition": "Verify_report_has__student_group(int numGroups)"
        },
        "verifythatgrouphasclassaveragerecordedgradeof()": {
          "definition": "Verify_that_group__has_Class_Average_Recorded_Grade_of__(int groupNum, string grade)"
        },
        "verifythatgrouphasgroupaverageattemptscoreof()": {
          "definition": "Verify_that_group__has_Group_Average_Attempt_Score_of__(int groupNum, string score)"
        },
        "verifythatrowhascommentof()": {
          "definition": "verify_that_row__has_comment__of__(int rowNum, string commentLabel, string commentText)"
        },
        "removeaveragescorecolumn()": {
          "definition": "RemoveAverageScoreColumn()"
        },
        "setheaderinfo()": {
          "definition": "SetHeaderInfo(ReportHeaderDTO dto)"
        },
        "removeaveragegradecolumn()": {
          "definition": "RemoveAverageGradeColumn()"
        },
        "verifythatrowingrouphascolumnwithvalueof()": {
          "definition": "verify_that_row__in_group__has_column__with_value_of__(int rowNum, int groupNum, string colName, string value)"
        },
        "verifyaveragescorecolumnisvisible()": {
          "definition": "Verify_Average_Score_Column_is_visible()"
        },
        "verifyaveragegradecolumnisnotvisible()": {
          "definition": "Verify_Average_Grade_Column_is_not_visible()"
        },
        "verifythatrowingrouphasof()": {
          "definition": "verify_that_row__in_group__has_of__(int rowNum, int groupNum, string colName, string value)"
        },
        "bindreportdata()": {
          "definition": "BindReportData(List<StudentGradeSummaryGroup> data, List<string> preferences, List<string> attemptLabels)"
        },
        "verifyreporthasrows()": {
          "definition": "Verify_report_has__rows(int numRows)"
        },
        "showcolumnsbypreferences()": {
          "definition": "ShowColumnsByPreferences(List<string> preferences, List<string> attempts)"
        },
        "verifythatgrouphasclassaverageattemptscoreof()": {
          "definition": "Verify_that_group__has_Class_Average_Attempt_Score_of__(int groupNum, string score)"
        },
        "verifygroupis()": {
          "definition": "Verify_Group_is(int groupNum, string groupName)"
        },
        "verifythatrowhasof()": {
          "definition": "verify_that_row__has__of__(int rowNum, string colName, string value)"
        },
        "verifygroupaveragerowisnotvisible()": {
          "definition": "Verify_Group_Average_Row_is_not_visible()"
        },
        "verifythatpagelayoutis()": {
          "definition": "Verify_that_page_layout_is(string layoutMode)"
        },
        "verifythatcolumnsare()": {
          "definition": "Verify_that_columns_are__(string columnLabels)"
        },
        "verifythatgrouphasgroupaveragerecordedgradeof()": {
          "definition": "Verify_that_group__has_Group_Average_Recorded_Grade_of__(int groupNum, string grade)"
        },
        "browsetoreportfortestnamedinclass()": {
          "definition": "Browse_to_report_for_test_named__in_class__(string testName, string className)"
        },
        "veriftythatrowingrouphascommentof()": {
          "definition": "Verifty_that_row__in_group__has_comment__of__(int rowNum, int groupNum, string commentLabel, string commentText)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ExamGradeListReportWorkflow"
    },
    "classchangealert": {
      "namespace": "",
      "methods": {
        "popuptomoveclasstostarton()": {
          "definition": "Popup_to_move_class_to_start_on(string className, DateTime startDate)"
        },
        "selectasassignmentoption()": {
          "definition": "Select_as_assignment_option(string option)"
        },
        "clickcontinue()": {
          "definition": "Click_continue()"
        },
        "selectasscheduleoption()": {
          "definition": "Select_as_schedule_option(string option)"
        },
        "show()": {
          "definition": "Show(ClassChangeDTO classChange)"
        }
      },
      "parent-name": "MVBaseWorkflow",
      "class-name": "ClassChangeAlertWorkflow"
    }
  },
  "debug": true
}