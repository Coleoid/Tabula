using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Tabula
{


    public class Transpiler
    {
        public string ScenarioLabel { get; set; }

        public void Transpile(string fileName, string scenarioText, StringBuilder builder)
        {
            var parser = new Parser();
            var scenario = parser.FileParse(scenarioText);
            BuildHeader(builder);
            OpenNamespace(builder);
            OpenClass(builder, "foo_generated");
            BuildBody(builder, scenarioText);
            CloseClass(builder);
            CloseNamespace(builder);
        }

        public void BuildHeader(StringBuilder builder)
        {
            builder.AppendLine("//  This file was generated by TabulaClassGenerator version 0.1.");
            builder.AppendLine("//  Currently only generates this rudimentary paste.  You have been warned.");
            builder.AppendLine("using System;");
            builder.AppendLine("using System.Collections.Generic;");
            builder.AppendLine("using Acadis.Constants.Accounting;");
            builder.AppendLine("using Acadis.Constants.Admin;");
            builder.AppendLine("using Acadis.SystemUtilities;");
            builder.AppendLine();
        }

        public void OpenNamespace(StringBuilder builder)
        {
            builder.AppendLine("namespace Tabula");
            builder.AppendLine("{");
        }


        public void OpenClass(StringBuilder builder, string fileName)
        {
            int extN = fileName.IndexOf('.');
            if (extN != -1)
                fileName = fileName.Remove(extN);
            var className = fileName.Replace(' ', '_');
            builder.AppendLine($"    public class {className}_generated  //  {ScenarioLabel}");
            builder.AppendLine("        : GeneratedScenarioBase, IGeneratedScenario");
            builder.AppendLine("    {");
        }

        public void BuildBody(StringBuilder builder, string scenarioText)
        {
            //ParseScenario(scenarioText);
        }

        public List<string> NeededWorkflows = new List<string>();
        public void AddWorkflow(string workflowName)
        {
            NeededWorkflows.Add(workflowName);
        }

        public void BuildDeclarations(StringBuilder builder)
        {
            foreach (var workflow in NeededWorkflows)
            {
                var varName = nameOfWorkflowInstance(workflow);
                builder.AppendFormat("public {0} {1};{2}", workflow, varName, Environment.NewLine);
            }
        }

        public void BuildConstructor(StringBuilder builder, List<string> neededImplementors)
        {

        }

        public void CloseClass(StringBuilder builder)
        {
            builder.AppendLine("    }");
        }

        public void CloseNamespace(StringBuilder builder)
        {
            builder.AppendLine("}");
        }

        public string nameOfWorkflowInstance(string workflowName)
        {
            var lastDot = workflowName.LastIndexOf('.');
            return workflowName.Substring(lastDot + 1).Replace("Workflow", "");
        }
    }
}
