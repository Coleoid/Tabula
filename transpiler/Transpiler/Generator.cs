using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Tabula
{
    public class Generator
    {
        public CST.Scenario Scenario { get; set; }
        public StringBuilder Builder { get; set; }

        public void Generate(CST.Scenario scenario, string inputFilePath, StringBuilder builder)
        {
            Scenario = scenario;
            Builder = builder;

            BuildHeader(inputFilePath);
            OpenNamespace();
            OpenClass(inputFilePath);
            BuildBody();
            CloseClass();
            CloseNamespace();
        }

        public void BuildHeader(string inputFilePath)
        {
            Builder.AppendLine("//  This file was generated by TabulaClassGenerator version 0.1.");
            Builder.AppendLine($"//  To change this file, change the Tabula scenario at {inputFilePath}.");
            Builder.AppendLine("//  Currently only generates this rudimentary paste.  You have been warned.");
            Builder.AppendLine("using System;");
            Builder.AppendLine("using System.Collections.Generic;");
            Builder.AppendLine("using Acadis.Constants.Accounting;");
            Builder.AppendLine("using Acadis.Constants.Admin;");
            Builder.AppendLine("using Acadis.SystemUtilities;");
            Builder.AppendLine();
        }

        public void OpenNamespace()
        {
            Builder.AppendLine("namespace Tabula");
            Builder.AppendLine("{");
        }


        public void OpenClass(string inputFilePath)
        {
            //  remove everything before the last backslash
            int lastBackslash = inputFilePath.LastIndexOf("\\");
            if (lastBackslash != -1)
                inputFilePath = inputFilePath.Substring(lastBackslash + 1);

            //  remove everything after the last dot
            int lastDot = inputFilePath.LastIndexOf('.');
            if (lastDot != -1)
                inputFilePath = inputFilePath.Remove(lastDot);

            ClassName = inputFilePath.Replace(' ', '_').Replace('.', '_') + "_generated";
            Builder.AppendLine($"    public class {ClassName}  //  {Scenario.Label}");
            Builder.AppendLine("        : GeneratedScenarioBase, IGeneratedScenario");
            Builder.AppendLine("    {");
        }
        public string ClassName { get; set; }

        public void BuildBody()
        {
        }

        public List<string> GetNeededWorkflows()
        {
            List<string> nws = Scenario.NeededWorkflows;
            nws.Sort();
            var unws = nws.Distinct(StringComparer.CurrentCultureIgnoreCase).ToList();

            //TODO:
            //  The 'peepEnrollment = new PeopleEnrollmentWorkflow();' lines are placed in
            //   each paragraph (or block) method, as the use command is encountered.
            //  And I need to think out not messing up the state of any workflows which rely
            //   on their state.  Perhaps we manually stash and replace workflow instances?
            //  Or, since I'm doing local initialization, I could switch to local declaration,
            //   also.  Then we need to find a way to know which workflows to pass as arguments,
            //   and do so with all consumers of the block.  More complex.
            //  I don't know where the real use cases will push us, so starting simple (and
            //   working to uncover the forces involved) seems like the plan.

            return unws;
        }

        //public void AddWorkflow(string workflowName)
        //{
        //    NeededWorkflows.Add(workflowName);
        //}

        public void BuildDeclarations()
        {
            foreach (var workflow in GetNeededWorkflows())
            {
                var varName = nameOfWorkflowInstance(workflow);
                Builder.AppendFormat("public {0} {1};{2}", workflow, varName, Environment.NewLine);
            }
        }

        //  Since workflow instantiation happens in each paragraph, this is (for now) a stub.
        public void BuildConstructor(List<string> neededImplementors)
        {
            Builder.Append("        public ");
            Builder.Append(ClassName);
            Builder.AppendLine("()");
            Builder.AppendLine("            : base()");
            Builder.AppendLine("        {");
            Builder.AppendLine("        }");
        }

        public void CloseClass()
        {
            Builder.AppendLine("    }");
        }

        public void CloseNamespace()
        {
            Builder.AppendLine("}");
        }

        public string nameOfWorkflowInstance(string workflowName)
        {
            var lastDot = workflowName.LastIndexOf('.');
            return workflowName.Substring(lastDot + 1).Replace("Workflow", "");
        }
    }
}
