=====================================================================
===  Tabula walking skeleton, remaining work  ===  03 Jan 2017

Fixture-Binder finishes enough of its education

    [ ] Comprehend partial classes (somewhat)
        Or pre-grind & special-case the Workflow base class partials?
    .75

    [ ] Resolve methods available to class via inheritance
        At scenario compile-time, rather than at C# parsing-time
    1.0

    [ ] Comprehend generic classes (enough)
        (perhaps very little if inheritance/partials are already in)
    .5

    [ ] Fixture-finding to catch 'workflow' embedded in name
    .25


Compiler builds class from head to toe

    [ ] Loads Binder from command-line args, uses it
    .25

    [ ] Write class to output file
    .25


Scope management

    [ ] Unit tests to solidify behavior
        ? does empty string on missing key fit our needs?
    .5

Testopia runner wired through Tabula

    [ ] Loads Tabula scenario classes dynamically
    .5

    [ ] Reports minimally/adequately
    .25

    [ ] Scenario Context supplied to fixtures using it
    .5

Pragmatics and plumbing

    [ ] Translate modern Testopia scenario into Tabula
        Want a repetitive stretch so that tables can shine
        Half in browse/choose, half in translate/rewrite
    .5

    [ ] Manually add support code and generated class
        (or several?) to Acadis
    .25



=====================================================================
===  Beyond the skeleton


Pragmatics and plumbing

    [ ] 0.25  Update mechanical translation script to 16.12 Tabula


Testopia runner wired through Tabula

    [ ] split local/MVC into separate axis from Testopia/Tabula

    [ ] Reporting via existing web-page mechanism
    1.0 - 2.0

Dev mode vs. Demo mode

    [ ] BDD styled >when: and >then:
        Raises questions of scope
        ...which run against the current usage of '>use:'
        ...perhaps alternate large-scope 'use' is '>install:' or '<use:'
            . o O ( yuck )
