=====================================================================
===  Tabula feature picks for February completion,  30 Jan 2017   ===

Comment:  // this .tab mechanically generated from Testopia (.5 pt)

Split local/MVC into separate axis from Testopia/Tabula (.5 pt)

Report results to existing web-page mechanism (2 pt)

Value aliases
    Syntax change:  >set: "foo" means "bar" (.5 pt)

Step aliases
    Syntax!  Means!  It's so beautiful! (.5 pt)

Update the Big Bad Wolf (1 pt)

Overload resolution (2 pt)

Blocks (5 pt)
    Stack of code insertion locations (CILs)
        (where the first is into ExecuteScenario())
    When a new block opens, the current CIL gets the call
     to the new block, then the new block is pushed onto the stack

Results in JSON (3 pt)
    To be styled via mustache?

Labels matching "xxx: details" feed the Table of Contents (1 pt)

Stack trace legibility (2 pt)


=====================================================================
===  Future

Compiler tools for Studio

Better build-time value typing for float, double, decimal

Dev mode vs. Demo mode, different reporting

BDD styled >when: and >then:
    Raises questions of scope
    ...which run against the current usage of '>use:'
    ...perhaps outer-scope 'use' is '>install:'

Fixture-Binder
    Cache dumped when fixtures .dll newer than fixtures.json
    Deserialize from fixtures.json (tie parents, other init?)

Inner/child workflows

Numeric column indicators (#1, #2, et c.)



=====================================================================
===  Done

String interpolation of variables for the debug message

Testopia runner
    [x] Pathway for running Tabula scenarios
    1.0
    [x] Reports minimally/adequately
    .25
    [x] Loads Tabula scenario classes dynamically
    .5

Compiler
    [x] Loads Binder from command-line args, uses it
    .25
    [x] Write class to output file
    .25
    [x] Prefix fixture type with namespace
    .25

Pragmatics and plumbing
    [x] 0.25  Update mechanical translation script to 16.12 Tabula
    [x] Manually add needed code to project for demo
        * Base classes
        * Generated scenario class(es?)
    .25
    [x] Finish translating TuitionBilling into Tabula
    .25

Fixture-Binder
    [x] serialize classes (json? .parent?) for compiler speed
    .5
    [x] Manually pre-build parent classes for inheritance
    .75
    [x] Keep Parent in Fixture-Class, populate from declaration
        delegate method finding at scenario compile-time
    1.0
    [x] Comprehend generic classes (enough)
        (perhaps very little if inheritance/partials are already in)
    .5
    [x] Handle connecting parent classes
    .5
    [x] Mop up remaining oddballs
    .5
    [x] Note namespaces
    .25

Language
    [x] Start paragraph with string and colon
        String becomes label for Paragraph
    .5
    [ ] Paragraphs get their own build-time scope
    .5

Fire that nasty boy up, put out fires, repeat
    [x] several call bugs
    [x] comments not parsed correctly
    [x] numbers not handling decimals or sign
    [x] namespace missing on fixture instantiations
    [x] wrong constructor
    [x] class name includes path
    [x] public new void do_thing()
    [x] clear prior run's sections from regen
    [x] Fixture-Class fetching problems
    [x] Final handful of unfound (from multiple fixtures in scope)
    [x] Comma within string should not cause list
    [x] Label(string labelText) in base class
    [x] Values correctly typed (DateTime, numerics, enums)
