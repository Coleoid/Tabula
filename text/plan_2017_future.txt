=====================================================================
===  Possible future work, with [effort N, value M] poker estimates

---------------------------------------------------------------------
---  Internal to Tabula xpiler and runtime engine

Clarify Tabula internal stack trace  [e2 v2]

Generate C# step code into multiple buckets  [e5 v5]
    Blocks:  Aliasing
    Stack of code insertion locations (CILs)
        (where the first is body of ExecuteScenario())
    When a new block opens, the current CIL gets the call
     to the new block, then the new block is pushed onto the stack

Alias new steps to blocks of code, with variable binding  [e8 v8]
    Blocked by:  Multi-bucket code gen

Fix value lists parsing  [e2 v3]
    Blocks:  Update the Big Bad Wolf to passing again  [e1 v1]
    Affects:  Better build-time typing for float, double, decimal

Inner/child workflows transparent to scenarios  [e5 v8] [Acadis]
    Include child workflow steps in parent workflow namespace
        Identify child workflows
        Store them in parent as children
        Generate pass-through code
    Eliminates boilerplate passthrough code for child workflows


---------------------------------------------------------------------
---  Main toolchain and core workflow

Scenario .scn -> .tab conversion script updates to_tabula.pl  [e2 v5]
    Resulting scripts compile on first pass
        Running correctly is out of scope
        Perhaps we collect failure results for later?
    Obsolete features commented out (whole step or part?)
        append extra findable comment like:  // OBSO_FEAT
        <== fails (with message)
        parens as comments
    Unlocks:  New script to .scn -> .tab -> .cs -> .dll  [e2 v3]

Visual Studio interactivity  [e?, v?]
    Generate (and add to version control) new .cs to match new .tab
    Rebuild existing .cs on update of .tab
    Rebuild JSON of fixture when fixture .cs file saved
    Language highlighting?
    Auto-complete for steps (in scope?)
    VSopia behavior?  Or keep using VSopia?
    Possibly via Visual Studio Project System?
        https://github.com/Microsoft/VSProjectSystem/blob/master/doc/overview/intro.md
        For VS 2017...


---------------------------------------------------------------------
---  Further pragmatics/tool/workflow support

Testopia runner local/MVC separate from Testopia/Tabula  [e.6 v1]
    Blocks:  Running Tabula on FirstForward

Fixture-Binder speed optimization
    Serialize to JSON  [done]
    Deserialize, resolve parents  [e2, v2]
    Rebuild when .json older than .dll
        Crossover:  VS
        Even better to rebuild only per fixture class .cs file change


---------------------------------------------------------------------
---  Reporting

Dev reporting
    Quick report of unrecognized steps  [e1 v3]
        with Levenshtein suggestions of near matches  [e3 v3]
    Utility query:  Catalog of steps in fixtures
        Display:  When we have '__', interleave argument names

Demo reporting
    First, write results in existing style  [e2 v5]
    Then, build new style report
        ToC
        Highlight by story?

Table of Contents spike  [e2 v3]
    Build a linked prelude for demo mode
    Minimal required intervention
    When parsing labels, if text matches "xxx: details", add the
     pre-colon text and its location to ToC list  [e1]
        / '"' (<-[:]>+) ':' \h+ (<-["]>+) '"' /
        Same with "set \h* up ':'? \h* '-'* \h*"
        Catch comments, too?

Write run results in JSON  [e3 v5]
    Accessible via web service?
    To be styled via mustache?


---------------------------------------------------------------------
---  Speculating

BDD styled >when: and >then:
    Raises questions of scope
    ...which run against the current usage of '>use:'
    ...perhaps outer-scope 'use' is '>install:'


---------------------------------------------------------------------
---  Low value cold file

Overload resolution  [e3 v0]
    Seems unused--more value if used.

Numeric column indicators (#1, #2, et c.)  [e1 v1]

Colon optional after paragraph label  [e1 v.6]
    (then steps cannot start with string, not a biggie)
